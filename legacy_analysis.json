{
  "statistics": {
    "source_files": 98,
    "functions": 580,
    "classes": 0,
    "magic_numbers": 379
  },
  "unused_functions": [
    "init",
    "tick",
    "handle_events",
    "update",
    "render",
    "get_next_state",
    "render_player_setup",
    "render_game_options",
    "handle_player_setup_input",
    "get_controller_name",
    "get_team_name",
    "load",
    "read_bomber_positions",
    "update_keyboard_state",
    "reset",
    "is_left",
    "is_right",
    "is_up",
    "is_down",
    "is_bomb",
    "calculate_stereo_pan",
    "shutdown",
    "load_sound",
    "add_sound",
    "play_sound",
    "play_sound_3d",
    "set_listener_position",
    "audio_callback",
    "on_destruction_request",
    "update_all_systems",
    "render_all_systems",
    "update_input_system",
    "update_physics_system",
    "update_ai_system",
    "update_collision_system",
    "update_animation_system",
    "render_world",
    "render_effects",
    "render_ui",
    "set_object_references",
    "init_all_systems",
    "register_object",
    "register_bomber",
    "cleanup_destroyed_objects",
    "act",
    "show",
    "update_particles",
    "render_particles",
    "create_particle",
    "emit_explosion_sparks",
    "emit_dust_cloud",
    "emit_fire_particles",
    "emit_smoke_trail",
    "destroy",
    "apply_force",
    "apply_drag",
    "apply_gravity",
    "handle_collisions",
    "update_blood_trail",
    "emit_blood",
    "render_blood_trails",
    "get_part_mass",
    "get_part_surface_area",
    "explode",
    "create_gore_explosion",
    "handle_error",
    "register_error_handler",
    "get_error_statistics",
    "clear_error_statistics",
    "log_error",
    "get_default_strategy",
    "update_frame",
    "update_all_objects",
    "render_all_objects",
    "cleanup_deleted_objects",
    "find_object_by_id",
    "find_bomber_by_id",
    "count_active_objects",
    "clear_all_objects",
    "reset_game_state",
    "log_frame_statistics",
    "should_skip_object_update",
    "initialize",
    "load_all_shaders",
    "compile_shader",
    "create_program",
    "create_compute_program",
    "setup_matrices",
    "setup_sprite_rendering",
    "init_particle_system",
    "begin_frame",
    "end_frame",
    "present",
    "check_gl_error",
    "preprocess_shader_includes",
    "begin_batch",
    "flush_batch",
    "update_uniforms",
    "add_sprite",
    "add_animated_sprite",
    "end_batch",
    "update_particles_gpu",
    "emit_particles",
    "set_camera",
    "set_global_effect_params",
    "create_texture_from_surface",
    "print_performance_stats",
    "register_texture_metadata",
    "calculate_sprite_uv",
    "set_explosion_effect",
    "set_vortex_effect",
    "set_environmental_effects",
    "clear_effects",
    "set_explosion_info",
    "clear_explosion_info",
    "initialize_game_context",
    "is_server",
    "is_client",
    "get_server",
    "get_client",
    "get_server_setup",
    "get_client_setup",
    "get_chat",
    "get_menu",
    "get_next_object_id",
    "get_map_path",
    "get_local_map_path",
    "lock",
    "unlock",
    "wait",
    "signal",
    "delete_all_game_objects",
    "get_object_by_id",
    "get_server_frame_counter",
    "inc_server_frame_counter",
    "paused_game",
    "set_pause_game",
    "set_client_disconnected_from_server",
    "is_client_disconnected_from_server",
    "set_client_connecting_to_new_server",
    "is_client_connecting_to_new_server",
    "request_effect",
    "create_box_destruction_effect",
    "create_explosion_effect",
    "process_box_destruction",
    "process_explosion",
    "load_font",
    "create_gl_texture_from_surface",
    "draw_text",
    "draw_text_centered",
    "attach",
    "activate",
    "deactivate",
    "revert",
    "bomb_normal",
    "bomb_always",
    "get_type",
    "run",
    "change_screen",
    "set_name",
    "get_name",
    "set_skin",
    "get_skin",
    "set_team",
    "get_team",
    "set_controller",
    "enable",
    "disable",
    "set_highlight_maptile",
    "get_highlight_maptile",
    "is_enabled",
    "set_enabled",
    "set_client_index",
    "get_client_index",
    "get_config_index",
    "set_config_index",
    "get_client_ip",
    "set_client_ip",
    "get_number_of_players",
    "get_number_of_opponents",
    "set_round_time",
    "set_random_map_order",
    "set_max_skateboards",
    "set_max_power",
    "set_max_bombs",
    "set_start_skateboards",
    "set_start_power",
    "set_start_bombs",
    "set_start_kick",
    "set_start_glove",
    "set_skateboards",
    "set_power",
    "set_bombs",
    "set_kick",
    "set_glove",
    "set_joint",
    "set_viagra",
    "set_koks",
    "set_start_map",
    "set_points_to_win",
    "set_theme",
    "set_filename",
    "set_path",
    "set_music",
    "set_kids_mode",
    "set_corpse_parts",
    "set_shaky_explosions",
    "set_highlight_maptiles",
    "set_random_positions",
    "set_bomb_countdown",
    "set_bomb_delay",
    "set_bomb_speed",
    "get_max_skateboards",
    "get_max_power",
    "get_max_bombs",
    "get_start_skateboards",
    "get_start_power",
    "get_start_bombs",
    "get_start_kick",
    "get_start_glove",
    "get_skateboards",
    "get_power",
    "get_bombs",
    "get_kick",
    "get_glove",
    "get_joint",
    "get_viagra",
    "get_koks",
    "get_start_map",
    "get_random_map_order",
    "get_round_time",
    "get_points_to_win",
    "get_theme",
    "get_sound_enabled",
    "get_music",
    "get_kids_mode",
    "get_corpse_parts",
    "get_shaky_explosions",
    "get_highlight_maptiles",
    "get_random_positions",
    "get_bomb_countdown",
    "get_bomb_delay",
    "get_bomb_speed",
    "get_fullscreen",
    "set_fullscreen",
    "save",
    "set_last_server",
    "get_last_server",
    "set_local",
    "is_local",
    "is_server_bomber",
    "set_server_bomber",
    "initialize_joystick_system",
    "shutdown_joystick_system",
    "update_all_joysticks",
    "get_joystick_count",
    "initialize_joystick",
    "cleanup_joystick",
    "is_joystick_connected",
    "update_input_state",
    "get_analog_left",
    "get_analog_right",
    "get_analog_up",
    "get_analog_down",
    "get_dpad_left",
    "get_dpad_right",
    "get_dpad_up",
    "get_dpad_down",
    "get_button_bomb",
    "initialize_haptic",
    "cleanup_haptic",
    "apply_vibration",
    "trigger_explosion_vibration",
    "update_haptic",
    "stop_vibration",
    "register_tile",
    "register_tile_entity",
    "mark_for_destruction",
    "mark_tile_for_destruction",
    "mark_tile_entity_for_destruction",
    "update_states",
    "update_object_state",
    "update_tile_state",
    "cleanup_dead_objects",
    "get_tile_entity_state",
    "is_dying_or_dead",
    "clear_all",
    "get_active_object_count",
    "get_active_tile_count",
    "find_managed_object",
    "find_managed_tile",
    "explode_delayed",
    "kick",
    "stop",
    "collect",
    "apply_effect_to_bomber",
    "clear_screen",
    "render_sprite_at_grid",
    "render_sprite_batch",
    "render_particle_effect",
    "screen_to_world",
    "world_to_screen",
    "is_position_visible",
    "get_viewport_bounds",
    "update_config",
    "set_debug_mode",
    "reset_statistics",
    "render_debug_info",
    "preload_texture",
    "unload_texture",
    "get_texture_info",
    "initialize_gpu_renderer",
    "initialize_text_renderer",
    "initialize_particle_manager",
    "update_statistics",
    "validate_rendering_state",
    "handle_gpu_error",
    "handle_text_error",
    "handle_particle_error",
    "die",
    "is_dead",
    "set_lives",
    "get_lives",
    "lose_life",
    "has_lives",
    "respawn",
    "is_respawning",
    "set_invincible",
    "is_invincible",
    "set_number",
    "get_number",
    "fly_to",
    "can_move",
    "place_bomb",
    "throw_bomb",
    "can_place_bomb",
    "inc_speed",
    "dec_speed",
    "inc_power",
    "inc_max_bombs",
    "get_current_bombs",
    "inc_current_bombs",
    "dec_current_bombs",
    "can_kick",
    "can_throw",
    "can_ignore_bomb_collision",
    "set_can_kick",
    "set_can_throw",
    "init_game",
    "deinit_game",
    "update_audio_listener",
    "act_all",
    "delete_some",
    "show_all",
    "check_victory_conditions",
    "render_victory_screen",
    "calculate_flight_path",
    "spawn_extra",
    "is_position_blocked",
    "has_bomb_at",
    "is_position_walkable",
    "request_destruction_effect",
    "remove_from_spatial_systems",
    "set_object_lists",
    "set_map",
    "update_object_position_in_spatial_grid",
    "update_destruction_animation",
    "render_destruction_effects",
    "render_fragmentation_effects",
    "enumerate_maps",
    "clear",
    "reload",
    "set_tile",
    "set_tile_entity",
    "clear_tile_entity_at",
    "load_random_valid",
    "load_next_valid",
    "refresh_holes",
    "any_valid_map",
    "get_map_count",
    "get_author",
    "randomize_bomber_positions",
    "set_context",
    "update_tiles",
    "handle_tile_updates",
    "coordinate_with_lifecycle_manager",
    "process_dying_tiles",
    "process_dead_tiles",
    "request_tile_destruction",
    "replace_tile_when_ready",
    "is_tile_ready_for_replacement",
    "is_tile_blocking_at",
    "is_tile_destructible_at",
    "register_bomb_at",
    "unregister_bomb_at",
    "get_bomb_at",
    "register_bomber_at",
    "unregister_bomber_at",
    "get_bomber_at",
    "has_bomber_at",
    "iterate_all_tiles",
    "get_destructible_tiles_in_radius",
    "update_single_tile",
    "handle_tile_destruction_request",
    "perform_tile_replacement",
    "is_valid_position",
    "handle_controller_input",
    "update_flight_animation",
    "update_bomb_cooldown",
    "update_bomb_throwing",
    "update_bomb_escape_status",
    "set_texture_from_color",
    "update_animation_frame",
    "set_standing_sprite",
    "update_invincibility_effects",
    "choose_texture_for_color",
    "update_respawn_timer",
    "add_object",
    "remove_object",
    "update_object_position",
    "rebuild_from_objects",
    "get_objects_at_position",
    "get_objects_of_type_near",
    "get_bombers_near",
    "get_bombs_near",
    "get_extras_near",
    "get_objects_in_area",
    "find_collisions",
    "has_object_at_position",
    "print_debug_info",
    "visualize_grid",
    "get_cells_in_radius",
    "get_cells_in_area",
    "get_cell",
    "add_object_to_cell",
    "remove_object_from_cell",
    "find_nearest_bomber",
    "find_explosion_victims",
    "objecttype2string",
    "get_object_id",
    "set_object_id",
    "get_server_x",
    "get_server_y",
    "get_orig_x",
    "get_orig_y",
    "get_server_dir",
    "get_client_dir",
    "set_server_x",
    "set_server_y",
    "set_server_dir",
    "set_client_dir",
    "set_local_dir",
    "set_cur_dir",
    "set_offset",
    "is_blocked",
    "move_dist",
    "move",
    "continue_flying",
    "fall",
    "continue_falling",
    "snap",
    "set_dir",
    "set_pos",
    "set_orig",
    "move_pos",
    "get_x",
    "get_y",
    "get_z",
    "get_speed",
    "set_speed",
    "is_flying",
    "is_stopped",
    "get_cur_dir",
    "whats_left",
    "whats_right",
    "whats_up",
    "whats_down",
    "get_legacy_tile",
    "get_tile_type_at",
    "set_bomb_on_tile",
    "remove_bomb_from_tile",
    "is_falling",
    "output_object_info",
    "set_next_fly_job",
    "reset_next_fly_job",
    "is_next_fly_job",
    "detonate_other_bombs",
    "draw_explosion_tile",
    "get_dummy_white_texture",
    "kill_bombers",
    "explode_corpses",
    "destroy_tile_at",
    "notify_explosion_haptics",
    "load_texture",
    "get_gl_texture",
    "load_shader_source",
    "register_gl_texture_metadata",
    "execute",
    "set_personality",
    "generate_rating_map",
    "apply_bomb_rating",
    "job_ready",
    "find_new_jobs",
    "do_job",
    "avoid_bombs",
    "find_bombing_opportunities",
    "find_way",
    "clear_all_jobs",
    "is_hotspot",
    "is_death",
    "can_escape_from_bomb",
    "bomber_rating",
    "extra_rating",
    "get_aggression_modifier",
    "get_reaction_delay",
    "should_hunt_enemies",
    "get_current_state",
    "is_starting_corner_position",
    "can_escape_from_bomb_safely",
    "bombing_is_beneficial",
    "should_move_to_better_position",
    "count_active_bombs",
    "add_escape_sequence",
    "find_best_escape_direction",
    "evaluate_escape_direction",
    "count_nearby_threats",
    "vector_add",
    "vector_multiply",
    "vector_normalize",
    "think",
    "update_current_state",
    "transition_to_state",
    "execute_behavior",
    "find_path_to",
    "is_position_safe",
    "scan_for_targets",
    "select_best_target",
    "evaluate_powerup_value",
    "should_place_bomb",
    "would_hit_enemy",
    "predict_explosion_tiles",
    "analyze_enemies",
    "predict_enemy_position",
    "is_enemy_dangerous",
    "get_bomb_frequency_modifier",
    "set_reaction_time",
    "set_aggression_level"
  ],
  "magic_numbers": [
    {
      "value": 3,
      "file": "src/SettingsScreen.cpp",
      "line": 35,
      "column": 26,
      "context": "case 2: // Graphics Options\n                        break;\n                    case 3: // Back to Main Menu\n                        next_state = GameState::MAIN_MENU;\n                        break;"
    },
    {
      "value": 255,
      "file": "src/SettingsScreen.cpp",
      "line": 54,
      "column": 30,
      "context": "void SettingsScreen::render(SDL_Renderer* renderer) {\n    // Render title\n    SDL_Color title_color = {255, 255, 255, 255};\n        // SDL_Surface* title_surface = TTF_RenderText_Solid(font, \"SETTINGS\", strlen(\"SETTINGS\"), title_color);\n    // SDL_Texture* title_texture = SDL_CreateTextureFromSurface(renderer, title_surface);"
    },
    {
      "value": 255,
      "file": "src/SettingsScreen.cpp",
      "line": 54,
      "column": 35,
      "context": "void SettingsScreen::render(SDL_Renderer* renderer) {\n    // Render title\n    SDL_Color title_color = {255, 255, 255, 255};\n        // SDL_Surface* title_surface = TTF_RenderText_Solid(font, \"SETTINGS\", strlen(\"SETTINGS\"), title_color);\n    // SDL_Texture* title_texture = SDL_CreateTextureFromSurface(renderer, title_surface);"
    },
    {
      "value": 255,
      "file": "src/SettingsScreen.cpp",
      "line": 54,
      "column": 40,
      "context": "void SettingsScreen::render(SDL_Renderer* renderer) {\n    // Render title\n    SDL_Color title_color = {255, 255, 255, 255};\n        // SDL_Surface* title_surface = TTF_RenderText_Solid(font, \"SETTINGS\", strlen(\"SETTINGS\"), title_color);\n    // SDL_Texture* title_texture = SDL_CreateTextureFromSurface(renderer, title_surface);"
    },
    {
      "value": 255,
      "file": "src/SettingsScreen.cpp",
      "line": 54,
      "column": 45,
      "context": "void SettingsScreen::render(SDL_Renderer* renderer) {\n    // Render title\n    SDL_Color title_color = {255, 255, 255, 255};\n        // SDL_Surface* title_surface = TTF_RenderText_Solid(font, \"SETTINGS\", strlen(\"SETTINGS\"), title_color);\n    // SDL_Texture* title_texture = SDL_CreateTextureFromSurface(renderer, title_surface);"
    },
    {
      "value": 120,
      "file": "src/SettingsScreen.cpp",
      "line": 67,
      "column": 13,
      "context": "// Render main menu\n    int y = 120;\n    for (int i = 0; i < menu_items.size(); ++i) {\n        SDL_Color color = (i == selected_item) ? SDL_Color{255, 255, 0, 255} : SDL_Color{255, 255, 255, 255};"
    },
    {
      "value": 255,
      "file": "src/SettingsScreen.cpp",
      "line": 69,
      "column": 60,
      "context": "int y = 120;\n    for (int i = 0; i < menu_items.size(); ++i) {\n        SDL_Color color = (i == selected_item) ? SDL_Color{255, 255, 0, 255} : SDL_Color{255, 255, 255, 255};\n        std::string item_text = (i == selected_item) ? \"> \" + menu_items[i] + \" <\" : \"  \" + menu_items[i] + \"  \";"
    },
    {
      "value": 255,
      "file": "src/SettingsScreen.cpp",
      "line": 69,
      "column": 65,
      "context": "int y = 120;\n    for (int i = 0; i < menu_items.size(); ++i) {\n        SDL_Color color = (i == selected_item) ? SDL_Color{255, 255, 0, 255} : SDL_Color{255, 255, 255, 255};\n        std::string item_text = (i == selected_item) ? \"> \" + menu_items[i] + \" <\" : \"  \" + menu_items[i] + \"  \";"
    },
    {
      "value": 255,
      "file": "src/SettingsScreen.cpp",
      "line": 69,
      "column": 73,
      "context": "int y = 120;\n    for (int i = 0; i < menu_items.size(); ++i) {\n        SDL_Color color = (i == selected_item) ? SDL_Color{255, 255, 0, 255} : SDL_Color{255, 255, 255, 255};\n        std::string item_text = (i == selected_item) ? \"> \" + menu_items[i] + \" <\" : \"  \" + menu_items[i] + \"  \";"
    },
    {
      "value": 255,
      "file": "src/SettingsScreen.cpp",
      "line": 69,
      "column": 90,
      "context": "int y = 120;\n    for (int i = 0; i < menu_items.size(); ++i) {\n        SDL_Color color = (i == selected_item) ? SDL_Color{255, 255, 0, 255} : SDL_Color{255, 255, 255, 255};\n        std::string item_text = (i == selected_item) ? \"> \" + menu_items[i] + \" <\" : \"  \" + menu_items[i] + \"  \";"
    },
    {
      "value": 255,
      "file": "src/SettingsScreen.cpp",
      "line": 69,
      "column": 95,
      "context": "int y = 120;\n    for (int i = 0; i < menu_items.size(); ++i) {\n        SDL_Color color = (i == selected_item) ? SDL_Color{255, 255, 0, 255} : SDL_Color{255, 255, 255, 255};\n        std::string item_text = (i == selected_item) ? \"> \" + menu_items[i] + \" <\" : \"  \" + menu_items[i] + \"  \";"
    },
    {
      "value": 255,
      "file": "src/SettingsScreen.cpp",
      "line": 69,
      "column": 100,
      "context": "int y = 120;\n    for (int i = 0; i < menu_items.size(); ++i) {\n        SDL_Color color = (i == selected_item) ? SDL_Color{255, 255, 0, 255} : SDL_Color{255, 255, 255, 255};\n        std::string item_text = (i == selected_item) ? \"> \" + menu_items[i] + \" <\" : \"  \" + menu_items[i] + \"  \";"
    },
    {
      "value": 255,
      "file": "src/SettingsScreen.cpp",
      "line": 69,
      "column": 105,
      "context": "int y = 120;\n    for (int i = 0; i < menu_items.size(); ++i) {\n        SDL_Color color = (i == selected_item) ? SDL_Color{255, 255, 0, 255} : SDL_Color{255, 255, 255, 255};\n        std::string item_text = (i == selected_item) ? \"> \" + menu_items[i] + \" <\" : \"  \" + menu_items[i] + \"  \";"
    },
    {
      "value": 35,
      "file": "src/SettingsScreen.cpp",
      "line": 84,
      "column": 14,
      "context": "// SDL_DestroyTexture(texture);\n        \n        y += 35;\n    }"
    },
    {
      "value": 150,
      "file": "src/SettingsScreen.cpp",
      "line": 95,
      "column": 37,
      "context": "// Render instructions\n    SDL_Color instructions_color = {150, 150, 150, 255};\n        // SDL_Surface* instructions_surface = TTF_RenderText_Solid(font, \"UP/DOWN: Navigate | ENTER: Select | ESC: Back\", strlen(\"UP/DOWN: Navigate | ENTER: Select | ESC: Back\"), instructions_color);\n    // SDL_Texture* instructions_texture = SDL_CreateTextureFromSurface(renderer, instructions_surface);"
    },
    {
      "value": 150,
      "file": "src/SettingsScreen.cpp",
      "line": 95,
      "column": 42,
      "context": "// Render instructions\n    SDL_Color instructions_color = {150, 150, 150, 255};\n        // SDL_Surface* instructions_surface = TTF_RenderText_Solid(font, \"UP/DOWN: Navigate | ENTER: Select | ESC: Back\", strlen(\"UP/DOWN: Navigate | ENTER: Select | ESC: Back\"), instructions_color);\n    // SDL_Texture* instructions_texture = SDL_CreateTextureFromSurface(renderer, instructions_surface);"
    },
    {
      "value": 150,
      "file": "src/SettingsScreen.cpp",
      "line": 95,
      "column": 47,
      "context": "// Render instructions\n    SDL_Color instructions_color = {150, 150, 150, 255};\n        // SDL_Surface* instructions_surface = TTF_RenderText_Solid(font, \"UP/DOWN: Navigate | ENTER: Select | ESC: Back\", strlen(\"UP/DOWN: Navigate | ENTER: Select | ESC: Back\"), instructions_color);\n    // SDL_Texture* instructions_texture = SDL_CreateTextureFromSurface(renderer, instructions_surface);"
    },
    {
      "value": 255,
      "file": "src/SettingsScreen.cpp",
      "line": 95,
      "column": 52,
      "context": "// Render instructions\n    SDL_Color instructions_color = {150, 150, 150, 255};\n        // SDL_Surface* instructions_surface = TTF_RenderText_Solid(font, \"UP/DOWN: Navigate | ENTER: Select | ESC: Back\", strlen(\"UP/DOWN: Navigate | ENTER: Select | ESC: Back\"), instructions_color);\n    // SDL_Texture* instructions_texture = SDL_CreateTextureFromSurface(renderer, instructions_surface);"
    },
    {
      "value": 200,
      "file": "src/SettingsScreen.cpp",
      "line": 113,
      "column": 31,
      "context": "void SettingsScreen::render_player_setup() {\n    SDL_Color header_color = {200, 200, 255, 255};\n        // SDL_Surface* header_surface = TTF_RenderText_Solid(font, \"PLAYER SETUP\", strlen(\"PLAYER SETUP\"), header_color);\n    // SDL_Texture* header_texture = SDL_CreateTextureFromSurface(renderer, header_surface);"
    },
    {
      "value": 200,
      "file": "src/SettingsScreen.cpp",
      "line": 113,
      "column": 36,
      "context": "void SettingsScreen::render_player_setup() {\n    SDL_Color header_color = {200, 200, 255, 255};\n        // SDL_Surface* header_surface = TTF_RenderText_Solid(font, \"PLAYER SETUP\", strlen(\"PLAYER SETUP\"), header_color);\n    // SDL_Texture* header_texture = SDL_CreateTextureFromSurface(renderer, header_surface);"
    },
    {
      "value": 255,
      "file": "src/SettingsScreen.cpp",
      "line": 113,
      "column": 41,
      "context": "void SettingsScreen::render_player_setup() {\n    SDL_Color header_color = {200, 200, 255, 255};\n        // SDL_Surface* header_surface = TTF_RenderText_Solid(font, \"PLAYER SETUP\", strlen(\"PLAYER SETUP\"), header_color);\n    // SDL_Texture* header_texture = SDL_CreateTextureFromSurface(renderer, header_surface);"
    },
    {
      "value": 255,
      "file": "src/SettingsScreen.cpp",
      "line": 113,
      "column": 46,
      "context": "void SettingsScreen::render_player_setup() {\n    SDL_Color header_color = {200, 200, 255, 255};\n        // SDL_Surface* header_surface = TTF_RenderText_Solid(font, \"PLAYER SETUP\", strlen(\"PLAYER SETUP\"), header_color);\n    // SDL_Texture* header_texture = SDL_CreateTextureFromSurface(renderer, header_surface);"
    },
    {
      "value": 300,
      "file": "src/SettingsScreen.cpp",
      "line": 126,
      "column": 13,
      "context": "// Display players\n    int y = 300;\n    for (int i = 0; i < 4; i++) { // Show first 4 players for now\n        SDL_Color player_color = GameConfig::bomber[i].is_enabled() ?"
    },
    {
      "value": 4,
      "file": "src/SettingsScreen.cpp",
      "line": 127,
      "column": 25,
      "context": "// Display players\n    int y = 300;\n    for (int i = 0; i < 4; i++) { // Show first 4 players for now\n        SDL_Color player_color = GameConfig::bomber[i].is_enabled() ? \n            SDL_Color{0, 255, 0, 255} : SDL_Color{150, 150, 150, 255};"
    },
    {
      "value": 255,
      "file": "src/SettingsScreen.cpp",
      "line": 129,
      "column": 26,
      "context": "for (int i = 0; i < 4; i++) { // Show first 4 players for now\n        SDL_Color player_color = GameConfig::bomber[i].is_enabled() ? \n            SDL_Color{0, 255, 0, 255} : SDL_Color{150, 150, 150, 255};\n            \n        std::string player_text = \"Player \" + std::to_string(i + 1) + \": \";"
    },
    {
      "value": 255,
      "file": "src/SettingsScreen.cpp",
      "line": 129,
      "column": 34,
      "context": "for (int i = 0; i < 4; i++) { // Show first 4 players for now\n        SDL_Color player_color = GameConfig::bomber[i].is_enabled() ? \n            SDL_Color{0, 255, 0, 255} : SDL_Color{150, 150, 150, 255};\n            \n        std::string player_text = \"Player \" + std::to_string(i + 1) + \": \";"
    },
    {
      "value": 150,
      "file": "src/SettingsScreen.cpp",
      "line": 129,
      "column": 51,
      "context": "for (int i = 0; i < 4; i++) { // Show first 4 players for now\n        SDL_Color player_color = GameConfig::bomber[i].is_enabled() ? \n            SDL_Color{0, 255, 0, 255} : SDL_Color{150, 150, 150, 255};\n            \n        std::string player_text = \"Player \" + std::to_string(i + 1) + \": \";"
    },
    {
      "value": 150,
      "file": "src/SettingsScreen.cpp",
      "line": 129,
      "column": 56,
      "context": "for (int i = 0; i < 4; i++) { // Show first 4 players for now\n        SDL_Color player_color = GameConfig::bomber[i].is_enabled() ? \n            SDL_Color{0, 255, 0, 255} : SDL_Color{150, 150, 150, 255};\n            \n        std::string player_text = \"Player \" + std::to_string(i + 1) + \": \";"
    },
    {
      "value": 150,
      "file": "src/SettingsScreen.cpp",
      "line": 129,
      "column": 61,
      "context": "for (int i = 0; i < 4; i++) { // Show first 4 players for now\n        SDL_Color player_color = GameConfig::bomber[i].is_enabled() ? \n            SDL_Color{0, 255, 0, 255} : SDL_Color{150, 150, 150, 255};\n            \n        std::string player_text = \"Player \" + std::to_string(i + 1) + \": \";"
    },
    {
      "value": 255,
      "file": "src/SettingsScreen.cpp",
      "line": 129,
      "column": 66,
      "context": "for (int i = 0; i < 4; i++) { // Show first 4 players for now\n        SDL_Color player_color = GameConfig::bomber[i].is_enabled() ? \n            SDL_Color{0, 255, 0, 255} : SDL_Color{150, 150, 150, 255};\n            \n        std::string player_text = \"Player \" + std::to_string(i + 1) + \": \";"
    },
    {
      "value": 255,
      "file": "src/SettingsScreen.cpp",
      "line": 142,
      "column": 29,
      "context": "if (i == selected_player && selected_item == 0) {\n            player_text = \"> \" + player_text + \" <\";\n            player_color = {255, 255, 0, 255};\n        }"
    },
    {
      "value": 255,
      "file": "src/SettingsScreen.cpp",
      "line": 142,
      "column": 34,
      "context": "if (i == selected_player && selected_item == 0) {\n            player_text = \"> \" + player_text + \" <\";\n            player_color = {255, 255, 0, 255};\n        }"
    },
    {
      "value": 255,
      "file": "src/SettingsScreen.cpp",
      "line": 142,
      "column": 42,
      "context": "if (i == selected_player && selected_item == 0) {\n            player_text = \"> \" + player_text + \" <\";\n            player_color = {255, 255, 0, 255};\n        }"
    },
    {
      "value": 30,
      "file": "src/SettingsScreen.cpp",
      "line": 156,
      "column": 14,
      "context": "// SDL_DestroyTexture(player_texture);\n        \n        y += 30;\n    }\n}"
    },
    {
      "value": 200,
      "file": "src/SettingsScreen.cpp",
      "line": 161,
      "column": 31,
      "context": "void SettingsScreen::render_game_options() {\n    SDL_Color header_color = {200, 255, 200, 255};\n        // SDL_Surface* header_surface = TTF_RenderText_Solid(font, \"GAME OPTIONS\", strlen(\"GAME OPTIONS\"), header_color);\n    // SDL_Texture* header_texture = SDL_CreateTextureFromSurface(renderer, header_surface);"
    },
    {
      "value": 255,
      "file": "src/SettingsScreen.cpp",
      "line": 161,
      "column": 36,
      "context": "void SettingsScreen::render_game_options() {\n    SDL_Color header_color = {200, 255, 200, 255};\n        // SDL_Surface* header_surface = TTF_RenderText_Solid(font, \"GAME OPTIONS\", strlen(\"GAME OPTIONS\"), header_color);\n    // SDL_Texture* header_texture = SDL_CreateTextureFromSurface(renderer, header_surface);"
    },
    {
      "value": 200,
      "file": "src/SettingsScreen.cpp",
      "line": 161,
      "column": 41,
      "context": "void SettingsScreen::render_game_options() {\n    SDL_Color header_color = {200, 255, 200, 255};\n        // SDL_Surface* header_surface = TTF_RenderText_Solid(font, \"GAME OPTIONS\", strlen(\"GAME OPTIONS\"), header_color);\n    // SDL_Texture* header_texture = SDL_CreateTextureFromSurface(renderer, header_surface);"
    },
    {
      "value": 255,
      "file": "src/SettingsScreen.cpp",
      "line": 161,
      "column": 46,
      "context": "void SettingsScreen::render_game_options() {\n    SDL_Color header_color = {200, 255, 200, 255};\n        // SDL_Surface* header_surface = TTF_RenderText_Solid(font, \"GAME OPTIONS\", strlen(\"GAME OPTIONS\"), header_color);\n    // SDL_Texture* header_texture = SDL_CreateTextureFromSurface(renderer, header_surface);"
    },
    {
      "value": 300,
      "file": "src/SettingsScreen.cpp",
      "line": 174,
      "column": 13,
      "context": "// Display game options\n    int y = 300;\n    std::vector<std::string> options = {\n        \"Points to win: \" + std::to_string(GameConfig::get_points_to_win()),"
    },
    {
      "value": 3,
      "file": "src/SettingsScreen.cpp",
      "line": 205,
      "column": 81,
      "context": "switch (event.key.key) {\n            case SDLK_LEFT:\n                selected_player = (selected_player > 0) ? selected_player - 1 : 3;\n                break;\n            case SDLK_RIGHT:"
    },
    {
      "value": 3,
      "file": "src/SettingsScreen.cpp",
      "line": 208,
      "column": 54,
      "context": "break;\n            case SDLK_RIGHT:\n                selected_player = (selected_player < 3) ? selected_player + 1 : 0;\n                break;\n            case SDLK_SPACE:"
    },
    {
      "value": 3,
      "file": "src/SettingsScreen.cpp",
      "line": 236,
      "column": 14,
      "context": "case 1: return \"Red Team\";\n        case 2: return \"Blue Team\";\n        case 3: return \"Green Team\";\n        case 4: return \"Yellow Team\";\n        default: return \"Team \" + std::to_string(team);"
    },
    {
      "value": 4,
      "file": "src/SettingsScreen.cpp",
      "line": 237,
      "column": 14,
      "context": "case 2: return \"Blue Team\";\n        case 3: return \"Green Team\";\n        case 4: return \"Yellow Team\";\n        default: return \"Team \" + std::to_string(team);\n    }"
    },
    {
      "value": 8,
      "file": "src/MapEntry.cpp",
      "line": 26,
      "column": 19,
      "context": "MapEntry::MapEntry(const std::string& _filename) : filename(_filename) {\n    enabled = true;\n    max_players = 8;\n    \n    // Extract map name from filename"
    },
    {
      "value": 44100,
      "file": "src/AudioMixer.cpp",
      "line": 42,
      "column": 24,
      "context": "void AudioMixer::init() {\n    SDL_zero(device_spec);\n    device_spec.freq = 44100;\n    device_spec.format = SDL_AUDIO_S16LE;\n    device_spec.channels = 2;"
    },
    {
      "value": 3,
      "file": "src/ParticleSystem.cpp",
      "line": 61,
      "column": 37,
      "context": "switch (particle_type) {\n                case DUST_CLOUDS:\n                    emit_dust_cloud(3);\n                    break;\n                case FIRE_PARTICLES:"
    },
    {
      "value": 4,
      "file": "src/ParticleSystem.cpp",
      "line": 64,
      "column": 41,
      "context": "break;\n                case FIRE_PARTICLES:\n                    emit_fire_particles(4);\n                    break;\n                case SMOKE_TRAILS:"
    },
    {
      "value": 255,
      "file": "src/ParticleSystem.cpp",
      "line": 140,
      "column": 15,
      "context": "p.g = g;\n        p.b = b;\n        p.a = 255;\n        p.gravity = 200.0f; // Default gravity\n        p.drag = 0.5f; // Default drag"
    },
    {
      "value": 255,
      "file": "src/ParticleSystem.cpp",
      "line": 160,
      "column": 19,
      "context": "// Orange/yellow sparks\n        Uint8 r = 255;\n        Uint8 g = 150 + random_dist(random_gen) * 105;\n        Uint8 b = 0;"
    },
    {
      "value": 20,
      "file": "src/ParticleSystem.cpp",
      "line": 192,
      "column": 22,
      "context": "p.max_life = p.life;\n        p.size = 3.0f + random_dist(random_gen) * 2.0f;\n        p.r = gray + 20;\n        p.g = gray;\n        p.b = gray - 20;"
    },
    {
      "value": 20,
      "file": "src/ParticleSystem.cpp",
      "line": 194,
      "column": 22,
      "context": "p.r = gray + 20;\n        p.g = gray;\n        p.b = gray - 20;\n        p.a = 255;\n        p.gravity = 50.0f; // Less gravity for dust"
    },
    {
      "value": 255,
      "file": "src/ParticleSystem.cpp",
      "line": 195,
      "column": 15,
      "context": "p.g = gray;\n        p.b = gray - 20;\n        p.a = 255;\n        p.gravity = 50.0f; // Less gravity for dust\n        p.drag = 1.5f; // More drag"
    },
    {
      "value": 255,
      "file": "src/ParticleSystem.cpp",
      "line": 215,
      "column": 19,
      "context": "// Fire colors (red to yellow)\n        Uint8 r = 255;\n        Uint8 g = 100 + random_dist(random_gen) * 155;\n        Uint8 b = random_dist(random_gen) * 50;"
    },
    {
      "value": 255,
      "file": "src/ParticleSystem.cpp",
      "line": 230,
      "column": 15,
      "context": "p.g = g;\n        p.b = b;\n        p.a = 255;\n        p.gravity = -50.0f; // Negative gravity (buoyancy)\n        p.drag = 0.8f;"
    },
    {
      "value": 255,
      "file": "src/ParticleSystem.cpp",
      "line": 263,
      "column": 15,
      "context": "p.g = gray;\n        p.b = gray;\n        p.a = 255;\n        p.gravity = -20.0f; // Slight buoyancy\n        p.drag = 0.3f; // Low drag"
    },
    {
      "value": 18,
      "file": "src/MapTile_Box.cpp",
      "line": 70,
      "column": 51,
      "context": "// Create realistic wood/debris fragments from destroyed box!\n                        const int num_fragments = 18;  // More small pieces for realistic debris\n                        for (int i = 0; i < num_fragments; i++) {\n                            // Much smaller, irregular fragment sizes (real debris pieces)"
    },
    {
      "value": 4,
      "file": "src/MapTile_Box.cpp",
      "line": 73,
      "column": 65,
      "context": "for (int i = 0; i < num_fragments; i++) {\n                            // Much smaller, irregular fragment sizes (real debris pieces)\n                            float fragment_scale = 0.15f + (i % 4) * 0.08f; // 0.15, 0.23, 0.31, 0.39 sizes\n                            fragment_scale *= (1.0f - animation_progress * 0.4f); // Slight shrinking"
    },
    {
      "value": 127,
      "file": "src/MapTile_Box.cpp",
      "line": 78,
      "column": 54,
      "context": "// REALISTIC EXPLOSION PHYSICS: Each fragment gets individual blast vector\n                            float base_angle = (float)i / num_fragments * 6.28318f;\n                            float blast_chaos = (i * 127 + 31) % 100 / 100.0f - 0.5f; // -0.5 to 0.5 chaos\n                            float angle = base_angle + blast_chaos * 1.2f; // More dramatic angle variation"
    },
    {
      "value": 31,
      "file": "src/MapTile_Box.cpp",
      "line": 78,
      "column": 60,
      "context": "// REALISTIC EXPLOSION PHYSICS: Each fragment gets individual blast vector\n                            float base_angle = (float)i / num_fragments * 6.28318f;\n                            float blast_chaos = (i * 127 + 31) % 100 / 100.0f - 0.5f; // -0.5 to 0.5 chaos\n                            float angle = base_angle + blast_chaos * 1.2f; // More dramatic angle variation"
    },
    {
      "value": 7,
      "file": "src/MapTile_Box.cpp",
      "line": 83,
      "column": 71,
      "context": "// Fragment mass affects how far it flies (heavier = shorter distance)\n                            float fragment_mass = fragment_scale * 2.0f + 0.5f; // Mass 0.8-1.3\n                            float base_explosion_force = 45.0f + (i % 7) * 10.0f; // 45-105 force range\n                            float explosion_force = base_explosion_force / fragment_mass; // F=ma physics"
    },
    {
      "value": 3,
      "file": "src/MapTile_Box.cpp",
      "line": 92,
      "column": 75,
      "context": "// Different fragment shapes using non-uniform scaling (base)\n                            float scale_x = fragment_scale * (0.8f + (i % 3) * 0.4f); // 0.8x to 2.0x width\n                            float scale_y = fragment_scale * (0.6f + ((i * 7) % 4) * 0.3f); // 0.6x to 1.8x height"
    },
    {
      "value": 7,
      "file": "src/MapTile_Box.cpp",
      "line": 93,
      "column": 76,
      "context": "// Different fragment shapes using non-uniform scaling (base)\n                            float scale_x = fragment_scale * (0.8f + (i % 3) * 0.4f); // 0.8x to 2.0x width\n                            float scale_y = fragment_scale * (0.6f + ((i * 7) % 4) * 0.3f); // 0.6x to 1.8x height\n                            \n                            // Position based on physics integration: x = x\u2080 + v\u2080t + \u00bdat\u00b2"
    },
    {
      "value": 4,
      "file": "src/MapTile_Box.cpp",
      "line": 93,
      "column": 81,
      "context": "// Different fragment shapes using non-uniform scaling (base)\n                            float scale_x = fragment_scale * (0.8f + (i % 3) * 0.4f); // 0.8x to 2.0x width\n                            float scale_y = fragment_scale * (0.6f + ((i * 7) % 4) * 0.3f); // 0.6x to 1.8x height\n                            \n                            // Position based on physics integration: x = x\u2080 + v\u2080t + \u00bdat\u00b2"
    },
    {
      "value": 6,
      "file": "src/MapTile_Box.cpp",
      "line": 101,
      "column": 69,
      "context": "// TOP-DOWN VIEW PHYSICS: Simulate 3D motion projected to 2D\n                            // Z-axis represents height above the ground (positive = higher)\n                            float initial_z_velocity = 25.0f + (i % 6) * 8.0f; // Initial upward velocity 25-65\n                            initial_z_velocity /= fragment_mass; // Lighter fragments fly higher"
    },
    {
      "value": 3,
      "file": "src/MapTile_Box.cpp",
      "line": 121,
      "column": 95,
      "context": "// Realistic alpha fade - complete fade to 0 at animation_progress = 1.0\n                            float fragment_alpha = (1.0f - animation_progress) * (0.7f + (i % 3) * 0.15f);\n                            \n                            // 3. Bounce when fragment hits ground (z \u2264 0)"
    },
    {
      "value": 73,
      "file": "src/MapTile_Box.cpp",
      "line": 139,
      "column": 62,
      "context": "// REALISTIC PHYSICS: Angular momentum from explosion impact!\n                            // Each fragment gets hit by explosion with different force and angle\n                            float impact_angle_offset = (i * 73) % 360; // Random impact angle per fragment\n                            float impact_force = 0.8f + (i % 5) * 0.4f; // Impact strength 0.8-2.0x"
    },
    {
      "value": 360,
      "file": "src/MapTile_Box.cpp",
      "line": 139,
      "column": 68,
      "context": "// REALISTIC PHYSICS: Angular momentum from explosion impact!\n                            // Each fragment gets hit by explosion with different force and angle\n                            float impact_angle_offset = (i * 73) % 360; // Random impact angle per fragment\n                            float impact_force = 0.8f + (i % 5) * 0.4f; // Impact strength 0.8-2.0x"
    },
    {
      "value": 5,
      "file": "src/MapTile_Box.cpp",
      "line": 140,
      "column": 62,
      "context": "// Each fragment gets hit by explosion with different force and angle\n                            float impact_angle_offset = (i * 73) % 360; // Random impact angle per fragment\n                            float impact_force = 0.8f + (i % 5) * 0.4f; // Impact strength 0.8-2.0x\n                            \n                            // Initial angular velocity depends on fragment size and impact"
    },
    {
      "value": 9,
      "file": "src/MapTile_Box.cpp",
      "line": 144,
      "column": 77,
      "context": "// Initial angular velocity depends on fragment size and impact\n                            float fragment_inertia = fragment_scale * fragment_scale; // Smaller = spins faster\n                            float initial_angular_velocity = (800.0f + (i % 9) * 300.0f) * impact_force / fragment_inertia;\n                            \n                            // Different spin directions based on impact vector"
    },
    {
      "value": 3,
      "file": "src/MapTile_Box.cpp",
      "line": 148,
      "column": 38,
      "context": "// Different spin directions based on impact vector\n                            float spin_direction = ((i % 2) == 0) ? 1.0f : -1.0f;\n                            if ((i % 3) == 0) spin_direction *= -1.0f; // More chaos\n                            initial_angular_velocity *= spin_direction;"
    },
    {
      "value": 3,
      "file": "src/MapTile_Box.cpp",
      "line": 171,
      "column": 44,
      "context": "EDGE_PLANK = 1,      // Side planks (medium tone)\n                                INNER_WOOD = 2,      // Fresh inner wood (lighter)\n                                SPLINTER = 3         // Small splinters (very light)\n                            };"
    },
    {
      "value": 4,
      "file": "src/MapTile_Box.cpp",
      "line": 174,
      "column": 73,
      "context": "};\n                            \n                            FragmentType frag_type = (FragmentType)(i % 4);\n                            \n                            // Realistic wood coloring based on fragment type"
    },
    {
      "value": 7,
      "file": "src/MapTile_Box.cpp",
      "line": 194,
      "column": 52,
      "context": "// Slight random variation (but keep colors bright)\n                            float color_var = (i % 7) * 0.05f - 0.025f; // -0.025 to +0.025\n                            \n                            float color[4] = {"
    },
    {
      "value": 4,
      "file": "src/MapTile_Box.cpp",
      "line": 196,
      "column": 41,
      "context": "float color_var = (i % 7) * 0.05f - 0.025f; // -0.025 to +0.025\n                            \n                            float color[4] = {\n                                std::min(1.0f, std::max(0.3f, base_r + color_var)),\n                                std::min(1.0f, std::max(0.3f, base_g + color_var)),"
    },
    {
      "value": 3,
      "file": "src/MapTile_Box.cpp",
      "line": 208,
      "column": 82,
      "context": "switch(frag_type) {\n                                case CORNER_PIECE:  fragment_size = 20.0f + (i % 2) * 8.0f; break; // 20-28px\n                                case EDGE_PLANK:    fragment_size = 16.0f + (i % 3) * 6.0f; break; // 16-28px  \n                                case INNER_WOOD:    fragment_size = 14.0f + (i % 2) * 4.0f; break; // 14-18px\n                                case SPLINTER:      fragment_size = 8.0f + (i % 3) * 4.0f; break;  // 8-16px"
    },
    {
      "value": 3,
      "file": "src/MapTile_Box.cpp",
      "line": 210,
      "column": 81,
      "context": "case EDGE_PLANK:    fragment_size = 16.0f + (i % 3) * 6.0f; break; // 16-28px  \n                                case INNER_WOOD:    fragment_size = 14.0f + (i % 2) * 4.0f; break; // 14-18px\n                                case SPLINTER:      fragment_size = 8.0f + (i % 3) * 4.0f; break;  // 8-16px\n                            }"
    },
    {
      "value": 4,
      "file": "src/CorpsePart.cpp",
      "line": 38,
      "column": 31,
      "context": "texture_name = \"corpse_parts\";\n    part_sprite = part_type % 4;\n    sprite_nr = part_sprite;\n    z = Z_CORPSE_PART;"
    },
    {
      "value": 255,
      "file": "src/CorpsePart.cpp",
      "line": 255,
      "column": 22,
      "context": "drop.life = 2.0f;\n        drop.size = size_dist(gen);\n        drop.alpha = 255;\n        \n        blood_trails.push_back(drop);"
    },
    {
      "value": 4,
      "file": "src/CorpsePart.cpp",
      "line": 270,
      "column": 25,
      "context": "float CorpsePart::get_part_mass(int part_type) {\n    // Different body parts have different masses (in arbitrary units)\n    switch (part_type % 4) {\n        case 0: return 2.5f; // Head - denser\n        case 1: return 4.0f; // Torso - heaviest"
    },
    {
      "value": 3,
      "file": "src/CorpsePart.cpp",
      "line": 274,
      "column": 14,
      "context": "case 1: return 4.0f; // Torso - heaviest\n        case 2: return 1.8f; // Arm - lighter\n        case 3: return 2.2f; // Leg - medium\n        default: return 2.0f;\n    }"
    },
    {
      "value": 4,
      "file": "src/CorpsePart.cpp",
      "line": 281,
      "column": 25,
      "context": "float CorpsePart::get_part_surface_area(int part_type) {\n    // Surface area affects drag (in arbitrary units)\n    switch (part_type % 4) {\n        case 0: return 1.2f; // Head - compact\n        case 1: return 2.0f; // Torso - largest area"
    },
    {
      "value": 3,
      "file": "src/CorpsePart.cpp",
      "line": 285,
      "column": 14,
      "context": "case 1: return 2.0f; // Torso - largest area\n        case 2: return 0.8f; // Arm - thin\n        case 3: return 1.0f; // Leg - medium\n        default: return 1.0f;\n    }"
    },
    {
      "value": 40,
      "file": "src/BomberCorpse.cpp",
      "line": 33,
      "column": 17,
      "context": "}\n    \n    sprite_nr = 40; // Dead pose sprite (assuming it exists)\n    z = Z_CORPSE;"
    },
    {
      "value": 8,
      "file": "src/BomberCorpse.cpp",
      "line": 91,
      "column": 53,
      "context": "// Create 8-12 body parts with realistic explosion physics\n    std::uniform_int_distribution<> part_count_dist(8, 12);\n    std::uniform_int_distribution<> part_type_dist(0, 3); // 4 different body parts\n    std::uniform_real_distribution<> velocity_dist(150.0f, 450.0f); // Higher velocities for more violence"
    },
    {
      "value": 12,
      "file": "src/BomberCorpse.cpp",
      "line": 91,
      "column": 56,
      "context": "// Create 8-12 body parts with realistic explosion physics\n    std::uniform_int_distribution<> part_count_dist(8, 12);\n    std::uniform_int_distribution<> part_type_dist(0, 3); // 4 different body parts\n    std::uniform_real_distribution<> velocity_dist(150.0f, 450.0f); // Higher velocities for more violence"
    },
    {
      "value": 3,
      "file": "src/BomberCorpse.cpp",
      "line": 92,
      "column": 55,
      "context": "// Create 8-12 body parts with realistic explosion physics\n    std::uniform_int_distribution<> part_count_dist(8, 12);\n    std::uniform_int_distribution<> part_type_dist(0, 3); // 4 different body parts\n    std::uniform_real_distribution<> velocity_dist(150.0f, 450.0f); // Higher velocities for more violence\n    std::uniform_real_distribution<> angle_dist(0.0f, 2.0f * M_PI);"
    },
    {
      "value": 20,
      "file": "src/BomberCorpse.cpp",
      "line": 125,
      "column": 25,
      "context": "// Create additional blood splatter effect\n    for (int i = 0; i < 20; i++) {\n        float angle = angle_dist(gen);\n        float velocity = velocity_dist(gen) * 0.6f; // Smaller blood droplets"
    },
    {
      "value": 600,
      "file": "src/GameLogic.cpp",
      "line": 31,
      "column": 25,
      "context": "// Log statistics every 600 frames (10 seconds at 60 FPS)\n    if (frame_counter % 600 == 0) {\n        log_frame_statistics();\n    }"
    },
    {
      "value": 3,
      "file": "src/GPUAcceleratedRenderer.cpp",
      "line": 51,
      "column": 59,
      "context": "// Try fallback to OpenGL 3.3 core\n        SDL_Log(\"Attempting fallback to OpenGL 3.3...\");\n        SDL_GL_SetAttribute(SDL_GL_CONTEXT_MAJOR_VERSION, 3);\n        SDL_GL_SetAttribute(SDL_GL_CONTEXT_MINOR_VERSION, 3);\n        gl_context = SDL_GL_CreateContext(window);"
    },
    {
      "value": 3,
      "file": "src/GPUAcceleratedRenderer.cpp",
      "line": 52,
      "column": 59,
      "context": "SDL_Log(\"Attempting fallback to OpenGL 3.3...\");\n        SDL_GL_SetAttribute(SDL_GL_CONTEXT_MAJOR_VERSION, 3);\n        SDL_GL_SetAttribute(SDL_GL_CONTEXT_MINOR_VERSION, 3);\n        gl_context = SDL_GL_CreateContext(window);"
    },
    {
      "value": 100000,
      "file": "src/GPUAcceleratedRenderer.cpp",
      "line": 154,
      "column": 31,
      "context": "// Initialize particle system\n    if (!init_particle_system(100000)) { // 100K particles!\n        // OPTIMIZED: Use GameResult<T> error handling instead of SDL_Log\n        return GameResult<void>::error("
    },
    {
      "value": 2048,
      "file": "src/GPUAcceleratedRenderer.cpp",
      "line": 334,
      "column": 25,
      "context": "glGetShaderiv(shader, GL_COMPILE_STATUS, &success);\n    if (!success) {\n        GLchar info_log[2048];\n        glGetShaderInfoLog(shader, sizeof(info_log), nullptr, info_log);\n        SDL_Log(\"Shader compilation error (%s): %s\", name.c_str(), info_log);"
    },
    {
      "value": 2048,
      "file": "src/GPUAcceleratedRenderer.cpp",
      "line": 360,
      "column": 25,
      "context": "if (!success) {\n        GLchar info_log[2048];\n        glGetProgramInfoLog(program, sizeof(info_log), nullptr, info_log);\n        SDL_Log(\"ERROR: Program linking error (%s): %s\", name.c_str(), info_log);"
    },
    {
      "value": 2048,
      "file": "src/GPUAcceleratedRenderer.cpp",
      "line": 380,
      "column": 25,
      "context": "glGetProgramiv(program, GL_LINK_STATUS, &success);\n    if (!success) {\n        GLchar info_log[2048];\n        glGetProgramInfoLog(program, sizeof(info_log), nullptr, info_log);\n        SDL_Log(\"Compute program linking error (%s): %s\", name.c_str(), info_log);"
    },
    {
      "value": 4,
      "file": "src/GPUAcceleratedRenderer.cpp",
      "line": 418,
      "column": 38,
      "context": "// Setup dynamic vertex buffer using simple vertex structure\n    glBindBuffer(GL_ARRAY_BUFFER, sprite_vbo);\n    size_t buffer_size = MAX_QUADS * 4 * sizeof(SimpleVertex);\n    glBufferData(GL_ARRAY_BUFFER, buffer_size, nullptr, GL_DYNAMIC_DRAW);"
    },
    {
      "value": 6,
      "file": "src/GPUAcceleratedRenderer.cpp",
      "line": 433,
      "column": 33,
      "context": "glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, sprite_ebo);\n    std::vector<GLuint> indices;\n    indices.reserve(MAX_QUADS * 6);\n    for (int i = 0; i < MAX_QUADS; i++) {\n        GLuint base = i * 4;"
    },
    {
      "value": 4,
      "file": "src/GPUAcceleratedRenderer.cpp",
      "line": 435,
      "column": 27,
      "context": "indices.reserve(MAX_QUADS * 6);\n    for (int i = 0; i < MAX_QUADS; i++) {\n        GLuint base = i * 4;\n        indices.insert(indices.end(), {\n            base, base + 1, base + 2,"
    },
    {
      "value": 3,
      "file": "src/GPUAcceleratedRenderer.cpp",
      "line": 438,
      "column": 36,
      "context": "indices.insert(indices.end(), {\n            base, base + 1, base + 2,\n            base, base + 2, base + 3\n        });\n    }"
    },
    {
      "value": 3,
      "file": "src/GPUAcceleratedRenderer.cpp",
      "line": 462,
      "column": 31,
      "context": "glVertexAttribPointer(3, 1, GL_FLOAT, GL_FALSE, sizeof(AdvancedVertex), \n                         (void*)offsetof(AdvancedVertex, rotation));\n    glEnableVertexAttribArray(3);\n    \n    // Scale (location 4)"
    },
    {
      "value": 4,
      "file": "src/GPUAcceleratedRenderer.cpp",
      "line": 467,
      "column": 31,
      "context": "glVertexAttribPointer(4, 2, GL_FLOAT, GL_FALSE, sizeof(AdvancedVertex), \n                         (void*)offsetof(AdvancedVertex, scale));\n    glEnableVertexAttribArray(4);\n    \n    // Effect type (location 5)"
    },
    {
      "value": 5,
      "file": "src/GPUAcceleratedRenderer.cpp",
      "line": 472,
      "column": 31,
      "context": "glVertexAttribIPointer(5, 1, GL_INT, sizeof(AdvancedVertex), \n                          (void*)offsetof(AdvancedVertex, effectType));\n    glEnableVertexAttribArray(5);\n    \n    batch_vertices.reserve(MAX_QUADS * 4);"
    },
    {
      "value": 4,
      "file": "src/GPUAcceleratedRenderer.cpp",
      "line": 667,
      "column": 51,
      "context": "// Recreate the buffer\n        size_t expected_buffer_size = MAX_QUADS * 4 * sizeof(SimpleVertex);\n        glBufferData(GL_ARRAY_BUFFER, expected_buffer_size, nullptr, GL_DYNAMIC_DRAW);"
    },
    {
      "value": 6,
      "file": "src/GPUAcceleratedRenderer.cpp",
      "line": 745,
      "column": 47,
      "context": "}\n    \n    int triangle_count = current_quad_count * 6;\n    \n    glUseProgram(main_program); // Re-bind program right before draw call"
    },
    {
      "value": 4,
      "file": "src/GPUAcceleratedRenderer.cpp",
      "line": 754,
      "column": 58,
      "context": "// Update stats\n    perf_stats.draw_calls++;\n    perf_stats.vertices_rendered += current_quad_count * 4;\n    \n    // Reset batch"
    },
    {
      "value": 4,
      "file": "src/GPUAcceleratedRenderer.cpp",
      "line": 786,
      "column": 25,
      "context": "if (u_time >= 0) {\n        // Send vec4 uTimeData as expected by shader: x=time, y=sin(time), z=cos(time), w=time*2\n        float time_data[4] = {\n            current_time,\n            sin(current_time),"
    },
    {
      "value": 4,
      "file": "src/GPUAcceleratedRenderer.cpp",
      "line": 877,
      "column": 28,
      "context": "// Safe default values\n    const float safe_color[4] = {1.0f, 1.0f, 1.0f, 1.0f};\n    const float safe_scale[2] = {1.0f, 1.0f};\n    const float* use_color = color ? color : safe_color;"
    },
    {
      "value": 8,
      "file": "src/GPUAcceleratedRenderer.cpp",
      "line": 883,
      "column": 21,
      "context": "// Basic quad positions for SDL coordinate system (top-left origin)\n    float positions[8] = {\n        x,     y,     // top-left\n        x + w, y,     // top-right"
    },
    {
      "value": 8,
      "file": "src/GPUAcceleratedRenderer.cpp",
      "line": 894,
      "column": 21,
      "context": "calculate_sprite_uv(texture, sprite_number, u_start, u_end, v_start, v_end);\n    \n    float texcoords[8] = {\n        u_start, v_start,  // top-left\n        u_end,   v_start,  // top-right"
    },
    {
      "value": 4,
      "file": "src/GPUAcceleratedRenderer.cpp",
      "line": 902,
      "column": 25,
      "context": "// Create 4 advanced vertices with EXPLICIT memory initialization\n    for (int i = 0; i < 4; i++) {\n        AdvancedVertex vertex;\n        // CRITICAL: Explicitly zero ALL memory to prevent any padding garbage"
    },
    {
      "value": 127,
      "file": "src/GPUAcceleratedRenderer.cpp",
      "line": 988,
      "column": 46,
      "context": "// Dispatch SPECTACULAR compute shader with enhanced workgroup size\n    GLuint num_groups = (max_gpu_particles + 127) / 128;  // 128 is the new workgroup size\n    glDispatchCompute(num_groups, 1, 1);"
    },
    {
      "value": 128,
      "file": "src/GPUAcceleratedRenderer.cpp",
      "line": 988,
      "column": 53,
      "context": "// Dispatch SPECTACULAR compute shader with enhanced workgroup size\n    GLuint num_groups = (max_gpu_particles + 127) / 128;  // 128 is the new workgroup size\n    glDispatchCompute(num_groups, 1, 1);"
    },
    {
      "value": 5,
      "file": "src/GPUAcceleratedRenderer.cpp",
      "line": 1018,
      "column": 58,
      "context": "if (particles[i].active == 0) {\n            // Set position\n            particles[i].position[0] = x + (gen() % 10 - 5); // Small random offset\n            particles[i].position[1] = y + (gen() % 10 - 5);"
    },
    {
      "value": 5,
      "file": "src/GPUAcceleratedRenderer.cpp",
      "line": 1019,
      "column": 58,
      "context": "// Set position\n            particles[i].position[0] = x + (gen() % 10 - 5); // Small random offset\n            particles[i].position[1] = y + (gen() % 10 - 5);\n            \n            // Set velocity"
    },
    {
      "value": 3,
      "file": "src/GPUAcceleratedRenderer.cpp",
      "line": 1044,
      "column": 40,
      "context": "particles[i].color[1] = 0.8f; // Green\n                    particles[i].color[2] = 0.0f; // Blue\n                    particles[i].color[3] = 1.0f; // Alpha\n                    break;\n                case SMOKE:"
    },
    {
      "value": 3,
      "file": "src/GPUAcceleratedRenderer.cpp",
      "line": 1050,
      "column": 40,
      "context": "particles[i].color[1] = 0.7f;\n                    particles[i].color[2] = 0.7f;\n                    particles[i].color[3] = 0.8f;\n                    break;\n                case BLOOD:"
    },
    {
      "value": 3,
      "file": "src/GPUAcceleratedRenderer.cpp",
      "line": 1056,
      "column": 40,
      "context": "particles[i].color[1] = 0.0f;\n                    particles[i].color[2] = 0.0f;\n                    particles[i].color[3] = 1.0f;\n                    break;\n                case FIRE:"
    },
    {
      "value": 3,
      "file": "src/GPUAcceleratedRenderer.cpp",
      "line": 1062,
      "column": 40,
      "context": "particles[i].color[1] = 0.5f;\n                    particles[i].color[2] = 0.0f;\n                    particles[i].color[3] = 1.0f;\n                    break;\n            }"
    },
    {
      "value": 3,
      "file": "src/GPUAcceleratedRenderer.cpp",
      "line": 1070,
      "column": 33,
      "context": "particles[i].forces[1] = 0.1f; // Drag coefficient\n            particles[i].forces[2] = 1.0f; // Wind sensitivity X\n            particles[i].forces[3] = 1.0f; // Wind sensitivity Y\n            \n            particles[i].rotation = 0.0f;"
    },
    {
      "value": 200,
      "file": "src/GPUAcceleratedRenderer.cpp",
      "line": 1073,
      "column": 54,
      "context": "particles[i].rotation = 0.0f;\n            particles[i].angular_velocity = (gen() % 200 - 100) / 10.0f; // -10 to 10\n            \n            particles[i].active = 1;"
    },
    {
      "value": 3,
      "file": "src/Controller.cpp",
      "line": 92,
      "column": 35,
      "context": "return new Controller_Joystick(2);\n\t\tcase JOYSTICK_4:\n\t\t\treturn new Controller_Joystick(3);\n\t\tcase JOYSTICK_5:\n\t\t\treturn new Controller_Joystick(4);"
    },
    {
      "value": 4,
      "file": "src/Controller.cpp",
      "line": 94,
      "column": 35,
      "context": "return new Controller_Joystick(3);\n\t\tcase JOYSTICK_5:\n\t\t\treturn new Controller_Joystick(4);\n\t\tcase JOYSTICK_6:\n\t\t\treturn new Controller_Joystick(5);"
    },
    {
      "value": 5,
      "file": "src/Controller.cpp",
      "line": 96,
      "column": 35,
      "context": "return new Controller_Joystick(4);\n\t\tcase JOYSTICK_6:\n\t\t\treturn new Controller_Joystick(5);\n\t\tcase JOYSTICK_7:\n\t\t\treturn new Controller_Joystick(6);"
    },
    {
      "value": 6,
      "file": "src/Controller.cpp",
      "line": 98,
      "column": 35,
      "context": "return new Controller_Joystick(5);\n\t\tcase JOYSTICK_7:\n\t\t\treturn new Controller_Joystick(6);\n\t\tcase JOYSTICK_8:\n\t\t\treturn new Controller_Joystick(7);"
    },
    {
      "value": 7,
      "file": "src/Controller.cpp",
      "line": 100,
      "column": 35,
      "context": "return new Controller_Joystick(6);\n\t\tcase JOYSTICK_8:\n\t\t\treturn new Controller_Joystick(7);\n\t\tdefault:\n\t\t\tSDL_Log(\"Unknown controller type: %d, using KEYMAP_1 instead\", _type);"
    },
    {
      "value": 4,
      "file": "src/Game.cpp",
      "line": 22,
      "column": 55,
      "context": "// Set OpenGL attributes BEFORE creating window\n    SDL_GL_SetAttribute(SDL_GL_CONTEXT_MAJOR_VERSION, 4);\n    SDL_GL_SetAttribute(SDL_GL_CONTEXT_MINOR_VERSION, 6);\n    SDL_GL_SetAttribute(SDL_GL_CONTEXT_PROFILE_MASK, SDL_GL_CONTEXT_PROFILE_CORE);"
    },
    {
      "value": 6,
      "file": "src/Game.cpp",
      "line": 23,
      "column": 55,
      "context": "// Set OpenGL attributes BEFORE creating window\n    SDL_GL_SetAttribute(SDL_GL_CONTEXT_MAJOR_VERSION, 4);\n    SDL_GL_SetAttribute(SDL_GL_CONTEXT_MINOR_VERSION, 6);\n    SDL_GL_SetAttribute(SDL_GL_CONTEXT_PROFILE_MASK, SDL_GL_CONTEXT_PROFILE_CORE);\n    SDL_GL_SetAttribute(SDL_GL_DOUBLEBUFFER, 1);"
    },
    {
      "value": 24,
      "file": "src/Game.cpp",
      "line": 26,
      "column": 44,
      "context": "SDL_GL_SetAttribute(SDL_GL_CONTEXT_PROFILE_MASK, SDL_GL_CONTEXT_PROFILE_CORE);\n    SDL_GL_SetAttribute(SDL_GL_DOUBLEBUFFER, 1);\n    SDL_GL_SetAttribute(SDL_GL_DEPTH_SIZE, 24);\n    SDL_GL_SetAttribute(SDL_GL_STENCIL_SIZE, 8);\n    SDL_GL_SetAttribute(SDL_GL_MULTISAMPLEBUFFERS, 1);"
    },
    {
      "value": 8,
      "file": "src/Game.cpp",
      "line": 27,
      "column": 46,
      "context": "SDL_GL_SetAttribute(SDL_GL_DOUBLEBUFFER, 1);\n    SDL_GL_SetAttribute(SDL_GL_DEPTH_SIZE, 24);\n    SDL_GL_SetAttribute(SDL_GL_STENCIL_SIZE, 8);\n    SDL_GL_SetAttribute(SDL_GL_MULTISAMPLEBUFFERS, 1);\n    SDL_GL_SetAttribute(SDL_GL_MULTISAMPLESAMPLES, 4);"
    },
    {
      "value": 4,
      "file": "src/Game.cpp",
      "line": 29,
      "column": 52,
      "context": "SDL_GL_SetAttribute(SDL_GL_STENCIL_SIZE, 8);\n    SDL_GL_SetAttribute(SDL_GL_MULTISAMPLEBUFFERS, 1);\n    SDL_GL_SetAttribute(SDL_GL_MULTISAMPLESAMPLES, 4);\n\n    window = SDL_CreateWindow(\"ClanBomber Modern\", 800, 600,"
    },
    {
      "value": 800,
      "file": "src/Game.cpp",
      "line": 31,
      "column": 52,
      "context": "SDL_GL_SetAttribute(SDL_GL_MULTISAMPLESAMPLES, 4);\n\n    window = SDL_CreateWindow(\"ClanBomber Modern\", 800, 600, \n                             SDL_WINDOW_RESIZABLE | SDL_WINDOW_OPENGL);\n    if (!window) {"
    },
    {
      "value": 600,
      "file": "src/Game.cpp",
      "line": 31,
      "column": 57,
      "context": "SDL_GL_SetAttribute(SDL_GL_MULTISAMPLESAMPLES, 4);\n\n    window = SDL_CreateWindow(\"ClanBomber Modern\", 800, 600, \n                             SDL_WINDOW_RESIZABLE | SDL_WINDOW_OPENGL);\n    if (!window) {"
    },
    {
      "value": 800,
      "file": "src/Game.cpp",
      "line": 66,
      "column": 55,
      "context": "if (app.game_context && app.game_context->get_rendering_facade()) {\n        RenderingFacade* facade = app.game_context->get_rendering_facade();\n        auto init_result = facade->initialize(window, 800, 600);\n        if (init_result.is_ok()) {\n            SDL_Log(\"Game::Game() - RenderingFacade initialized successfully\");"
    },
    {
      "value": 600,
      "file": "src/Game.cpp",
      "line": 66,
      "column": 60,
      "context": "if (app.game_context && app.game_context->get_rendering_facade()) {\n        RenderingFacade* facade = app.game_context->get_rendering_facade();\n        auto init_result = facade->initialize(window, 800, 600);\n        if (init_result.is_ok()) {\n            SDL_Log(\"Game::Game() - RenderingFacade initialized successfully\");"
    },
    {
      "value": 3,
      "file": "src/MainMenuScreen.cpp",
      "line": 55,
      "column": 26,
      "context": "next_state = GameState::SETTINGS;\n                        break;\n                    case 3: // Graphics Options\n                        next_state = GameState::SETTINGS;\n                        break;"
    },
    {
      "value": 4,
      "file": "src/MainMenuScreen.cpp",
      "line": 58,
      "column": 26,
      "context": "next_state = GameState::SETTINGS;\n                        break;\n                    case 4: // Help\n                        // TODO: Implement help screen\n                        break;"
    },
    {
      "value": 5,
      "file": "src/MainMenuScreen.cpp",
      "line": 61,
      "column": 26,
      "context": "// TODO: Implement help screen\n                        break;\n                    case 5: // Credits\n                        // TODO: Implement credits screen\n                        break;"
    },
    {
      "value": 6,
      "file": "src/MainMenuScreen.cpp",
      "line": 64,
      "column": 26,
      "context": "// TODO: Implement credits screen\n                        break;\n                    case 6: // Quit\n                        next_state = GameState::QUIT;\n                        break;"
    },
    {
      "value": 3,
      "file": "src/MainMenuScreen.cpp",
      "line": 111,
      "column": 26,
      "context": "next_state = GameState::SETTINGS;\n                        break;\n                    case 3: // Graphics Options\n                        next_state = GameState::SETTINGS;\n                        break;"
    },
    {
      "value": 4,
      "file": "src/MainMenuScreen.cpp",
      "line": 114,
      "column": 26,
      "context": "next_state = GameState::SETTINGS;\n                        break;\n                    case 4: // Help\n                        // TODO: Implement help screen\n                        break;"
    },
    {
      "value": 5,
      "file": "src/MainMenuScreen.cpp",
      "line": 117,
      "column": 26,
      "context": "// TODO: Implement help screen\n                        break;\n                    case 5: // Credits\n                        // TODO: Implement credits screen\n                        break;"
    },
    {
      "value": 6,
      "file": "src/MainMenuScreen.cpp",
      "line": 120,
      "column": 26,
      "context": "// TODO: Implement credits screen\n                        break;\n                    case 6: // Quit\n                        next_state = GameState::QUIT;\n                        break;"
    },
    {
      "value": 255,
      "file": "src/MainMenuScreen.cpp",
      "line": 136,
      "column": 30,
      "context": "// Colors for text\n    SDL_Color title_color = {255, 255, 255, 255};      // White\n    SDL_Color selected_color = {255, 255, 0, 255};     // Yellow\n    SDL_Color normal_color = {200, 200, 200, 255};     // Light gray"
    },
    {
      "value": 255,
      "file": "src/MainMenuScreen.cpp",
      "line": 136,
      "column": 35,
      "context": "// Colors for text\n    SDL_Color title_color = {255, 255, 255, 255};      // White\n    SDL_Color selected_color = {255, 255, 0, 255};     // Yellow\n    SDL_Color normal_color = {200, 200, 200, 255};     // Light gray"
    },
    {
      "value": 255,
      "file": "src/MainMenuScreen.cpp",
      "line": 136,
      "column": 40,
      "context": "// Colors for text\n    SDL_Color title_color = {255, 255, 255, 255};      // White\n    SDL_Color selected_color = {255, 255, 0, 255};     // Yellow\n    SDL_Color normal_color = {200, 200, 200, 255};     // Light gray"
    },
    {
      "value": 255,
      "file": "src/MainMenuScreen.cpp",
      "line": 136,
      "column": 45,
      "context": "// Colors for text\n    SDL_Color title_color = {255, 255, 255, 255};      // White\n    SDL_Color selected_color = {255, 255, 0, 255};     // Yellow\n    SDL_Color normal_color = {200, 200, 200, 255};     // Light gray"
    },
    {
      "value": 255,
      "file": "src/MainMenuScreen.cpp",
      "line": 137,
      "column": 33,
      "context": "// Colors for text\n    SDL_Color title_color = {255, 255, 255, 255};      // White\n    SDL_Color selected_color = {255, 255, 0, 255};     // Yellow\n    SDL_Color normal_color = {200, 200, 200, 255};     // Light gray\n    SDL_Color instructions_color = {150, 150, 150, 255}; // Dark gray"
    },
    {
      "value": 255,
      "file": "src/MainMenuScreen.cpp",
      "line": 137,
      "column": 38,
      "context": "// Colors for text\n    SDL_Color title_color = {255, 255, 255, 255};      // White\n    SDL_Color selected_color = {255, 255, 0, 255};     // Yellow\n    SDL_Color normal_color = {200, 200, 200, 255};     // Light gray\n    SDL_Color instructions_color = {150, 150, 150, 255}; // Dark gray"
    },
    {
      "value": 255,
      "file": "src/MainMenuScreen.cpp",
      "line": 137,
      "column": 46,
      "context": "// Colors for text\n    SDL_Color title_color = {255, 255, 255, 255};      // White\n    SDL_Color selected_color = {255, 255, 0, 255};     // Yellow\n    SDL_Color normal_color = {200, 200, 200, 255};     // Light gray\n    SDL_Color instructions_color = {150, 150, 150, 255}; // Dark gray"
    },
    {
      "value": 200,
      "file": "src/MainMenuScreen.cpp",
      "line": 138,
      "column": 31,
      "context": "SDL_Color title_color = {255, 255, 255, 255};      // White\n    SDL_Color selected_color = {255, 255, 0, 255};     // Yellow\n    SDL_Color normal_color = {200, 200, 200, 255};     // Light gray\n    SDL_Color instructions_color = {150, 150, 150, 255}; // Dark gray"
    },
    {
      "value": 200,
      "file": "src/MainMenuScreen.cpp",
      "line": 138,
      "column": 36,
      "context": "SDL_Color title_color = {255, 255, 255, 255};      // White\n    SDL_Color selected_color = {255, 255, 0, 255};     // Yellow\n    SDL_Color normal_color = {200, 200, 200, 255};     // Light gray\n    SDL_Color instructions_color = {150, 150, 150, 255}; // Dark gray"
    },
    {
      "value": 200,
      "file": "src/MainMenuScreen.cpp",
      "line": 138,
      "column": 41,
      "context": "SDL_Color title_color = {255, 255, 255, 255};      // White\n    SDL_Color selected_color = {255, 255, 0, 255};     // Yellow\n    SDL_Color normal_color = {200, 200, 200, 255};     // Light gray\n    SDL_Color instructions_color = {150, 150, 150, 255}; // Dark gray"
    },
    {
      "value": 255,
      "file": "src/MainMenuScreen.cpp",
      "line": 138,
      "column": 46,
      "context": "SDL_Color title_color = {255, 255, 255, 255};      // White\n    SDL_Color selected_color = {255, 255, 0, 255};     // Yellow\n    SDL_Color normal_color = {200, 200, 200, 255};     // Light gray\n    SDL_Color instructions_color = {150, 150, 150, 255}; // Dark gray"
    },
    {
      "value": 150,
      "file": "src/MainMenuScreen.cpp",
      "line": 139,
      "column": 37,
      "context": "SDL_Color selected_color = {255, 255, 0, 255};     // Yellow\n    SDL_Color normal_color = {200, 200, 200, 255};     // Light gray\n    SDL_Color instructions_color = {150, 150, 150, 255}; // Dark gray\n    \n    // Get RenderingFacade from GameContext"
    },
    {
      "value": 150,
      "file": "src/MainMenuScreen.cpp",
      "line": 139,
      "column": 42,
      "context": "SDL_Color selected_color = {255, 255, 0, 255};     // Yellow\n    SDL_Color normal_color = {200, 200, 200, 255};     // Light gray\n    SDL_Color instructions_color = {150, 150, 150, 255}; // Dark gray\n    \n    // Get RenderingFacade from GameContext"
    },
    {
      "value": 150,
      "file": "src/MainMenuScreen.cpp",
      "line": 139,
      "column": 47,
      "context": "SDL_Color selected_color = {255, 255, 0, 255};     // Yellow\n    SDL_Color normal_color = {200, 200, 200, 255};     // Light gray\n    SDL_Color instructions_color = {150, 150, 150, 255}; // Dark gray\n    \n    // Get RenderingFacade from GameContext"
    },
    {
      "value": 255,
      "file": "src/MainMenuScreen.cpp",
      "line": 139,
      "column": 52,
      "context": "SDL_Color selected_color = {255, 255, 0, 255};     // Yellow\n    SDL_Color normal_color = {200, 200, 200, 255};     // Light gray\n    SDL_Color instructions_color = {150, 150, 150, 255}; // Dark gray\n    \n    // Get RenderingFacade from GameContext"
    },
    {
      "value": 400,
      "file": "src/MainMenuScreen.cpp",
      "line": 145,
      "column": 68,
      "context": "// Render title (centered at x=400 for 800px wide screen)\n    text_renderer->draw_text_centered(facade, \"CLANBOMBER\", \"big\", 400, 100, title_color);\n    \n    // Render version (centered)"
    },
    {
      "value": 400,
      "file": "src/MainMenuScreen.cpp",
      "line": 148,
      "column": 79,
      "context": "// Render version (centered)\n    text_renderer->draw_text_centered(facade, \"SDL3 Modern Edition\", \"small\", 400, 140, normal_color);\n    \n    // Render menu items (centered)"
    },
    {
      "value": 140,
      "file": "src/MainMenuScreen.cpp",
      "line": 148,
      "column": 84,
      "context": "// Render version (centered)\n    text_renderer->draw_text_centered(facade, \"SDL3 Modern Edition\", \"small\", 400, 140, normal_color);\n    \n    // Render menu items (centered)"
    },
    {
      "value": 220,
      "file": "src/MainMenuScreen.cpp",
      "line": 151,
      "column": 15,
      "context": "// Render menu items (centered)\n    float y = 220;\n    for (int i = 0; i < menu_items.size(); ++i) {\n        SDL_Color color = (i == selected_item) ? selected_color : normal_color;"
    },
    {
      "value": 400,
      "file": "src/MainMenuScreen.cpp",
      "line": 158,
      "column": 69,
      "context": "std::string item_text = (i == selected_item) ? \"> \" + menu_items[i] + \" <\" : \"  \" + menu_items[i] + \"  \";\n        \n        text_renderer->draw_text_centered(facade, item_text, \"big\", 400, y, color);\n        \n        y += 40;"
    },
    {
      "value": 40,
      "file": "src/MainMenuScreen.cpp",
      "line": 160,
      "column": 14,
      "context": "text_renderer->draw_text_centered(facade, item_text, \"big\", 400, y, color);\n        \n        y += 40;\n    }"
    },
    {
      "value": 400,
      "file": "src/MainMenuScreen.cpp",
      "line": 165,
      "column": 70,
      "context": "// Render instructions (centered)\n    std::string instructions = \"Use UP/DOWN arrows or joystick to navigate, ENTER or A button to select\";\n    text_renderer->draw_text_centered(facade, instructions, \"small\", 400, 550, instructions_color);\n}"
    },
    {
      "value": 550,
      "file": "src/MainMenuScreen.cpp",
      "line": 165,
      "column": 75,
      "context": "// Render instructions (centered)\n    std::string instructions = \"Use UP/DOWN arrows or joystick to navigate, ENTER or A button to select\";\n    text_renderer->draw_text_centered(facade, instructions, \"small\", 400, 550, instructions_color);\n}"
    },
    {
      "value": 90,
      "file": "src/GameConfig.cpp",
      "line": 37,
      "column": 32,
      "context": "std::string GameConfig::last_server= \"intruder\";\n\nint\tGameConfig::round_time\t\t\t= 90;\nint GameConfig::sound_enabled\t\t= true;\nint\tGameConfig::max_skateboards\t\t= 5;"
    },
    {
      "value": 5,
      "file": "src/GameConfig.cpp",
      "line": 39,
      "column": 36,
      "context": "int\tGameConfig::round_time\t\t\t= 90;\nint GameConfig::sound_enabled\t\t= true;\nint\tGameConfig::max_skateboards\t\t= 5;\nint\tGameConfig::max_power\t\t\t= 12;\nint\tGameConfig::max_bombs\t\t\t= 9;"
    },
    {
      "value": 12,
      "file": "src/GameConfig.cpp",
      "line": 40,
      "column": 31,
      "context": "int GameConfig::sound_enabled\t\t= true;\nint\tGameConfig::max_skateboards\t\t= 5;\nint\tGameConfig::max_power\t\t\t= 12;\nint\tGameConfig::max_bombs\t\t\t= 9;"
    },
    {
      "value": 9,
      "file": "src/GameConfig.cpp",
      "line": 41,
      "column": 31,
      "context": "int\tGameConfig::max_skateboards\t\t= 5;\nint\tGameConfig::max_power\t\t\t= 12;\nint\tGameConfig::max_bombs\t\t\t= 9;\n\nint\tGameConfig::start_skateboards\t= 0;"
    },
    {
      "value": 3000,
      "file": "src/GameConfig.cpp",
      "line": 70,
      "column": 35,
      "context": "int\tGameConfig::corpse_parts\t\t= 10;\n\nint\tGameConfig::bomb_countdown\t\t= 3000;\nint\tGameConfig::bomb_delay\t\t\t= 10;\nint\tGameConfig::bomb_speed\t\t\t= 160;"
    },
    {
      "value": 160,
      "file": "src/GameConfig.cpp",
      "line": 72,
      "column": 32,
      "context": "int\tGameConfig::bomb_countdown\t\t= 3000;\nint\tGameConfig::bomb_delay\t\t\t= 10;\nint\tGameConfig::bomb_speed\t\t\t= 160;\n\nint\tGameConfig::points_to_win\t\t= 5;"
    },
    {
      "value": 5,
      "file": "src/GameConfig.cpp",
      "line": 74,
      "column": 34,
      "context": "int\tGameConfig::bomb_speed\t\t\t= 160;\n\nint\tGameConfig::points_to_win\t\t= 5;\nint\tGameConfig::theme\t\t\t\t= 0;"
    },
    {
      "value": 8,
      "file": "src/GameConfig.cpp",
      "line": 79,
      "column": 33,
      "context": "bool GameConfig::fullscreen = false;\n\nBomberConfig GameConfig::bomber[8];\n\nBomberConfig::BomberConfig()"
    },
    {
      "value": 5,
      "file": "src/GameConfig.cpp",
      "line": 124,
      "column": 15,
      "context": "void BomberConfig::set_team(int _team)\n{\n\tteam = _team%5;\n}"
    },
    {
      "value": 6,
      "file": "src/GameConfig.cpp",
      "line": 134,
      "column": 31,
      "context": "void BomberConfig::set_controller(int _controller)\n{\n  controller = _controller % (6 + 8);\n}"
    },
    {
      "value": 8,
      "file": "src/GameConfig.cpp",
      "line": 134,
      "column": 35,
      "context": "void BomberConfig::set_controller(int _controller)\n{\n  controller = _controller % (6 + 8);\n}"
    },
    {
      "value": 8,
      "file": "src/GameConfig.cpp",
      "line": 206,
      "column": 18,
      "context": "int nr = 0;\n\t\n\tfor (int i=0; i<8; i++) {\n\t\tif (bomber[i].is_enabled()) {\n\t\t\tnr++;"
    },
    {
      "value": 4,
      "file": "src/GameConfig.cpp",
      "line": 218,
      "column": 16,
      "context": "{\n\tint nrs = 0;\n\tint team_cunt[4] = {0,0,0,0};\n\t\n\tfor (int i=0; i<8; i++) {"
    },
    {
      "value": 8,
      "file": "src/GameConfig.cpp",
      "line": 220,
      "column": 18,
      "context": "int team_cunt[4] = {0,0,0,0};\n\t\n\tfor (int i=0; i<8; i++) {\n\t\tif (bomber[i].is_enabled()) {\n\t\t\tif (bomber[i].get_team() == 0) {"
    },
    {
      "value": 8,
      "file": "src/GameConfig.cpp",
      "line": 569,
      "column": 19,
      "context": "if (init) {\n\t\tSDL_Log(\"GameConfig::save() - Initializing default bomber configuration\");\n\t\tfor (int i=0; i<8; i++) {\n\t\t\tbomber[i].set_skin(i);\n\t\t}"
    },
    {
      "value": 3,
      "file": "src/GameConfig.cpp",
      "line": 575,
      "column": 10,
      "context": "bomber[1].set_name( \"Player2\" );\n\t\tbomber[2].set_name( \"Player3\" );\n\t\tbomber[3].set_name( \"Player4\" );\n\t\tbomber[4].set_name( \"AIs\" );\n\t\tbomber[5].set_name( \"Playing\" );"
    },
    {
      "value": 4,
      "file": "src/GameConfig.cpp",
      "line": 576,
      "column": 10,
      "context": "bomber[2].set_name( \"Player3\" );\n\t\tbomber[3].set_name( \"Player4\" );\n\t\tbomber[4].set_name( \"AIs\" );\n\t\tbomber[5].set_name( \"Playing\" );\n\t\tbomber[6].set_name( \"For\" );"
    },
    {
      "value": 5,
      "file": "src/GameConfig.cpp",
      "line": 577,
      "column": 10,
      "context": "bomber[3].set_name( \"Player4\" );\n\t\tbomber[4].set_name( \"AIs\" );\n\t\tbomber[5].set_name( \"Playing\" );\n\t\tbomber[6].set_name( \"For\" );\n\t\tbomber[7].set_name( \"You\" );"
    },
    {
      "value": 6,
      "file": "src/GameConfig.cpp",
      "line": 578,
      "column": 10,
      "context": "bomber[4].set_name( \"AIs\" );\n\t\tbomber[5].set_name( \"Playing\" );\n\t\tbomber[6].set_name( \"For\" );\n\t\tbomber[7].set_name( \"You\" );"
    },
    {
      "value": 7,
      "file": "src/GameConfig.cpp",
      "line": 579,
      "column": 10,
      "context": "bomber[5].set_name( \"Playing\" );\n\t\tbomber[6].set_name( \"For\" );\n\t\tbomber[7].set_name( \"You\" );\n\t\t\n\t\t// Enable first 2 players and set different controllers"
    },
    {
      "value": 6,
      "file": "src/GameConfig.cpp",
      "line": 586,
      "column": 28,
      "context": "bomber[1].enable();\n\t\tbomber[1].set_controller(6); // JOYSTICK_1 (value 6 in enum)\n\t\t\n\t\t// Rest stay disabled by default"
    },
    {
      "value": 8,
      "file": "src/GameConfig.cpp",
      "line": 589,
      "column": 23,
      "context": "// Rest stay disabled by default\n\t\tfor (int i = 2; i < 8; i++) {\n\t\t\tbomber[i].disable();\n\t\t}"
    },
    {
      "value": 8,
      "file": "src/GameConfig.cpp",
      "line": 634,
      "column": 18,
      "context": "configfile << bomb_speed\t\t<< std::endl;\n\t\n\tfor (int i=0; i<8; i++) {\n\t\tconfigfile << bomber[i].get_skin()\t\t<< std::endl;\n\t\tconfigfile << bomber[i].get_name()              << std::endl;"
    },
    {
      "value": 8,
      "file": "src/GameConfig.cpp",
      "line": 706,
      "column": 19,
      "context": "for (int i=0; i<8; i++) {\n    configfile >> version;\n    bomber[i].set_skin(version);"
    },
    {
      "value": 8,
      "file": "src/Controller_Joystick.cpp",
      "line": 6,
      "column": 56,
      "context": "// Static member definitions\nbool Controller_Joystick::joystick_system_initialized = false;\nSDL_Joystick* Controller_Joystick::connected_joysticks[8] = {nullptr};\n\n// ===== CONSTRUCTOR / DESTRUCTOR ====="
    },
    {
      "value": 8,
      "file": "src/Controller_Joystick.cpp",
      "line": 119,
      "column": 50,
      "context": "// Log connected joysticks\n    if (joystick_ids) {\n        for (int i = 0; i < num_joysticks && i < 8; i++) {\n            const char* name = SDL_GetJoystickNameForID(joystick_ids[i]);\n            SDL_Log(\"Controller_Joystick: Joystick %d (ID %d): %s\", i, joystick_ids[i], name ? name : \"Unknown\");"
    },
    {
      "value": 8,
      "file": "src/Controller_Joystick.cpp",
      "line": 133,
      "column": 25,
      "context": "// Close all open joysticks\n    for (int i = 0; i < 8; i++) {\n        if (connected_joysticks[i]) {\n            SDL_CloseJoystick(connected_joysticks[i]);"
    },
    {
      "value": 32000,
      "file": "src/Controller_Joystick.cpp",
      "line": 380,
      "column": 36,
      "context": "// Test rumble: mid intensity on both motors for 200ms\n    if (SDL_RumbleGamepad(gamepad, 32000, 32000, 200)) {\n        SDL_Log(\"Controller_Joystick: \u2705 SDL_RumbleGamepad test successful!\");\n        // Set flag to indicate gamepad rumble is working"
    },
    {
      "value": 32000,
      "file": "src/Controller_Joystick.cpp",
      "line": 380,
      "column": 43,
      "context": "// Test rumble: mid intensity on both motors for 200ms\n    if (SDL_RumbleGamepad(gamepad, 32000, 32000, 200)) {\n        SDL_Log(\"Controller_Joystick: \u2705 SDL_RumbleGamepad test successful!\");\n        // Set flag to indicate gamepad rumble is working"
    },
    {
      "value": 200,
      "file": "src/Controller_Joystick.cpp",
      "line": 380,
      "column": 50,
      "context": "// Test rumble: mid intensity on both motors for 200ms\n    if (SDL_RumbleGamepad(gamepad, 32000, 32000, 200)) {\n        SDL_Log(\"Controller_Joystick: \u2705 SDL_RumbleGamepad test successful!\");\n        // Set flag to indicate gamepad rumble is working"
    },
    {
      "value": 50000,
      "file": "src/Controller_Joystick.cpp",
      "line": 416,
      "column": 41,
      "context": "if (intensity >= 0.8f) {\n        // MASSIVE EXPLOSION: Both motors at high intensity\n        low_freq = (Uint16)(intensity * 50000);  // Strong low rumble\n        high_freq = (Uint16)(intensity * 35000); // Sharp high buzz\n    } else if (intensity >= 0.5f) {"
    },
    {
      "value": 35000,
      "file": "src/Controller_Joystick.cpp",
      "line": 417,
      "column": 42,
      "context": "// MASSIVE EXPLOSION: Both motors at high intensity\n        low_freq = (Uint16)(intensity * 50000);  // Strong low rumble\n        high_freq = (Uint16)(intensity * 35000); // Sharp high buzz\n    } else if (intensity >= 0.5f) {\n        // MEDIUM EXPLOSION: Balanced mix, more low freq"
    },
    {
      "value": 45000,
      "file": "src/Controller_Joystick.cpp",
      "line": 420,
      "column": 41,
      "context": "} else if (intensity >= 0.5f) {\n        // MEDIUM EXPLOSION: Balanced mix, more low freq\n        low_freq = (Uint16)(intensity * 45000);\n        high_freq = (Uint16)(intensity * 20000);\n    } else if (intensity >= 0.2f) {"
    },
    {
      "value": 20000,
      "file": "src/Controller_Joystick.cpp",
      "line": 421,
      "column": 42,
      "context": "// MEDIUM EXPLOSION: Balanced mix, more low freq\n        low_freq = (Uint16)(intensity * 45000);\n        high_freq = (Uint16)(intensity * 20000);\n    } else if (intensity >= 0.2f) {\n        // DISTANT EXPLOSION: Mostly low freq with subtle high"
    },
    {
      "value": 30000,
      "file": "src/Controller_Joystick.cpp",
      "line": 424,
      "column": 41,
      "context": "} else if (intensity >= 0.2f) {\n        // DISTANT EXPLOSION: Mostly low freq with subtle high\n        low_freq = (Uint16)(intensity * 30000);\n        high_freq = (Uint16)(intensity * 8000);\n    } else {"
    },
    {
      "value": 8000,
      "file": "src/Controller_Joystick.cpp",
      "line": 425,
      "column": 42,
      "context": "// DISTANT EXPLOSION: Mostly low freq with subtle high\n        low_freq = (Uint16)(intensity * 30000);\n        high_freq = (Uint16)(intensity * 8000);\n    } else {\n        // VERY DISTANT: Only subtle low frequency"
    },
    {
      "value": 15000,
      "file": "src/Controller_Joystick.cpp",
      "line": 428,
      "column": 41,
      "context": "} else {\n        // VERY DISTANT: Only subtle low frequency\n        low_freq = (Uint16)(intensity * 15000);\n        high_freq = (Uint16)(intensity * 2000);\n    }"
    },
    {
      "value": 2000,
      "file": "src/Controller_Joystick.cpp",
      "line": 429,
      "column": 42,
      "context": "// VERY DISTANT: Only subtle low frequency\n        low_freq = (Uint16)(intensity * 15000);\n        high_freq = (Uint16)(intensity * 2000);\n    }"
    },
    {
      "value": 65535,
      "file": "src/Controller_Joystick.cpp",
      "line": 528,
      "column": 36,
      "context": "// IMMEDIATE DEATH SHOCK: Short intense burst on both motors\n        SDL_RumbleGamepad(gamepad, 65535, 65535, 150); // MAX intensity for 150ms\n        \n        SDL_Log(\"HAPTIC: \u2620\ufe0f DEATH vibration triggered - intensity=%.3f, duration=%.1fs\","
    },
    {
      "value": 65535,
      "file": "src/Controller_Joystick.cpp",
      "line": 528,
      "column": 43,
      "context": "// IMMEDIATE DEATH SHOCK: Short intense burst on both motors\n        SDL_RumbleGamepad(gamepad, 65535, 65535, 150); // MAX intensity for 150ms\n        \n        SDL_Log(\"HAPTIC: \u2620\ufe0f DEATH vibration triggered - intensity=%.3f, duration=%.1fs\","
    },
    {
      "value": 150,
      "file": "src/Controller_Joystick.cpp",
      "line": 528,
      "column": 50,
      "context": "// IMMEDIATE DEATH SHOCK: Short intense burst on both motors\n        SDL_RumbleGamepad(gamepad, 65535, 65535, 150); // MAX intensity for 150ms\n        \n        SDL_Log(\"HAPTIC: \u2620\ufe0f DEATH vibration triggered - intensity=%.3f, duration=%.1fs\","
    },
    {
      "value": 50000,
      "file": "src/Controller_Joystick.cpp",
      "line": 539,
      "column": 45,
      "context": "if (intensity >= 0.8f) {\n            // MASSIVE EXPLOSION\n            low_freq = (Uint16)(intensity * 50000);\n            high_freq = (Uint16)(intensity * 35000);\n            duration = 600;"
    },
    {
      "value": 35000,
      "file": "src/Controller_Joystick.cpp",
      "line": 540,
      "column": 46,
      "context": "// MASSIVE EXPLOSION\n            low_freq = (Uint16)(intensity * 50000);\n            high_freq = (Uint16)(intensity * 35000);\n            duration = 600;\n        } else if (intensity >= 0.5f) {"
    },
    {
      "value": 600,
      "file": "src/Controller_Joystick.cpp",
      "line": 541,
      "column": 24,
      "context": "low_freq = (Uint16)(intensity * 50000);\n            high_freq = (Uint16)(intensity * 35000);\n            duration = 600;\n        } else if (intensity >= 0.5f) {\n            // MEDIUM EXPLOSION"
    },
    {
      "value": 45000,
      "file": "src/Controller_Joystick.cpp",
      "line": 544,
      "column": 45,
      "context": "} else if (intensity >= 0.5f) {\n            // MEDIUM EXPLOSION\n            low_freq = (Uint16)(intensity * 45000);\n            high_freq = (Uint16)(intensity * 20000);\n            duration = 400;"
    },
    {
      "value": 20000,
      "file": "src/Controller_Joystick.cpp",
      "line": 545,
      "column": 46,
      "context": "// MEDIUM EXPLOSION\n            low_freq = (Uint16)(intensity * 45000);\n            high_freq = (Uint16)(intensity * 20000);\n            duration = 400;\n        } else if (intensity >= 0.2f) {"
    },
    {
      "value": 400,
      "file": "src/Controller_Joystick.cpp",
      "line": 546,
      "column": 24,
      "context": "low_freq = (Uint16)(intensity * 45000);\n            high_freq = (Uint16)(intensity * 20000);\n            duration = 400;\n        } else if (intensity >= 0.2f) {\n            // DISTANT EXPLOSION"
    },
    {
      "value": 30000,
      "file": "src/Controller_Joystick.cpp",
      "line": 549,
      "column": 45,
      "context": "} else if (intensity >= 0.2f) {\n            // DISTANT EXPLOSION\n            low_freq = (Uint16)(intensity * 30000);\n            high_freq = (Uint16)(intensity * 8000);\n            duration = 300;"
    },
    {
      "value": 8000,
      "file": "src/Controller_Joystick.cpp",
      "line": 550,
      "column": 46,
      "context": "// DISTANT EXPLOSION\n            low_freq = (Uint16)(intensity * 30000);\n            high_freq = (Uint16)(intensity * 8000);\n            duration = 300;\n        } else {"
    },
    {
      "value": 300,
      "file": "src/Controller_Joystick.cpp",
      "line": 551,
      "column": 24,
      "context": "low_freq = (Uint16)(intensity * 30000);\n            high_freq = (Uint16)(intensity * 8000);\n            duration = 300;\n        } else {\n            // VERY DISTANT"
    },
    {
      "value": 15000,
      "file": "src/Controller_Joystick.cpp",
      "line": 554,
      "column": 45,
      "context": "} else {\n            // VERY DISTANT\n            low_freq = (Uint16)(intensity * 15000);\n            high_freq = (Uint16)(intensity * 2000);\n            duration = 200;"
    },
    {
      "value": 2000,
      "file": "src/Controller_Joystick.cpp",
      "line": 555,
      "column": 46,
      "context": "// VERY DISTANT\n            low_freq = (Uint16)(intensity * 15000);\n            high_freq = (Uint16)(intensity * 2000);\n            duration = 200;\n        }"
    },
    {
      "value": 200,
      "file": "src/Controller_Joystick.cpp",
      "line": 556,
      "column": 24,
      "context": "low_freq = (Uint16)(intensity * 15000);\n            high_freq = (Uint16)(intensity * 2000);\n            duration = 200;\n        }"
    },
    {
      "value": 4,
      "file": "src/Bomb.cpp",
      "line": 27,
      "column": 40,
      "context": "// Animation and color setup\n    anim_timer = 0.0f;\n    base_sprite = owner->get_color() * 4; // 4 frames per color\n    sprite_nr = base_sprite;"
    },
    {
      "value": 4,
      "file": "src/Bomb.cpp",
      "line": 42,
      "column": 38,
      "context": "// Animation logic calibrated for deltaTime \n    anim_timer += deltaTime;\n    const int num_animation_frames = 4;\n    const float animation_speed = 3.0f; // Reduced from 10.0f for deltaTime calibration\n    int current_frame = static_cast<int>(anim_timer * animation_speed) % num_animation_frames;"
    },
    {
      "value": 120,
      "file": "src/Bomb.cpp",
      "line": 94,
      "column": 17,
      "context": "remove_bomb_from_tile(this);\n        cur_dir = dir;\n        speed = 120; // Reduced from 240 for deltaTime calibration - kicked bomb speed\n    }\n}"
    },
    {
      "value": 20,
      "file": "src/Extra.cpp",
      "line": 162,
      "column": 31,
      "context": "case SPEED:\n            // Increase movement speed\n            bomber->inc_speed(20);\n            SDL_Log(\"Bomber gained speed boost!\");\n            break;"
    },
    {
      "value": 40,
      "file": "src/Extra.cpp",
      "line": 186,
      "column": 31,
      "context": "case DISEASE:\n            // Constipation - reduce speed and disable bombing temporarily\n            bomber->dec_speed(40);\n            SDL_Log(\"Bomber got constipation! Speed reduced!\");\n            // TODO: Add temporary bomb disable"
    },
    {
      "value": 50,
      "file": "src/Extra.cpp",
      "line": 193,
      "column": 31,
      "context": "case KOKS:\n            // Make very fast but harder to control\n            bomber->inc_speed(50);\n            SDL_Log(\"Bomber took speed! Very fast but harder to control!\");\n            // TODO: Add uncontrollable movement effect"
    },
    {
      "value": 20,
      "file": "src/Extra.cpp",
      "line": 200,
      "column": 31,
      "context": "case VIAGRA:\n            // Negative effect - could make bombs stick or other penalty\n            bomber->dec_speed(20);\n            SDL_Log(\"Bomber took viagra! Movement affected!\");\n            // TODO: Implement sticky bomb effect"
    },
    {
      "value": 255,
      "file": "src/RenderingFacade.cpp",
      "line": 86,
      "column": 27,
      "context": "// Clear screen at beginning of frame\n    clear_screen(0, 0, 0, 255); // Black background\n    \n    // Begin frame for all subsystems"
    },
    {
      "value": 255,
      "file": "src/RenderingFacade.cpp",
      "line": 255,
      "column": 37,
      "context": "// Use the integrated TextRenderer to create text texture and render it\n        SDL_Color color = {r, g, b, 255};\n        auto text_texture = text_renderer->render_text(text, font_name, color);"
    },
    {
      "value": 300,
      "file": "src/RenderingFacade.cpp",
      "line": 267,
      "column": 18,
      "context": "// Check if this looks like a center coordinate (around screen center)\n        if (x >= 300 && x <= 500) {\n            // This is likely meant to be centered - calculate proper center position\n            actual_x = static_cast<float>(x) - (static_cast<float>(text_texture->width) / 2.0f);"
    },
    {
      "value": 500,
      "file": "src/RenderingFacade.cpp",
      "line": 267,
      "column": 30,
      "context": "// Check if this looks like a center coordinate (around screen center)\n        if (x >= 300 && x <= 500) {\n            // This is likely meant to be centered - calculate proper center position\n            actual_x = static_cast<float>(x) - (static_cast<float>(text_texture->width) / 2.0f);"
    },
    {
      "value": 255,
      "file": "src/RenderingFacade.cpp",
      "line": 387,
      "column": 54,
      "context": "PixelCoord debug_position(10.0f, 10.0f);\n    render_text(debug_text, debug_position, \"small\", 255, 255, 255);\n}"
    },
    {
      "value": 255,
      "file": "src/RenderingFacade.cpp",
      "line": 387,
      "column": 59,
      "context": "PixelCoord debug_position(10.0f, 10.0f);\n    render_text(debug_text, debug_position, \"small\", 255, 255, 255);\n}"
    },
    {
      "value": 255,
      "file": "src/RenderingFacade.cpp",
      "line": 387,
      "column": 64,
      "context": "PixelCoord debug_position(10.0f, 10.0f);\n    render_text(debug_text, debug_position, \"small\", 255, 255, 255);\n}"
    },
    {
      "value": 64,
      "file": "src/RenderingFacade.cpp",
      "line": 428,
      "column": 18,
      "context": "// Note: This is a simplified implementation\n    // Real implementation would query gpu_renderer for texture info\n    info.width = 64;  // Default tile size\n    info.height = 64;\n    info.memory_usage = 64 * 64 * 4; // Assume 32-bit RGBA"
    },
    {
      "value": 64,
      "file": "src/RenderingFacade.cpp",
      "line": 429,
      "column": 19,
      "context": "// Real implementation would query gpu_renderer for texture info\n    info.width = 64;  // Default tile size\n    info.height = 64;\n    info.memory_usage = 64 * 64 * 4; // Assume 32-bit RGBA\n    info.is_loaded = true;"
    },
    {
      "value": 64,
      "file": "src/RenderingFacade.cpp",
      "line": 430,
      "column": 25,
      "context": "info.width = 64;  // Default tile size\n    info.height = 64;\n    info.memory_usage = 64 * 64 * 4; // Assume 32-bit RGBA\n    info.is_loaded = true;"
    },
    {
      "value": 64,
      "file": "src/RenderingFacade.cpp",
      "line": 430,
      "column": 30,
      "context": "info.width = 64;  // Default tile size\n    info.height = 64;\n    info.memory_usage = 64 * 64 * 4; // Assume 32-bit RGBA\n    info.is_loaded = true;"
    },
    {
      "value": 4,
      "file": "src/RenderingFacade.cpp",
      "line": 430,
      "column": 35,
      "context": "info.width = 64;  // Default tile size\n    info.height = 64;\n    info.memory_usage = 64 * 64 * 4; // Assume 32-bit RGBA\n    info.is_loaded = true;"
    },
    {
      "value": 8,
      "file": "src/GameplayScreen.cpp",
      "line": 108,
      "column": 25,
      "context": "int j = 0;\n    for (int i = 0; i < 8; i++) {\n        SDL_Log(\"Bomber %d: enabled=%d, controller=%d\", i, GameConfig::bomber[i].is_enabled(), GameConfig::bomber[i].get_controller());\n        if (GameConfig::bomber[i].is_enabled()) {"
    },
    {
      "value": 3,
      "file": "src/GameplayScreen.cpp",
      "line": 132,
      "column": 31,
      "context": "bomber->set_team(GameConfig::bomber[i].get_team());\n            bomber->set_number(i);\n            bomber->set_lives(3); // Start with 3 lives\n            app->bomber_objects.push_back(bomber);"
    },
    {
      "value": 4,
      "file": "src/GameplayScreen.cpp",
      "line": 159,
      "column": 31,
      "context": "// Remove teams with only one player\n    int team_count[] = {0, 0, 0, 0};\n    for (int team = 0; team < 4; team++) {\n        for (auto const& bomber : app->bomber_objects) {\n            if (bomber->get_team() - 1 == team) {"
    },
    {
      "value": 400,
      "file": "src/GameplayScreen.cpp",
      "line": 508,
      "column": 38,
      "context": "// Play game over sound (only once) - with error protection\n            AudioPosition center_pos(400, 300, 0.0f);\n            if (!AudioMixer::play_sound_3d(\"time_over\", center_pos, 800.0f)) {\n                SDL_Log(\"Failed to play time_over sound - continuing without audio\");"
    },
    {
      "value": 300,
      "file": "src/GameplayScreen.cpp",
      "line": 508,
      "column": 43,
      "context": "// Play game over sound (only once) - with error protection\n            AudioPosition center_pos(400, 300, 0.0f);\n            if (!AudioMixer::play_sound_3d(\"time_over\", center_pos, 800.0f)) {\n                SDL_Log(\"Failed to play time_over sound - continuing without audio\");"
    },
    {
      "value": 7,
      "file": "src/MapTile.cpp",
      "line": 65,
      "column": 50,
      "context": "std::random_device rd;\n    std::mt19937 gen(rd());\n    std::uniform_int_distribution<> main_dist(0, 7); // 8 main categories (0-7)\n    \n    int roll = main_dist(gen);"
    },
    {
      "value": 3,
      "file": "src/MapTile.cpp",
      "line": 80,
      "column": 14,
      "context": "extra_type = Extra::SPEED;\n            break;\n        case 3: { // Special abilities (12.5% chance - kick or glove)\n            std::uniform_int_distribution<> special_dist(0, 1);\n            extra_type = (special_dist(gen) == 0) ? Extra::KICK : Extra::GLOVE;"
    },
    {
      "value": 4,
      "file": "src/MapTile.cpp",
      "line": 85,
      "column": 14,
      "context": "break;\n        }\n        case 4: { // Negative effects (12.5% chance)\n            std::uniform_int_distribution<> negative_dist(0, 7); // Increased chance of negative effects\n            int neg_roll = negative_dist(gen);"
    },
    {
      "value": 7,
      "file": "src/MapTile.cpp",
      "line": 86,
      "column": 62,
      "context": "}\n        case 4: { // Negative effects (12.5% chance)\n            std::uniform_int_distribution<> negative_dist(0, 7); // Increased chance of negative effects\n            int neg_roll = negative_dist(gen);\n            if (neg_roll == 0 || neg_roll == 1) {"
    },
    {
      "value": 3,
      "file": "src/MapTile.cpp",
      "line": 90,
      "column": 53,
      "context": "if (neg_roll == 0 || neg_roll == 1) {\n                extra_type = Extra::DISEASE; // Constipation (25% of this case)\n            } else if (neg_roll == 2 || neg_roll == 3) {\n                extra_type = Extra::VIAGRA; // Sticky bombs (25% of this case)\n            } else if (neg_roll == 4 || neg_roll == 5) {"
    },
    {
      "value": 4,
      "file": "src/MapTile.cpp",
      "line": 92,
      "column": 36,
      "context": "} else if (neg_roll == 2 || neg_roll == 3) {\n                extra_type = Extra::VIAGRA; // Sticky bombs (25% of this case)\n            } else if (neg_roll == 4 || neg_roll == 5) {\n                extra_type = Extra::KOKS; // Uncontrollable speed (25% of this case)\n            } else {"
    },
    {
      "value": 5,
      "file": "src/MapTile.cpp",
      "line": 92,
      "column": 53,
      "context": "} else if (neg_roll == 2 || neg_roll == 3) {\n                extra_type = Extra::VIAGRA; // Sticky bombs (25% of this case)\n            } else if (neg_roll == 4 || neg_roll == 5) {\n                extra_type = Extra::KOKS; // Uncontrollable speed (25% of this case)\n            } else {"
    },
    {
      "value": 5,
      "file": "src/MapTile.cpp",
      "line": 99,
      "column": 14,
      "context": "break;\n        }\n        case 5: // Skate (rare, 6.25% chance)\n            if (std::uniform_int_distribution<>(0, 1)(gen) == 0) {\n                extra_type = Extra::SKATE;"
    },
    {
      "value": 6,
      "file": "src/MapTile.cpp",
      "line": 106,
      "column": 14,
      "context": "}\n            break;\n        case 6:\n        case 7:\n        default:"
    },
    {
      "value": 7,
      "file": "src/MapTile.cpp",
      "line": 107,
      "column": 14,
      "context": "break;\n        case 6:\n        case 7:\n        default:\n            // Empty cases (25% chance total) - no extra spawned"
    },
    {
      "value": 7,
      "file": "src/TileEntity.cpp",
      "line": 116,
      "column": 50,
      "context": "std::random_device rd;\n    std::mt19937 gen(rd());\n    std::uniform_int_distribution<> main_dist(0, 7); // 8 main categories (0-7)\n    \n    int roll = main_dist(gen);"
    },
    {
      "value": 3,
      "file": "src/TileEntity.cpp",
      "line": 131,
      "column": 14,
      "context": "extra_type = Extra::SPEED;\n            break;\n        case 3: { // Special abilities (12.5% chance - kick or glove)\n            std::uniform_int_distribution<> special_dist(0, 1);\n            extra_type = (special_dist(gen) == 0) ? Extra::KICK : Extra::GLOVE;"
    },
    {
      "value": 4,
      "file": "src/TileEntity.cpp",
      "line": 136,
      "column": 14,
      "context": "break;\n        }\n        case 4: { // Negative effects (12.5% chance)\n            std::uniform_int_distribution<> negative_dist(0, 7);\n            int neg_roll = negative_dist(gen);"
    },
    {
      "value": 7,
      "file": "src/TileEntity.cpp",
      "line": 137,
      "column": 62,
      "context": "}\n        case 4: { // Negative effects (12.5% chance)\n            std::uniform_int_distribution<> negative_dist(0, 7);\n            int neg_roll = negative_dist(gen);\n            if (neg_roll == 0 || neg_roll == 1) {"
    },
    {
      "value": 3,
      "file": "src/TileEntity.cpp",
      "line": 141,
      "column": 53,
      "context": "if (neg_roll == 0 || neg_roll == 1) {\n                extra_type = Extra::DISEASE; // Constipation (25% of this case)\n            } else if (neg_roll == 2 || neg_roll == 3) {\n                extra_type = Extra::VIAGRA; // Sticky bombs (25% of this case)\n            } else if (neg_roll == 4 || neg_roll == 5) {"
    },
    {
      "value": 4,
      "file": "src/TileEntity.cpp",
      "line": 143,
      "column": 36,
      "context": "} else if (neg_roll == 2 || neg_roll == 3) {\n                extra_type = Extra::VIAGRA; // Sticky bombs (25% of this case)\n            } else if (neg_roll == 4 || neg_roll == 5) {\n                extra_type = Extra::KOKS; // Uncontrollable speed (25% of this case)\n            } else {"
    },
    {
      "value": 5,
      "file": "src/TileEntity.cpp",
      "line": 143,
      "column": 53,
      "context": "} else if (neg_roll == 2 || neg_roll == 3) {\n                extra_type = Extra::VIAGRA; // Sticky bombs (25% of this case)\n            } else if (neg_roll == 4 || neg_roll == 5) {\n                extra_type = Extra::KOKS; // Uncontrollable speed (25% of this case)\n            } else {"
    },
    {
      "value": 5,
      "file": "src/TileEntity.cpp",
      "line": 150,
      "column": 14,
      "context": "break;\n        }\n        case 5: // Skate (rare, 6.25% chance)\n            if (std::uniform_int_distribution<>(0, 1)(gen) == 0) {\n                extra_type = Extra::SKATE;"
    },
    {
      "value": 6,
      "file": "src/TileEntity.cpp",
      "line": 157,
      "column": 14,
      "context": "}\n            break;\n        case 6:\n        case 7:\n        default:"
    },
    {
      "value": 7,
      "file": "src/TileEntity.cpp",
      "line": 158,
      "column": 14,
      "context": "break;\n        case 6:\n        case 7:\n        default:\n            // Empty cases (25% chance total) - no extra spawned"
    },
    {
      "value": 4,
      "file": "src/TileEntity.cpp",
      "line": 199,
      "column": 29,
      "context": "if (gl_texture) {\n                float alpha = 1.0f - animation_progress;\n                float color[4] = {1.0f, 1.0f, 1.0f, alpha};\n                float scale[2] = {1.0f, 1.0f};"
    },
    {
      "value": 25,
      "file": "src/TileEntity.cpp",
      "line": 252,
      "column": 81,
      "context": "if (get_context()->get_renderer()) {\n                // Emit debris particles\n                get_context()->get_renderer()->emit_particles(get_x(), get_y(), 25, GPUAcceleratedRenderer::SPARK, nullptr, 1.0f);\n                get_context()->get_renderer()->emit_particles(get_x(), get_y(), 15, GPUAcceleratedRenderer::SMOKE, nullptr, 2.0f);"
    },
    {
      "value": 15,
      "file": "src/TileEntity.cpp",
      "line": 253,
      "column": 81,
      "context": "// Emit debris particles\n                get_context()->get_renderer()->emit_particles(get_x(), get_y(), 25, GPUAcceleratedRenderer::SPARK, nullptr, 1.0f);\n                get_context()->get_renderer()->emit_particles(get_x(), get_y(), 15, GPUAcceleratedRenderer::SMOKE, nullptr, 2.0f);\n                \n                SDL_Log(\"SPECTACULAR tile destruction effects at (%d,%d)!\", get_x(), get_y());"
    },
    {
      "value": 18,
      "file": "src/TileEntity.cpp",
      "line": 285,
      "column": 43,
      "context": "// Create realistic wood/debris fragments from destroyed box!\n                const int num_fragments = 18;  // More small pieces for realistic debris\n                for (int i = 0; i < num_fragments; i++) {\n                    // Much smaller, irregular fragment sizes (real debris pieces)"
    },
    {
      "value": 4,
      "file": "src/TileEntity.cpp",
      "line": 288,
      "column": 57,
      "context": "for (int i = 0; i < num_fragments; i++) {\n                    // Much smaller, irregular fragment sizes (real debris pieces)\n                    float fragment_scale = 0.15f + (i % 4) * 0.08f; // 0.15, 0.23, 0.31, 0.39 sizes\n                    fragment_scale *= (1.0f - animation_progress * 0.4f); // Slight shrinking"
    },
    {
      "value": 127,
      "file": "src/TileEntity.cpp",
      "line": 293,
      "column": 46,
      "context": "// REALISTIC EXPLOSION PHYSICS: Each fragment gets individual blast vector\n                    float base_angle = (float)i / num_fragments * 6.28318f;\n                    float blast_chaos = (i * 127 + 31) % 100 / 100.0f - 0.5f; // -0.5 to 0.5 chaos\n                    float angle = base_angle + blast_chaos * 1.2f; // More dramatic angle variation"
    },
    {
      "value": 31,
      "file": "src/TileEntity.cpp",
      "line": 293,
      "column": 52,
      "context": "// REALISTIC EXPLOSION PHYSICS: Each fragment gets individual blast vector\n                    float base_angle = (float)i / num_fragments * 6.28318f;\n                    float blast_chaos = (i * 127 + 31) % 100 / 100.0f - 0.5f; // -0.5 to 0.5 chaos\n                    float angle = base_angle + blast_chaos * 1.2f; // More dramatic angle variation"
    },
    {
      "value": 7,
      "file": "src/TileEntity.cpp",
      "line": 298,
      "column": 63,
      "context": "// Fragment mass affects how far it flies (heavier = shorter distance)\n                    float fragment_mass = fragment_scale * 2.0f + 0.5f; // Mass 0.8-1.3\n                    float base_explosion_force = 45.0f + (i % 7) * 10.0f; // 45-105 force range\n                    float explosion_force = base_explosion_force / fragment_mass; // F=ma physics"
    },
    {
      "value": 3,
      "file": "src/TileEntity.cpp",
      "line": 307,
      "column": 67,
      "context": "// Different fragment shapes using non-uniform scaling (base)\n                    float scale_x = fragment_scale * (0.8f + (i % 3) * 0.4f); // 0.8x to 2.0x width\n                    float scale_y = fragment_scale * (0.6f + ((i * 7) % 4) * 0.3f); // 0.6x to 1.8x height"
    },
    {
      "value": 7,
      "file": "src/TileEntity.cpp",
      "line": 308,
      "column": 68,
      "context": "// Different fragment shapes using non-uniform scaling (base)\n                    float scale_x = fragment_scale * (0.8f + (i % 3) * 0.4f); // 0.8x to 2.0x width\n                    float scale_y = fragment_scale * (0.6f + ((i * 7) % 4) * 0.3f); // 0.6x to 1.8x height\n                    \n                    // Position based on physics integration: x = x\u2080 + v\u2080t + \u00bdat\u00b2"
    },
    {
      "value": 4,
      "file": "src/TileEntity.cpp",
      "line": 308,
      "column": 73,
      "context": "// Different fragment shapes using non-uniform scaling (base)\n                    float scale_x = fragment_scale * (0.8f + (i % 3) * 0.4f); // 0.8x to 2.0x width\n                    float scale_y = fragment_scale * (0.6f + ((i * 7) % 4) * 0.3f); // 0.6x to 1.8x height\n                    \n                    // Position based on physics integration: x = x\u2080 + v\u2080t + \u00bdat\u00b2"
    },
    {
      "value": 6,
      "file": "src/TileEntity.cpp",
      "line": 316,
      "column": 61,
      "context": "// TOP-DOWN VIEW PHYSICS: Simulate 3D motion projected to 2D\n                    // Z-axis represents height above the ground (positive = higher)\n                    float initial_z_velocity = 25.0f + (i % 6) * 8.0f; // Initial upward velocity 25-65\n                    initial_z_velocity /= fragment_mass; // Lighter fragments fly higher"
    },
    {
      "value": 3,
      "file": "src/TileEntity.cpp",
      "line": 336,
      "column": 87,
      "context": "// Realistic alpha fade - complete fade to 0 at animation_progress = 1.0\n                    float fragment_alpha = (1.0f - animation_progress) * (0.7f + (i % 3) * 0.15f);\n                    \n                    // 3. Bounce when fragment hits ground (z \u2264 0)"
    },
    {
      "value": 73,
      "file": "src/TileEntity.cpp",
      "line": 354,
      "column": 54,
      "context": "// REALISTIC PHYSICS: Angular momentum from explosion impact!\n                    // Each fragment gets hit by explosion with different force and angle\n                    float impact_angle_offset = (i * 73) % 360; // Random impact angle per fragment\n                    float impact_force = 0.8f + (i % 5) * 0.4f; // Impact strength 0.8-2.0x"
    },
    {
      "value": 360,
      "file": "src/TileEntity.cpp",
      "line": 354,
      "column": 60,
      "context": "// REALISTIC PHYSICS: Angular momentum from explosion impact!\n                    // Each fragment gets hit by explosion with different force and angle\n                    float impact_angle_offset = (i * 73) % 360; // Random impact angle per fragment\n                    float impact_force = 0.8f + (i % 5) * 0.4f; // Impact strength 0.8-2.0x"
    },
    {
      "value": 5,
      "file": "src/TileEntity.cpp",
      "line": 355,
      "column": 54,
      "context": "// Each fragment gets hit by explosion with different force and angle\n                    float impact_angle_offset = (i * 73) % 360; // Random impact angle per fragment\n                    float impact_force = 0.8f + (i % 5) * 0.4f; // Impact strength 0.8-2.0x\n                    \n                    // Initial angular velocity depends on fragment size and impact"
    },
    {
      "value": 9,
      "file": "src/TileEntity.cpp",
      "line": 359,
      "column": 69,
      "context": "// Initial angular velocity depends on fragment size and impact\n                    float fragment_inertia = fragment_scale * fragment_scale; // Smaller = spins faster\n                    float initial_angular_velocity = (800.0f + (i % 9) * 300.0f) * impact_force / fragment_inertia;\n                    \n                    // Different spin directions based on impact vector"
    },
    {
      "value": 3,
      "file": "src/TileEntity.cpp",
      "line": 363,
      "column": 30,
      "context": "// Different spin directions based on impact vector\n                    float spin_direction = ((i % 2) == 0) ? 1.0f : -1.0f;\n                    if ((i % 3) == 0) spin_direction *= -1.0f; // More chaos\n                    initial_angular_velocity *= spin_direction;"
    },
    {
      "value": 3,
      "file": "src/TileEntity.cpp",
      "line": 386,
      "column": 36,
      "context": "EDGE_PLANK = 1,      // Side planks (medium tone)\n                        INNER_WOOD = 2,      // Fresh inner wood (lighter)\n                        SPLINTER = 3         // Small splinters (very light)\n                    };"
    },
    {
      "value": 4,
      "file": "src/TileEntity.cpp",
      "line": 389,
      "column": 65,
      "context": "};\n                    \n                    FragmentType frag_type = (FragmentType)(i % 4);\n                    \n                    // Realistic wood coloring based on fragment type"
    },
    {
      "value": 7,
      "file": "src/TileEntity.cpp",
      "line": 409,
      "column": 44,
      "context": "// Slight random variation (but keep colors bright)\n                    float color_var = (i % 7) * 0.05f - 0.025f; // -0.025 to +0.025\n                    \n                    float color[4] = {"
    },
    {
      "value": 4,
      "file": "src/TileEntity.cpp",
      "line": 411,
      "column": 33,
      "context": "float color_var = (i % 7) * 0.05f - 0.025f; // -0.025 to +0.025\n                    \n                    float color[4] = {\n                        std::min(1.0f, std::max(0.3f, base_r + color_var)),\n                        std::min(1.0f, std::max(0.3f, base_g + color_var)),"
    },
    {
      "value": 3,
      "file": "src/TileEntity.cpp",
      "line": 423,
      "column": 74,
      "context": "switch(frag_type) {\n                        case CORNER_PIECE:  fragment_size = 20.0f + (i % 2) * 8.0f; break; // 20-28px\n                        case EDGE_PLANK:    fragment_size = 16.0f + (i % 3) * 6.0f; break; // 16-28px  \n                        case INNER_WOOD:    fragment_size = 14.0f + (i % 2) * 4.0f; break; // 14-18px\n                        case SPLINTER:      fragment_size = 8.0f + (i % 3) * 4.0f; break;  // 8-16px"
    },
    {
      "value": 3,
      "file": "src/TileEntity.cpp",
      "line": 425,
      "column": 73,
      "context": "case EDGE_PLANK:    fragment_size = 16.0f + (i % 3) * 6.0f; break; // 16-28px  \n                        case INNER_WOOD:    fragment_size = 14.0f + (i % 2) * 4.0f; break; // 14-18px\n                        case SPLINTER:      fragment_size = 8.0f + (i % 3) * 4.0f; break;  // 8-16px\n                    }"
    },
    {
      "value": 3,
      "file": "src/Map.cpp",
      "line": 125,
      "column": 43,
      "context": "case 'R':\n                    // Random box\n                    tile_type = (rand() % 3) ? MapTile_Pure::BOX : MapTile_Pure::GROUND;\n                    break;\n                default:"
    },
    {
      "value": 17,
      "file": "src/Map.cpp",
      "line": 285,
      "column": 34,
      "context": "switch (nr) {\n        case 0: return CL_Vector(2, 2);\n        case 1: return CL_Vector(17, 2);\n        case 2: return CL_Vector(2, 12);\n        case 3: return CL_Vector(17, 12);"
    },
    {
      "value": 12,
      "file": "src/Map.cpp",
      "line": 286,
      "column": 37,
      "context": "case 0: return CL_Vector(2, 2);\n        case 1: return CL_Vector(17, 2);\n        case 2: return CL_Vector(2, 12);\n        case 3: return CL_Vector(17, 12);\n        case 4: return CL_Vector(9, 2);"
    },
    {
      "value": 3,
      "file": "src/Map.cpp",
      "line": 287,
      "column": 14,
      "context": "case 1: return CL_Vector(17, 2);\n        case 2: return CL_Vector(2, 12);\n        case 3: return CL_Vector(17, 12);\n        case 4: return CL_Vector(9, 2);\n        case 5: return CL_Vector(9, 12);"
    },
    {
      "value": 17,
      "file": "src/Map.cpp",
      "line": 287,
      "column": 34,
      "context": "case 1: return CL_Vector(17, 2);\n        case 2: return CL_Vector(2, 12);\n        case 3: return CL_Vector(17, 12);\n        case 4: return CL_Vector(9, 2);\n        case 5: return CL_Vector(9, 12);"
    },
    {
      "value": 12,
      "file": "src/Map.cpp",
      "line": 287,
      "column": 38,
      "context": "case 1: return CL_Vector(17, 2);\n        case 2: return CL_Vector(2, 12);\n        case 3: return CL_Vector(17, 12);\n        case 4: return CL_Vector(9, 2);\n        case 5: return CL_Vector(9, 12);"
    },
    {
      "value": 4,
      "file": "src/Map.cpp",
      "line": 288,
      "column": 14,
      "context": "case 2: return CL_Vector(2, 12);\n        case 3: return CL_Vector(17, 12);\n        case 4: return CL_Vector(9, 2);\n        case 5: return CL_Vector(9, 12);\n        case 6: return CL_Vector(2, 7);"
    },
    {
      "value": 9,
      "file": "src/Map.cpp",
      "line": 288,
      "column": 34,
      "context": "case 2: return CL_Vector(2, 12);\n        case 3: return CL_Vector(17, 12);\n        case 4: return CL_Vector(9, 2);\n        case 5: return CL_Vector(9, 12);\n        case 6: return CL_Vector(2, 7);"
    },
    {
      "value": 5,
      "file": "src/Map.cpp",
      "line": 289,
      "column": 14,
      "context": "case 3: return CL_Vector(17, 12);\n        case 4: return CL_Vector(9, 2);\n        case 5: return CL_Vector(9, 12);\n        case 6: return CL_Vector(2, 7);\n        case 7: return CL_Vector(17, 7);"
    },
    {
      "value": 9,
      "file": "src/Map.cpp",
      "line": 289,
      "column": 34,
      "context": "case 3: return CL_Vector(17, 12);\n        case 4: return CL_Vector(9, 2);\n        case 5: return CL_Vector(9, 12);\n        case 6: return CL_Vector(2, 7);\n        case 7: return CL_Vector(17, 7);"
    },
    {
      "value": 12,
      "file": "src/Map.cpp",
      "line": 289,
      "column": 37,
      "context": "case 3: return CL_Vector(17, 12);\n        case 4: return CL_Vector(9, 2);\n        case 5: return CL_Vector(9, 12);\n        case 6: return CL_Vector(2, 7);\n        case 7: return CL_Vector(17, 7);"
    },
    {
      "value": 6,
      "file": "src/Map.cpp",
      "line": 290,
      "column": 14,
      "context": "case 4: return CL_Vector(9, 2);\n        case 5: return CL_Vector(9, 12);\n        case 6: return CL_Vector(2, 7);\n        case 7: return CL_Vector(17, 7);\n        default: return CL_Vector(2, 2);"
    },
    {
      "value": 7,
      "file": "src/Map.cpp",
      "line": 290,
      "column": 37,
      "context": "case 4: return CL_Vector(9, 2);\n        case 5: return CL_Vector(9, 12);\n        case 6: return CL_Vector(2, 7);\n        case 7: return CL_Vector(17, 7);\n        default: return CL_Vector(2, 2);"
    },
    {
      "value": 7,
      "file": "src/Map.cpp",
      "line": 291,
      "column": 14,
      "context": "case 5: return CL_Vector(9, 12);\n        case 6: return CL_Vector(2, 7);\n        case 7: return CL_Vector(17, 7);\n        default: return CL_Vector(2, 2);\n    }"
    },
    {
      "value": 17,
      "file": "src/Map.cpp",
      "line": 291,
      "column": 34,
      "context": "case 5: return CL_Vector(9, 12);\n        case 6: return CL_Vector(2, 7);\n        case 7: return CL_Vector(17, 7);\n        default: return CL_Vector(2, 2);\n    }"
    },
    {
      "value": 7,
      "file": "src/Map.cpp",
      "line": 291,
      "column": 38,
      "context": "case 5: return CL_Vector(9, 12);\n        case 6: return CL_Vector(2, 7);\n        case 7: return CL_Vector(17, 7);\n        default: return CL_Vector(2, 2);\n    }"
    },
    {
      "value": 20,
      "file": "src/TileManager.cpp",
      "line": 364,
      "column": 5,
      "context": "bool TileManager::is_valid_position(int map_x, int map_y) const {\n    // Debug assertions for development builds\n    assert(MAP_WIDTH > 0 && MAP_HEIGHT > 0);\n    assert(map_x >= -1000 && map_x <= 1000); // Sanity check for extreme values\n    assert(map_y >= -1000 && map_y <= 1000);"
    },
    {
      "value": 15,
      "file": "src/TileManager.cpp",
      "line": 364,
      "column": 5,
      "context": "bool TileManager::is_valid_position(int map_x, int map_y) const {\n    // Debug assertions for development builds\n    assert(MAP_WIDTH > 0 && MAP_HEIGHT > 0);\n    assert(map_x >= -1000 && map_x <= 1000); // Sanity check for extreme values\n    assert(map_y >= -1000 && map_y <= 1000);"
    },
    {
      "value": 80,
      "file": "src/BomberComponents.cpp",
      "line": 226,
      "column": 26,
      "context": "// Calculate throw target based on direction\n    int throw_distance = 80; // 2 tiles\n    int target_x = owner->get_x();\n    int target_y = owner->get_y();"
    },
    {
      "value": 30,
      "file": "src/BomberComponents.cpp",
      "line": 354,
      "column": 39,
      "context": "case DIR_DOWN:  base_sprite = 0; break;  // Down-facing sprites: 0-1\n        case DIR_LEFT:  base_sprite = 10; break;  // Left-facing sprites: 2-3  \n        case DIR_RIGHT: base_sprite = 30; break;  // Right-facing sprites: 4-5\n        case DIR_UP:    base_sprite = 20; break;  // Up-facing sprites: 6-7\n    }"
    },
    {
      "value": 20,
      "file": "src/BomberComponents.cpp",
      "line": 355,
      "column": 39,
      "context": "case DIR_LEFT:  base_sprite = 10; break;  // Left-facing sprites: 2-3  \n        case DIR_RIGHT: base_sprite = 30; break;  // Right-facing sprites: 4-5\n        case DIR_UP:    base_sprite = 20; break;  // Up-facing sprites: 6-7\n    }"
    },
    {
      "value": 30,
      "file": "src/BomberComponents.cpp",
      "line": 387,
      "column": 39,
      "context": "case DIR_DOWN:  base_sprite = 0; break;   // Down-facing sprites: 0-9\n        case DIR_LEFT:  base_sprite = 10; break;  // Left-facing sprites: 10-19  \n        case DIR_RIGHT: base_sprite = 30; break;  // Right-facing sprites: 30-39\n        case DIR_UP:    base_sprite = 20; break;  // Up-facing sprites: 20-29\n    }"
    },
    {
      "value": 20,
      "file": "src/BomberComponents.cpp",
      "line": 388,
      "column": 39,
      "context": "case DIR_LEFT:  base_sprite = 10; break;  // Left-facing sprites: 10-19  \n        case DIR_RIGHT: base_sprite = 30; break;  // Right-facing sprites: 30-39\n        case DIR_UP:    base_sprite = 20; break;  // Up-facing sprites: 20-29\n    }"
    },
    {
      "value": 3,
      "file": "src/BomberComponents.cpp",
      "line": 410,
      "column": 14,
      "context": "case 1: owner->set_texture_name(\"bomber_dull_blue\"); break;\n        case 2: owner->set_texture_name(\"bomber_dull_yellow\"); break;\n        case 3: owner->set_texture_name(\"bomber_dull_green\"); break;\n        case 4: owner->set_texture_name(\"bomber_snake\"); break;\n        case 5: owner->set_texture_name(\"bomber_tux\"); break;"
    },
    {
      "value": 4,
      "file": "src/BomberComponents.cpp",
      "line": 411,
      "column": 14,
      "context": "case 2: owner->set_texture_name(\"bomber_dull_yellow\"); break;\n        case 3: owner->set_texture_name(\"bomber_dull_green\"); break;\n        case 4: owner->set_texture_name(\"bomber_snake\"); break;\n        case 5: owner->set_texture_name(\"bomber_tux\"); break;\n        case 6: owner->set_texture_name(\"bomber_spider\"); break;"
    },
    {
      "value": 5,
      "file": "src/BomberComponents.cpp",
      "line": 412,
      "column": 14,
      "context": "case 3: owner->set_texture_name(\"bomber_dull_green\"); break;\n        case 4: owner->set_texture_name(\"bomber_snake\"); break;\n        case 5: owner->set_texture_name(\"bomber_tux\"); break;\n        case 6: owner->set_texture_name(\"bomber_spider\"); break;\n        case 7: owner->set_texture_name(\"bomber_bsd\"); break;"
    },
    {
      "value": 6,
      "file": "src/BomberComponents.cpp",
      "line": 413,
      "column": 14,
      "context": "case 4: owner->set_texture_name(\"bomber_snake\"); break;\n        case 5: owner->set_texture_name(\"bomber_tux\"); break;\n        case 6: owner->set_texture_name(\"bomber_spider\"); break;\n        case 7: owner->set_texture_name(\"bomber_bsd\"); break;\n        default: owner->set_texture_name(\"bomber_snake\"); break;"
    },
    {
      "value": 7,
      "file": "src/BomberComponents.cpp",
      "line": 414,
      "column": 14,
      "context": "case 5: owner->set_texture_name(\"bomber_tux\"); break;\n        case 6: owner->set_texture_name(\"bomber_spider\"); break;\n        case 7: owner->set_texture_name(\"bomber_bsd\"); break;\n        default: owner->set_texture_name(\"bomber_snake\"); break;\n    }"
    },
    {
      "value": 5,
      "file": "src/SpatialPartitioning.cpp",
      "line": 271,
      "column": 48,
      "context": "if (!cell || cell->object_count() == 0) {\n                output << '.';\n            } else if (cell->object_count() <= 5) {\n                output << '#';\n            } else {"
    },
    {
      "value": 240,
      "file": "src/GameObject.cpp",
      "line": 82,
      "column": 10,
      "context": "delete_me = false;\n\tremainder =0;\n\tspeed = 240;\n\t\n\tcur_dir = DIR_NONE;"
    },
    {
      "value": 5,
      "file": "src/GameObject.cpp",
      "line": 520,
      "column": 54,
      "context": "float time_step = time_span;\n\tint steps = 1;\n\twhile( abs((int)(time_step*fly_speed*fly_dist_x)) > 5  ||  abs((int)(time_step*fly_speed*fly_dist_y)) > 5 ) {\n\t\ttime_step /= 2.0f;\n\t\tsteps *= 2;"
    },
    {
      "value": 5,
      "file": "src/GameObject.cpp",
      "line": 520,
      "column": 106,
      "context": "float time_step = time_span;\n\tint steps = 1;\n\twhile( abs((int)(time_step*fly_speed*fly_dist_x)) > 5  ||  abs((int)(time_step*fly_speed*fly_dist_y)) > 5 ) {\n\t\ttime_step /= 2.0f;\n\t\tsteps *= 2;"
    },
    {
      "value": 39,
      "file": "src/GameObject.cpp",
      "line": 545,
      "column": 24,
      "context": "if (!can_fly_over_walls  &&  map != nullptr  &&  (\n\t\t\t\tget_tile_type_at(x, y) == MapTile::WALL ||\n\t\t\t\tget_tile_type_at(x+39, y) == MapTile::WALL ||\n\t\t\t\tget_tile_type_at(x, y+39) == MapTile::WALL ||\n\t\t\t\tget_tile_type_at(x+39, y+39) == MapTile::WALL ))"
    },
    {
      "value": 39,
      "file": "src/GameObject.cpp",
      "line": 546,
      "column": 27,
      "context": "get_tile_type_at(x, y) == MapTile::WALL ||\n\t\t\t\tget_tile_type_at(x+39, y) == MapTile::WALL ||\n\t\t\t\tget_tile_type_at(x, y+39) == MapTile::WALL ||\n\t\t\t\tget_tile_type_at(x+39, y+39) == MapTile::WALL )) \n\t\t\t{"
    },
    {
      "value": 39,
      "file": "src/GameObject.cpp",
      "line": 547,
      "column": 24,
      "context": "get_tile_type_at(x+39, y) == MapTile::WALL ||\n\t\t\t\tget_tile_type_at(x, y+39) == MapTile::WALL ||\n\t\t\t\tget_tile_type_at(x+39, y+39) == MapTile::WALL )) \n\t\t\t{\n\t\t\t\tx -= time_step * fly_speed * fly_dist_x;"
    },
    {
      "value": 39,
      "file": "src/GameObject.cpp",
      "line": 547,
      "column": 30,
      "context": "get_tile_type_at(x+39, y) == MapTile::WALL ||\n\t\t\t\tget_tile_type_at(x, y+39) == MapTile::WALL ||\n\t\t\t\tget_tile_type_at(x+39, y+39) == MapTile::WALL )) \n\t\t\t{\n\t\t\t\tx -= time_step * fly_speed * fly_dist_x;"
    },
    {
      "value": 60,
      "file": "src/GameObject.cpp",
      "line": 589,
      "column": 31,
      "context": "void GameObject::continue_falling(float deltaTime)\n{\n\tspeed = (int)(fall_countdown*60);\n\tfall_countdown -= deltaTime;\n\tif (fall_countdown < 0) {"
    },
    {
      "value": 255,
      "file": "src/GameObject.cpp",
      "line": 595,
      "column": 44,
      "context": "fall_countdown = 0;\n\t}\n\topacity_scaled = (Uint8)(fall_countdown * 255);\n}"
    },
    {
      "value": 50,
      "file": "src/Explosion.cpp",
      "line": 41,
      "column": 58,
      "context": "// Emit spectacular particles\n            gpu_renderer->emit_particles(_x, _y, power * 50, GPUAcceleratedRenderer::FIRE, nullptr, 2.0f);\n            gpu_renderer->emit_particles(_x, _y, power * 30, GPUAcceleratedRenderer::SPARK, nullptr, 1.5f);\n            gpu_renderer->emit_particles(_x, _y, power * 20, GPUAcceleratedRenderer::SMOKE, nullptr, 3.0f);"
    },
    {
      "value": 30,
      "file": "src/Explosion.cpp",
      "line": 42,
      "column": 58,
      "context": "// Emit spectacular particles\n            gpu_renderer->emit_particles(_x, _y, power * 50, GPUAcceleratedRenderer::FIRE, nullptr, 2.0f);\n            gpu_renderer->emit_particles(_x, _y, power * 30, GPUAcceleratedRenderer::SPARK, nullptr, 1.5f);\n            gpu_renderer->emit_particles(_x, _y, power * 20, GPUAcceleratedRenderer::SMOKE, nullptr, 3.0f);"
    },
    {
      "value": 20,
      "file": "src/Explosion.cpp",
      "line": 43,
      "column": 58,
      "context": "gpu_renderer->emit_particles(_x, _y, power * 50, GPUAcceleratedRenderer::FIRE, nullptr, 2.0f);\n            gpu_renderer->emit_particles(_x, _y, power * 30, GPUAcceleratedRenderer::SPARK, nullptr, 1.5f);\n            gpu_renderer->emit_particles(_x, _y, power * 20, GPUAcceleratedRenderer::SMOKE, nullptr, 3.0f);\n            \n            SDL_Log(\"SPECTACULAR explosion effects activated at (%d,%d) with power %d!\", _x, _y, power);"
    },
    {
      "value": 4,
      "file": "src/Explosion.cpp",
      "line": 209,
      "column": 23,
      "context": "float tile_size = static_cast<float>(TILE_SIZE);\n    float white_color[4] = {1.0f, 1.0f, 1.0f, 1.0f};\n    float scale[2] = {1.0f, 1.0f};"
    },
    {
      "value": 4,
      "file": "src/Explosion.cpp",
      "line": 232,
      "column": 35,
      "context": "if (white_texture == 0) {\n        // Create a 1x1 white pixel texture\n        unsigned char white_pixel[4] = {255, 255, 255, 255};\n        \n        glGenTextures(1, &white_texture);"
    },
    {
      "value": 255,
      "file": "src/Explosion.cpp",
      "line": 232,
      "column": 41,
      "context": "if (white_texture == 0) {\n        // Create a 1x1 white pixel texture\n        unsigned char white_pixel[4] = {255, 255, 255, 255};\n        \n        glGenTextures(1, &white_texture);"
    },
    {
      "value": 255,
      "file": "src/Explosion.cpp",
      "line": 232,
      "column": 46,
      "context": "if (white_texture == 0) {\n        // Create a 1x1 white pixel texture\n        unsigned char white_pixel[4] = {255, 255, 255, 255};\n        \n        glGenTextures(1, &white_texture);"
    },
    {
      "value": 255,
      "file": "src/Explosion.cpp",
      "line": 232,
      "column": 51,
      "context": "if (white_texture == 0) {\n        // Create a 1x1 white pixel texture\n        unsigned char white_pixel[4] = {255, 255, 255, 255};\n        \n        glGenTextures(1, &white_texture);"
    },
    {
      "value": 255,
      "file": "src/Explosion.cpp",
      "line": 232,
      "column": 56,
      "context": "if (white_texture == 0) {\n        // Create a 1x1 white pixel texture\n        unsigned char white_pixel[4] = {255, 255, 255, 255};\n        \n        glGenTextures(1, &white_texture);"
    },
    {
      "value": 4,
      "file": "src/Explosion.cpp",
      "line": 291,
      "column": 31,
      "context": "GLuint dummy_texture = get_dummy_white_texture();\n            float white_color[4] = {1.0f, 1.0f, 1.0f, 1.0f};\n            float scale[2] = {1.0f, 1.0f};"
    },
    {
      "value": 125,
      "file": "src/Resources.cpp",
      "line": 34,
      "column": 67,
      "context": "textures[\"titlescreen\"] = load_texture(\"data/pics/clanbomber_title_andi.png\");\n    textures[\"fl_logo\"] = load_texture(\"data/pics/fischlustig_logo.png\");\n    textures[\"ps_teams\"] = load_texture(\"data/pics/ps_teams.png\", 125, 56);\n    textures[\"ps_controls\"] = load_texture(\"data/pics/ps_controls.png\", 125, 56);\n    textures[\"ps_teamlamps\"] = load_texture(\"data/pics/ps_teamlamps.png\", 30, 32);"
    },
    {
      "value": 56,
      "file": "src/Resources.cpp",
      "line": 34,
      "column": 72,
      "context": "textures[\"titlescreen\"] = load_texture(\"data/pics/clanbomber_title_andi.png\");\n    textures[\"fl_logo\"] = load_texture(\"data/pics/fischlustig_logo.png\");\n    textures[\"ps_teams\"] = load_texture(\"data/pics/ps_teams.png\", 125, 56);\n    textures[\"ps_controls\"] = load_texture(\"data/pics/ps_controls.png\", 125, 56);\n    textures[\"ps_teamlamps\"] = load_texture(\"data/pics/ps_teamlamps.png\", 30, 32);"
    },
    {
      "value": 125,
      "file": "src/Resources.cpp",
      "line": 35,
      "column": 73,
      "context": "textures[\"fl_logo\"] = load_texture(\"data/pics/fischlustig_logo.png\");\n    textures[\"ps_teams\"] = load_texture(\"data/pics/ps_teams.png\", 125, 56);\n    textures[\"ps_controls\"] = load_texture(\"data/pics/ps_controls.png\", 125, 56);\n    textures[\"ps_teamlamps\"] = load_texture(\"data/pics/ps_teamlamps.png\", 30, 32);\n    textures[\"playersetup_background\"] = load_texture(\"data/pics/playersetup.png\");"
    },
    {
      "value": 56,
      "file": "src/Resources.cpp",
      "line": 35,
      "column": 78,
      "context": "textures[\"fl_logo\"] = load_texture(\"data/pics/fischlustig_logo.png\");\n    textures[\"ps_teams\"] = load_texture(\"data/pics/ps_teams.png\", 125, 56);\n    textures[\"ps_controls\"] = load_texture(\"data/pics/ps_controls.png\", 125, 56);\n    textures[\"ps_teamlamps\"] = load_texture(\"data/pics/ps_teamlamps.png\", 30, 32);\n    textures[\"playersetup_background\"] = load_texture(\"data/pics/playersetup.png\");"
    },
    {
      "value": 30,
      "file": "src/Resources.cpp",
      "line": 36,
      "column": 75,
      "context": "textures[\"ps_teams\"] = load_texture(\"data/pics/ps_teams.png\", 125, 56);\n    textures[\"ps_controls\"] = load_texture(\"data/pics/ps_controls.png\", 125, 56);\n    textures[\"ps_teamlamps\"] = load_texture(\"data/pics/ps_teamlamps.png\", 30, 32);\n    textures[\"playersetup_background\"] = load_texture(\"data/pics/playersetup.png\");\n    textures[\"mapselector_background\"] = load_texture(\"data/pics/level_selection.png\");"
    },
    {
      "value": 32,
      "file": "src/Resources.cpp",
      "line": 36,
      "column": 79,
      "context": "textures[\"ps_teams\"] = load_texture(\"data/pics/ps_teams.png\", 125, 56);\n    textures[\"ps_controls\"] = load_texture(\"data/pics/ps_controls.png\", 125, 56);\n    textures[\"ps_teamlamps\"] = load_texture(\"data/pics/ps_teamlamps.png\", 30, 32);\n    textures[\"playersetup_background\"] = load_texture(\"data/pics/playersetup.png\");\n    textures[\"mapselector_background\"] = load_texture(\"data/pics/level_selection.png\");"
    },
    {
      "value": 40,
      "file": "src/Resources.cpp",
      "line": 43,
      "column": 75,
      "context": "textures[\"gamestatus_background\"] = load_texture(\"data/pics/game_status.png\");\n    textures[\"horst_evil\"] = load_texture(\"data/pics/horst_evil.png\");\n    textures[\"bomber_snake\"] = load_texture(\"data/pics/bomber_snake.png\", 40, 60);\n    textures[\"bomber_tux\"] = load_texture(\"data/pics/bomber_tux.png\", 40, 60);\n    textures[\"bomber_spider\"] = load_texture(\"data/pics/bomber_spider.png\", TILE_SIZE, TILE_SIZE);"
    },
    {
      "value": 60,
      "file": "src/Resources.cpp",
      "line": 43,
      "column": 79,
      "context": "textures[\"gamestatus_background\"] = load_texture(\"data/pics/game_status.png\");\n    textures[\"horst_evil\"] = load_texture(\"data/pics/horst_evil.png\");\n    textures[\"bomber_snake\"] = load_texture(\"data/pics/bomber_snake.png\", 40, 60);\n    textures[\"bomber_tux\"] = load_texture(\"data/pics/bomber_tux.png\", 40, 60);\n    textures[\"bomber_spider\"] = load_texture(\"data/pics/bomber_spider.png\", TILE_SIZE, TILE_SIZE);"
    },
    {
      "value": 40,
      "file": "src/Resources.cpp",
      "line": 44,
      "column": 71,
      "context": "textures[\"horst_evil\"] = load_texture(\"data/pics/horst_evil.png\");\n    textures[\"bomber_snake\"] = load_texture(\"data/pics/bomber_snake.png\", 40, 60);\n    textures[\"bomber_tux\"] = load_texture(\"data/pics/bomber_tux.png\", 40, 60);\n    textures[\"bomber_spider\"] = load_texture(\"data/pics/bomber_spider.png\", TILE_SIZE, TILE_SIZE);\n    textures[\"bomber_bsd\"] = load_texture(\"data/pics/bomber_bsd.png\", TILE_SIZE, 60);"
    },
    {
      "value": 60,
      "file": "src/Resources.cpp",
      "line": 44,
      "column": 75,
      "context": "textures[\"horst_evil\"] = load_texture(\"data/pics/horst_evil.png\");\n    textures[\"bomber_snake\"] = load_texture(\"data/pics/bomber_snake.png\", 40, 60);\n    textures[\"bomber_tux\"] = load_texture(\"data/pics/bomber_tux.png\", 40, 60);\n    textures[\"bomber_spider\"] = load_texture(\"data/pics/bomber_spider.png\", TILE_SIZE, TILE_SIZE);\n    textures[\"bomber_bsd\"] = load_texture(\"data/pics/bomber_bsd.png\", TILE_SIZE, 60);"
    },
    {
      "value": 60,
      "file": "src/Resources.cpp",
      "line": 46,
      "column": 82,
      "context": "textures[\"bomber_tux\"] = load_texture(\"data/pics/bomber_tux.png\", 40, 60);\n    textures[\"bomber_spider\"] = load_texture(\"data/pics/bomber_spider.png\", TILE_SIZE, TILE_SIZE);\n    textures[\"bomber_bsd\"] = load_texture(\"data/pics/bomber_bsd.png\", TILE_SIZE, 60);\n    textures[\"bomber_dull_red\"] = load_texture(\"data/pics/bomber_dull_red.png\", TILE_SIZE, TILE_SIZE);\n    textures[\"bomber_dull_blue\"] = load_texture(\"data/pics/bomber_dull_blue.png\", TILE_SIZE, TILE_SIZE);"
    },
    {
      "value": 25,
      "file": "src/Controller_AI_Modern.cpp",
      "line": 305,
      "column": 99,
      "context": "// Use AI target scanning to get all relevant objects efficiently\n        CollisionHelper::AITargets ai_targets = collision_helper.scan_ai_targets(bomber_position, 25); // Full map scan\n        \n        // Process bombs"
    },
    {
      "value": 25,
      "file": "src/Controller_AI_Modern.cpp",
      "line": 327,
      "column": 126,
      "context": "// Process explosions - need to get them separately since AITargets doesn't include explosions\n        PixelCoord center_position(bomber->get_x(), bomber->get_y());\n        std::vector<GameObject*> explosions = spatial_grid->get_objects_of_type_near(center_position, GameObject::EXPLOSION, 25);\n        for (GameObject* obj : explosions) {\n            if (obj) {"
    },
    {
      "value": 5,
      "file": "src/Controller_AI_Modern.cpp",
      "line": 446,
      "column": 36,
      "context": "// Priority 4: Look for bombing opportunities (only if safe)\n    if (find_bombing_opportunities(5)) {\n        return;\n    }"
    },
    {
      "value": 3,
      "file": "src/Controller_AI_Modern.cpp",
      "line": 451,
      "column": 33,
      "context": "// Priority 5: Default movement if nothing else to do\n    if (find_way(0, RATING_HOT, 3)) {\n        return;\n    }"
    },
    {
      "value": 8,
      "file": "src/Controller_AI_Modern.cpp",
      "line": 471,
      "column": 30,
      "context": "// Try emergency escape\n        if (!find_way(0, -1, 8)) {\n            // If not possible, find moderately safe area\n            if (!find_way(0, RATING_HOT, 5)) {"
    },
    {
      "value": 5,
      "file": "src/Controller_AI_Modern.cpp",
      "line": 473,
      "column": 42,
      "context": "if (!find_way(0, -1, 8)) {\n            // If not possible, find moderately safe area\n            if (!find_way(0, RATING_HOT, 5)) {\n                // Last resort: any non-death area\n                find_way(0, RATING_X, 3);"
    },
    {
      "value": 3,
      "file": "src/Controller_AI_Modern.cpp",
      "line": 475,
      "column": 39,
      "context": "if (!find_way(0, RATING_HOT, 5)) {\n                // Last resort: any non-death area\n                find_way(0, RATING_X, 3);\n            }\n        }"
    },
    {
      "value": 4,
      "file": "src/Controller_AI_Modern.cpp",
      "line": 484,
      "column": 33,
      "context": "if (count_nearby_threats(x, y) >= 2) {\n        // Move to safer area\n        find_way(0, RATING_HOT, 4);\n        return true;\n    }"
    },
    {
      "value": 4,
      "file": "src/Controller_AI_Modern.cpp",
      "line": 560,
      "column": 34,
      "context": "// Randomize direction order for variety\n            for (int i = 0; i < 10; i++) {\n                int a = rand() % 4;\n                int b = rand() % 4;\n                std::swap(directions[a], directions[b]);"
    },
    {
      "value": 4,
      "file": "src/Controller_AI_Modern.cpp",
      "line": 561,
      "column": 34,
      "context": "for (int i = 0; i < 10; i++) {\n                int a = rand() % 4;\n                int b = rand() % 4;\n                std::swap(directions[a], directions[b]);\n            }"
    },
    {
      "value": 4,
      "file": "src/Controller_AI_Modern.cpp",
      "line": 725,
      "column": 29,
      "context": "// Check all 4 directions for escape routes\n    for (int dir = 0; dir < 4; dir++) {\n        int dx = 0, dy = 0;\n        switch (dir) {"
    },
    {
      "value": 3,
      "file": "src/Controller_AI_Modern.cpp",
      "line": 731,
      "column": 18,
      "context": "case 1: dx = 1; break;  // RIGHT\n            case 2: dy = 1; break;  // DOWN  \n            case 3: dx = -1; break; // LEFT\n        }"
    },
    {
      "value": 4,
      "file": "src/Controller_AI_Modern.cpp",
      "line": 775,
      "column": 29,
      "context": "// Check all 4 directions for destructible targets\n    for (int dir = 0; dir < 4; dir++) {\n        int dx = 0, dy = 0;\n        switch (dir) {"
    },
    {
      "value": 3,
      "file": "src/Controller_AI_Modern.cpp",
      "line": 781,
      "column": 18,
      "context": "case 1: dx = 1; break;  // RIGHT\n            case 2: dy = 1; break;  // DOWN  \n            case 3: dx = -1; break; // LEFT\n        }"
    },
    {
      "value": 5,
      "file": "src/Controller_AI_Modern.cpp",
      "line": 801,
      "column": 73,
      "context": "// Only bomb if we get some benefit and it matches our aggression level\n    int min_benefit = (personality == ModernAIPersonality::NIGHTMARE) ? 5 :\n                     (personality == ModernAIPersonality::HARD) ? 8 :\n                     (personality == ModernAIPersonality::NORMAL) ? 10 : 15;"
    },
    {
      "value": 8,
      "file": "src/Controller_AI_Modern.cpp",
      "line": 802,
      "column": 67,
      "context": "// Only bomb if we get some benefit and it matches our aggression level\n    int min_benefit = (personality == ModernAIPersonality::NIGHTMARE) ? 5 :\n                     (personality == ModernAIPersonality::HARD) ? 8 :\n                     (personality == ModernAIPersonality::NORMAL) ? 10 : 15;"
    },
    {
      "value": 15,
      "file": "src/Controller_AI_Modern.cpp",
      "line": 803,
      "column": 74,
      "context": "int min_benefit = (personality == ModernAIPersonality::NIGHTMARE) ? 5 :\n                     (personality == ModernAIPersonality::HARD) ? 8 :\n                     (personality == ModernAIPersonality::NORMAL) ? 10 : 15;\n    \n    return benefit_score >= min_benefit;"
    },
    {
      "value": 25,
      "file": "src/Controller_AI_Modern.cpp",
      "line": 854,
      "column": 92,
      "context": "// Get all bombs in the entire game area (large radius)\n        std::vector<GameObject*> all_bombs = spatial_grid->get_bombs_near(bomber_position, 25); // 25 tile radius covers whole map\n        count = all_bombs.size();\n    } else {"
    },
    {
      "value": 3,
      "file": "src/Controller_AI_Modern.cpp",
      "line": 875,
      "column": 53,
      "context": "case ModernAIPersonality::NORMAL: return 2;\n        case ModernAIPersonality::HARD: return 2;\n        case ModernAIPersonality::NIGHTMARE: return 3;\n    }\n    return 1; // Safe default"
    },
    {
      "value": 50,
      "file": "src/Controller_AI_Modern.cpp",
      "line": 934,
      "column": 29,
      "context": "if (is_death(nx, ny) || is_hotspot(nx, ny)) {\n            safety_score -= 50; // Penalty for dangerous areas\n            break;\n        }"
    },
    {
      "value": 50,
      "file": "src/Controller_AI_Modern.cpp",
      "line": 946,
      "column": 29,
      "context": "// Extra bonus for getting completely out of bomb range\n        if (dist > power) {\n            safety_score += 50;\n        }\n    }"
    },
    {
      "value": 3,
      "file": "src/Controller_AI_Modern.cpp",
      "line": 955,
      "column": 17,
      "context": "int Controller_AI_Modern::count_nearby_threats(int x, int y) const {\n    int threat_count = 0;\n    int range = 3; // Check in 3x3 area around position\n    \n    for (int dy = -range; dy <= range; dy++) {"
    },
    {
      "value": 20,
      "file": "src/Controller_AI_Smart.cpp",
      "line": 264,
      "column": 46,
      "context": "CL_Vector next_step = path[1]; // path[0] is current position\n                \n                if (next_step.x > my_pos.x + 20) current_input.right = true;\n                else if (next_step.x < my_pos.x - 20) current_input.left = true;\n                if (next_step.y > my_pos.y + 20) current_input.down = true;"
    },
    {
      "value": 20,
      "file": "src/Controller_AI_Smart.cpp",
      "line": 265,
      "column": 51,
      "context": "if (next_step.x > my_pos.x + 20) current_input.right = true;\n                else if (next_step.x < my_pos.x - 20) current_input.left = true;\n                if (next_step.y > my_pos.y + 20) current_input.down = true;\n                else if (next_step.y < my_pos.y - 20) current_input.up = true;"
    },
    {
      "value": 20,
      "file": "src/Controller_AI_Smart.cpp",
      "line": 266,
      "column": 46,
      "context": "if (next_step.x > my_pos.x + 20) current_input.right = true;\n                else if (next_step.x < my_pos.x - 20) current_input.left = true;\n                if (next_step.y > my_pos.y + 20) current_input.down = true;\n                else if (next_step.y < my_pos.y - 20) current_input.up = true;\n            }"
    },
    {
      "value": 20,
      "file": "src/Controller_AI_Smart.cpp",
      "line": 267,
      "column": 51,
      "context": "else if (next_step.x < my_pos.x - 20) current_input.left = true;\n                if (next_step.y > my_pos.y + 20) current_input.down = true;\n                else if (next_step.y < my_pos.y - 20) current_input.up = true;\n            }\n            break;"
    },
    {
      "value": 20,
      "file": "src/Controller_AI_Smart.cpp",
      "line": 279,
      "column": 46,
      "context": "CL_Vector next_step = path[1];\n                \n                if (next_step.x > my_pos.x + 20) current_input.right = true;\n                else if (next_step.x < my_pos.x - 20) current_input.left = true;\n                if (next_step.y > my_pos.y + 20) current_input.down = true;"
    },
    {
      "value": 20,
      "file": "src/Controller_AI_Smart.cpp",
      "line": 280,
      "column": 51,
      "context": "if (next_step.x > my_pos.x + 20) current_input.right = true;\n                else if (next_step.x < my_pos.x - 20) current_input.left = true;\n                if (next_step.y > my_pos.y + 20) current_input.down = true;\n                else if (next_step.y < my_pos.y - 20) current_input.up = true;"
    },
    {
      "value": 20,
      "file": "src/Controller_AI_Smart.cpp",
      "line": 281,
      "column": 46,
      "context": "if (next_step.x > my_pos.x + 20) current_input.right = true;\n                else if (next_step.x < my_pos.x - 20) current_input.left = true;\n                if (next_step.y > my_pos.y + 20) current_input.down = true;\n                else if (next_step.y < my_pos.y - 20) current_input.up = true;\n            }"
    },
    {
      "value": 20,
      "file": "src/Controller_AI_Smart.cpp",
      "line": 282,
      "column": 51,
      "context": "else if (next_step.x < my_pos.x - 20) current_input.left = true;\n                if (next_step.y > my_pos.y + 20) current_input.down = true;\n                else if (next_step.y < my_pos.y - 20) current_input.up = true;\n            }"
    },
    {
      "value": 4,
      "file": "src/Controller_AI_Smart.cpp",
      "line": 316,
      "column": 42,
      "context": "if (explore_timer > 1.0f || stuck_timer > 2.0f) {\n                // Choose random direction\n                int direction = rand() % 4;\n                switch (direction) {\n                    case 0: current_input.up = true; break;"
    },
    {
      "value": 3,
      "file": "src/Controller_AI_Smart.cpp",
      "line": 321,
      "column": 26,
      "context": "case 1: current_input.down = true; break;\n                    case 2: current_input.left = true; break;\n                    case 3: current_input.right = true; break;\n                }\n                explore_timer = 0.0f;"
    },
    {
      "value": 5,
      "file": "src/Controller_AI_Smart.cpp",
      "line": 426,
      "column": 88,
      "context": "// Check bombs within 200 pixels (5 tiles)\n        std::vector<GameObject*> nearby_bombs = spatial_grid->get_bombs_near(position, 5);\n        for (GameObject* obj : nearby_bombs) {\n            if (obj) {"
    },
    {
      "value": 8,
      "file": "src/Controller_AI_Smart.cpp",
      "line": 495,
      "column": 36,
      "context": "// Search in expanding radius for safe position\n    for (int radius = 1; radius <= 8; radius++) {\n        for (int dx = -radius; dx <= radius; dx++) {\n            for (int dy = -radius; dy <= radius; dy++) {"
    },
    {
      "value": 30,
      "file": "src/Controller_AI_Smart.cpp",
      "line": 677,
      "column": 53,
      "context": "}\n        }\n        return (rand() % 100) < (aggression_level * 30); // Random strategic bombing\n    }"
    }
  ],
  "dead_code": [
    {
      "type": "unreachable_function",
      "name": "init",
      "file": "src/Timer.cpp",
      "line": 8
    },
    {
      "type": "unreachable_function",
      "name": "tick",
      "file": "src/Timer.cpp",
      "line": 13
    },
    {
      "type": "unreachable_function",
      "name": "time_elapsed",
      "file": "src/Timer.cpp",
      "line": 19
    },
    {
      "type": "unreachable_function",
      "name": "handle_events",
      "file": "src/SettingsScreen.cpp",
      "line": 18
    },
    {
      "type": "unreachable_function",
      "name": "update",
      "file": "src/SettingsScreen.cpp",
      "line": 49
    },
    {
      "type": "unreachable_function",
      "name": "render",
      "file": "src/SettingsScreen.cpp",
      "line": 52
    },
    {
      "type": "unreachable_function",
      "name": "get_next_state",
      "file": "src/SettingsScreen.cpp",
      "line": 108
    },
    {
      "type": "unreachable_function",
      "name": "render_player_setup",
      "file": "src/SettingsScreen.cpp",
      "line": 112
    },
    {
      "type": "unreachable_function",
      "name": "render_game_options",
      "file": "src/SettingsScreen.cpp",
      "line": 160
    },
    {
      "type": "unreachable_function",
      "name": "handle_player_setup_input",
      "file": "src/SettingsScreen.cpp",
      "line": 199
    },
    {
      "type": "unreachable_function",
      "name": "get_controller_name",
      "file": "src/SettingsScreen.cpp",
      "line": 222
    },
    {
      "type": "unreachable_function",
      "name": "get_team_name",
      "file": "src/SettingsScreen.cpp",
      "line": 231
    },
    {
      "type": "unreachable_function",
      "name": "load",
      "file": "src/MapEntry.cpp",
      "line": 44
    },
    {
      "type": "unreachable_function",
      "name": "get_data",
      "file": "src/MapEntry.cpp",
      "line": 85
    },
    {
      "type": "unreachable_function",
      "name": "read_bomber_positions",
      "file": "src/MapEntry.cpp",
      "line": 92
    },
    {
      "type": "unreachable_function",
      "name": "get_bomber_pos",
      "file": "src/MapEntry.cpp",
      "line": 118
    },
    {
      "type": "unreachable_function",
      "name": "update_keyboard_state",
      "file": "src/Controller_Keyboard.cpp",
      "line": 42
    },
    {
      "type": "unreachable_function",
      "name": "reset",
      "file": "src/Controller_Keyboard.cpp",
      "line": 51
    },
    {
      "type": "unreachable_function",
      "name": "is_left",
      "file": "src/Controller_Keyboard.cpp",
      "line": 54
    },
    {
      "type": "unreachable_function",
      "name": "is_right",
      "file": "src/Controller_Keyboard.cpp",
      "line": 58
    },
    {
      "type": "unreachable_function",
      "name": "is_up",
      "file": "src/Controller_Keyboard.cpp",
      "line": 62
    },
    {
      "type": "unreachable_function",
      "name": "is_down",
      "file": "src/Controller_Keyboard.cpp",
      "line": 66
    },
    {
      "type": "unreachable_function",
      "name": "is_bomb",
      "file": "src/Controller_Keyboard.cpp",
      "line": 70
    },
    {
      "type": "unreachable_function",
      "name": "calculate_distance",
      "file": "src/AudioMixer.cpp",
      "line": 14
    },
    {
      "type": "unreachable_function",
      "name": "calculate_stereo_pan",
      "file": "src/AudioMixer.cpp",
      "line": 21
    },
    {
      "type": "unreachable_function",
      "name": "shutdown",
      "file": "src/AudioMixer.cpp",
      "line": 55
    },
    {
      "type": "unreachable_function",
      "name": "load_sound",
      "file": "src/AudioMixer.cpp",
      "line": 70
    },
    {
      "type": "unreachable_function",
      "name": "add_sound",
      "file": "src/AudioMixer.cpp",
      "line": 106
    },
    {
      "type": "unreachable_function",
      "name": "play_sound",
      "file": "src/AudioMixer.cpp",
      "line": 112
    },
    {
      "type": "unreachable_function",
      "name": "play_sound_3d",
      "file": "src/AudioMixer.cpp",
      "line": 116
    },
    {
      "type": "unreachable_function",
      "name": "set_listener_position",
      "file": "src/AudioMixer.cpp",
      "line": 164
    },
    {
      "type": "unreachable_function",
      "name": "audio_callback",
      "file": "src/AudioMixer.cpp",
      "line": 168
    },
    {
      "type": "unreachable_function",
      "name": "create",
      "file": "src/MapTile_Pure.cpp",
      "line": 25
    },
    {
      "type": "unreachable_function",
      "name": "on_destruction_request",
      "file": "src/MapTile_Pure.cpp",
      "line": 66
    },
    {
      "type": "unreachable_function",
      "name": "update_all_systems",
      "file": "src/GameSystems.cpp",
      "line": 19
    },
    {
      "type": "unreachable_function",
      "name": "render_all_systems",
      "file": "src/GameSystems.cpp",
      "line": 46
    },
    {
      "type": "unreachable_function",
      "name": "update_input_system",
      "file": "src/GameSystems.cpp",
      "line": 52
    },
    {
      "type": "unreachable_function",
      "name": "update_physics_system",
      "file": "src/GameSystems.cpp",
      "line": 56
    },
    {
      "type": "unreachable_function",
      "name": "update_ai_system",
      "file": "src/GameSystems.cpp",
      "line": 67
    },
    {
      "type": "unreachable_function",
      "name": "update_collision_system",
      "file": "src/GameSystems.cpp",
      "line": 78
    },
    {
      "type": "unreachable_function",
      "name": "update_animation_system",
      "file": "src/GameSystems.cpp",
      "line": 82
    },
    {
      "type": "unreachable_function",
      "name": "render_world",
      "file": "src/GameSystems.cpp",
      "line": 86
    },
    {
      "type": "unreachable_function",
      "name": "render_effects",
      "file": "src/GameSystems.cpp",
      "line": 90
    },
    {
      "type": "unreachable_function",
      "name": "render_ui",
      "file": "src/GameSystems.cpp",
      "line": 94
    },
    {
      "type": "unreachable_function",
      "name": "set_object_references",
      "file": "src/GameSystems.cpp",
      "line": 98
    },
    {
      "type": "unreachable_function",
      "name": "init_all_systems",
      "file": "src/GameSystems.cpp",
      "line": 105
    },
    {
      "type": "unreachable_function",
      "name": "register_object",
      "file": "src/GameSystems.cpp",
      "line": 121
    },
    {
      "type": "unreachable_function",
      "name": "register_bomber",
      "file": "src/GameSystems.cpp",
      "line": 128
    },
    {
      "type": "unreachable_function",
      "name": "cleanup_destroyed_objects",
      "file": "src/GameSystems.cpp",
      "line": 135
    },
    {
      "type": "unreachable_function",
      "name": "act",
      "file": "src/ParticleSystem.cpp",
      "line": 49
    },
    {
      "type": "unreachable_function",
      "name": "show",
      "file": "src/ParticleSystem.cpp",
      "line": 82
    },
    {
      "type": "unreachable_function",
      "name": "update_particles",
      "file": "src/ParticleSystem.cpp",
      "line": 86
    },
    {
      "type": "unreachable_function",
      "name": "render_particles",
      "file": "src/ParticleSystem.cpp",
      "line": 122
    },
    {
      "type": "unreachable_function",
      "name": "create_particle",
      "file": "src/ParticleSystem.cpp",
      "line": 126
    },
    {
      "type": "unreachable_function",
      "name": "emit_explosion_sparks",
      "file": "src/ParticleSystem.cpp",
      "line": 148
    },
    {
      "type": "unreachable_function",
      "name": "emit_dust_cloud",
      "file": "src/ParticleSystem.cpp",
      "line": 170
    },
    {
      "type": "unreachable_function",
      "name": "emit_fire_particles",
      "file": "src/ParticleSystem.cpp",
      "line": 203
    },
    {
      "type": "unreachable_function",
      "name": "emit_smoke_trail",
      "file": "src/ParticleSystem.cpp",
      "line": 238
    },
    {
      "type": "unreachable_function",
      "name": "destroy",
      "file": "src/MapTile_Box.cpp",
      "line": 242
    },
    {
      "type": "unreachable_function",
      "name": "apply_force",
      "file": "src/CorpsePart.cpp",
      "line": 158
    },
    {
      "type": "unreachable_function",
      "name": "apply_drag",
      "file": "src/CorpsePart.cpp",
      "line": 164
    },
    {
      "type": "unreachable_function",
      "name": "apply_gravity",
      "file": "src/CorpsePart.cpp",
      "line": 179
    },
    {
      "type": "unreachable_function",
      "name": "handle_collisions",
      "file": "src/CorpsePart.cpp",
      "line": 185
    },
    {
      "type": "unreachable_function",
      "name": "update_blood_trail",
      "file": "src/CorpsePart.cpp",
      "line": 227
    },
    {
      "type": "unreachable_function",
      "name": "emit_blood",
      "file": "src/CorpsePart.cpp",
      "line": 244
    },
    {
      "type": "unreachable_function",
      "name": "render_blood_trails",
      "file": "src/CorpsePart.cpp",
      "line": 262
    },
    {
      "type": "unreachable_function",
      "name": "get_part_mass",
      "file": "src/CorpsePart.cpp",
      "line": 268
    },
    {
      "type": "unreachable_function",
      "name": "get_part_surface_area",
      "file": "src/CorpsePart.cpp",
      "line": 279
    },
    {
      "type": "unreachable_function",
      "name": "explode",
      "file": "src/BomberCorpse.cpp",
      "line": 68
    },
    {
      "type": "unreachable_function",
      "name": "create_gore_explosion",
      "file": "src/BomberCorpse.cpp",
      "line": 79
    },
    {
      "type": "unreachable_function",
      "name": "handle_error",
      "file": "src/ErrorHandling.cpp",
      "line": 6
    },
    {
      "type": "unreachable_function",
      "name": "register_error_handler",
      "file": "src/ErrorHandling.cpp",
      "line": 34
    },
    {
      "type": "unreachable_function",
      "name": "get_error_statistics",
      "file": "src/ErrorHandling.cpp",
      "line": 45
    },
    {
      "type": "unreachable_function",
      "name": "clear_error_statistics",
      "file": "src/ErrorHandling.cpp",
      "line": 73
    },
    {
      "type": "unreachable_function",
      "name": "log_error",
      "file": "src/ErrorHandling.cpp",
      "line": 78
    },
    {
      "type": "unreachable_function",
      "name": "get_default_strategy",
      "file": "src/ErrorHandling.cpp",
      "line": 119
    },
    {
      "type": "unreachable_function",
      "name": "update_frame",
      "file": "src/GameLogic.cpp",
      "line": 16
    },
    {
      "type": "unreachable_function",
      "name": "update_all_objects",
      "file": "src/GameLogic.cpp",
      "line": 36
    },
    {
      "type": "unreachable_function",
      "name": "render_all_objects",
      "file": "src/GameLogic.cpp",
      "line": 55
    },
    {
      "type": "unreachable_function",
      "name": "cleanup_deleted_objects",
      "file": "src/GameLogic.cpp",
      "line": 82
    },
    {
      "type": "unreachable_function",
      "name": "find_object_by_id",
      "file": "src/GameLogic.cpp",
      "line": 89
    },
    {
      "type": "unreachable_function",
      "name": "find_bomber_by_id",
      "file": "src/GameLogic.cpp",
      "line": 96
    },
    {
      "type": "unreachable_function",
      "name": "count_active_objects",
      "file": "src/GameLogic.cpp",
      "line": 103
    },
    {
      "type": "unreachable_function",
      "name": "clear_all_objects",
      "file": "src/GameLogic.cpp",
      "line": 114
    },
    {
      "type": "unreachable_function",
      "name": "reset_game_state",
      "file": "src/GameLogic.cpp",
      "line": 121
    },
    {
      "type": "unreachable_function",
      "name": "get_game_statistics",
      "file": "src/GameLogic.cpp",
      "line": 132
    },
    {
      "type": "unreachable_function",
      "name": "log_frame_statistics",
      "file": "src/GameLogic.cpp",
      "line": 166
    },
    {
      "type": "unreachable_function",
      "name": "should_skip_object_update",
      "file": "src/GameLogic.cpp",
      "line": 178
    },
    {
      "type": "unreachable_function",
      "name": "initialize",
      "file": "src/GPUAcceleratedRenderer.cpp",
      "line": 36
    },
    {
      "type": "unreachable_function",
      "name": "load_all_shaders",
      "file": "src/GPUAcceleratedRenderer.cpp",
      "line": 211
    },
    {
      "type": "unreachable_function",
      "name": "compile_shader",
      "file": "src/GPUAcceleratedRenderer.cpp",
      "line": 325
    },
    {
      "type": "unreachable_function",
      "name": "create_program",
      "file": "src/GPUAcceleratedRenderer.cpp",
      "line": 344
    },
    {
      "type": "unreachable_function",
      "name": "create_compute_program",
      "file": "src/GPUAcceleratedRenderer.cpp",
      "line": 372
    },
    {
      "type": "unreachable_function",
      "name": "setup_matrices",
      "file": "src/GPUAcceleratedRenderer.cpp",
      "line": 391
    },
    {
      "type": "unreachable_function",
      "name": "setup_sprite_rendering",
      "file": "src/GPUAcceleratedRenderer.cpp",
      "line": 408
    },
    {
      "type": "unreachable_function",
      "name": "init_particle_system",
      "file": "src/GPUAcceleratedRenderer.cpp",
      "line": 480
    },
    {
      "type": "unreachable_function",
      "name": "begin_frame",
      "file": "src/GPUAcceleratedRenderer.cpp",
      "line": 520
    },
    {
      "type": "unreachable_function",
      "name": "end_frame",
      "file": "src/GPUAcceleratedRenderer.cpp",
      "line": 536
    },
    {
      "type": "unreachable_function",
      "name": "present",
      "file": "src/GPUAcceleratedRenderer.cpp",
      "line": 545
    },
    {
      "type": "unreachable_function",
      "name": "check_gl_error",
      "file": "src/GPUAcceleratedRenderer.cpp",
      "line": 550
    },
    {
      "type": "unreachable_function",
      "name": "preprocess_shader_includes",
      "file": "src/GPUAcceleratedRenderer.cpp",
      "line": 566
    },
    {
      "type": "unreachable_function",
      "name": "begin_batch",
      "file": "src/GPUAcceleratedRenderer.cpp",
      "line": 616
    },
    {
      "type": "unreachable_function",
      "name": "flush_batch",
      "file": "src/GPUAcceleratedRenderer.cpp",
      "line": 623
    },
    {
      "type": "unreachable_function",
      "name": "update_uniforms",
      "file": "src/GPUAcceleratedRenderer.cpp",
      "line": 762
    },
    {
      "type": "unreachable_function",
      "name": "add_sprite",
      "file": "src/GPUAcceleratedRenderer.cpp",
      "line": 847
    },
    {
      "type": "unreachable_function",
      "name": "add_animated_sprite",
      "file": "src/GPUAcceleratedRenderer.cpp",
      "line": 852
    },
    {
      "type": "unreachable_function",
      "name": "end_batch",
      "file": "src/GPUAcceleratedRenderer.cpp",
      "line": 933
    },
    {
      "type": "unreachable_function",
      "name": "update_particles_gpu",
      "file": "src/GPUAcceleratedRenderer.cpp",
      "line": 937
    },
    {
      "type": "unreachable_function",
      "name": "emit_particles",
      "file": "src/GPUAcceleratedRenderer.cpp",
      "line": 997
    },
    {
      "type": "unreachable_function",
      "name": "set_camera",
      "file": "src/GPUAcceleratedRenderer.cpp",
      "line": 1089
    },
    {
      "type": "unreachable_function",
      "name": "set_global_effect_params",
      "file": "src/GPUAcceleratedRenderer.cpp",
      "line": 1102
    },
    {
      "type": "unreachable_function",
      "name": "create_texture_from_surface",
      "file": "src/GPUAcceleratedRenderer.cpp",
      "line": 1108
    },
    {
      "type": "unreachable_function",
      "name": "print_performance_stats",
      "file": "src/GPUAcceleratedRenderer.cpp",
      "line": 1127
    },
    {
      "type": "unreachable_function",
      "name": "register_texture_metadata",
      "file": "src/GPUAcceleratedRenderer.cpp",
      "line": 1136
    },
    {
      "type": "unreachable_function",
      "name": "calculate_sprite_uv",
      "file": "src/GPUAcceleratedRenderer.cpp",
      "line": 1148
    },
    {
      "type": "unreachable_function",
      "name": "set_explosion_effect",
      "file": "src/GPUAcceleratedRenderer.cpp",
      "line": 1183
    },
    {
      "type": "unreachable_function",
      "name": "set_vortex_effect",
      "file": "src/GPUAcceleratedRenderer.cpp",
      "line": 1190
    },
    {
      "type": "unreachable_function",
      "name": "set_environmental_effects",
      "file": "src/GPUAcceleratedRenderer.cpp",
      "line": 1197
    },
    {
      "type": "unreachable_function",
      "name": "clear_effects",
      "file": "src/GPUAcceleratedRenderer.cpp",
      "line": 1207
    },
    {
      "type": "unreachable_function",
      "name": "set_explosion_info",
      "file": "src/GPUAcceleratedRenderer.cpp",
      "line": 1217
    },
    {
      "type": "unreachable_function",
      "name": "clear_explosion_info",
      "file": "src/GPUAcceleratedRenderer.cpp",
      "line": 1232
    },
    {
      "type": "unreachable_function",
      "name": "initialize_game_context",
      "file": "src/ClanBomber.cpp",
      "line": 65
    },
    {
      "type": "unreachable_function",
      "name": "is_server",
      "file": "src/ClanBomber.cpp",
      "line": 98
    },
    {
      "type": "unreachable_function",
      "name": "is_client",
      "file": "src/ClanBomber.cpp",
      "line": 102
    },
    {
      "type": "unreachable_function",
      "name": "get_server",
      "file": "src/ClanBomber.cpp",
      "line": 106
    },
    {
      "type": "unreachable_function",
      "name": "get_client",
      "file": "src/ClanBomber.cpp",
      "line": 110
    },
    {
      "type": "unreachable_function",
      "name": "get_server_setup",
      "file": "src/ClanBomber.cpp",
      "line": 114
    },
    {
      "type": "unreachable_function",
      "name": "get_client_setup",
      "file": "src/ClanBomber.cpp",
      "line": 118
    },
    {
      "type": "unreachable_function",
      "name": "get_chat",
      "file": "src/ClanBomber.cpp",
      "line": 122
    },
    {
      "type": "unreachable_function",
      "name": "get_menu",
      "file": "src/ClanBomber.cpp",
      "line": 126
    },
    {
      "type": "unreachable_function",
      "name": "get_next_object_id",
      "file": "src/ClanBomber.cpp",
      "line": 130
    },
    {
      "type": "unreachable_function",
      "name": "get_map_path",
      "file": "src/ClanBomber.cpp",
      "line": 135
    },
    {
      "type": "unreachable_function",
      "name": "get_local_map_path",
      "file": "src/ClanBomber.cpp",
      "line": 139
    },
    {
      "type": "unreachable_function",
      "name": "lock",
      "file": "src/ClanBomber.cpp",
      "line": 143
    },
    {
      "type": "unreachable_function",
      "name": "unlock",
      "file": "src/ClanBomber.cpp",
      "line": 147
    },
    {
      "type": "unreachable_function",
      "name": "wait",
      "file": "src/ClanBomber.cpp",
      "line": 151
    },
    {
      "type": "unreachable_function",
      "name": "signal",
      "file": "src/ClanBomber.cpp",
      "line": 155
    },
    {
      "type": "unreachable_function",
      "name": "delete_all_game_objects",
      "file": "src/ClanBomber.cpp",
      "line": 159
    },
    {
      "type": "unreachable_function",
      "name": "get_object_by_id",
      "file": "src/ClanBomber.cpp",
      "line": 171
    },
    {
      "type": "unreachable_function",
      "name": "get_server_frame_counter",
      "file": "src/ClanBomber.cpp",
      "line": 180
    },
    {
      "type": "unreachable_function",
      "name": "inc_server_frame_counter",
      "file": "src/ClanBomber.cpp",
      "line": 184
    },
    {
      "type": "unreachable_function",
      "name": "paused_game",
      "file": "src/ClanBomber.cpp",
      "line": 188
    },
    {
      "type": "unreachable_function",
      "name": "set_pause_game",
      "file": "src/ClanBomber.cpp",
      "line": 192
    },
    {
      "type": "unreachable_function",
      "name": "set_client_disconnected_from_server",
      "file": "src/ClanBomber.cpp",
      "line": 196
    },
    {
      "type": "unreachable_function",
      "name": "is_client_disconnected_from_server",
      "file": "src/ClanBomber.cpp",
      "line": 200
    },
    {
      "type": "unreachable_function",
      "name": "set_client_connecting_to_new_server",
      "file": "src/ClanBomber.cpp",
      "line": 204
    },
    {
      "type": "unreachable_function",
      "name": "is_client_connecting_to_new_server",
      "file": "src/ClanBomber.cpp",
      "line": 208
    },
    {
      "type": "unreachable_function",
      "name": "get_map",
      "file": "src/ClanBomber.cpp",
      "line": 212
    },
    {
      "type": "unreachable_function",
      "name": "request_effect",
      "file": "src/ParticleEffectsManager.cpp",
      "line": 18
    },
    {
      "type": "unreachable_function",
      "name": "create_box_destruction_effect",
      "file": "src/ParticleEffectsManager.cpp",
      "line": 41
    },
    {
      "type": "unreachable_function",
      "name": "create_explosion_effect",
      "file": "src/ParticleEffectsManager.cpp",
      "line": 45
    },
    {
      "type": "unreachable_function",
      "name": "process_box_destruction",
      "file": "src/ParticleEffectsManager.cpp",
      "line": 49
    },
    {
      "type": "unreachable_function",
      "name": "process_explosion",
      "file": "src/ParticleEffectsManager.cpp",
      "line": 68
    },
    {
      "type": "unreachable_function",
      "name": "load_font",
      "file": "src/TextRenderer.cpp",
      "line": 49
    },
    {
      "type": "unreachable_function",
      "name": "get_font",
      "file": "src/TextRenderer.cpp",
      "line": 61
    },
    {
      "type": "unreachable_function",
      "name": "create_gl_texture_from_surface",
      "file": "src/TextRenderer.cpp",
      "line": 69
    },
    {
      "type": "unreachable_function",
      "name": "make_cache_key",
      "file": "src/TextRenderer.cpp",
      "line": 95
    },
    {
      "type": "unreachable_function",
      "name": "render_text",
      "file": "src/TextRenderer.cpp",
      "line": 101
    },
    {
      "type": "unreachable_function",
      "name": "draw_text",
      "file": "src/TextRenderer.cpp",
      "line": 147
    },
    {
      "type": "unreachable_function",
      "name": "draw_text_centered",
      "file": "src/TextRenderer.cpp",
      "line": 163
    },
    {
      "type": "unreachable_function",
      "name": "attach",
      "file": "src/Controller.cpp",
      "line": 36
    },
    {
      "type": "unreachable_function",
      "name": "activate",
      "file": "src/Controller.cpp",
      "line": 41
    },
    {
      "type": "unreachable_function",
      "name": "deactivate",
      "file": "src/Controller.cpp",
      "line": 46
    },
    {
      "type": "unreachable_function",
      "name": "revert",
      "file": "src/Controller.cpp",
      "line": 51
    },
    {
      "type": "unreachable_function",
      "name": "bomb_normal",
      "file": "src/Controller.cpp",
      "line": 56
    },
    {
      "type": "unreachable_function",
      "name": "bomb_always",
      "file": "src/Controller.cpp",
      "line": 61
    },
    {
      "type": "unreachable_function",
      "name": "get_type",
      "file": "src/Controller.cpp",
      "line": 107
    },
    {
      "type": "unreachable_function",
      "name": "run",
      "file": "src/Game.cpp",
      "line": 154
    },
    {
      "type": "unreachable_function",
      "name": "change_screen",
      "file": "src/Game.cpp",
      "line": 222
    },
    {
      "type": "unreachable_function",
      "name": "set_name",
      "file": "src/GameConfig.cpp",
      "line": 100
    },
    {
      "type": "unreachable_function",
      "name": "get_name",
      "file": "src/GameConfig.cpp",
      "line": 107
    },
    {
      "type": "unreachable_function",
      "name": "set_skin",
      "file": "src/GameConfig.cpp",
      "line": 112
    },
    {
      "type": "unreachable_function",
      "name": "get_skin",
      "file": "src/GameConfig.cpp",
      "line": 117
    },
    {
      "type": "unreachable_function",
      "name": "set_team",
      "file": "src/GameConfig.cpp",
      "line": 122
    },
    {
      "type": "unreachable_function",
      "name": "get_team",
      "file": "src/GameConfig.cpp",
      "line": 127
    },
    {
      "type": "unreachable_function",
      "name": "set_controller",
      "file": "src/GameConfig.cpp",
      "line": 132
    },
    {
      "type": "unreachable_function",
      "name": "get_controller",
      "file": "src/GameConfig.cpp",
      "line": 137
    },
    {
      "type": "unreachable_function",
      "name": "enable",
      "file": "src/GameConfig.cpp",
      "line": 142
    },
    {
      "type": "unreachable_function",
      "name": "disable",
      "file": "src/GameConfig.cpp",
      "line": 147
    },
    {
      "type": "unreachable_function",
      "name": "set_highlight_maptile",
      "file": "src/GameConfig.cpp",
      "line": 152
    },
    {
      "type": "unreachable_function",
      "name": "get_highlight_maptile",
      "file": "src/GameConfig.cpp",
      "line": 157
    },
    {
      "type": "unreachable_function",
      "name": "is_enabled",
      "file": "src/GameConfig.cpp",
      "line": 162
    },
    {
      "type": "unreachable_function",
      "name": "set_enabled",
      "file": "src/GameConfig.cpp",
      "line": 167
    },
    {
      "type": "unreachable_function",
      "name": "set_client_index",
      "file": "src/GameConfig.cpp",
      "line": 172
    },
    {
      "type": "unreachable_function",
      "name": "get_client_index",
      "file": "src/GameConfig.cpp",
      "line": 177
    },
    {
      "type": "unreachable_function",
      "name": "get_config_index",
      "file": "src/GameConfig.cpp",
      "line": 182
    },
    {
      "type": "unreachable_function",
      "name": "set_config_index",
      "file": "src/GameConfig.cpp",
      "line": 187
    },
    {
      "type": "unreachable_function",
      "name": "get_client_ip",
      "file": "src/GameConfig.cpp",
      "line": 192
    },
    {
      "type": "unreachable_function",
      "name": "set_client_ip",
      "file": "src/GameConfig.cpp",
      "line": 197
    },
    {
      "type": "unreachable_function",
      "name": "get_number_of_players",
      "file": "src/GameConfig.cpp",
      "line": 202
    },
    {
      "type": "unreachable_function",
      "name": "get_number_of_opponents",
      "file": "src/GameConfig.cpp",
      "line": 215
    },
    {
      "type": "unreachable_function",
      "name": "set_round_time",
      "file": "src/GameConfig.cpp",
      "line": 237
    },
    {
      "type": "unreachable_function",
      "name": "set_random_map_order",
      "file": "src/GameConfig.cpp",
      "line": 242
    },
    {
      "type": "unreachable_function",
      "name": "set_max_skateboards",
      "file": "src/GameConfig.cpp",
      "line": 247
    },
    {
      "type": "unreachable_function",
      "name": "set_max_power",
      "file": "src/GameConfig.cpp",
      "line": 252
    },
    {
      "type": "unreachable_function",
      "name": "set_max_bombs",
      "file": "src/GameConfig.cpp",
      "line": 257
    },
    {
      "type": "unreachable_function",
      "name": "set_start_skateboards",
      "file": "src/GameConfig.cpp",
      "line": 262
    },
    {
      "type": "unreachable_function",
      "name": "set_start_power",
      "file": "src/GameConfig.cpp",
      "line": 267
    },
    {
      "type": "unreachable_function",
      "name": "set_start_bombs",
      "file": "src/GameConfig.cpp",
      "line": 272
    },
    {
      "type": "unreachable_function",
      "name": "set_start_kick",
      "file": "src/GameConfig.cpp",
      "line": 277
    },
    {
      "type": "unreachable_function",
      "name": "set_start_glove",
      "file": "src/GameConfig.cpp",
      "line": 282
    },
    {
      "type": "unreachable_function",
      "name": "set_skateboards",
      "file": "src/GameConfig.cpp",
      "line": 287
    },
    {
      "type": "unreachable_function",
      "name": "set_power",
      "file": "src/GameConfig.cpp",
      "line": 292
    },
    {
      "type": "unreachable_function",
      "name": "set_bombs",
      "file": "src/GameConfig.cpp",
      "line": 297
    },
    {
      "type": "unreachable_function",
      "name": "set_kick",
      "file": "src/GameConfig.cpp",
      "line": 302
    },
    {
      "type": "unreachable_function",
      "name": "set_glove",
      "file": "src/GameConfig.cpp",
      "line": 307
    },
    {
      "type": "unreachable_function",
      "name": "set_joint",
      "file": "src/GameConfig.cpp",
      "line": 312
    },
    {
      "type": "unreachable_function",
      "name": "set_viagra",
      "file": "src/GameConfig.cpp",
      "line": 317
    },
    {
      "type": "unreachable_function",
      "name": "set_koks",
      "file": "src/GameConfig.cpp",
      "line": 322
    },
    {
      "type": "unreachable_function",
      "name": "set_start_map",
      "file": "src/GameConfig.cpp",
      "line": 327
    },
    {
      "type": "unreachable_function",
      "name": "set_points_to_win",
      "file": "src/GameConfig.cpp",
      "line": 332
    },
    {
      "type": "unreachable_function",
      "name": "set_theme",
      "file": "src/GameConfig.cpp",
      "line": 337
    },
    {
      "type": "unreachable_function",
      "name": "set_filename",
      "file": "src/GameConfig.cpp",
      "line": 342
    },
    {
      "type": "unreachable_function",
      "name": "set_path",
      "file": "src/GameConfig.cpp",
      "line": 347
    },
    {
      "type": "unreachable_function",
      "name": "set_music",
      "file": "src/GameConfig.cpp",
      "line": 352
    },
    {
      "type": "unreachable_function",
      "name": "set_kids_mode",
      "file": "src/GameConfig.cpp",
      "line": 357
    },
    {
      "type": "unreachable_function",
      "name": "set_corpse_parts",
      "file": "src/GameConfig.cpp",
      "line": 362
    },
    {
      "type": "unreachable_function",
      "name": "set_shaky_explosions",
      "file": "src/GameConfig.cpp",
      "line": 367
    },
    {
      "type": "unreachable_function",
      "name": "set_highlight_maptiles",
      "file": "src/GameConfig.cpp",
      "line": 372
    },
    {
      "type": "unreachable_function",
      "name": "set_random_positions",
      "file": "src/GameConfig.cpp",
      "line": 377
    },
    {
      "type": "unreachable_function",
      "name": "set_bomb_countdown",
      "file": "src/GameConfig.cpp",
      "line": 383
    },
    {
      "type": "unreachable_function",
      "name": "set_bomb_delay",
      "file": "src/GameConfig.cpp",
      "line": 388
    },
    {
      "type": "unreachable_function",
      "name": "set_bomb_speed",
      "file": "src/GameConfig.cpp",
      "line": 393
    },
    {
      "type": "unreachable_function",
      "name": "get_max_skateboards",
      "file": "src/GameConfig.cpp",
      "line": 398
    },
    {
      "type": "unreachable_function",
      "name": "get_max_power",
      "file": "src/GameConfig.cpp",
      "line": 403
    },
    {
      "type": "unreachable_function",
      "name": "get_max_bombs",
      "file": "src/GameConfig.cpp",
      "line": 408
    },
    {
      "type": "unreachable_function",
      "name": "get_start_skateboards",
      "file": "src/GameConfig.cpp",
      "line": 413
    },
    {
      "type": "unreachable_function",
      "name": "get_start_power",
      "file": "src/GameConfig.cpp",
      "line": 418
    },
    {
      "type": "unreachable_function",
      "name": "get_start_bombs",
      "file": "src/GameConfig.cpp",
      "line": 423
    },
    {
      "type": "unreachable_function",
      "name": "get_start_kick",
      "file": "src/GameConfig.cpp",
      "line": 428
    },
    {
      "type": "unreachable_function",
      "name": "get_start_glove",
      "file": "src/GameConfig.cpp",
      "line": 433
    },
    {
      "type": "unreachable_function",
      "name": "get_skateboards",
      "file": "src/GameConfig.cpp",
      "line": 438
    },
    {
      "type": "unreachable_function",
      "name": "get_power",
      "file": "src/GameConfig.cpp",
      "line": 443
    },
    {
      "type": "unreachable_function",
      "name": "get_bombs",
      "file": "src/GameConfig.cpp",
      "line": 448
    },
    {
      "type": "unreachable_function",
      "name": "get_kick",
      "file": "src/GameConfig.cpp",
      "line": 453
    },
    {
      "type": "unreachable_function",
      "name": "get_glove",
      "file": "src/GameConfig.cpp",
      "line": 458
    },
    {
      "type": "unreachable_function",
      "name": "get_joint",
      "file": "src/GameConfig.cpp",
      "line": 463
    },
    {
      "type": "unreachable_function",
      "name": "get_viagra",
      "file": "src/GameConfig.cpp",
      "line": 468
    },
    {
      "type": "unreachable_function",
      "name": "get_koks",
      "file": "src/GameConfig.cpp",
      "line": 473
    },
    {
      "type": "unreachable_function",
      "name": "get_start_map",
      "file": "src/GameConfig.cpp",
      "line": 478
    },
    {
      "type": "unreachable_function",
      "name": "get_random_map_order",
      "file": "src/GameConfig.cpp",
      "line": 483
    },
    {
      "type": "unreachable_function",
      "name": "get_round_time",
      "file": "src/GameConfig.cpp",
      "line": 488
    },
    {
      "type": "unreachable_function",
      "name": "get_points_to_win",
      "file": "src/GameConfig.cpp",
      "line": 493
    },
    {
      "type": "unreachable_function",
      "name": "get_theme",
      "file": "src/GameConfig.cpp",
      "line": 498
    },
    {
      "type": "unreachable_function",
      "name": "get_sound_enabled",
      "file": "src/GameConfig.cpp",
      "line": 503
    },
    {
      "type": "unreachable_function",
      "name": "get_music",
      "file": "src/GameConfig.cpp",
      "line": 508
    },
    {
      "type": "unreachable_function",
      "name": "get_kids_mode",
      "file": "src/GameConfig.cpp",
      "line": 513
    },
    {
      "type": "unreachable_function",
      "name": "get_corpse_parts",
      "file": "src/GameConfig.cpp",
      "line": 518
    },
    {
      "type": "unreachable_function",
      "name": "get_shaky_explosions",
      "file": "src/GameConfig.cpp",
      "line": 523
    },
    {
      "type": "unreachable_function",
      "name": "get_highlight_maptiles",
      "file": "src/GameConfig.cpp",
      "line": 528
    },
    {
      "type": "unreachable_function",
      "name": "get_random_positions",
      "file": "src/GameConfig.cpp",
      "line": 534
    },
    {
      "type": "unreachable_function",
      "name": "get_bomb_countdown",
      "file": "src/GameConfig.cpp",
      "line": 539
    },
    {
      "type": "unreachable_function",
      "name": "get_bomb_delay",
      "file": "src/GameConfig.cpp",
      "line": 544
    },
    {
      "type": "unreachable_function",
      "name": "get_bomb_speed",
      "file": "src/GameConfig.cpp",
      "line": 549
    },
    {
      "type": "unreachable_function",
      "name": "get_fullscreen",
      "file": "src/GameConfig.cpp",
      "line": 554
    },
    {
      "type": "unreachable_function",
      "name": "set_fullscreen",
      "file": "src/GameConfig.cpp",
      "line": 559
    },
    {
      "type": "unreachable_function",
      "name": "save",
      "file": "src/GameConfig.cpp",
      "line": 564
    },
    {
      "type": "unreachable_function",
      "name": "set_last_server",
      "file": "src/GameConfig.cpp",
      "line": 737
    },
    {
      "type": "unreachable_function",
      "name": "get_last_server",
      "file": "src/GameConfig.cpp",
      "line": 742
    },
    {
      "type": "unreachable_function",
      "name": "set_local",
      "file": "src/GameConfig.cpp",
      "line": 748
    },
    {
      "type": "unreachable_function",
      "name": "is_local",
      "file": "src/GameConfig.cpp",
      "line": 754
    },
    {
      "type": "unreachable_function",
      "name": "is_server_bomber",
      "file": "src/GameConfig.cpp",
      "line": 759
    },
    {
      "type": "unreachable_function",
      "name": "set_server_bomber",
      "file": "src/GameConfig.cpp",
      "line": 764
    },
    {
      "type": "unreachable_function",
      "name": "initialize_joystick_system",
      "file": "src/Controller_Joystick.cpp",
      "line": 94
    },
    {
      "type": "unreachable_function",
      "name": "shutdown_joystick_system",
      "file": "src/Controller_Joystick.cpp",
      "line": 127
    },
    {
      "type": "unreachable_function",
      "name": "update_all_joysticks",
      "file": "src/Controller_Joystick.cpp",
      "line": 146
    },
    {
      "type": "unreachable_function",
      "name": "get_joystick_count",
      "file": "src/Controller_Joystick.cpp",
      "line": 155
    },
    {
      "type": "unreachable_function",
      "name": "initialize_joystick",
      "file": "src/Controller_Joystick.cpp",
      "line": 171
    },
    {
      "type": "unreachable_function",
      "name": "cleanup_joystick",
      "file": "src/Controller_Joystick.cpp",
      "line": 231
    },
    {
      "type": "unreachable_function",
      "name": "is_joystick_connected",
      "file": "src/Controller_Joystick.cpp",
      "line": 245
    },
    {
      "type": "unreachable_function",
      "name": "update_input_state",
      "file": "src/Controller_Joystick.cpp",
      "line": 249
    },
    {
      "type": "unreachable_function",
      "name": "get_analog_left",
      "file": "src/Controller_Joystick.cpp",
      "line": 266
    },
    {
      "type": "unreachable_function",
      "name": "get_analog_right",
      "file": "src/Controller_Joystick.cpp",
      "line": 275
    },
    {
      "type": "unreachable_function",
      "name": "get_analog_up",
      "file": "src/Controller_Joystick.cpp",
      "line": 284
    },
    {
      "type": "unreachable_function",
      "name": "get_analog_down",
      "file": "src/Controller_Joystick.cpp",
      "line": 293
    },
    {
      "type": "unreachable_function",
      "name": "get_dpad_left",
      "file": "src/Controller_Joystick.cpp",
      "line": 304
    },
    {
      "type": "unreachable_function",
      "name": "get_dpad_right",
      "file": "src/Controller_Joystick.cpp",
      "line": 313
    },
    {
      "type": "unreachable_function",
      "name": "get_dpad_up",
      "file": "src/Controller_Joystick.cpp",
      "line": 322
    },
    {
      "type": "unreachable_function",
      "name": "get_dpad_down",
      "file": "src/Controller_Joystick.cpp",
      "line": 331
    },
    {
      "type": "unreachable_function",
      "name": "get_button_bomb",
      "file": "src/Controller_Joystick.cpp",
      "line": 342
    },
    {
      "type": "unreachable_function",
      "name": "initialize_haptic",
      "file": "src/Controller_Joystick.cpp",
      "line": 366
    },
    {
      "type": "unreachable_function",
      "name": "cleanup_haptic",
      "file": "src/Controller_Joystick.cpp",
      "line": 390
    },
    {
      "type": "unreachable_function",
      "name": "apply_vibration",
      "file": "src/Controller_Joystick.cpp",
      "line": 399
    },
    {
      "type": "unreachable_function",
      "name": "calculate_explosion_intensity",
      "file": "src/Controller_Joystick.cpp",
      "line": 438
    },
    {
      "type": "unreachable_function",
      "name": "trigger_explosion_vibration",
      "file": "src/Controller_Joystick.cpp",
      "line": 500
    },
    {
      "type": "unreachable_function",
      "name": "update_haptic",
      "file": "src/Controller_Joystick.cpp",
      "line": 571
    },
    {
      "type": "unreachable_function",
      "name": "stop_vibration",
      "file": "src/Controller_Joystick.cpp",
      "line": 593
    },
    {
      "type": "unreachable_function",
      "name": "register_tile",
      "file": "src/LifecycleManager.cpp",
      "line": 32
    },
    {
      "type": "unreachable_function",
      "name": "register_tile_entity",
      "file": "src/LifecycleManager.cpp",
      "line": 45
    },
    {
      "type": "unreachable_function",
      "name": "mark_for_destruction",
      "file": "src/LifecycleManager.cpp",
      "line": 53
    },
    {
      "type": "unreachable_function",
      "name": "find_managed_object",
      "file": "src/LifecycleManager.cpp",
      "line": 310
    },
    {
      "type": "unreachable_function",
      "name": "mark_tile_for_destruction",
      "file": "src/LifecycleManager.cpp",
      "line": 73
    },
    {
      "type": "unreachable_function",
      "name": "find_managed_tile",
      "file": "src/LifecycleManager.cpp",
      "line": 318
    },
    {
      "type": "unreachable_function",
      "name": "mark_tile_entity_for_destruction",
      "file": "src/LifecycleManager.cpp",
      "line": 91
    },
    {
      "type": "unreachable_function",
      "name": "update_states",
      "file": "src/LifecycleManager.cpp",
      "line": 99
    },
    {
      "type": "unreachable_function",
      "name": "update_object_state",
      "file": "src/LifecycleManager.cpp",
      "line": 115
    },
    {
      "type": "unreachable_function",
      "name": "update_tile_state",
      "file": "src/LifecycleManager.cpp",
      "line": 150
    },
    {
      "type": "unreachable_function",
      "name": "cleanup_dead_objects",
      "file": "src/LifecycleManager.cpp",
      "line": 195
    },
    {
      "type": "unreachable_function",
      "name": "get_object_state",
      "file": "src/LifecycleManager.cpp",
      "line": 243
    },
    {
      "type": "unreachable_function",
      "name": "get_tile_state",
      "file": "src/LifecycleManager.cpp",
      "line": 248
    },
    {
      "type": "unreachable_function",
      "name": "get_tile_entity_state",
      "file": "src/LifecycleManager.cpp",
      "line": 253
    },
    {
      "type": "unreachable_function",
      "name": "is_dying_or_dead",
      "file": "src/LifecycleManager.cpp",
      "line": 258
    },
    {
      "type": "unreachable_function",
      "name": "clear_all",
      "file": "src/LifecycleManager.cpp",
      "line": 273
    },
    {
      "type": "unreachable_function",
      "name": "get_active_object_count",
      "file": "src/LifecycleManager.cpp",
      "line": 295
    },
    {
      "type": "unreachable_function",
      "name": "get_active_tile_count",
      "file": "src/LifecycleManager.cpp",
      "line": 302
    },
    {
      "type": "unreachable_function",
      "name": "explode_delayed",
      "file": "src/Bomb.cpp",
      "line": 81
    },
    {
      "type": "unreachable_function",
      "name": "kick",
      "file": "src/Bomb.cpp",
      "line": 88
    },
    {
      "type": "unreachable_function",
      "name": "stop",
      "file": "src/Bomb.cpp",
      "line": 98
    },
    {
      "type": "unreachable_function",
      "name": "get_context",
      "file": "src/GameObject.cpp",
      "line": 121
    },
    {
      "type": "unreachable_function",
      "name": "find_nearest_bomber",
      "file": "src/SpatialPartitioning.cpp",
      "line": 351
    },
    {
      "type": "unreachable_function",
      "name": "collect",
      "file": "src/Extra.cpp",
      "line": 122
    },
    {
      "type": "unreachable_function",
      "name": "apply_effect_to_bomber",
      "file": "src/Extra.cpp",
      "line": 144
    },
    {
      "type": "unreachable_function",
      "name": "initialize_gpu_renderer",
      "file": "src/RenderingFacade.cpp",
      "line": 438
    },
    {
      "type": "unreachable_function",
      "name": "initialize_text_renderer",
      "file": "src/RenderingFacade.cpp",
      "line": 465
    },
    {
      "type": "unreachable_function",
      "name": "initialize_particle_manager",
      "file": "src/RenderingFacade.cpp",
      "line": 507
    },
    {
      "type": "unreachable_function",
      "name": "clear_screen",
      "file": "src/RenderingFacade.cpp",
      "line": 126
    },
    {
      "type": "unreachable_function",
      "name": "render_sprite",
      "file": "src/RenderingFacade.cpp",
      "line": 141
    },
    {
      "type": "unreachable_function",
      "name": "get_texture",
      "file": "src/Resources.cpp",
      "line": 172
    },
    {
      "type": "unreachable_function",
      "name": "render_sprite_at_grid",
      "file": "src/RenderingFacade.cpp",
      "line": 199
    },
    {
      "type": "unreachable_function",
      "name": "render_sprite_batch",
      "file": "src/RenderingFacade.cpp",
      "line": 208
    },
    {
      "type": "unreachable_function",
      "name": "render_particle_effect",
      "file": "src/RenderingFacade.cpp",
      "line": 295
    },
    {
      "type": "unreachable_function",
      "name": "screen_to_world",
      "file": "src/RenderingFacade.cpp",
      "line": 335
    },
    {
      "type": "unreachable_function",
      "name": "world_to_screen",
      "file": "src/RenderingFacade.cpp",
      "line": 341
    },
    {
      "type": "unreachable_function",
      "name": "is_position_visible",
      "file": "src/RenderingFacade.cpp",
      "line": 346
    },
    {
      "type": "unreachable_function",
      "name": "get_viewport_bounds",
      "file": "src/RenderingFacade.cpp",
      "line": 351
    },
    {
      "type": "unreachable_function",
      "name": "update_config",
      "file": "src/RenderingFacade.cpp",
      "line": 357
    },
    {
      "type": "unreachable_function",
      "name": "set_debug_mode",
      "file": "src/RenderingFacade.cpp",
      "line": 367
    },
    {
      "type": "unreachable_function",
      "name": "reset_statistics",
      "file": "src/RenderingFacade.cpp",
      "line": 374
    },
    {
      "type": "unreachable_function",
      "name": "render_debug_info",
      "file": "src/RenderingFacade.cpp",
      "line": 378
    },
    {
      "type": "unreachable_function",
      "name": "preload_texture",
      "file": "src/RenderingFacade.cpp",
      "line": 392
    },
    {
      "type": "unreachable_function",
      "name": "unload_texture",
      "file": "src/RenderingFacade.cpp",
      "line": 410
    },
    {
      "type": "unreachable_function",
      "name": "get_texture_info",
      "file": "src/RenderingFacade.cpp",
      "line": 418
    },
    {
      "type": "unreachable_function",
      "name": "update_statistics",
      "file": "src/RenderingFacade.cpp",
      "line": 528
    },
    {
      "type": "unreachable_function",
      "name": "validate_rendering_state",
      "file": "src/RenderingFacade.cpp",
      "line": 539
    },
    {
      "type": "unreachable_function",
      "name": "handle_gpu_error",
      "file": "src/RenderingFacade.cpp",
      "line": 551
    },
    {
      "type": "unreachable_function",
      "name": "handle_text_error",
      "file": "src/RenderingFacade.cpp",
      "line": 557
    },
    {
      "type": "unreachable_function",
      "name": "handle_particle_error",
      "file": "src/RenderingFacade.cpp",
      "line": 562
    },
    {
      "type": "unreachable_function",
      "name": "die",
      "file": "src/Bomber.cpp",
      "line": 87
    },
    {
      "type": "unreachable_function",
      "name": "is_dead",
      "file": "src/Bomber.cpp",
      "line": 91
    },
    {
      "type": "unreachable_function",
      "name": "set_lives",
      "file": "src/Bomber.cpp",
      "line": 96
    },
    {
      "type": "unreachable_function",
      "name": "get_lives",
      "file": "src/Bomber.cpp",
      "line": 100
    },
    {
      "type": "unreachable_function",
      "name": "lose_life",
      "file": "src/Bomber.cpp",
      "line": 104
    },
    {
      "type": "unreachable_function",
      "name": "has_lives",
      "file": "src/Bomber.cpp",
      "line": 108
    },
    {
      "type": "unreachable_function",
      "name": "respawn",
      "file": "src/Bomber.cpp",
      "line": 113
    },
    {
      "type": "unreachable_function",
      "name": "is_respawning",
      "file": "src/Bomber.cpp",
      "line": 117
    },
    {
      "type": "unreachable_function",
      "name": "set_invincible",
      "file": "src/Bomber.cpp",
      "line": 121
    },
    {
      "type": "unreachable_function",
      "name": "is_invincible",
      "file": "src/Bomber.cpp",
      "line": 125
    },
    {
      "type": "unreachable_function",
      "name": "set_number",
      "file": "src/Bomber.cpp",
      "line": 148
    },
    {
      "type": "unreachable_function",
      "name": "get_number",
      "file": "src/Bomber.cpp",
      "line": 152
    },
    {
      "type": "unreachable_function",
      "name": "fly_to",
      "file": "src/Bomber.cpp",
      "line": 157
    },
    {
      "type": "unreachable_function",
      "name": "can_move",
      "file": "src/Bomber.cpp",
      "line": 167
    },
    {
      "type": "unreachable_function",
      "name": "place_bomb",
      "file": "src/Bomber.cpp",
      "line": 172
    },
    {
      "type": "unreachable_function",
      "name": "throw_bomb",
      "file": "src/Bomber.cpp",
      "line": 176
    },
    {
      "type": "unreachable_function",
      "name": "can_place_bomb",
      "file": "src/Bomber.cpp",
      "line": 180
    },
    {
      "type": "unreachable_function",
      "name": "inc_speed",
      "file": "src/Bomber.cpp",
      "line": 185
    },
    {
      "type": "unreachable_function",
      "name": "dec_speed",
      "file": "src/Bomber.cpp",
      "line": 192
    },
    {
      "type": "unreachable_function",
      "name": "inc_power",
      "file": "src/Bomber.cpp",
      "line": 203
    },
    {
      "type": "unreachable_function",
      "name": "inc_max_bombs",
      "file": "src/Bomber.cpp",
      "line": 212
    },
    {
      "type": "unreachable_function",
      "name": "get_current_bombs",
      "file": "src/Bomber.cpp",
      "line": 216
    },
    {
      "type": "unreachable_function",
      "name": "inc_current_bombs",
      "file": "src/Bomber.cpp",
      "line": 220
    },
    {
      "type": "unreachable_function",
      "name": "dec_current_bombs",
      "file": "src/Bomber.cpp",
      "line": 224
    },
    {
      "type": "unreachable_function",
      "name": "can_kick",
      "file": "src/Bomber.cpp",
      "line": 229
    },
    {
      "type": "unreachable_function",
      "name": "can_throw",
      "file": "src/Bomber.cpp",
      "line": 233
    },
    {
      "type": "unreachable_function",
      "name": "can_ignore_bomb_collision",
      "file": "src/Bomber.cpp",
      "line": 237
    },
    {
      "type": "unreachable_function",
      "name": "set_can_kick",
      "file": "src/Bomber.cpp",
      "line": 241
    },
    {
      "type": "unreachable_function",
      "name": "set_can_throw",
      "file": "src/Bomber.cpp",
      "line": 245
    },
    {
      "type": "unreachable_function",
      "name": "init_game",
      "file": "src/GameplayScreen.cpp",
      "line": 49
    },
    {
      "type": "unreachable_function",
      "name": "deinit_game",
      "file": "src/GameplayScreen.cpp",
      "line": 189
    },
    {
      "type": "unreachable_function",
      "name": "update_audio_listener",
      "file": "src/GameplayScreen.cpp",
      "line": 332
    },
    {
      "type": "unreachable_function",
      "name": "act_all",
      "file": "src/GameplayScreen.cpp",
      "line": 381
    },
    {
      "type": "unreachable_function",
      "name": "delete_some",
      "file": "src/GameplayScreen.cpp",
      "line": 412
    },
    {
      "type": "unreachable_function",
      "name": "get_map_x",
      "file": "src/GameObject.cpp",
      "line": 665
    },
    {
      "type": "unreachable_function",
      "name": "get_map_y",
      "file": "src/GameObject.cpp",
      "line": 679
    },
    {
      "type": "unreachable_function",
      "name": "show_all",
      "file": "src/GameplayScreen.cpp",
      "line": 446
    },
    {
      "type": "unreachable_function",
      "name": "check_victory_conditions",
      "file": "src/GameplayScreen.cpp",
      "line": 483
    },
    {
      "type": "unreachable_function",
      "name": "render_victory_screen",
      "file": "src/GameplayScreen.cpp",
      "line": 540
    },
    {
      "type": "unreachable_function",
      "name": "calculate_flight_path",
      "file": "src/ThrownBomb.cpp",
      "line": 28
    },
    {
      "type": "unreachable_function",
      "name": "spawn_extra",
      "file": "src/MapTile.cpp",
      "line": 61
    },
    {
      "type": "unreachable_function",
      "name": "is_position_blocked",
      "file": "src/GameContext.cpp",
      "line": 64
    },
    {
      "type": "unreachable_function",
      "name": "has_bomb_at",
      "file": "src/GameContext.cpp",
      "line": 68
    },
    {
      "type": "unreachable_function",
      "name": "is_position_walkable",
      "file": "src/GameContext.cpp",
      "line": 72
    },
    {
      "type": "unreachable_function",
      "name": "request_destruction_effect",
      "file": "src/GameContext.cpp",
      "line": 76
    },
    {
      "type": "unreachable_function",
      "name": "remove_from_spatial_systems",
      "file": "src/GameContext.cpp",
      "line": 91
    },
    {
      "type": "unreachable_function",
      "name": "set_object_lists",
      "file": "src/GameContext.cpp",
      "line": 120
    },
    {
      "type": "unreachable_function",
      "name": "set_map",
      "file": "src/GameContext.cpp",
      "line": 125
    },
    {
      "type": "unreachable_function",
      "name": "update_object_position_in_spatial_grid",
      "file": "src/GameContext.cpp",
      "line": 130
    },
    {
      "type": "unreachable_function",
      "name": "update_destruction_animation",
      "file": "src/TileEntity.cpp",
      "line": 171
    },
    {
      "type": "unreachable_function",
      "name": "render_destruction_effects",
      "file": "src/TileEntity.cpp",
      "line": 188
    },
    {
      "type": "unreachable_function",
      "name": "render_fragmentation_effects",
      "file": "src/TileEntity.cpp",
      "line": 273
    },
    {
      "type": "unreachable_function",
      "name": "enumerate_maps",
      "file": "src/Map.cpp",
      "line": 42
    },
    {
      "type": "unreachable_function",
      "name": "clear",
      "file": "src/Map.cpp",
      "line": 79
    },
    {
      "type": "unreachable_function",
      "name": "reload",
      "file": "src/Map.cpp",
      "line": 97
    },
    {
      "type": "unreachable_function",
      "name": "get_tile",
      "file": "src/Map.cpp",
      "line": 177
    },
    {
      "type": "unreachable_function",
      "name": "get_tile_entity",
      "file": "src/Map.cpp",
      "line": 184
    },
    {
      "type": "unreachable_function",
      "name": "set_tile",
      "file": "src/Map.cpp",
      "line": 191
    },
    {
      "type": "unreachable_function",
      "name": "set_tile_entity",
      "file": "src/Map.cpp",
      "line": 201
    },
    {
      "type": "unreachable_function",
      "name": "clear_tile_entity_at",
      "file": "src/Map.cpp",
      "line": 211
    },
    {
      "type": "unreachable_function",
      "name": "load_random_valid",
      "file": "src/Map.cpp",
      "line": 223
    },
    {
      "type": "unreachable_function",
      "name": "load_next_valid",
      "file": "src/Map.cpp",
      "line": 231
    },
    {
      "type": "unreachable_function",
      "name": "refresh_holes",
      "file": "src/Map.cpp",
      "line": 252
    },
    {
      "type": "unreachable_function",
      "name": "any_valid_map",
      "file": "src/Map.cpp",
      "line": 256
    },
    {
      "type": "unreachable_function",
      "name": "get_map_count",
      "file": "src/Map.cpp",
      "line": 260
    },
    {
      "type": "unreachable_function",
      "name": "get_author",
      "file": "src/Map.cpp",
      "line": 271
    },
    {
      "type": "unreachable_function",
      "name": "randomize_bomber_positions",
      "file": "src/Map.cpp",
      "line": 296
    },
    {
      "type": "unreachable_function",
      "name": "set_context",
      "file": "src/TileManager.cpp",
      "line": 20
    },
    {
      "type": "unreachable_function",
      "name": "update_tiles",
      "file": "src/TileManager.cpp",
      "line": 31
    },
    {
      "type": "unreachable_function",
      "name": "handle_tile_updates",
      "file": "src/TileManager.cpp",
      "line": 47
    },
    {
      "type": "unreachable_function",
      "name": "coordinate_with_lifecycle_manager",
      "file": "src/TileManager.cpp",
      "line": 57
    },
    {
      "type": "unreachable_function",
      "name": "process_dying_tiles",
      "file": "src/TileManager.cpp",
      "line": 68
    },
    {
      "type": "unreachable_function",
      "name": "process_dead_tiles",
      "file": "src/TileManager.cpp",
      "line": 80
    },
    {
      "type": "unreachable_function",
      "name": "request_tile_destruction",
      "file": "src/TileManager.cpp",
      "line": 94
    },
    {
      "type": "unreachable_function",
      "name": "replace_tile_when_ready",
      "file": "src/TileManager.cpp",
      "line": 138
    },
    {
      "type": "unreachable_function",
      "name": "is_tile_ready_for_replacement",
      "file": "src/TileManager.cpp",
      "line": 144
    },
    {
      "type": "unreachable_function",
      "name": "get_tile_at",
      "file": "src/TileManager.cpp",
      "line": 167
    },
    {
      "type": "unreachable_function",
      "name": "is_tile_blocking_at",
      "file": "src/TileManager.cpp",
      "line": 175
    },
    {
      "type": "unreachable_function",
      "name": "is_tile_destructible_at",
      "file": "src/TileManager.cpp",
      "line": 207
    },
    {
      "type": "unreachable_function",
      "name": "register_bomb_at",
      "file": "src/TileManager.cpp",
      "line": 225
    },
    {
      "type": "unreachable_function",
      "name": "unregister_bomb_at",
      "file": "src/TileManager.cpp",
      "line": 233
    },
    {
      "type": "unreachable_function",
      "name": "get_bomb_at",
      "file": "src/TileManager.cpp",
      "line": 252
    },
    {
      "type": "unreachable_function",
      "name": "register_bomber_at",
      "file": "src/TileManager.cpp",
      "line": 257
    },
    {
      "type": "unreachable_function",
      "name": "unregister_bomber_at",
      "file": "src/TileManager.cpp",
      "line": 265
    },
    {
      "type": "unreachable_function",
      "name": "get_bomber_at",
      "file": "src/TileManager.cpp",
      "line": 273
    },
    {
      "type": "unreachable_function",
      "name": "has_bomber_at",
      "file": "src/TileManager.cpp",
      "line": 278
    },
    {
      "type": "unreachable_function",
      "name": "iterate_all_tiles",
      "file": "src/TileManager.cpp",
      "line": 284
    },
    {
      "type": "unreachable_function",
      "name": "get_destructible_tiles_in_radius",
      "file": "src/TileManager.cpp",
      "line": 295
    },
    {
      "type": "unreachable_function",
      "name": "update_single_tile",
      "file": "src/TileManager.cpp",
      "line": 317
    },
    {
      "type": "unreachable_function",
      "name": "handle_tile_destruction_request",
      "file": "src/TileManager.cpp",
      "line": 329
    },
    {
      "type": "unreachable_function",
      "name": "perform_tile_replacement",
      "file": "src/TileManager.cpp",
      "line": 337
    },
    {
      "type": "unreachable_function",
      "name": "is_valid_position",
      "file": "src/TileManager.cpp",
      "line": 362
    },
    {
      "type": "unreachable_function",
      "name": "handle_controller_input",
      "file": "src/BomberComponents.cpp",
      "line": 31
    },
    {
      "type": "unreachable_function",
      "name": "update_flight_animation",
      "file": "src/BomberComponents.cpp",
      "line": 103
    },
    {
      "type": "unreachable_function",
      "name": "get_x",
      "file": "src/GameObject.cpp",
      "line": 645
    },
    {
      "type": "unreachable_function",
      "name": "get_y",
      "file": "src/GameObject.cpp",
      "line": 650
    },
    {
      "type": "unreachable_function",
      "name": "update_bomb_cooldown",
      "file": "src/BomberComponents.cpp",
      "line": 275
    },
    {
      "type": "unreachable_function",
      "name": "update_bomb_throwing",
      "file": "src/BomberComponents.cpp",
      "line": 284
    },
    {
      "type": "unreachable_function",
      "name": "update_bomb_escape_status",
      "file": "src/BomberComponents.cpp",
      "line": 299
    },
    {
      "type": "unreachable_function",
      "name": "set_texture_from_color",
      "file": "src/BomberComponents.cpp",
      "line": 342
    },
    {
      "type": "unreachable_function",
      "name": "update_animation_frame",
      "file": "src/BomberComponents.cpp",
      "line": 346
    },
    {
      "type": "unreachable_function",
      "name": "set_standing_sprite",
      "file": "src/BomberComponents.cpp",
      "line": 380
    },
    {
      "type": "unreachable_function",
      "name": "update_invincibility_effects",
      "file": "src/BomberComponents.cpp",
      "line": 397
    },
    {
      "type": "unreachable_function",
      "name": "choose_texture_for_color",
      "file": "src/BomberComponents.cpp",
      "line": 405
    },
    {
      "type": "unreachable_function",
      "name": "update_respawn_timer",
      "file": "src/BomberComponents.cpp",
      "line": 441
    },
    {
      "type": "unreachable_function",
      "name": "add_object",
      "file": "src/SpatialPartitioning.cpp",
      "line": 27
    },
    {
      "type": "unreachable_function",
      "name": "pixel_to_grid_coord",
      "file": "src/SpatialPartitioning.cpp",
      "line": 285
    },
    {
      "type": "unreachable_function",
      "name": "remove_object",
      "file": "src/SpatialPartitioning.cpp",
      "line": 37
    },
    {
      "type": "unreachable_function",
      "name": "update_object_position",
      "file": "src/SpatialPartitioning.cpp",
      "line": 47
    },
    {
      "type": "unreachable_function",
      "name": "rebuild_from_objects",
      "file": "src/SpatialPartitioning.cpp",
      "line": 62
    },
    {
      "type": "unreachable_function",
      "name": "get_objects_at_position",
      "file": "src/SpatialPartitioning.cpp",
      "line": 74
    },
    {
      "type": "unreachable_function",
      "name": "get_cell",
      "file": "src/SpatialPartitioning.cpp",
      "line": 324
    },
    {
      "type": "unreachable_function",
      "name": "get_objects_of_type_near",
      "file": "src/SpatialPartitioning.cpp",
      "line": 85
    },
    {
      "type": "unreachable_function",
      "name": "get_bombers_near",
      "file": "src/SpatialPartitioning.cpp",
      "line": 108
    },
    {
      "type": "unreachable_function",
      "name": "get_bombs_near",
      "file": "src/SpatialPartitioning.cpp",
      "line": 112
    },
    {
      "type": "unreachable_function",
      "name": "get_extras_near",
      "file": "src/SpatialPartitioning.cpp",
      "line": 116
    },
    {
      "type": "unreachable_function",
      "name": "get_objects_in_area",
      "file": "src/SpatialPartitioning.cpp",
      "line": 120
    },
    {
      "type": "unreachable_function",
      "name": "find_collisions",
      "file": "src/SpatialPartitioning.cpp",
      "line": 149
    },
    {
      "type": "unreachable_function",
      "name": "has_object_at_position",
      "file": "src/SpatialPartitioning.cpp",
      "line": 178
    },
    {
      "type": "unreachable_function",
      "name": "get_statistics",
      "file": "src/SpatialPartitioning.cpp",
      "line": 193
    },
    {
      "type": "unreachable_function",
      "name": "print_debug_info",
      "file": "src/SpatialPartitioning.cpp",
      "line": 223
    },
    {
      "type": "unreachable_function",
      "name": "visualize_grid",
      "file": "src/SpatialPartitioning.cpp",
      "line": 236
    },
    {
      "type": "unreachable_function",
      "name": "get_cells_in_radius",
      "file": "src/SpatialPartitioning.cpp",
      "line": 291
    },
    {
      "type": "unreachable_function",
      "name": "get_cells_in_area",
      "file": "src/SpatialPartitioning.cpp",
      "line": 304
    },
    {
      "type": "unreachable_function",
      "name": "get_or_create_cell",
      "file": "src/SpatialPartitioning.cpp",
      "line": 320
    },
    {
      "type": "unreachable_function",
      "name": "add_object_to_cell",
      "file": "src/SpatialPartitioning.cpp",
      "line": 332
    },
    {
      "type": "unreachable_function",
      "name": "remove_object_from_cell",
      "file": "src/SpatialPartitioning.cpp",
      "line": 337
    },
    {
      "type": "unreachable_function",
      "name": "find_explosion_victims",
      "file": "src/SpatialPartitioning.cpp",
      "line": 404
    },
    {
      "type": "unreachable_function",
      "name": "scan_ai_targets",
      "file": "src/SpatialPartitioning.cpp",
      "line": 488
    },
    {
      "type": "unreachable_function",
      "name": "objecttype2string",
      "file": "src/GameObject.cpp",
      "line": 48
    },
    {
      "type": "unreachable_function",
      "name": "get_object_id",
      "file": "src/GameObject.cpp",
      "line": 131
    },
    {
      "type": "unreachable_function",
      "name": "set_object_id",
      "file": "src/GameObject.cpp",
      "line": 136
    },
    {
      "type": "unreachable_function",
      "name": "get_server_x",
      "file": "src/GameObject.cpp",
      "line": 141
    },
    {
      "type": "unreachable_function",
      "name": "get_server_y",
      "file": "src/GameObject.cpp",
      "line": 146
    },
    {
      "type": "unreachable_function",
      "name": "get_orig_x",
      "file": "src/GameObject.cpp",
      "line": 151
    },
    {
      "type": "unreachable_function",
      "name": "get_orig_y",
      "file": "src/GameObject.cpp",
      "line": 156
    },
    {
      "type": "unreachable_function",
      "name": "get_server_dir",
      "file": "src/GameObject.cpp",
      "line": 161
    },
    {
      "type": "unreachable_function",
      "name": "get_client_dir",
      "file": "src/GameObject.cpp",
      "line": 166
    },
    {
      "type": "unreachable_function",
      "name": "set_server_x",
      "file": "src/GameObject.cpp",
      "line": 171
    },
    {
      "type": "unreachable_function",
      "name": "set_server_y",
      "file": "src/GameObject.cpp",
      "line": 176
    },
    {
      "type": "unreachable_function",
      "name": "set_server_dir",
      "file": "src/GameObject.cpp",
      "line": 181
    },
    {
      "type": "unreachable_function",
      "name": "set_client_dir",
      "file": "src/GameObject.cpp",
      "line": 186
    },
    {
      "type": "unreachable_function",
      "name": "set_local_dir",
      "file": "src/GameObject.cpp",
      "line": 191
    },
    {
      "type": "unreachable_function",
      "name": "set_cur_dir",
      "file": "src/GameObject.cpp",
      "line": 196
    },
    {
      "type": "unreachable_function",
      "name": "set_offset",
      "file": "src/GameObject.cpp",
      "line": 201
    },
    {
      "type": "unreachable_function",
      "name": "is_blocked",
      "file": "src/GameObject.cpp",
      "line": 211
    },
    {
      "type": "unreachable_function",
      "name": "move_dist",
      "file": "src/GameObject.cpp",
      "line": 331
    },
    {
      "type": "unreachable_function",
      "name": "move",
      "file": "src/GameObject.cpp",
      "line": 434
    },
    {
      "type": "unreachable_function",
      "name": "continue_flying",
      "file": "src/GameObject.cpp",
      "line": 512
    },
    {
      "type": "unreachable_function",
      "name": "fall",
      "file": "src/GameObject.cpp",
      "line": 572
    },
    {
      "type": "unreachable_function",
      "name": "continue_falling",
      "file": "src/GameObject.cpp",
      "line": 587
    },
    {
      "type": "unreachable_function",
      "name": "snap",
      "file": "src/GameObject.cpp",
      "line": 603
    },
    {
      "type": "unreachable_function",
      "name": "set_dir",
      "file": "src/GameObject.cpp",
      "line": 612
    },
    {
      "type": "unreachable_function",
      "name": "set_pos",
      "file": "src/GameObject.cpp",
      "line": 617
    },
    {
      "type": "unreachable_function",
      "name": "set_orig",
      "file": "src/GameObject.cpp",
      "line": 623
    },
    {
      "type": "unreachable_function",
      "name": "move_pos",
      "file": "src/GameObject.cpp",
      "line": 629
    },
    {
      "type": "unreachable_function",
      "name": "get_z",
      "file": "src/GameObject.cpp",
      "line": 655
    },
    {
      "type": "unreachable_function",
      "name": "get_speed",
      "file": "src/GameObject.cpp",
      "line": 660
    },
    {
      "type": "unreachable_function",
      "name": "set_speed",
      "file": "src/GameObject.cpp",
      "line": 703
    },
    {
      "type": "unreachable_function",
      "name": "is_flying",
      "file": "src/GameObject.cpp",
      "line": 708
    },
    {
      "type": "unreachable_function",
      "name": "is_stopped",
      "file": "src/GameObject.cpp",
      "line": 713
    },
    {
      "type": "unreachable_function",
      "name": "get_cur_dir",
      "file": "src/GameObject.cpp",
      "line": 718
    },
    {
      "type": "unreachable_function",
      "name": "whats_left",
      "file": "src/GameObject.cpp",
      "line": 723
    },
    {
      "type": "unreachable_function",
      "name": "whats_right",
      "file": "src/GameObject.cpp",
      "line": 728
    },
    {
      "type": "unreachable_function",
      "name": "whats_up",
      "file": "src/GameObject.cpp",
      "line": 733
    },
    {
      "type": "unreachable_function",
      "name": "whats_down",
      "file": "src/GameObject.cpp",
      "line": 738
    },
    {
      "type": "unreachable_function",
      "name": "get_legacy_tile",
      "file": "src/GameObject.cpp",
      "line": 759
    },
    {
      "type": "unreachable_function",
      "name": "get_tile_type_at",
      "file": "src/GameObject.cpp",
      "line": 791
    },
    {
      "type": "unreachable_function",
      "name": "set_bomb_on_tile",
      "file": "src/GameObject.cpp",
      "line": 885
    },
    {
      "type": "unreachable_function",
      "name": "remove_bomb_from_tile",
      "file": "src/GameObject.cpp",
      "line": 890
    },
    {
      "type": "unreachable_function",
      "name": "is_falling",
      "file": "src/GameObject.cpp",
      "line": 958
    },
    {
      "type": "unreachable_function",
      "name": "output_object_info",
      "file": "src/GameObject.cpp",
      "line": 963
    },
    {
      "type": "unreachable_function",
      "name": "set_next_fly_job",
      "file": "src/GameObject.cpp",
      "line": 983
    },
    {
      "type": "unreachable_function",
      "name": "reset_next_fly_job",
      "file": "src/GameObject.cpp",
      "line": 990
    },
    {
      "type": "unreachable_function",
      "name": "is_next_fly_job",
      "file": "src/GameObject.cpp",
      "line": 997
    },
    {
      "type": "unreachable_function",
      "name": "detonate_other_bombs",
      "file": "src/Explosion.cpp",
      "line": 106
    },
    {
      "type": "unreachable_function",
      "name": "draw_explosion_tile",
      "file": "src/Explosion.cpp",
      "line": 194
    },
    {
      "type": "unreachable_function",
      "name": "get_dummy_white_texture",
      "file": "src/Explosion.cpp",
      "line": 227
    },
    {
      "type": "unreachable_function",
      "name": "kill_bombers",
      "file": "src/Explosion.cpp",
      "line": 311
    },
    {
      "type": "unreachable_function",
      "name": "explode_corpses",
      "file": "src/Explosion.cpp",
      "line": 441
    },
    {
      "type": "unreachable_function",
      "name": "destroy_tile_at",
      "file": "src/Explosion.cpp",
      "line": 559
    },
    {
      "type": "unreachable_function",
      "name": "notify_explosion_haptics",
      "file": "src/Explosion.cpp",
      "line": 570
    },
    {
      "type": "unreachable_function",
      "name": "load_texture",
      "file": "src/Resources.cpp",
      "line": 115
    },
    {
      "type": "unreachable_function",
      "name": "get_gl_texture",
      "file": "src/Resources.cpp",
      "line": 182
    },
    {
      "type": "unreachable_function",
      "name": "load_shader_source",
      "file": "src/Resources.cpp",
      "line": 224
    },
    {
      "type": "unreachable_function",
      "name": "register_gl_texture_metadata",
      "file": "src/Resources.cpp",
      "line": 237
    },
    {
      "type": "unreachable_function",
      "name": "get_total_time",
      "file": "src/Controller_AI_Modern.cpp",
      "line": 28
    },
    {
      "type": "unreachable_function",
      "name": "execute",
      "file": "src/Controller_AI_Modern.cpp",
      "line": 57
    },
    {
      "type": "unreachable_function",
      "name": "set_personality",
      "file": "src/Controller_AI_Modern.cpp",
      "line": 215
    },
    {
      "type": "unreachable_function",
      "name": "generate_rating_map",
      "file": "src/Controller_AI_Modern.cpp",
      "line": 290
    },
    {
      "type": "unreachable_function",
      "name": "apply_bomb_rating",
      "file": "src/Controller_AI_Modern.cpp",
      "line": 372
    },
    {
      "type": "unreachable_function",
      "name": "job_ready",
      "file": "src/Controller_AI_Modern.cpp",
      "line": 407
    },
    {
      "type": "unreachable_function",
      "name": "find_new_jobs",
      "file": "src/Controller_AI_Modern.cpp",
      "line": 429
    },
    {
      "type": "unreachable_function",
      "name": "do_job",
      "file": "src/Controller_AI_Modern.cpp",
      "line": 456
    },
    {
      "type": "unreachable_function",
      "name": "avoid_bombs",
      "file": "src/Controller_AI_Modern.cpp",
      "line": 462
    },
    {
      "type": "unreachable_function",
      "name": "find_bombing_opportunities",
      "file": "src/Controller_AI_Modern.cpp",
      "line": 491
    },
    {
      "type": "unreachable_function",
      "name": "find_way",
      "file": "src/Controller_AI_Modern.cpp",
      "line": 531
    },
    {
      "type": "unreachable_function",
      "name": "clear_all_jobs",
      "file": "src/Controller_AI_Modern.cpp",
      "line": 633
    },
    {
      "type": "unreachable_function",
      "name": "is_hotspot",
      "file": "src/Controller_AI_Modern.cpp",
      "line": 637
    },
    {
      "type": "unreachable_function",
      "name": "is_death",
      "file": "src/Controller_AI_Modern.cpp",
      "line": 642
    },
    {
      "type": "unreachable_function",
      "name": "can_escape_from_bomb",
      "file": "src/Controller_AI_Modern.cpp",
      "line": 647
    },
    {
      "type": "unreachable_function",
      "name": "bomber_rating",
      "file": "src/Controller_AI_Modern.cpp",
      "line": 660
    },
    {
      "type": "unreachable_function",
      "name": "extra_rating",
      "file": "src/Controller_AI_Modern.cpp",
      "line": 665
    },
    {
      "type": "unreachable_function",
      "name": "get_aggression_modifier",
      "file": "src/Controller_AI_Modern.cpp",
      "line": 670
    },
    {
      "type": "unreachable_function",
      "name": "get_reaction_delay",
      "file": "src/Controller_AI_Modern.cpp",
      "line": 681
    },
    {
      "type": "unreachable_function",
      "name": "should_hunt_enemies",
      "file": "src/Controller_AI_Modern.cpp",
      "line": 685
    },
    {
      "type": "unreachable_function",
      "name": "get_current_state",
      "file": "src/Controller_AI_Modern.cpp",
      "line": 698
    },
    {
      "type": "unreachable_function",
      "name": "is_starting_corner_position",
      "file": "src/Controller_AI_Modern.cpp",
      "line": 711
    },
    {
      "type": "unreachable_function",
      "name": "can_escape_from_bomb_safely",
      "file": "src/Controller_AI_Modern.cpp",
      "line": 719
    },
    {
      "type": "unreachable_function",
      "name": "bombing_is_beneficial",
      "file": "src/Controller_AI_Modern.cpp",
      "line": 769
    },
    {
      "type": "unreachable_function",
      "name": "should_move_to_better_position",
      "file": "src/Controller_AI_Modern.cpp",
      "line": 808
    },
    {
      "type": "unreachable_function",
      "name": "count_active_bombs",
      "file": "src/Controller_AI_Modern.cpp",
      "line": 845
    },
    {
      "type": "unreachable_function",
      "name": "add_escape_sequence",
      "file": "src/Controller_AI_Modern.cpp",
      "line": 880
    },
    {
      "type": "unreachable_function",
      "name": "find_best_escape_direction",
      "file": "src/Controller_AI_Modern.cpp",
      "line": 893
    },
    {
      "type": "unreachable_function",
      "name": "evaluate_escape_direction",
      "file": "src/Controller_AI_Modern.cpp",
      "line": 911
    },
    {
      "type": "unreachable_function",
      "name": "count_nearby_threats",
      "file": "src/Controller_AI_Modern.cpp",
      "line": 953
    },
    {
      "type": "unreachable_function",
      "name": "vector_distance",
      "file": "src/Controller_AI_Smart.cpp",
      "line": 25
    },
    {
      "type": "unreachable_function",
      "name": "vector_length",
      "file": "src/Controller_AI_Smart.cpp",
      "line": 31
    },
    {
      "type": "unreachable_function",
      "name": "vector_subtract",
      "file": "src/Controller_AI_Smart.cpp",
      "line": 35
    },
    {
      "type": "unreachable_function",
      "name": "vector_add",
      "file": "src/Controller_AI_Smart.cpp",
      "line": 39
    },
    {
      "type": "unreachable_function",
      "name": "vector_multiply",
      "file": "src/Controller_AI_Smart.cpp",
      "line": 43
    },
    {
      "type": "unreachable_function",
      "name": "vector_normalize",
      "file": "src/Controller_AI_Smart.cpp",
      "line": 47
    },
    {
      "type": "unreachable_function",
      "name": "think",
      "file": "src/Controller_AI_Smart.cpp",
      "line": 166
    },
    {
      "type": "unreachable_function",
      "name": "update_current_state",
      "file": "src/Controller_AI_Smart.cpp",
      "line": 185
    },
    {
      "type": "unreachable_function",
      "name": "calculate_danger_level",
      "file": "src/Controller_AI_Smart.cpp",
      "line": 407
    },
    {
      "type": "unreachable_function",
      "name": "transition_to_state",
      "file": "src/Controller_AI_Smart.cpp",
      "line": 220
    },
    {
      "type": "unreachable_function",
      "name": "execute_behavior",
      "file": "src/Controller_AI_Smart.cpp",
      "line": 248
    },
    {
      "type": "unreachable_function",
      "name": "find_safe_position",
      "file": "src/Controller_AI_Smart.cpp",
      "line": 484
    },
    {
      "type": "unreachable_function",
      "name": "find_path_to",
      "file": "src/Controller_AI_Smart.cpp",
      "line": 338
    },
    {
      "type": "unreachable_function",
      "name": "is_position_safe",
      "file": "src/Controller_AI_Smart.cpp",
      "line": 401
    },
    {
      "type": "unreachable_function",
      "name": "scan_for_targets",
      "file": "src/Controller_AI_Smart.cpp",
      "line": 524
    },
    {
      "type": "unreachable_function",
      "name": "select_best_target",
      "file": "src/Controller_AI_Smart.cpp",
      "line": 626
    },
    {
      "type": "unreachable_function",
      "name": "evaluate_powerup_value",
      "file": "src/Controller_AI_Smart.cpp",
      "line": 650
    },
    {
      "type": "unreachable_function",
      "name": "should_place_bomb",
      "file": "src/Controller_AI_Smart.cpp",
      "line": 655
    },
    {
      "type": "unreachable_function",
      "name": "would_hit_enemy",
      "file": "src/Controller_AI_Smart.cpp",
      "line": 692
    },
    {
      "type": "unreachable_function",
      "name": "predict_explosion_tiles",
      "file": "src/Controller_AI_Smart.cpp",
      "line": 715
    },
    {
      "type": "unreachable_function",
      "name": "analyze_enemies",
      "file": "src/Controller_AI_Smart.cpp",
      "line": 752
    },
    {
      "type": "unreachable_function",
      "name": "predict_enemy_position",
      "file": "src/Controller_AI_Smart.cpp",
      "line": 776
    },
    {
      "type": "unreachable_function",
      "name": "is_enemy_dangerous",
      "file": "src/Controller_AI_Smart.cpp",
      "line": 784
    },
    {
      "type": "unreachable_function",
      "name": "get_bomb_frequency_modifier",
      "file": "src/Controller_AI_Smart.cpp",
      "line": 809
    },
    {
      "type": "unreachable_function",
      "name": "set_reaction_time",
      "file": "src/Controller_AI_Smart.cpp",
      "line": 817
    },
    {
      "type": "unreachable_function",
      "name": "set_aggression_level",
      "file": "src/Controller_AI_Smart.cpp",
      "line": 821
    }
  ],
  "complexity": {
    "total_functions": 580,
    "total_classes": 0,
    "total_magic_numbers": 379,
    "average_function_calls": 0.25862068965517243,
    "most_called_functions": [
      [
        "get_context",
        15
      ],
      [
        "get_tile_at",
        9
      ],
      [
        "get_tile",
        8
      ],
      [
        "get_map",
        6
      ],
      [
        "get_tile_entity",
        6
      ],
      [
        "create",
        3
      ],
      [
        "get_object_state",
        3
      ],
      [
        "get_tile_state",
        3
      ],
      [
        "time_elapsed",
        2
      ],
      [
        "render_text",
        2
      ]
    ],
    "largest_classes": []
  },
  "functions": {
    "init": {
      "file": "src/Timer.cpp",
      "line": 8,
      "signature": "void init()",
      "calls": [
        "SDL_GetBasePath"
      ],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "void"
    },
    "tick": {
      "file": "src/Timer.cpp",
      "line": 13,
      "signature": "void tick()",
      "calls": [
        "SDL_GetPerformanceCounter"
      ],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "void"
    },
    "time_elapsed": {
      "file": "src/Timer.cpp",
      "line": 19,
      "signature": "float time_elapsed()",
      "calls": [],
      "called_by": [
        "destroy",
        "act_all"
      ],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "float"
    },
    "main": {
      "file": "src/main.cpp",
      "line": 3,
      "signature": "int main(int argc, char *[] argv)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 2,
      "return_type": "int"
    },
    "handle_events": {
      "file": "src/SettingsScreen.cpp",
      "line": 18,
      "signature": "void handle_events(SDL_Event & event)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 1,
      "return_type": "void"
    },
    "update": {
      "file": "src/SettingsScreen.cpp",
      "line": 49,
      "signature": "void update(float deltaTime)",
      "calls": [
        "get_total_time"
      ],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 1,
      "return_type": "void"
    },
    "render": {
      "file": "src/SettingsScreen.cpp",
      "line": 52,
      "signature": "void render(SDL_Renderer * renderer)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 1,
      "return_type": "void"
    },
    "get_next_state": {
      "file": "src/SettingsScreen.cpp",
      "line": 108,
      "signature": "GameState get_next_state()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "GameState"
    },
    "render_player_setup": {
      "file": "src/SettingsScreen.cpp",
      "line": 112,
      "signature": "void render_player_setup()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "void"
    },
    "render_game_options": {
      "file": "src/SettingsScreen.cpp",
      "line": 160,
      "signature": "void render_game_options()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "void"
    },
    "handle_player_setup_input": {
      "file": "src/SettingsScreen.cpp",
      "line": 199,
      "signature": "void handle_player_setup_input(SDL_Event & event)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 1,
      "return_type": "void"
    },
    "get_controller_name": {
      "file": "src/SettingsScreen.cpp",
      "line": 222,
      "signature": "std::string get_controller_name(int controller_type)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 1,
      "return_type": "std::string"
    },
    "get_team_name": {
      "file": "src/SettingsScreen.cpp",
      "line": 231,
      "signature": "std::string get_team_name(int team)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 1,
      "return_type": "std::string"
    },
    "load": {
      "file": "src/MapEntry.cpp",
      "line": 44,
      "signature": "bool load()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "bool"
    },
    "get_data": {
      "file": "src/MapEntry.cpp",
      "line": 85,
      "signature": "char get_data(int x, int y)",
      "calls": [],
      "called_by": [
        "reload"
      ],
      "is_definition": true,
      "is_static": false,
      "parameters": 2,
      "return_type": "char"
    },
    "read_bomber_positions": {
      "file": "src/MapEntry.cpp",
      "line": 92,
      "signature": "void read_bomber_positions()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "void"
    },
    "get_bomber_pos": {
      "file": "src/MapEntry.cpp",
      "line": 118,
      "signature": "CL_Vector get_bomber_pos(int nr)",
      "calls": [],
      "called_by": [
        "init_game"
      ],
      "is_definition": true,
      "is_static": false,
      "parameters": 1,
      "return_type": "CL_Vector"
    },
    "update_keyboard_state": {
      "file": "src/Controller_Keyboard.cpp",
      "line": 42,
      "signature": "void update_keyboard_state()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "void"
    },
    "reset": {
      "file": "src/Controller_Keyboard.cpp",
      "line": 51,
      "signature": "void reset()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "void"
    },
    "is_left": {
      "file": "src/Controller_Keyboard.cpp",
      "line": 54,
      "signature": "bool is_left()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "bool"
    },
    "is_right": {
      "file": "src/Controller_Keyboard.cpp",
      "line": 58,
      "signature": "bool is_right()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "bool"
    },
    "is_up": {
      "file": "src/Controller_Keyboard.cpp",
      "line": 62,
      "signature": "bool is_up()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "bool"
    },
    "is_down": {
      "file": "src/Controller_Keyboard.cpp",
      "line": 66,
      "signature": "bool is_down()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "bool"
    },
    "is_bomb": {
      "file": "src/Controller_Keyboard.cpp",
      "line": 70,
      "signature": "bool is_bomb()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "bool"
    },
    "calculate_distance": {
      "file": "src/AudioMixer.cpp",
      "line": 14,
      "signature": "float calculate_distance(const AudioPosition & sound_pos)",
      "calls": [],
      "called_by": [
        "play_sound_3d"
      ],
      "is_definition": true,
      "is_static": true,
      "parameters": 1,
      "return_type": "float"
    },
    "calculate_stereo_pan": {
      "file": "src/AudioMixer.cpp",
      "line": 21,
      "signature": "void calculate_stereo_pan(const AudioPosition & sound_pos, float & left_gain, float & right_gain)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": true,
      "parameters": 3,
      "return_type": "void"
    },
    "shutdown": {
      "file": "src/AudioMixer.cpp",
      "line": 55,
      "signature": "void shutdown()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "void"
    },
    "load_sound": {
      "file": "src/AudioMixer.cpp",
      "line": 70,
      "signature": "MixerAudio * load_sound(const std::string & path)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 1,
      "return_type": "MixerAudio *"
    },
    "add_sound": {
      "file": "src/AudioMixer.cpp",
      "line": 106,
      "signature": "void add_sound(const std::string & name, MixerAudio * audio)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 2,
      "return_type": "void"
    },
    "play_sound": {
      "file": "src/AudioMixer.cpp",
      "line": 112,
      "signature": "bool play_sound(const std::string & name)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 1,
      "return_type": "bool"
    },
    "play_sound_3d": {
      "file": "src/AudioMixer.cpp",
      "line": 116,
      "signature": "bool play_sound_3d(const std::string & name, const AudioPosition & pos, float max_distance)",
      "calls": [
        "calculate_distance"
      ],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 3,
      "return_type": "bool"
    },
    "set_listener_position": {
      "file": "src/AudioMixer.cpp",
      "line": 164,
      "signature": "void set_listener_position(const AudioPosition & pos)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 1,
      "return_type": "void"
    },
    "audio_callback": {
      "file": "src/AudioMixer.cpp",
      "line": 168,
      "signature": "void audio_callback(void * userdata, SDL_AudioStream * stream, int additional_amount, int total_amount)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 4,
      "return_type": "void"
    },
    "create": {
      "file": "src/MapTile_Pure.cpp",
      "line": 25,
      "signature": "MapTile_Pure * create(TILE_TYPE type, int grid_x, int grid_y)",
      "calls": [],
      "called_by": [
        "init_game",
        "reload",
        "perform_tile_replacement"
      ],
      "is_definition": true,
      "is_static": false,
      "parameters": 3,
      "return_type": "MapTile_Pure *"
    },
    "on_destruction_request": {
      "file": "src/MapTile_Pure.cpp",
      "line": 66,
      "signature": "void on_destruction_request()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "void"
    },
    "update_all_systems": {
      "file": "src/GameSystems.cpp",
      "line": 19,
      "signature": "void update_all_systems(float deltaTime)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 1,
      "return_type": "void"
    },
    "render_all_systems": {
      "file": "src/GameSystems.cpp",
      "line": 46,
      "signature": "void render_all_systems()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "void"
    },
    "update_input_system": {
      "file": "src/GameSystems.cpp",
      "line": 52,
      "signature": "void update_input_system(float deltaTime)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 1,
      "return_type": "void"
    },
    "update_physics_system": {
      "file": "src/GameSystems.cpp",
      "line": 56,
      "signature": "void update_physics_system(float deltaTime)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 1,
      "return_type": "void"
    },
    "update_ai_system": {
      "file": "src/GameSystems.cpp",
      "line": 67,
      "signature": "void update_ai_system(float deltaTime)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 1,
      "return_type": "void"
    },
    "update_collision_system": {
      "file": "src/GameSystems.cpp",
      "line": 78,
      "signature": "void update_collision_system(float deltaTime)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 1,
      "return_type": "void"
    },
    "update_animation_system": {
      "file": "src/GameSystems.cpp",
      "line": 82,
      "signature": "void update_animation_system(float deltaTime)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 1,
      "return_type": "void"
    },
    "render_world": {
      "file": "src/GameSystems.cpp",
      "line": 86,
      "signature": "void render_world()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "void"
    },
    "render_effects": {
      "file": "src/GameSystems.cpp",
      "line": 90,
      "signature": "void render_effects()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "void"
    },
    "render_ui": {
      "file": "src/GameSystems.cpp",
      "line": 94,
      "signature": "void render_ui()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "void"
    },
    "set_object_references": {
      "file": "src/GameSystems.cpp",
      "line": 98,
      "signature": "void set_object_references(int * objects, int * bombers)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 2,
      "return_type": "void"
    },
    "init_all_systems": {
      "file": "src/GameSystems.cpp",
      "line": 105,
      "signature": "void init_all_systems()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "void"
    },
    "register_object": {
      "file": "src/GameSystems.cpp",
      "line": 121,
      "signature": "void register_object(GameObject * obj)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 1,
      "return_type": "void"
    },
    "register_bomber": {
      "file": "src/GameSystems.cpp",
      "line": 128,
      "signature": "void register_bomber(Bomber * bomber)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 1,
      "return_type": "void"
    },
    "cleanup_destroyed_objects": {
      "file": "src/GameSystems.cpp",
      "line": 135,
      "signature": "void cleanup_destroyed_objects()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "void"
    },
    "act": {
      "file": "src/ParticleSystem.cpp",
      "line": 49,
      "signature": "void act(float deltaTime)",
      "calls": [
        "grid_to_pixel",
        "find_nearest_bomber",
        "get_gpu_renderer",
        "get_context",
        "get_spatial_grid"
      ],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 1,
      "return_type": "void"
    },
    "show": {
      "file": "src/ParticleSystem.cpp",
      "line": 82,
      "signature": "void show()",
      "calls": [
        "get_map_x",
        "get_rendering_facade",
        "render_sprite",
        "get_map_y",
        "get_object_state",
        "get_gpu_renderer",
        "get_context"
      ],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "void"
    },
    "update_particles": {
      "file": "src/ParticleSystem.cpp",
      "line": 86,
      "signature": "void update_particles(float deltaTime)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 1,
      "return_type": "void"
    },
    "render_particles": {
      "file": "src/ParticleSystem.cpp",
      "line": 122,
      "signature": "void render_particles()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "void"
    },
    "create_particle": {
      "file": "src/ParticleSystem.cpp",
      "line": 126,
      "signature": "void create_particle(float px, float py, float vel_x, float vel_y, float life, float size, Uint8 r, Uint8 g, Uint8 b)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 9,
      "return_type": "void"
    },
    "emit_explosion_sparks": {
      "file": "src/ParticleSystem.cpp",
      "line": 148,
      "signature": "void emit_explosion_sparks(int count)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 1,
      "return_type": "void"
    },
    "emit_dust_cloud": {
      "file": "src/ParticleSystem.cpp",
      "line": 170,
      "signature": "void emit_dust_cloud(int count)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 1,
      "return_type": "void"
    },
    "emit_fire_particles": {
      "file": "src/ParticleSystem.cpp",
      "line": 203,
      "signature": "void emit_fire_particles(int count)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 1,
      "return_type": "void"
    },
    "emit_smoke_trail": {
      "file": "src/ParticleSystem.cpp",
      "line": 238,
      "signature": "void emit_smoke_trail(int count)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 1,
      "return_type": "void"
    },
    "destroy": {
      "file": "src/MapTile_Box.cpp",
      "line": 242,
      "signature": "void destroy()",
      "calls": [
        "time_elapsed"
      ],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "void"
    },
    "apply_force": {
      "file": "src/CorpsePart.cpp",
      "line": 158,
      "signature": "void apply_force(const Vector2D & force)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 1,
      "return_type": "void"
    },
    "apply_drag": {
      "file": "src/CorpsePart.cpp",
      "line": 164,
      "signature": "void apply_drag()",
      "calls": [
        "magnitude"
      ],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "void"
    },
    "apply_gravity": {
      "file": "src/CorpsePart.cpp",
      "line": 179,
      "signature": "void apply_gravity()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "void"
    },
    "handle_collisions": {
      "file": "src/CorpsePart.cpp",
      "line": 185,
      "signature": "void handle_collisions(float deltaTime)",
      "calls": [
        "abs"
      ],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 1,
      "return_type": "void"
    },
    "update_blood_trail": {
      "file": "src/CorpsePart.cpp",
      "line": 227,
      "signature": "void update_blood_trail(float deltaTime)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 1,
      "return_type": "void"
    },
    "emit_blood": {
      "file": "src/CorpsePart.cpp",
      "line": 244,
      "signature": "void emit_blood()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "void"
    },
    "render_blood_trails": {
      "file": "src/CorpsePart.cpp",
      "line": 262,
      "signature": "void render_blood_trails()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "void"
    },
    "get_part_mass": {
      "file": "src/CorpsePart.cpp",
      "line": 268,
      "signature": "float get_part_mass(int part_type)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 1,
      "return_type": "float"
    },
    "get_part_surface_area": {
      "file": "src/CorpsePart.cpp",
      "line": 279,
      "signature": "float get_part_surface_area(int part_type)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 1,
      "return_type": "float"
    },
    "explode": {
      "file": "src/BomberCorpse.cpp",
      "line": 68,
      "signature": "void explode()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "void"
    },
    "create_gore_explosion": {
      "file": "src/BomberCorpse.cpp",
      "line": 79,
      "signature": "void create_gore_explosion()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "void"
    },
    "handle_error": {
      "file": "src/ErrorHandling.cpp",
      "line": 6,
      "signature": "ErrorRecoveryStrategy handle_error(const GameException & error)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 1,
      "return_type": "ErrorRecoveryStrategy"
    },
    "register_error_handler": {
      "file": "src/ErrorHandling.cpp",
      "line": 34,
      "signature": "void register_error_handler(GameErrorType error_type, ErrorCallback callback)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 2,
      "return_type": "void"
    },
    "get_error_statistics": {
      "file": "src/ErrorHandling.cpp",
      "line": 45,
      "signature": "ErrorHandler::ErrorStats get_error_statistics()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "ErrorHandler::ErrorStats"
    },
    "clear_error_statistics": {
      "file": "src/ErrorHandling.cpp",
      "line": 73,
      "signature": "void clear_error_statistics()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "void"
    },
    "log_error": {
      "file": "src/ErrorHandling.cpp",
      "line": 78,
      "signature": "void log_error(const GameException & error)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 1,
      "return_type": "void"
    },
    "get_default_strategy": {
      "file": "src/ErrorHandling.cpp",
      "line": 119,
      "signature": "ErrorRecoveryStrategy get_default_strategy(GameErrorType type, ErrorSeverity severity)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 2,
      "return_type": "ErrorRecoveryStrategy"
    },
    "update_frame": {
      "file": "src/GameLogic.cpp",
      "line": 16,
      "signature": "void update_frame(float deltaTime)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 1,
      "return_type": "void"
    },
    "update_all_objects": {
      "file": "src/GameLogic.cpp",
      "line": 36,
      "signature": "void update_all_objects(float deltaTime)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 1,
      "return_type": "void"
    },
    "render_all_objects": {
      "file": "src/GameLogic.cpp",
      "line": 55,
      "signature": "void render_all_objects()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "void"
    },
    "cleanup_deleted_objects": {
      "file": "src/GameLogic.cpp",
      "line": 82,
      "signature": "void cleanup_deleted_objects()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "void"
    },
    "find_object_by_id": {
      "file": "src/GameLogic.cpp",
      "line": 89,
      "signature": "GameObject * find_object_by_id(int object_id)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 1,
      "return_type": "GameObject *"
    },
    "find_bomber_by_id": {
      "file": "src/GameLogic.cpp",
      "line": 96,
      "signature": "Bomber * find_bomber_by_id(int bomber_id)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 1,
      "return_type": "Bomber *"
    },
    "count_active_objects": {
      "file": "src/GameLogic.cpp",
      "line": 103,
      "signature": "int count_active_objects()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "int"
    },
    "clear_all_objects": {
      "file": "src/GameLogic.cpp",
      "line": 114,
      "signature": "void clear_all_objects()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "void"
    },
    "reset_game_state": {
      "file": "src/GameLogic.cpp",
      "line": 121,
      "signature": "void reset_game_state()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "void"
    },
    "get_game_statistics": {
      "file": "src/GameLogic.cpp",
      "line": 132,
      "signature": "GameLogic::GameStats get_game_statistics()",
      "calls": [],
      "called_by": [
        "log_frame_statistics"
      ],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "GameLogic::GameStats"
    },
    "log_frame_statistics": {
      "file": "src/GameLogic.cpp",
      "line": 166,
      "signature": "void log_frame_statistics()",
      "calls": [
        "get_game_statistics"
      ],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "void"
    },
    "should_skip_object_update": {
      "file": "src/GameLogic.cpp",
      "line": 178,
      "signature": "bool should_skip_object_update(GameObject * obj)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 1,
      "return_type": "bool"
    },
    "initialize": {
      "file": "src/GPUAcceleratedRenderer.cpp",
      "line": 36,
      "signature": "GameResult<void> initialize(SDL_Window * _window, int width, int height)",
      "calls": [
        "initialize_particle_manager",
        "initialize_text_renderer",
        "initialize_gpu_renderer"
      ],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 3,
      "return_type": "GameResult<void>"
    },
    "load_all_shaders": {
      "file": "src/GPUAcceleratedRenderer.cpp",
      "line": 211,
      "signature": "bool load_all_shaders()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "bool"
    },
    "compile_shader": {
      "file": "src/GPUAcceleratedRenderer.cpp",
      "line": 325,
      "signature": "int compile_shader(const std::string & source, int type, const std::string & name)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 3,
      "return_type": "int"
    },
    "create_program": {
      "file": "src/GPUAcceleratedRenderer.cpp",
      "line": 344,
      "signature": "int create_program(int vertex, int fragment, const std::string & name)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 3,
      "return_type": "int"
    },
    "create_compute_program": {
      "file": "src/GPUAcceleratedRenderer.cpp",
      "line": 372,
      "signature": "int create_compute_program(int compute, const std::string & name)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 2,
      "return_type": "int"
    },
    "setup_matrices": {
      "file": "src/GPUAcceleratedRenderer.cpp",
      "line": 391,
      "signature": "void setup_matrices()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "void"
    },
    "setup_sprite_rendering": {
      "file": "src/GPUAcceleratedRenderer.cpp",
      "line": 408,
      "signature": "void setup_sprite_rendering()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "void"
    },
    "init_particle_system": {
      "file": "src/GPUAcceleratedRenderer.cpp",
      "line": 480,
      "signature": "bool init_particle_system(int max_particles)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 1,
      "return_type": "bool"
    },
    "begin_frame": {
      "file": "src/GPUAcceleratedRenderer.cpp",
      "line": 520,
      "signature": "void begin_frame()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "void"
    },
    "end_frame": {
      "file": "src/GPUAcceleratedRenderer.cpp",
      "line": 536,
      "signature": "void end_frame()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "void"
    },
    "present": {
      "file": "src/GPUAcceleratedRenderer.cpp",
      "line": 545,
      "signature": "void present()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "void"
    },
    "check_gl_error": {
      "file": "src/GPUAcceleratedRenderer.cpp",
      "line": 550,
      "signature": "void check_gl_error(const std::string & operation)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 1,
      "return_type": "void"
    },
    "preprocess_shader_includes": {
      "file": "src/GPUAcceleratedRenderer.cpp",
      "line": 566,
      "signature": "std::string preprocess_shader_includes(const std::string & source)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 1,
      "return_type": "std::string"
    },
    "begin_batch": {
      "file": "src/GPUAcceleratedRenderer.cpp",
      "line": 616,
      "signature": "void begin_batch(EffectType effect)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 1,
      "return_type": "void"
    },
    "flush_batch": {
      "file": "src/GPUAcceleratedRenderer.cpp",
      "line": 623,
      "signature": "void flush_batch()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "void"
    },
    "update_uniforms": {
      "file": "src/GPUAcceleratedRenderer.cpp",
      "line": 762,
      "signature": "void update_uniforms()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "void"
    },
    "add_sprite": {
      "file": "src/GPUAcceleratedRenderer.cpp",
      "line": 847,
      "signature": "void add_sprite(float x, float y, float w, float h, int texture, const float * color, float rotation, const float * scale, int sprite_number)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 9,
      "return_type": "void"
    },
    "add_animated_sprite": {
      "file": "src/GPUAcceleratedRenderer.cpp",
      "line": 852,
      "signature": "void add_animated_sprite(float x, float y, float w, float h, int texture, const float * color, float rotation, const float * scale, EffectType effect, int sprite_number)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 10,
      "return_type": "void"
    },
    "end_batch": {
      "file": "src/GPUAcceleratedRenderer.cpp",
      "line": 933,
      "signature": "void end_batch()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "void"
    },
    "update_particles_gpu": {
      "file": "src/GPUAcceleratedRenderer.cpp",
      "line": 937,
      "signature": "void update_particles_gpu(float deltaTime)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 1,
      "return_type": "void"
    },
    "emit_particles": {
      "file": "src/GPUAcceleratedRenderer.cpp",
      "line": 997,
      "signature": "void emit_particles(float x, float y, int count, ParticleType type, const float * velocity, float life)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 6,
      "return_type": "void"
    },
    "set_camera": {
      "file": "src/GPUAcceleratedRenderer.cpp",
      "line": 1089,
      "signature": "void set_camera(const float * position, float zoom)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 2,
      "return_type": "void"
    },
    "set_global_effect_params": {
      "file": "src/GPUAcceleratedRenderer.cpp",
      "line": 1102,
      "signature": "void set_global_effect_params(const float * params)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 1,
      "return_type": "void"
    },
    "create_texture_from_surface": {
      "file": "src/GPUAcceleratedRenderer.cpp",
      "line": 1108,
      "signature": "int create_texture_from_surface(SDL_Surface * surface)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 1,
      "return_type": "int"
    },
    "print_performance_stats": {
      "file": "src/GPUAcceleratedRenderer.cpp",
      "line": 1127,
      "signature": "void print_performance_stats()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "void"
    },
    "register_texture_metadata": {
      "file": "src/GPUAcceleratedRenderer.cpp",
      "line": 1136,
      "signature": "void register_texture_metadata(int texture_id, int width, int height, int sprite_width, int sprite_height)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 5,
      "return_type": "void"
    },
    "calculate_sprite_uv": {
      "file": "src/GPUAcceleratedRenderer.cpp",
      "line": 1148,
      "signature": "void calculate_sprite_uv(int texture, int sprite_number, float & u_start, float & u_end, float & v_start, float & v_end)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 6,
      "return_type": "void"
    },
    "set_explosion_effect": {
      "file": "src/GPUAcceleratedRenderer.cpp",
      "line": 1183,
      "signature": "void set_explosion_effect(float center_x, float center_y, float radius, float strength)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 4,
      "return_type": "void"
    },
    "set_vortex_effect": {
      "file": "src/GPUAcceleratedRenderer.cpp",
      "line": 1190,
      "signature": "void set_vortex_effect(float center_x, float center_y, float radius, float strength)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 4,
      "return_type": "void"
    },
    "set_environmental_effects": {
      "file": "src/GPUAcceleratedRenderer.cpp",
      "line": 1197,
      "signature": "void set_environmental_effects(float air_density_value, const float * magnetic_field_value)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 2,
      "return_type": "void"
    },
    "clear_effects": {
      "file": "src/GPUAcceleratedRenderer.cpp",
      "line": 1207,
      "signature": "void clear_effects()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "void"
    },
    "set_explosion_info": {
      "file": "src/GPUAcceleratedRenderer.cpp",
      "line": 1217,
      "signature": "void set_explosion_info(float center_x, float center_y, float age, int up, int down, int left, int right)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 7,
      "return_type": "void"
    },
    "clear_explosion_info": {
      "file": "src/GPUAcceleratedRenderer.cpp",
      "line": 1232,
      "signature": "void clear_explosion_info()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "void"
    },
    "initialize_game_context": {
      "file": "src/ClanBomber.cpp",
      "line": 65,
      "signature": "void initialize_game_context()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "void"
    },
    "is_server": {
      "file": "src/ClanBomber.cpp",
      "line": 98,
      "signature": "bool is_server()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "bool"
    },
    "is_client": {
      "file": "src/ClanBomber.cpp",
      "line": 102,
      "signature": "bool is_client()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "bool"
    },
    "get_server": {
      "file": "src/ClanBomber.cpp",
      "line": 106,
      "signature": "Server * get_server()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "Server *"
    },
    "get_client": {
      "file": "src/ClanBomber.cpp",
      "line": 110,
      "signature": "Client * get_client()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "Client *"
    },
    "get_server_setup": {
      "file": "src/ClanBomber.cpp",
      "line": 114,
      "signature": "ServerSetup * get_server_setup()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "ServerSetup *"
    },
    "get_client_setup": {
      "file": "src/ClanBomber.cpp",
      "line": 118,
      "signature": "ClientSetup * get_client_setup()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "ClientSetup *"
    },
    "get_chat": {
      "file": "src/ClanBomber.cpp",
      "line": 122,
      "signature": "Chat * get_chat()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "Chat *"
    },
    "get_menu": {
      "file": "src/ClanBomber.cpp",
      "line": 126,
      "signature": "Menu * get_menu()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "Menu *"
    },
    "get_next_object_id": {
      "file": "src/ClanBomber.cpp",
      "line": 130,
      "signature": "unsigned short get_next_object_id()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "unsigned short"
    },
    "get_map_path": {
      "file": "src/ClanBomber.cpp",
      "line": 135,
      "signature": "std::filesystem::path get_map_path()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "std::filesystem::path"
    },
    "get_local_map_path": {
      "file": "src/ClanBomber.cpp",
      "line": 139,
      "signature": "std::filesystem::path get_local_map_path()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "std::filesystem::path"
    },
    "lock": {
      "file": "src/ClanBomber.cpp",
      "line": 143,
      "signature": "void lock()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "void"
    },
    "unlock": {
      "file": "src/ClanBomber.cpp",
      "line": 147,
      "signature": "void unlock()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "void"
    },
    "wait": {
      "file": "src/ClanBomber.cpp",
      "line": 151,
      "signature": "void wait()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "void"
    },
    "signal": {
      "file": "src/ClanBomber.cpp",
      "line": 155,
      "signature": "void signal()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "void"
    },
    "delete_all_game_objects": {
      "file": "src/ClanBomber.cpp",
      "line": 159,
      "signature": "void delete_all_game_objects()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "void"
    },
    "get_object_by_id": {
      "file": "src/ClanBomber.cpp",
      "line": 171,
      "signature": "GameObject * get_object_by_id(int object_id)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 1,
      "return_type": "GameObject *"
    },
    "get_server_frame_counter": {
      "file": "src/ClanBomber.cpp",
      "line": 180,
      "signature": "int get_server_frame_counter()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "int"
    },
    "inc_server_frame_counter": {
      "file": "src/ClanBomber.cpp",
      "line": 184,
      "signature": "void inc_server_frame_counter()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "void"
    },
    "paused_game": {
      "file": "src/ClanBomber.cpp",
      "line": 188,
      "signature": "bool paused_game()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "bool"
    },
    "set_pause_game": {
      "file": "src/ClanBomber.cpp",
      "line": 192,
      "signature": "void set_pause_game(bool paused)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 1,
      "return_type": "void"
    },
    "set_client_disconnected_from_server": {
      "file": "src/ClanBomber.cpp",
      "line": 196,
      "signature": "void set_client_disconnected_from_server(bool d)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 1,
      "return_type": "void"
    },
    "is_client_disconnected_from_server": {
      "file": "src/ClanBomber.cpp",
      "line": 200,
      "signature": "bool is_client_disconnected_from_server()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "bool"
    },
    "set_client_connecting_to_new_server": {
      "file": "src/ClanBomber.cpp",
      "line": 204,
      "signature": "void set_client_connecting_to_new_server(bool c)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 1,
      "return_type": "void"
    },
    "is_client_connecting_to_new_server": {
      "file": "src/ClanBomber.cpp",
      "line": 208,
      "signature": "bool is_client_connecting_to_new_server()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "bool"
    },
    "get_map": {
      "file": "src/ClanBomber.cpp",
      "line": 212,
      "signature": "Map * get_map()",
      "calls": [],
      "called_by": [
        "get_tile",
        "get_tile_entity",
        "get_tile_type_at",
        "is_blocked",
        "has_bomber_at",
        "get_legacy_tile"
      ],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "Map *"
    },
    "request_effect": {
      "file": "src/ParticleEffectsManager.cpp",
      "line": 18,
      "signature": "void request_effect(const EffectRequest & request)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 1,
      "return_type": "void"
    },
    "create_box_destruction_effect": {
      "file": "src/ParticleEffectsManager.cpp",
      "line": 41,
      "signature": "void create_box_destruction_effect(float x, float y, float intensity)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 3,
      "return_type": "void"
    },
    "create_explosion_effect": {
      "file": "src/ParticleEffectsManager.cpp",
      "line": 45,
      "signature": "void create_explosion_effect(float x, float y, float intensity)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 3,
      "return_type": "void"
    },
    "process_box_destruction": {
      "file": "src/ParticleEffectsManager.cpp",
      "line": 49,
      "signature": "void process_box_destruction(float x, float y, float intensity)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 3,
      "return_type": "void"
    },
    "process_explosion": {
      "file": "src/ParticleEffectsManager.cpp",
      "line": 68,
      "signature": "void process_explosion(float x, float y, float intensity)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 3,
      "return_type": "void"
    },
    "load_font": {
      "file": "src/TextRenderer.cpp",
      "line": 49,
      "signature": "bool load_font(const std::string & name, const std::string & path, int size)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 3,
      "return_type": "bool"
    },
    "get_font": {
      "file": "src/TextRenderer.cpp",
      "line": 61,
      "signature": "TTF_Font * get_font(const std::string & name)",
      "calls": [],
      "called_by": [
        "render_text"
      ],
      "is_definition": true,
      "is_static": false,
      "parameters": 1,
      "return_type": "TTF_Font *"
    },
    "create_gl_texture_from_surface": {
      "file": "src/TextRenderer.cpp",
      "line": 69,
      "signature": "int create_gl_texture_from_surface(SDL_Surface * surface)",
      "calls": [
        "SDL_ConvertSurface"
      ],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 1,
      "return_type": "int"
    },
    "make_cache_key": {
      "file": "src/TextRenderer.cpp",
      "line": 95,
      "signature": "std::string make_cache_key(const std::string & text, const std::string & font_name, SDL_Color color)",
      "calls": [],
      "called_by": [
        "render_text"
      ],
      "is_definition": true,
      "is_static": false,
      "parameters": 3,
      "return_type": "std::string"
    },
    "render_text": {
      "file": "src/TextRenderer.cpp",
      "line": 101,
      "signature": "std::shared_ptr<TextTexture> render_text(const std::string & text, const std::string & font_name, SDL_Color color)",
      "calls": [
        "make_cache_key",
        "get_font"
      ],
      "called_by": [
        "draw_text_centered",
        "draw_text"
      ],
      "is_definition": true,
      "is_static": false,
      "parameters": 3,
      "return_type": "std::shared_ptr<TextTexture>"
    },
    "draw_text": {
      "file": "src/TextRenderer.cpp",
      "line": 147,
      "signature": "void draw_text(RenderingFacade * rendering_facade, const std::string & text, const std::string & font_name, float x, float y, SDL_Color color)",
      "calls": [
        "render_text"
      ],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 6,
      "return_type": "void"
    },
    "draw_text_centered": {
      "file": "src/TextRenderer.cpp",
      "line": 163,
      "signature": "void draw_text_centered(RenderingFacade * rendering_facade, const std::string & text, const std::string & font_name, float center_x, float y, SDL_Color color)",
      "calls": [
        "render_text"
      ],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 6,
      "return_type": "void"
    },
    "attach": {
      "file": "src/Controller.cpp",
      "line": 36,
      "signature": "void attach(Bomber * _bomber)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 1,
      "return_type": "void"
    },
    "activate": {
      "file": "src/Controller.cpp",
      "line": 41,
      "signature": "void activate()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "void"
    },
    "deactivate": {
      "file": "src/Controller.cpp",
      "line": 46,
      "signature": "void deactivate()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "void"
    },
    "revert": {
      "file": "src/Controller.cpp",
      "line": 51,
      "signature": "void revert()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "void"
    },
    "bomb_normal": {
      "file": "src/Controller.cpp",
      "line": 56,
      "signature": "void bomb_normal()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "void"
    },
    "bomb_always": {
      "file": "src/Controller.cpp",
      "line": 61,
      "signature": "void bomb_always()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "void"
    },
    "get_type": {
      "file": "src/Controller.cpp",
      "line": 107,
      "signature": "Controller::CONTROLLER_TYPE get_type()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "Controller::CONTROLLER_TYPE"
    },
    "run": {
      "file": "src/Game.cpp",
      "line": 154,
      "signature": "void run()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "void"
    },
    "change_screen": {
      "file": "src/Game.cpp",
      "line": 222,
      "signature": "void change_screen(GameState next_state)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 1,
      "return_type": "void"
    },
    "set_name": {
      "file": "src/GameConfig.cpp",
      "line": 100,
      "signature": "void set_name(std::string _name)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 1,
      "return_type": "void"
    },
    "get_name": {
      "file": "src/GameConfig.cpp",
      "line": 107,
      "signature": "std::string get_name()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "std::string"
    },
    "set_skin": {
      "file": "src/GameConfig.cpp",
      "line": 112,
      "signature": "void set_skin(int _skin)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 1,
      "return_type": "void"
    },
    "get_skin": {
      "file": "src/GameConfig.cpp",
      "line": 117,
      "signature": "int get_skin()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "int"
    },
    "set_team": {
      "file": "src/GameConfig.cpp",
      "line": 122,
      "signature": "void set_team(int _team)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 1,
      "return_type": "void"
    },
    "get_team": {
      "file": "src/GameConfig.cpp",
      "line": 127,
      "signature": "int get_team()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "int"
    },
    "set_controller": {
      "file": "src/GameConfig.cpp",
      "line": 132,
      "signature": "void set_controller(int _controller)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 1,
      "return_type": "void"
    },
    "get_controller": {
      "file": "src/GameConfig.cpp",
      "line": 137,
      "signature": "int get_controller()",
      "calls": [],
      "called_by": [
        "init_game"
      ],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "int"
    },
    "enable": {
      "file": "src/GameConfig.cpp",
      "line": 142,
      "signature": "void enable()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "void"
    },
    "disable": {
      "file": "src/GameConfig.cpp",
      "line": 147,
      "signature": "void disable()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "void"
    },
    "set_highlight_maptile": {
      "file": "src/GameConfig.cpp",
      "line": 152,
      "signature": "void set_highlight_maptile(bool _highlight_maptile)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 1,
      "return_type": "void"
    },
    "get_highlight_maptile": {
      "file": "src/GameConfig.cpp",
      "line": 157,
      "signature": "int get_highlight_maptile()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "int"
    },
    "is_enabled": {
      "file": "src/GameConfig.cpp",
      "line": 162,
      "signature": "int is_enabled()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "int"
    },
    "set_enabled": {
      "file": "src/GameConfig.cpp",
      "line": 167,
      "signature": "void set_enabled(bool _enabled)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 1,
      "return_type": "void"
    },
    "set_client_index": {
      "file": "src/GameConfig.cpp",
      "line": 172,
      "signature": "void set_client_index(int index)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 1,
      "return_type": "void"
    },
    "get_client_index": {
      "file": "src/GameConfig.cpp",
      "line": 177,
      "signature": "int get_client_index()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "int"
    },
    "get_config_index": {
      "file": "src/GameConfig.cpp",
      "line": 182,
      "signature": "int get_config_index()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "int"
    },
    "set_config_index": {
      "file": "src/GameConfig.cpp",
      "line": 187,
      "signature": "void set_config_index(int index)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 1,
      "return_type": "void"
    },
    "get_client_ip": {
      "file": "src/GameConfig.cpp",
      "line": 192,
      "signature": "char * get_client_ip()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "char *"
    },
    "set_client_ip": {
      "file": "src/GameConfig.cpp",
      "line": 197,
      "signature": "void set_client_ip(char * ip_string)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 1,
      "return_type": "void"
    },
    "get_number_of_players": {
      "file": "src/GameConfig.cpp",
      "line": 202,
      "signature": "int get_number_of_players()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "int"
    },
    "get_number_of_opponents": {
      "file": "src/GameConfig.cpp",
      "line": 215,
      "signature": "int get_number_of_opponents()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "int"
    },
    "set_round_time": {
      "file": "src/GameConfig.cpp",
      "line": 237,
      "signature": "void set_round_time(int _round_time)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 1,
      "return_type": "void"
    },
    "set_random_map_order": {
      "file": "src/GameConfig.cpp",
      "line": 242,
      "signature": "void set_random_map_order(int _random_map_order)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 1,
      "return_type": "void"
    },
    "set_max_skateboards": {
      "file": "src/GameConfig.cpp",
      "line": 247,
      "signature": "void set_max_skateboards(int _max_skateboards)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 1,
      "return_type": "void"
    },
    "set_max_power": {
      "file": "src/GameConfig.cpp",
      "line": 252,
      "signature": "void set_max_power(int _max_power)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 1,
      "return_type": "void"
    },
    "set_max_bombs": {
      "file": "src/GameConfig.cpp",
      "line": 257,
      "signature": "void set_max_bombs(int _max_bombs)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 1,
      "return_type": "void"
    },
    "set_start_skateboards": {
      "file": "src/GameConfig.cpp",
      "line": 262,
      "signature": "void set_start_skateboards(int _start_skateboards)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 1,
      "return_type": "void"
    },
    "set_start_power": {
      "file": "src/GameConfig.cpp",
      "line": 267,
      "signature": "void set_start_power(int _start_power)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 1,
      "return_type": "void"
    },
    "set_start_bombs": {
      "file": "src/GameConfig.cpp",
      "line": 272,
      "signature": "void set_start_bombs(int _start_bombs)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 1,
      "return_type": "void"
    },
    "set_start_kick": {
      "file": "src/GameConfig.cpp",
      "line": 277,
      "signature": "void set_start_kick(int _start_kick)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 1,
      "return_type": "void"
    },
    "set_start_glove": {
      "file": "src/GameConfig.cpp",
      "line": 282,
      "signature": "void set_start_glove(int _start_glove)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 1,
      "return_type": "void"
    },
    "set_skateboards": {
      "file": "src/GameConfig.cpp",
      "line": 287,
      "signature": "void set_skateboards(int _skateboards)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 1,
      "return_type": "void"
    },
    "set_power": {
      "file": "src/GameConfig.cpp",
      "line": 292,
      "signature": "void set_power(int _power)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 1,
      "return_type": "void"
    },
    "set_bombs": {
      "file": "src/GameConfig.cpp",
      "line": 297,
      "signature": "void set_bombs(int _bombs)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 1,
      "return_type": "void"
    },
    "set_kick": {
      "file": "src/GameConfig.cpp",
      "line": 302,
      "signature": "void set_kick(int _kick)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 1,
      "return_type": "void"
    },
    "set_glove": {
      "file": "src/GameConfig.cpp",
      "line": 307,
      "signature": "void set_glove(int _glove)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 1,
      "return_type": "void"
    },
    "set_joint": {
      "file": "src/GameConfig.cpp",
      "line": 312,
      "signature": "void set_joint(int _joint)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 1,
      "return_type": "void"
    },
    "set_viagra": {
      "file": "src/GameConfig.cpp",
      "line": 317,
      "signature": "void set_viagra(int _viagra)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 1,
      "return_type": "void"
    },
    "set_koks": {
      "file": "src/GameConfig.cpp",
      "line": 322,
      "signature": "void set_koks(int _koks)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 1,
      "return_type": "void"
    },
    "set_start_map": {
      "file": "src/GameConfig.cpp",
      "line": 327,
      "signature": "void set_start_map(int _start_map)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 1,
      "return_type": "void"
    },
    "set_points_to_win": {
      "file": "src/GameConfig.cpp",
      "line": 332,
      "signature": "void set_points_to_win(int _points_to_win)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 1,
      "return_type": "void"
    },
    "set_theme": {
      "file": "src/GameConfig.cpp",
      "line": 337,
      "signature": "void set_theme(int _theme)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 1,
      "return_type": "void"
    },
    "set_filename": {
      "file": "src/GameConfig.cpp",
      "line": 342,
      "signature": "void set_filename(std::filesystem::path _filename)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 1,
      "return_type": "void"
    },
    "set_path": {
      "file": "src/GameConfig.cpp",
      "line": 347,
      "signature": "void set_path(std::filesystem::path _path)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 1,
      "return_type": "void"
    },
    "set_music": {
      "file": "src/GameConfig.cpp",
      "line": 352,
      "signature": "void set_music(int _music)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 1,
      "return_type": "void"
    },
    "set_kids_mode": {
      "file": "src/GameConfig.cpp",
      "line": 357,
      "signature": "void set_kids_mode(int _kids_mode)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 1,
      "return_type": "void"
    },
    "set_corpse_parts": {
      "file": "src/GameConfig.cpp",
      "line": 362,
      "signature": "void set_corpse_parts(int _corpse_parts)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 1,
      "return_type": "void"
    },
    "set_shaky_explosions": {
      "file": "src/GameConfig.cpp",
      "line": 367,
      "signature": "void set_shaky_explosions(int _shaky_explosions)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 1,
      "return_type": "void"
    },
    "set_highlight_maptiles": {
      "file": "src/GameConfig.cpp",
      "line": 372,
      "signature": "void set_highlight_maptiles(int _highlight_maptiles)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 1,
      "return_type": "void"
    },
    "set_random_positions": {
      "file": "src/GameConfig.cpp",
      "line": 377,
      "signature": "void set_random_positions(int _random_positions)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 1,
      "return_type": "void"
    },
    "set_bomb_countdown": {
      "file": "src/GameConfig.cpp",
      "line": 383,
      "signature": "void set_bomb_countdown(int _bomb_countdown)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 1,
      "return_type": "void"
    },
    "set_bomb_delay": {
      "file": "src/GameConfig.cpp",
      "line": 388,
      "signature": "void set_bomb_delay(int _bomb_delay)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 1,
      "return_type": "void"
    },
    "set_bomb_speed": {
      "file": "src/GameConfig.cpp",
      "line": 393,
      "signature": "void set_bomb_speed(int _bomb_speed)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 1,
      "return_type": "void"
    },
    "get_max_skateboards": {
      "file": "src/GameConfig.cpp",
      "line": 398,
      "signature": "int get_max_skateboards()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "int"
    },
    "get_max_power": {
      "file": "src/GameConfig.cpp",
      "line": 403,
      "signature": "int get_max_power()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "int"
    },
    "get_max_bombs": {
      "file": "src/GameConfig.cpp",
      "line": 408,
      "signature": "int get_max_bombs()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "int"
    },
    "get_start_skateboards": {
      "file": "src/GameConfig.cpp",
      "line": 413,
      "signature": "int get_start_skateboards()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "int"
    },
    "get_start_power": {
      "file": "src/GameConfig.cpp",
      "line": 418,
      "signature": "int get_start_power()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "int"
    },
    "get_start_bombs": {
      "file": "src/GameConfig.cpp",
      "line": 423,
      "signature": "int get_start_bombs()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "int"
    },
    "get_start_kick": {
      "file": "src/GameConfig.cpp",
      "line": 428,
      "signature": "int get_start_kick()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "int"
    },
    "get_start_glove": {
      "file": "src/GameConfig.cpp",
      "line": 433,
      "signature": "int get_start_glove()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "int"
    },
    "get_skateboards": {
      "file": "src/GameConfig.cpp",
      "line": 438,
      "signature": "int get_skateboards()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "int"
    },
    "get_power": {
      "file": "src/GameConfig.cpp",
      "line": 443,
      "signature": "int get_power()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "int"
    },
    "get_bombs": {
      "file": "src/GameConfig.cpp",
      "line": 448,
      "signature": "int get_bombs()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "int"
    },
    "get_kick": {
      "file": "src/GameConfig.cpp",
      "line": 453,
      "signature": "int get_kick()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "int"
    },
    "get_glove": {
      "file": "src/GameConfig.cpp",
      "line": 458,
      "signature": "int get_glove()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "int"
    },
    "get_joint": {
      "file": "src/GameConfig.cpp",
      "line": 463,
      "signature": "int get_joint()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "int"
    },
    "get_viagra": {
      "file": "src/GameConfig.cpp",
      "line": 468,
      "signature": "int get_viagra()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "int"
    },
    "get_koks": {
      "file": "src/GameConfig.cpp",
      "line": 473,
      "signature": "int get_koks()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "int"
    },
    "get_start_map": {
      "file": "src/GameConfig.cpp",
      "line": 478,
      "signature": "int get_start_map()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "int"
    },
    "get_random_map_order": {
      "file": "src/GameConfig.cpp",
      "line": 483,
      "signature": "int get_random_map_order()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "int"
    },
    "get_round_time": {
      "file": "src/GameConfig.cpp",
      "line": 488,
      "signature": "int get_round_time()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "int"
    },
    "get_points_to_win": {
      "file": "src/GameConfig.cpp",
      "line": 493,
      "signature": "int get_points_to_win()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "int"
    },
    "get_theme": {
      "file": "src/GameConfig.cpp",
      "line": 498,
      "signature": "int get_theme()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "int"
    },
    "get_sound_enabled": {
      "file": "src/GameConfig.cpp",
      "line": 503,
      "signature": "int get_sound_enabled()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "int"
    },
    "get_music": {
      "file": "src/GameConfig.cpp",
      "line": 508,
      "signature": "int get_music()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "int"
    },
    "get_kids_mode": {
      "file": "src/GameConfig.cpp",
      "line": 513,
      "signature": "int get_kids_mode()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "int"
    },
    "get_corpse_parts": {
      "file": "src/GameConfig.cpp",
      "line": 518,
      "signature": "int get_corpse_parts()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "int"
    },
    "get_shaky_explosions": {
      "file": "src/GameConfig.cpp",
      "line": 523,
      "signature": "int get_shaky_explosions()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "int"
    },
    "get_highlight_maptiles": {
      "file": "src/GameConfig.cpp",
      "line": 528,
      "signature": "int get_highlight_maptiles()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "int"
    },
    "get_random_positions": {
      "file": "src/GameConfig.cpp",
      "line": 534,
      "signature": "int get_random_positions()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "int"
    },
    "get_bomb_countdown": {
      "file": "src/GameConfig.cpp",
      "line": 539,
      "signature": "int get_bomb_countdown()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "int"
    },
    "get_bomb_delay": {
      "file": "src/GameConfig.cpp",
      "line": 544,
      "signature": "int get_bomb_delay()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "int"
    },
    "get_bomb_speed": {
      "file": "src/GameConfig.cpp",
      "line": 549,
      "signature": "int get_bomb_speed()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "int"
    },
    "get_fullscreen": {
      "file": "src/GameConfig.cpp",
      "line": 554,
      "signature": "bool get_fullscreen()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "bool"
    },
    "set_fullscreen": {
      "file": "src/GameConfig.cpp",
      "line": 559,
      "signature": "void set_fullscreen(bool val)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 1,
      "return_type": "void"
    },
    "save": {
      "file": "src/GameConfig.cpp",
      "line": 564,
      "signature": "bool save(bool init)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 1,
      "return_type": "bool"
    },
    "set_last_server": {
      "file": "src/GameConfig.cpp",
      "line": 737,
      "signature": "void set_last_server(std::string server_name)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 1,
      "return_type": "void"
    },
    "get_last_server": {
      "file": "src/GameConfig.cpp",
      "line": 742,
      "signature": "std::string get_last_server()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "std::string"
    },
    "set_local": {
      "file": "src/GameConfig.cpp",
      "line": 748,
      "signature": "void set_local(bool _local)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 1,
      "return_type": "void"
    },
    "is_local": {
      "file": "src/GameConfig.cpp",
      "line": 754,
      "signature": "bool is_local()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "bool"
    },
    "is_server_bomber": {
      "file": "src/GameConfig.cpp",
      "line": 759,
      "signature": "bool is_server_bomber()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "bool"
    },
    "set_server_bomber": {
      "file": "src/GameConfig.cpp",
      "line": 764,
      "signature": "void set_server_bomber(bool from_server)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 1,
      "return_type": "void"
    },
    "initialize_joystick_system": {
      "file": "src/Controller_Joystick.cpp",
      "line": 94,
      "signature": "void initialize_joystick_system()",
      "calls": [
        "SDL_GetJoystickNameForID",
        "SDL_GetJoysticks"
      ],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "void"
    },
    "shutdown_joystick_system": {
      "file": "src/Controller_Joystick.cpp",
      "line": 127,
      "signature": "void shutdown_joystick_system()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "void"
    },
    "update_all_joysticks": {
      "file": "src/Controller_Joystick.cpp",
      "line": 146,
      "signature": "void update_all_joysticks()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "void"
    },
    "get_joystick_count": {
      "file": "src/Controller_Joystick.cpp",
      "line": 155,
      "signature": "int get_joystick_count()",
      "calls": [
        "SDL_GetJoysticks"
      ],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "int"
    },
    "initialize_joystick": {
      "file": "src/Controller_Joystick.cpp",
      "line": 171,
      "signature": "bool initialize_joystick()",
      "calls": [
        "SDL_GetNumJoystickHats",
        "SDL_GetJoysticks",
        "SDL_GetNumJoystickAxes",
        "SDL_GetNumJoystickButtons",
        "SDL_GetGamepadName"
      ],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "bool"
    },
    "cleanup_joystick": {
      "file": "src/Controller_Joystick.cpp",
      "line": 231,
      "signature": "void cleanup_joystick()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "void"
    },
    "is_joystick_connected": {
      "file": "src/Controller_Joystick.cpp",
      "line": 245,
      "signature": "bool is_joystick_connected()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "bool"
    },
    "update_input_state": {
      "file": "src/Controller_Joystick.cpp",
      "line": 249,
      "signature": "void update_input_state()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "void"
    },
    "get_analog_left": {
      "file": "src/Controller_Joystick.cpp",
      "line": 266,
      "signature": "bool get_analog_left()",
      "calls": [
        "SDL_GetJoystickAxis"
      ],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "bool"
    },
    "get_analog_right": {
      "file": "src/Controller_Joystick.cpp",
      "line": 275,
      "signature": "bool get_analog_right()",
      "calls": [
        "SDL_GetJoystickAxis"
      ],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "bool"
    },
    "get_analog_up": {
      "file": "src/Controller_Joystick.cpp",
      "line": 284,
      "signature": "bool get_analog_up()",
      "calls": [
        "SDL_GetJoystickAxis"
      ],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "bool"
    },
    "get_analog_down": {
      "file": "src/Controller_Joystick.cpp",
      "line": 293,
      "signature": "bool get_analog_down()",
      "calls": [
        "SDL_GetJoystickAxis"
      ],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "bool"
    },
    "get_dpad_left": {
      "file": "src/Controller_Joystick.cpp",
      "line": 304,
      "signature": "bool get_dpad_left()",
      "calls": [
        "SDL_GetJoystickHat"
      ],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "bool"
    },
    "get_dpad_right": {
      "file": "src/Controller_Joystick.cpp",
      "line": 313,
      "signature": "bool get_dpad_right()",
      "calls": [
        "SDL_GetJoystickHat"
      ],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "bool"
    },
    "get_dpad_up": {
      "file": "src/Controller_Joystick.cpp",
      "line": 322,
      "signature": "bool get_dpad_up()",
      "calls": [
        "SDL_GetJoystickHat"
      ],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "bool"
    },
    "get_dpad_down": {
      "file": "src/Controller_Joystick.cpp",
      "line": 331,
      "signature": "bool get_dpad_down()",
      "calls": [
        "SDL_GetJoystickHat"
      ],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "bool"
    },
    "get_button_bomb": {
      "file": "src/Controller_Joystick.cpp",
      "line": 342,
      "signature": "bool get_button_bomb()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "bool"
    },
    "initialize_haptic": {
      "file": "src/Controller_Joystick.cpp",
      "line": 366,
      "signature": "void initialize_haptic()",
      "calls": [
        "SDL_GetGamepadName"
      ],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "void"
    },
    "cleanup_haptic": {
      "file": "src/Controller_Joystick.cpp",
      "line": 390,
      "signature": "void cleanup_haptic()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "void"
    },
    "apply_vibration": {
      "file": "src/Controller_Joystick.cpp",
      "line": 399,
      "signature": "void apply_vibration(float intensity)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 1,
      "return_type": "void"
    },
    "calculate_explosion_intensity": {
      "file": "src/Controller_Joystick.cpp",
      "line": 438,
      "signature": "float calculate_explosion_intensity(float explosion_x, float explosion_y, float explosion_power, float bomber_x, float bomber_y, bool bomber_died)",
      "calls": [
        "sqrt"
      ],
      "called_by": [
        "trigger_explosion_vibration"
      ],
      "is_definition": true,
      "is_static": false,
      "parameters": 6,
      "return_type": "float"
    },
    "trigger_explosion_vibration": {
      "file": "src/Controller_Joystick.cpp",
      "line": 500,
      "signature": "void trigger_explosion_vibration(float explosion_x, float explosion_y, float explosion_power, float bomber_x, float bomber_y, bool bomber_died)",
      "calls": [
        "calculate_explosion_intensity"
      ],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 6,
      "return_type": "void"
    },
    "update_haptic": {
      "file": "src/Controller_Joystick.cpp",
      "line": 571,
      "signature": "void update_haptic(float deltaTime)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 1,
      "return_type": "void"
    },
    "stop_vibration": {
      "file": "src/Controller_Joystick.cpp",
      "line": 593,
      "signature": "void stop_vibration()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "void"
    },
    "register_tile": {
      "file": "src/LifecycleManager.cpp",
      "line": 32,
      "signature": "void register_tile(MapTile * tile, int map_x, int map_y)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 3,
      "return_type": "void"
    },
    "register_tile_entity": {
      "file": "src/LifecycleManager.cpp",
      "line": 45,
      "signature": "void register_tile_entity(TileEntity * tile_entity)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 1,
      "return_type": "void"
    },
    "mark_for_destruction": {
      "file": "src/LifecycleManager.cpp",
      "line": 53,
      "signature": "void mark_for_destruction(GameObject * obj)",
      "calls": [
        "find_managed_object"
      ],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 1,
      "return_type": "void"
    },
    "mark_tile_for_destruction": {
      "file": "src/LifecycleManager.cpp",
      "line": 73,
      "signature": "void mark_tile_for_destruction(MapTile * tile, MapTile * replacement)",
      "calls": [
        "find_managed_tile"
      ],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 2,
      "return_type": "void"
    },
    "mark_tile_entity_for_destruction": {
      "file": "src/LifecycleManager.cpp",
      "line": 91,
      "signature": "void mark_tile_entity_for_destruction(TileEntity * tile_entity)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 1,
      "return_type": "void"
    },
    "update_states": {
      "file": "src/LifecycleManager.cpp",
      "line": 99,
      "signature": "void update_states(float deltaTime)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 1,
      "return_type": "void"
    },
    "update_object_state": {
      "file": "src/LifecycleManager.cpp",
      "line": 115,
      "signature": "void update_object_state(ManagedObject & managed, float deltaTime)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 2,
      "return_type": "void"
    },
    "update_tile_state": {
      "file": "src/LifecycleManager.cpp",
      "line": 150,
      "signature": "void update_tile_state(ManagedTile & managed, float deltaTime)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 2,
      "return_type": "void"
    },
    "cleanup_dead_objects": {
      "file": "src/LifecycleManager.cpp",
      "line": 195,
      "signature": "void cleanup_dead_objects()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "void"
    },
    "get_object_state": {
      "file": "src/LifecycleManager.cpp",
      "line": 243,
      "signature": "LifecycleManager::ObjectState get_object_state(GameObject * obj)",
      "calls": [
        "find_managed_object"
      ],
      "called_by": [
        "show",
        "is_dying_or_dead",
        "operator()"
      ],
      "is_definition": true,
      "is_static": false,
      "parameters": 1,
      "return_type": "LifecycleManager::ObjectState"
    },
    "get_tile_state": {
      "file": "src/LifecycleManager.cpp",
      "line": 248,
      "signature": "LifecycleManager::ObjectState get_tile_state(MapTile * tile)",
      "calls": [
        "find_managed_tile"
      ],
      "called_by": [
        "is_dying_or_dead",
        "is_tile_ready_for_replacement",
        "operator()"
      ],
      "is_definition": true,
      "is_static": false,
      "parameters": 1,
      "return_type": "LifecycleManager::ObjectState"
    },
    "get_tile_entity_state": {
      "file": "src/LifecycleManager.cpp",
      "line": 253,
      "signature": "LifecycleManager::ObjectState get_tile_entity_state(TileEntity * tile_entity)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 1,
      "return_type": "LifecycleManager::ObjectState"
    },
    "is_dying_or_dead": {
      "file": "src/LifecycleManager.cpp",
      "line": 258,
      "signature": "bool is_dying_or_dead(GameObject * obj)",
      "calls": [
        "get_object_state",
        "get_tile_state"
      ],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 1,
      "return_type": "bool"
    },
    "clear_all": {
      "file": "src/LifecycleManager.cpp",
      "line": 273,
      "signature": "void clear_all()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "void"
    },
    "get_active_object_count": {
      "file": "src/LifecycleManager.cpp",
      "line": 295,
      "signature": "int get_active_object_count()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "int"
    },
    "get_active_tile_count": {
      "file": "src/LifecycleManager.cpp",
      "line": 302,
      "signature": "int get_active_tile_count()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "int"
    },
    "find_managed_object": {
      "file": "src/LifecycleManager.cpp",
      "line": 310,
      "signature": "LifecycleManager::ManagedObject * find_managed_object(GameObject * obj)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 1,
      "return_type": "LifecycleManager::ManagedObject *"
    },
    "find_managed_tile": {
      "file": "src/LifecycleManager.cpp",
      "line": 318,
      "signature": "LifecycleManager::ManagedTile * find_managed_tile(MapTile * tile)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 1,
      "return_type": "LifecycleManager::ManagedTile *"
    },
    "explode_delayed": {
      "file": "src/Bomb.cpp",
      "line": 81,
      "signature": "void explode_delayed()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "void"
    },
    "kick": {
      "file": "src/Bomb.cpp",
      "line": 88,
      "signature": "void kick(Direction dir)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 1,
      "return_type": "void"
    },
    "stop": {
      "file": "src/Bomb.cpp",
      "line": 98,
      "signature": "void stop()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "void"
    },
    "collect": {
      "file": "src/Extra.cpp",
      "line": 122,
      "signature": "void collect()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "void"
    },
    "apply_effect_to_bomber": {
      "file": "src/Extra.cpp",
      "line": 144,
      "signature": "void apply_effect_to_bomber(Bomber * bomber)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 1,
      "return_type": "void"
    },
    "clear_screen": {
      "file": "src/RenderingFacade.cpp",
      "line": 126,
      "signature": "void clear_screen(uint8_t r, uint8_t g, uint8_t b, uint8_t a)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 4,
      "return_type": "void"
    },
    "render_sprite": {
      "file": "src/RenderingFacade.cpp",
      "line": 141,
      "signature": "GameResult<void> render_sprite(const std::string & texture_name, const PixelCoord & position, int sprite_nr, float rotation, uint8_t opacity)",
      "calls": [
        "get_texture"
      ],
      "called_by": [
        "show"
      ],
      "is_definition": true,
      "is_static": false,
      "parameters": 5,
      "return_type": "GameResult<void>"
    },
    "render_sprite_at_grid": {
      "file": "src/RenderingFacade.cpp",
      "line": 199,
      "signature": "GameResult<void> render_sprite_at_grid(const std::string & texture_name, const GridCoord & grid_position, int sprite_nr, float rotation, uint8_t opacity)",
      "calls": [
        "grid_to_pixel"
      ],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 5,
      "return_type": "GameResult<void>"
    },
    "render_sprite_batch": {
      "file": "src/RenderingFacade.cpp",
      "line": 208,
      "signature": "GameResult<void> render_sprite_batch(const std::string & texture_name, const int & commands)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 2,
      "return_type": "GameResult<void>"
    },
    "render_particle_effect": {
      "file": "src/RenderingFacade.cpp",
      "line": 295,
      "signature": "GameResult<void> render_particle_effect(const std::string & effect_type, const PixelCoord & position, float intensity)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 3,
      "return_type": "GameResult<void>"
    },
    "screen_to_world": {
      "file": "src/RenderingFacade.cpp",
      "line": 335,
      "signature": "PixelCoord screen_to_world(const PixelCoord & screen_coord)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 1,
      "return_type": "PixelCoord"
    },
    "world_to_screen": {
      "file": "src/RenderingFacade.cpp",
      "line": 341,
      "signature": "PixelCoord world_to_screen(const PixelCoord & world_coord)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 1,
      "return_type": "PixelCoord"
    },
    "is_position_visible": {
      "file": "src/RenderingFacade.cpp",
      "line": 346,
      "signature": "bool is_position_visible(const PixelCoord & position)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 1,
      "return_type": "bool"
    },
    "get_viewport_bounds": {
      "file": "src/RenderingFacade.cpp",
      "line": 351,
      "signature": "RenderingFacade::ViewportBounds get_viewport_bounds()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "RenderingFacade::ViewportBounds"
    },
    "update_config": {
      "file": "src/RenderingFacade.cpp",
      "line": 357,
      "signature": "void update_config(const RenderingConfig & new_config)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 1,
      "return_type": "void"
    },
    "set_debug_mode": {
      "file": "src/RenderingFacade.cpp",
      "line": 367,
      "signature": "void set_debug_mode(bool enabled)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 1,
      "return_type": "void"
    },
    "reset_statistics": {
      "file": "src/RenderingFacade.cpp",
      "line": 374,
      "signature": "void reset_statistics()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "void"
    },
    "render_debug_info": {
      "file": "src/RenderingFacade.cpp",
      "line": 378,
      "signature": "void render_debug_info()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "void"
    },
    "preload_texture": {
      "file": "src/RenderingFacade.cpp",
      "line": 392,
      "signature": "GameResult<void> preload_texture(const std::string & texture_name)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 1,
      "return_type": "GameResult<void>"
    },
    "unload_texture": {
      "file": "src/RenderingFacade.cpp",
      "line": 410,
      "signature": "void unload_texture(const std::string & texture_name)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 1,
      "return_type": "void"
    },
    "get_texture_info": {
      "file": "src/RenderingFacade.cpp",
      "line": 418,
      "signature": "RenderingFacade::TextureInfo get_texture_info(const std::string & texture_name)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 1,
      "return_type": "RenderingFacade::TextureInfo"
    },
    "initialize_gpu_renderer": {
      "file": "src/RenderingFacade.cpp",
      "line": 438,
      "signature": "GameResult<void> initialize_gpu_renderer(SDL_Window * window)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 1,
      "return_type": "GameResult<void>"
    },
    "initialize_text_renderer": {
      "file": "src/RenderingFacade.cpp",
      "line": 465,
      "signature": "GameResult<void> initialize_text_renderer()",
      "calls": [
        "SDL_GetBasePath"
      ],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "GameResult<void>"
    },
    "initialize_particle_manager": {
      "file": "src/RenderingFacade.cpp",
      "line": 507,
      "signature": "GameResult<void> initialize_particle_manager()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "GameResult<void>"
    },
    "update_statistics": {
      "file": "src/RenderingFacade.cpp",
      "line": 528,
      "signature": "void update_statistics()",
      "calls": [
        "SDL_GetTicks"
      ],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "void"
    },
    "validate_rendering_state": {
      "file": "src/RenderingFacade.cpp",
      "line": 539,
      "signature": "void validate_rendering_state()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "void"
    },
    "handle_gpu_error": {
      "file": "src/RenderingFacade.cpp",
      "line": 551,
      "signature": "GameResult<void> handle_gpu_error(const std::string & operation)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 1,
      "return_type": "GameResult<void>"
    },
    "handle_text_error": {
      "file": "src/RenderingFacade.cpp",
      "line": 557,
      "signature": "GameResult<void> handle_text_error(const std::string & operation)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 1,
      "return_type": "GameResult<void>"
    },
    "handle_particle_error": {
      "file": "src/RenderingFacade.cpp",
      "line": 562,
      "signature": "GameResult<void> handle_particle_error(const std::string & operation)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 1,
      "return_type": "GameResult<void>"
    },
    "die": {
      "file": "src/Bomber.cpp",
      "line": 87,
      "signature": "void die()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "void"
    },
    "is_dead": {
      "file": "src/Bomber.cpp",
      "line": 91,
      "signature": "bool is_dead()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "bool"
    },
    "set_lives": {
      "file": "src/Bomber.cpp",
      "line": 96,
      "signature": "void set_lives(int lives)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 1,
      "return_type": "void"
    },
    "get_lives": {
      "file": "src/Bomber.cpp",
      "line": 100,
      "signature": "int get_lives()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "int"
    },
    "lose_life": {
      "file": "src/Bomber.cpp",
      "line": 104,
      "signature": "void lose_life()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "void"
    },
    "has_lives": {
      "file": "src/Bomber.cpp",
      "line": 108,
      "signature": "bool has_lives()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "bool"
    },
    "respawn": {
      "file": "src/Bomber.cpp",
      "line": 113,
      "signature": "void respawn()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "void"
    },
    "is_respawning": {
      "file": "src/Bomber.cpp",
      "line": 117,
      "signature": "bool is_respawning()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "bool"
    },
    "set_invincible": {
      "file": "src/Bomber.cpp",
      "line": 121,
      "signature": "void set_invincible(bool inv)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 1,
      "return_type": "void"
    },
    "is_invincible": {
      "file": "src/Bomber.cpp",
      "line": 125,
      "signature": "bool is_invincible()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "bool"
    },
    "set_number": {
      "file": "src/Bomber.cpp",
      "line": 148,
      "signature": "void set_number(int number)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 1,
      "return_type": "void"
    },
    "get_number": {
      "file": "src/Bomber.cpp",
      "line": 152,
      "signature": "int get_number()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "int"
    },
    "fly_to": {
      "file": "src/Bomber.cpp",
      "line": 157,
      "signature": "void fly_to(int target_x, int target_y, float duration_ms)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 3,
      "return_type": "void"
    },
    "can_move": {
      "file": "src/Bomber.cpp",
      "line": 167,
      "signature": "bool can_move()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "bool"
    },
    "place_bomb": {
      "file": "src/Bomber.cpp",
      "line": 172,
      "signature": "void place_bomb()",
      "calls": [
        "get_map_x",
        "get_map_y",
        "grid_to_pixel",
        "get_x",
        "get_y"
      ],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "void"
    },
    "throw_bomb": {
      "file": "src/Bomber.cpp",
      "line": 176,
      "signature": "void throw_bomb()",
      "calls": [
        "get_y",
        "get_x"
      ],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "void"
    },
    "can_place_bomb": {
      "file": "src/Bomber.cpp",
      "line": 180,
      "signature": "bool can_place_bomb()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "bool"
    },
    "inc_speed": {
      "file": "src/Bomber.cpp",
      "line": 185,
      "signature": "void inc_speed(int amount)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 1,
      "return_type": "void"
    },
    "dec_speed": {
      "file": "src/Bomber.cpp",
      "line": 192,
      "signature": "void dec_speed(int amount)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 1,
      "return_type": "void"
    },
    "inc_power": {
      "file": "src/Bomber.cpp",
      "line": 203,
      "signature": "void inc_power(int amount)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 1,
      "return_type": "void"
    },
    "inc_max_bombs": {
      "file": "src/Bomber.cpp",
      "line": 212,
      "signature": "void inc_max_bombs(int amount)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 1,
      "return_type": "void"
    },
    "get_current_bombs": {
      "file": "src/Bomber.cpp",
      "line": 216,
      "signature": "int get_current_bombs()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "int"
    },
    "inc_current_bombs": {
      "file": "src/Bomber.cpp",
      "line": 220,
      "signature": "void inc_current_bombs()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "void"
    },
    "dec_current_bombs": {
      "file": "src/Bomber.cpp",
      "line": 224,
      "signature": "void dec_current_bombs()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "void"
    },
    "can_kick": {
      "file": "src/Bomber.cpp",
      "line": 229,
      "signature": "bool can_kick()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "bool"
    },
    "can_throw": {
      "file": "src/Bomber.cpp",
      "line": 233,
      "signature": "bool can_throw()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "bool"
    },
    "can_ignore_bomb_collision": {
      "file": "src/Bomber.cpp",
      "line": 237,
      "signature": "bool can_ignore_bomb_collision(Bomb * bomb)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 1,
      "return_type": "bool"
    },
    "set_can_kick": {
      "file": "src/Bomber.cpp",
      "line": 241,
      "signature": "void set_can_kick(bool kick)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 1,
      "return_type": "void"
    },
    "set_can_throw": {
      "file": "src/Bomber.cpp",
      "line": 245,
      "signature": "void set_can_throw(bool throw_ability)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 1,
      "return_type": "void"
    },
    "init_game": {
      "file": "src/GameplayScreen.cpp",
      "line": 49,
      "signature": "void init_game()",
      "calls": [
        "create",
        "get_controller",
        "grid_to_pixel",
        "get_bomber_pos"
      ],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "void"
    },
    "deinit_game": {
      "file": "src/GameplayScreen.cpp",
      "line": 189,
      "signature": "void deinit_game()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "void"
    },
    "update_audio_listener": {
      "file": "src/GameplayScreen.cpp",
      "line": 332,
      "signature": "void update_audio_listener()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "void"
    },
    "act_all": {
      "file": "src/GameplayScreen.cpp",
      "line": 381,
      "signature": "void act_all()",
      "calls": [
        "time_elapsed"
      ],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "void"
    },
    "delete_some": {
      "file": "src/GameplayScreen.cpp",
      "line": 412,
      "signature": "void delete_some()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "void"
    },
    "show_all": {
      "file": "src/GameplayScreen.cpp",
      "line": 446,
      "signature": "void show_all()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "void"
    },
    "check_victory_conditions": {
      "file": "src/GameplayScreen.cpp",
      "line": 483,
      "signature": "void check_victory_conditions()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "void"
    },
    "render_victory_screen": {
      "file": "src/GameplayScreen.cpp",
      "line": 540,
      "signature": "void render_victory_screen()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "void"
    },
    "calculate_flight_path": {
      "file": "src/ThrownBomb.cpp",
      "line": 28,
      "signature": "void calculate_flight_path()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "void"
    },
    "spawn_extra": {
      "file": "src/MapTile.cpp",
      "line": 61,
      "signature": "void spawn_extra()",
      "calls": [
        "grid_to_pixel"
      ],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "void"
    },
    "is_position_blocked": {
      "file": "src/GameContext.cpp",
      "line": 64,
      "signature": "bool is_position_blocked(int map_x, int map_y)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 2,
      "return_type": "bool"
    },
    "has_bomb_at": {
      "file": "src/GameContext.cpp",
      "line": 68,
      "signature": "bool has_bomb_at(int map_x, int map_y)",
      "calls": [
        "get_tile_entity",
        "get_context",
        "get_tile"
      ],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 2,
      "return_type": "bool"
    },
    "is_position_walkable": {
      "file": "src/GameContext.cpp",
      "line": 72,
      "signature": "bool is_position_walkable(int map_x, int map_y)",
      "calls": [
        "get_tile_at"
      ],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 2,
      "return_type": "bool"
    },
    "request_destruction_effect": {
      "file": "src/GameContext.cpp",
      "line": 76,
      "signature": "void request_destruction_effect(float x, float y, float intensity)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 3,
      "return_type": "void"
    },
    "remove_from_spatial_systems": {
      "file": "src/GameContext.cpp",
      "line": 91,
      "signature": "void remove_from_spatial_systems(GameObject * obj)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 1,
      "return_type": "void"
    },
    "set_object_lists": {
      "file": "src/GameContext.cpp",
      "line": 120,
      "signature": "void set_object_lists(int * objects)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 1,
      "return_type": "void"
    },
    "set_map": {
      "file": "src/GameContext.cpp",
      "line": 125,
      "signature": "void set_map(Map * new_map)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 1,
      "return_type": "void"
    },
    "update_object_position_in_spatial_grid": {
      "file": "src/GameContext.cpp",
      "line": 130,
      "signature": "void update_object_position_in_spatial_grid(GameObject * obj, float old_x, float old_y)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 3,
      "return_type": "void"
    },
    "update_destruction_animation": {
      "file": "src/TileEntity.cpp",
      "line": 171,
      "signature": "void update_destruction_animation(float deltaTime)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 1,
      "return_type": "void"
    },
    "render_destruction_effects": {
      "file": "src/TileEntity.cpp",
      "line": 188,
      "signature": "void render_destruction_effects()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "void"
    },
    "render_fragmentation_effects": {
      "file": "src/TileEntity.cpp",
      "line": 273,
      "signature": "void render_fragmentation_effects()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "void"
    },
    "enumerate_maps": {
      "file": "src/Map.cpp",
      "line": 42,
      "signature": "void enumerate_maps()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "void"
    },
    "clear": {
      "file": "src/Map.cpp",
      "line": 79,
      "signature": "void clear()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "void"
    },
    "reload": {
      "file": "src/Map.cpp",
      "line": 97,
      "signature": "void reload()",
      "calls": [
        "create",
        "get_data"
      ],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "void"
    },
    "get_tile": {
      "file": "src/Map.cpp",
      "line": 177,
      "signature": "MapTile * get_tile(int tx, int ty)",
      "calls": [
        "get_map",
        "get_context"
      ],
      "called_by": [
        "iterate_all_tiles",
        "has_bomb_at",
        "get_tile_type_at",
        "is_blocked",
        "request_tile_destruction",
        "has_bomber_at",
        "is_tile_blocking_at",
        "is_tile_destructible_at"
      ],
      "is_definition": true,
      "is_static": false,
      "parameters": 2,
      "return_type": "MapTile *"
    },
    "get_tile_entity": {
      "file": "src/Map.cpp",
      "line": 184,
      "signature": "TileEntity * get_tile_entity(int tx, int ty)",
      "calls": [
        "get_map",
        "get_context"
      ],
      "called_by": [
        "has_bomb_at",
        "get_tile_type_at",
        "request_tile_destruction",
        "has_bomber_at",
        "is_tile_blocking_at",
        "is_tile_destructible_at"
      ],
      "is_definition": true,
      "is_static": false,
      "parameters": 2,
      "return_type": "TileEntity *"
    },
    "set_tile": {
      "file": "src/Map.cpp",
      "line": 191,
      "signature": "void set_tile(int tx, int ty, MapTile * tile)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 3,
      "return_type": "void"
    },
    "set_tile_entity": {
      "file": "src/Map.cpp",
      "line": 201,
      "signature": "void set_tile_entity(int tx, int ty, TileEntity * tile_entity)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 3,
      "return_type": "void"
    },
    "clear_tile_entity_at": {
      "file": "src/Map.cpp",
      "line": 211,
      "signature": "void clear_tile_entity_at(int tx, int ty)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 2,
      "return_type": "void"
    },
    "load_random_valid": {
      "file": "src/Map.cpp",
      "line": 223,
      "signature": "void load_random_valid()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "void"
    },
    "load_next_valid": {
      "file": "src/Map.cpp",
      "line": 231,
      "signature": "void load_next_valid(int map_nr)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 1,
      "return_type": "void"
    },
    "refresh_holes": {
      "file": "src/Map.cpp",
      "line": 252,
      "signature": "void refresh_holes()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "void"
    },
    "any_valid_map": {
      "file": "src/Map.cpp",
      "line": 256,
      "signature": "bool any_valid_map()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "bool"
    },
    "get_map_count": {
      "file": "src/Map.cpp",
      "line": 260,
      "signature": "int get_map_count()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "int"
    },
    "get_author": {
      "file": "src/Map.cpp",
      "line": 271,
      "signature": "std::string get_author()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "std::string"
    },
    "randomize_bomber_positions": {
      "file": "src/Map.cpp",
      "line": 296,
      "signature": "void randomize_bomber_positions()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "void"
    },
    "set_context": {
      "file": "src/TileManager.cpp",
      "line": 20,
      "signature": "void set_context(GameContext * new_context)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 1,
      "return_type": "void"
    },
    "update_tiles": {
      "file": "src/TileManager.cpp",
      "line": 31,
      "signature": "void update_tiles(float deltaTime)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 1,
      "return_type": "void"
    },
    "handle_tile_updates": {
      "file": "src/TileManager.cpp",
      "line": 47,
      "signature": "void handle_tile_updates()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "void"
    },
    "coordinate_with_lifecycle_manager": {
      "file": "src/TileManager.cpp",
      "line": 57,
      "signature": "void coordinate_with_lifecycle_manager()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "void"
    },
    "process_dying_tiles": {
      "file": "src/TileManager.cpp",
      "line": 68,
      "signature": "void process_dying_tiles()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "void"
    },
    "process_dead_tiles": {
      "file": "src/TileManager.cpp",
      "line": 80,
      "signature": "void process_dead_tiles()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "void"
    },
    "request_tile_destruction": {
      "file": "src/TileManager.cpp",
      "line": 94,
      "signature": "void request_tile_destruction(int map_x, int map_y)",
      "calls": [
        "get_tile_entity",
        "get_tile"
      ],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 2,
      "return_type": "void"
    },
    "replace_tile_when_ready": {
      "file": "src/TileManager.cpp",
      "line": 138,
      "signature": "void replace_tile_when_ready(int map_x, int map_y, int new_tile_type)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 3,
      "return_type": "void"
    },
    "is_tile_ready_for_replacement": {
      "file": "src/TileManager.cpp",
      "line": 144,
      "signature": "bool is_tile_ready_for_replacement(MapTile * tile)",
      "calls": [
        "get_tile_state"
      ],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 1,
      "return_type": "bool"
    },
    "get_tile_at": {
      "file": "src/TileManager.cpp",
      "line": 167,
      "signature": "MapTile * get_tile_at(int map_x, int map_y)",
      "calls": [],
      "called_by": [
        "unregister_bomb_at",
        "get_bomber_at",
        "get_bomb_at",
        "unregister_bomber_at",
        "register_bomb_at",
        "get_destructible_tiles_in_radius",
        "perform_tile_replacement",
        "register_bomber_at",
        "handle_tile_destruction_request"
      ],
      "is_definition": true,
      "is_static": false,
      "parameters": 2,
      "return_type": "MapTile *"
    },
    "is_tile_blocking_at": {
      "file": "src/TileManager.cpp",
      "line": 175,
      "signature": "bool is_tile_blocking_at(int map_x, int map_y)",
      "calls": [
        "get_tile_entity",
        "get_context",
        "get_tile"
      ],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 2,
      "return_type": "bool"
    },
    "is_tile_destructible_at": {
      "file": "src/TileManager.cpp",
      "line": 207,
      "signature": "bool is_tile_destructible_at(int map_x, int map_y)",
      "calls": [
        "get_tile_entity",
        "get_tile"
      ],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 2,
      "return_type": "bool"
    },
    "register_bomb_at": {
      "file": "src/TileManager.cpp",
      "line": 225,
      "signature": "void register_bomb_at(int map_x, int map_y, Bomb * bomb)",
      "calls": [
        "get_tile_at"
      ],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 3,
      "return_type": "void"
    },
    "unregister_bomb_at": {
      "file": "src/TileManager.cpp",
      "line": 233,
      "signature": "void unregister_bomb_at(int map_x, int map_y)",
      "calls": [
        "get_tile_at"
      ],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 2,
      "return_type": "void"
    },
    "get_bomb_at": {
      "file": "src/TileManager.cpp",
      "line": 252,
      "signature": "Bomb * get_bomb_at(int map_x, int map_y)",
      "calls": [
        "get_tile_at"
      ],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 2,
      "return_type": "Bomb *"
    },
    "register_bomber_at": {
      "file": "src/TileManager.cpp",
      "line": 257,
      "signature": "void register_bomber_at(int map_x, int map_y, Bomber * bomber)",
      "calls": [
        "get_tile_at"
      ],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 3,
      "return_type": "void"
    },
    "unregister_bomber_at": {
      "file": "src/TileManager.cpp",
      "line": 265,
      "signature": "void unregister_bomber_at(int map_x, int map_y)",
      "calls": [
        "get_tile_at"
      ],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 2,
      "return_type": "void"
    },
    "get_bomber_at": {
      "file": "src/TileManager.cpp",
      "line": 273,
      "signature": "Bomber * get_bomber_at(int map_x, int map_y)",
      "calls": [
        "get_tile_at"
      ],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 2,
      "return_type": "Bomber *"
    },
    "has_bomber_at": {
      "file": "src/TileManager.cpp",
      "line": 278,
      "signature": "bool has_bomber_at(int map_x, int map_y)",
      "calls": [
        "get_tile_entity",
        "get_map",
        "get_context",
        "get_tile"
      ],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 2,
      "return_type": "bool"
    },
    "iterate_all_tiles": {
      "file": "src/TileManager.cpp",
      "line": 284,
      "signature": "void iterate_all_tiles(std::function<void (MapTile *, int, int)> callback)",
      "calls": [
        "get_tile"
      ],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 1,
      "return_type": "void"
    },
    "get_destructible_tiles_in_radius": {
      "file": "src/TileManager.cpp",
      "line": 295,
      "signature": "int get_destructible_tiles_in_radius(int center_x, int center_y, int radius)",
      "calls": [
        "get_tile_at"
      ],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 3,
      "return_type": "int"
    },
    "update_single_tile": {
      "file": "src/TileManager.cpp",
      "line": 317,
      "signature": "void update_single_tile(MapTile * tile, int map_x, int map_y)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 3,
      "return_type": "void"
    },
    "handle_tile_destruction_request": {
      "file": "src/TileManager.cpp",
      "line": 329,
      "signature": "void handle_tile_destruction_request(int map_x, int map_y)",
      "calls": [
        "get_tile_at"
      ],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 2,
      "return_type": "void"
    },
    "perform_tile_replacement": {
      "file": "src/TileManager.cpp",
      "line": 337,
      "signature": "void perform_tile_replacement(int map_x, int map_y, int new_tile_type)",
      "calls": [
        "create",
        "get_tile_at"
      ],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 3,
      "return_type": "void"
    },
    "is_valid_position": {
      "file": "src/TileManager.cpp",
      "line": 362,
      "signature": "bool is_valid_position(int map_x, int map_y)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 2,
      "return_type": "bool"
    },
    "handle_controller_input": {
      "file": "src/BomberComponents.cpp",
      "line": 31,
      "signature": "void handle_controller_input(Controller * controller, float deltaTime)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 2,
      "return_type": "void"
    },
    "update_flight_animation": {
      "file": "src/BomberComponents.cpp",
      "line": 103,
      "signature": "void update_flight_animation(float deltaTime)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 1,
      "return_type": "void"
    },
    "update_bomb_cooldown": {
      "file": "src/BomberComponents.cpp",
      "line": 275,
      "signature": "void update_bomb_cooldown(float deltaTime)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 1,
      "return_type": "void"
    },
    "update_bomb_throwing": {
      "file": "src/BomberComponents.cpp",
      "line": 284,
      "signature": "void update_bomb_throwing(float deltaTime)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 1,
      "return_type": "void"
    },
    "update_bomb_escape_status": {
      "file": "src/BomberComponents.cpp",
      "line": 299,
      "signature": "void update_bomb_escape_status()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "void"
    },
    "set_texture_from_color": {
      "file": "src/BomberComponents.cpp",
      "line": 342,
      "signature": "void set_texture_from_color(int color)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 1,
      "return_type": "void"
    },
    "update_animation_frame": {
      "file": "src/BomberComponents.cpp",
      "line": 346,
      "signature": "void update_animation_frame(float deltaTime, Direction direction)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 2,
      "return_type": "void"
    },
    "set_standing_sprite": {
      "file": "src/BomberComponents.cpp",
      "line": 380,
      "signature": "void set_standing_sprite(Direction direction)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 1,
      "return_type": "void"
    },
    "update_invincibility_effects": {
      "file": "src/BomberComponents.cpp",
      "line": 397,
      "signature": "void update_invincibility_effects(float deltaTime)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 1,
      "return_type": "void"
    },
    "choose_texture_for_color": {
      "file": "src/BomberComponents.cpp",
      "line": 405,
      "signature": "void choose_texture_for_color(int color)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 1,
      "return_type": "void"
    },
    "update_respawn_timer": {
      "file": "src/BomberComponents.cpp",
      "line": 441,
      "signature": "void update_respawn_timer(float deltaTime)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 1,
      "return_type": "void"
    },
    "add_object": {
      "file": "src/SpatialPartitioning.cpp",
      "line": 27,
      "signature": "void add_object(GameObject * obj)",
      "calls": [
        "pixel_to_grid_coord"
      ],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 1,
      "return_type": "void"
    },
    "remove_object": {
      "file": "src/SpatialPartitioning.cpp",
      "line": 37,
      "signature": "void remove_object(GameObject * obj)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 1,
      "return_type": "void"
    },
    "update_object_position": {
      "file": "src/SpatialPartitioning.cpp",
      "line": 47,
      "signature": "void update_object_position(GameObject * obj, const PixelCoord & old_position)",
      "calls": [
        "pixel_to_grid_coord"
      ],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 2,
      "return_type": "void"
    },
    "rebuild_from_objects": {
      "file": "src/SpatialPartitioning.cpp",
      "line": 62,
      "signature": "void rebuild_from_objects(const int & objects)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 1,
      "return_type": "void"
    },
    "get_objects_at_position": {
      "file": "src/SpatialPartitioning.cpp",
      "line": 74,
      "signature": "int get_objects_at_position(const PixelCoord & position)",
      "calls": [
        "get_cell",
        "pixel_to_grid_coord"
      ],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 1,
      "return_type": "int"
    },
    "get_objects_of_type_near": {
      "file": "src/SpatialPartitioning.cpp",
      "line": 85,
      "signature": "int get_objects_of_type_near(const PixelCoord & position, GameObject::ObjectType object_type, int radius)",
      "calls": [
        "pixel_to_grid_coord"
      ],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 3,
      "return_type": "int"
    },
    "get_bombers_near": {
      "file": "src/SpatialPartitioning.cpp",
      "line": 108,
      "signature": "int get_bombers_near(const PixelCoord & position, int radius)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 2,
      "return_type": "int"
    },
    "get_bombs_near": {
      "file": "src/SpatialPartitioning.cpp",
      "line": 112,
      "signature": "int get_bombs_near(const PixelCoord & position, int radius)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 2,
      "return_type": "int"
    },
    "get_extras_near": {
      "file": "src/SpatialPartitioning.cpp",
      "line": 116,
      "signature": "int get_extras_near(const PixelCoord & position, int radius)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 2,
      "return_type": "int"
    },
    "get_objects_in_area": {
      "file": "src/SpatialPartitioning.cpp",
      "line": 120,
      "signature": "int get_objects_in_area(const PixelCoord & top_left, const PixelCoord & bottom_right, GameObject::ObjectType object_type)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 3,
      "return_type": "int"
    },
    "find_collisions": {
      "file": "src/SpatialPartitioning.cpp",
      "line": 149,
      "signature": "int find_collisions(GameObject * obj, float collision_radius, GameObject::ObjectType object_type)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 3,
      "return_type": "int"
    },
    "has_object_at_position": {
      "file": "src/SpatialPartitioning.cpp",
      "line": 178,
      "signature": "bool has_object_at_position(const PixelCoord & position, GameObject::ObjectType object_type)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 2,
      "return_type": "bool"
    },
    "get_statistics": {
      "file": "src/SpatialPartitioning.cpp",
      "line": 193,
      "signature": "SpatialGrid::GridStats get_statistics()",
      "calls": [],
      "called_by": [
        "print_debug_info"
      ],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "SpatialGrid::GridStats"
    },
    "print_debug_info": {
      "file": "src/SpatialPartitioning.cpp",
      "line": 223,
      "signature": "void print_debug_info()",
      "calls": [
        "get_statistics"
      ],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "void"
    },
    "visualize_grid": {
      "file": "src/SpatialPartitioning.cpp",
      "line": 236,
      "signature": "std::string visualize_grid(int max_width, int max_height)",
      "calls": [
        "get_cell"
      ],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 2,
      "return_type": "std::string"
    },
    "pixel_to_grid_coord": {
      "file": "src/SpatialPartitioning.cpp",
      "line": 285,
      "signature": "GridCoord pixel_to_grid_coord(const PixelCoord & position)",
      "calls": [],
      "called_by": [
        "get_cells_in_area"
      ],
      "is_definition": true,
      "is_static": false,
      "parameters": 1,
      "return_type": "GridCoord"
    },
    "get_cells_in_radius": {
      "file": "src/SpatialPartitioning.cpp",
      "line": 291,
      "signature": "int get_cells_in_radius(const GridCoord & center, int radius)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 2,
      "return_type": "int"
    },
    "get_cells_in_area": {
      "file": "src/SpatialPartitioning.cpp",
      "line": 304,
      "signature": "int get_cells_in_area(const PixelCoord & top_left, const PixelCoord & bottom_right)",
      "calls": [
        "pixel_to_grid_coord"
      ],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 2,
      "return_type": "int"
    },
    "get_or_create_cell": {
      "file": "src/SpatialPartitioning.cpp",
      "line": 320,
      "signature": "SpatialCell & get_or_create_cell(const GridCoord & coord)",
      "calls": [],
      "called_by": [
        "add_object_to_cell"
      ],
      "is_definition": true,
      "is_static": false,
      "parameters": 1,
      "return_type": "SpatialCell &"
    },
    "get_cell": {
      "file": "src/SpatialPartitioning.cpp",
      "line": 324,
      "signature": "const SpatialCell * get_cell(const GridCoord & coord)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 1,
      "return_type": "const SpatialCell *"
    },
    "add_object_to_cell": {
      "file": "src/SpatialPartitioning.cpp",
      "line": 332,
      "signature": "void add_object_to_cell(GameObject * obj, const GridCoord & coord)",
      "calls": [
        "get_or_create_cell"
      ],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 2,
      "return_type": "void"
    },
    "remove_object_from_cell": {
      "file": "src/SpatialPartitioning.cpp",
      "line": 337,
      "signature": "void remove_object_from_cell(GameObject * obj, const GridCoord & coord)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 2,
      "return_type": "void"
    },
    "find_nearest_bomber": {
      "file": "src/SpatialPartitioning.cpp",
      "line": 351,
      "signature": "GameObject * find_nearest_bomber(const PixelCoord & extra_position, float max_distance)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 2,
      "return_type": "GameObject *"
    },
    "find_explosion_victims": {
      "file": "src/SpatialPartitioning.cpp",
      "line": 404,
      "signature": "int find_explosion_victims(const int & explosion_area)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 1,
      "return_type": "int"
    },
    "scan_ai_targets": {
      "file": "src/SpatialPartitioning.cpp",
      "line": 488,
      "signature": "CollisionHelper::AITargets scan_ai_targets(const PixelCoord & bomber_position, int scan_radius)",
      "calls": [],
      "called_by": [
        "generate_rating_map",
        "scan_for_targets"
      ],
      "is_definition": true,
      "is_static": false,
      "parameters": 2,
      "return_type": "CollisionHelper::AITargets"
    },
    "objecttype2string": {
      "file": "src/GameObject.cpp",
      "line": 48,
      "signature": "const char * objecttype2string(ObjectType t)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 1,
      "return_type": "const char *"
    },
    "get_context": {
      "file": "src/GameObject.cpp",
      "line": 121,
      "signature": "GameContext * get_context()",
      "calls": [],
      "called_by": [
        "notify_explosion_haptics",
        "show",
        "get_tile",
        "explode_corpses",
        "get_tile_entity",
        "has_bomb_at",
        "move_dist",
        "get_tile_type_at",
        "continue_flying",
        "is_blocked",
        "kill_bombers",
        "move_pos",
        "has_bomber_at",
        "get_legacy_tile",
        "is_tile_blocking_at"
      ],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "GameContext *"
    },
    "get_object_id": {
      "file": "src/GameObject.cpp",
      "line": 131,
      "signature": "int get_object_id()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "int"
    },
    "set_object_id": {
      "file": "src/GameObject.cpp",
      "line": 136,
      "signature": "void set_object_id(int obj_id)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 1,
      "return_type": "void"
    },
    "get_server_x": {
      "file": "src/GameObject.cpp",
      "line": 141,
      "signature": "int get_server_x()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "int"
    },
    "get_server_y": {
      "file": "src/GameObject.cpp",
      "line": 146,
      "signature": "int get_server_y()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "int"
    },
    "get_orig_x": {
      "file": "src/GameObject.cpp",
      "line": 151,
      "signature": "int get_orig_x()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "int"
    },
    "get_orig_y": {
      "file": "src/GameObject.cpp",
      "line": 156,
      "signature": "int get_orig_y()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "int"
    },
    "get_server_dir": {
      "file": "src/GameObject.cpp",
      "line": 161,
      "signature": "Direction get_server_dir()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "Direction"
    },
    "get_client_dir": {
      "file": "src/GameObject.cpp",
      "line": 166,
      "signature": "Direction get_client_dir()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "Direction"
    },
    "set_server_x": {
      "file": "src/GameObject.cpp",
      "line": 171,
      "signature": "void set_server_x(int sx)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 1,
      "return_type": "void"
    },
    "set_server_y": {
      "file": "src/GameObject.cpp",
      "line": 176,
      "signature": "void set_server_y(int sy)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 1,
      "return_type": "void"
    },
    "set_server_dir": {
      "file": "src/GameObject.cpp",
      "line": 181,
      "signature": "void set_server_dir(int sd)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 1,
      "return_type": "void"
    },
    "set_client_dir": {
      "file": "src/GameObject.cpp",
      "line": 186,
      "signature": "void set_client_dir(int cd)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 1,
      "return_type": "void"
    },
    "set_local_dir": {
      "file": "src/GameObject.cpp",
      "line": 191,
      "signature": "void set_local_dir(int ld)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 1,
      "return_type": "void"
    },
    "set_cur_dir": {
      "file": "src/GameObject.cpp",
      "line": 196,
      "signature": "void set_cur_dir(int cd)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 1,
      "return_type": "void"
    },
    "set_offset": {
      "file": "src/GameObject.cpp",
      "line": 201,
      "signature": "void set_offset(int _x, int _y)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 2,
      "return_type": "void"
    },
    "is_blocked": {
      "file": "src/GameObject.cpp",
      "line": 211,
      "signature": "bool is_blocked(float check_x, float check_y)",
      "calls": [
        "get_map",
        "get_context",
        "get_tile"
      ],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 2,
      "return_type": "bool"
    },
    "move_dist": {
      "file": "src/GameObject.cpp",
      "line": 331,
      "signature": "bool move_dist(float distance, Direction dir)",
      "calls": [
        "get_context"
      ],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 2,
      "return_type": "bool"
    },
    "move": {
      "file": "src/GameObject.cpp",
      "line": 434,
      "signature": "bool move(float deltaTime)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 1,
      "return_type": "bool"
    },
    "continue_flying": {
      "file": "src/GameObject.cpp",
      "line": 512,
      "signature": "void continue_flying(float deltaTime)",
      "calls": [
        "get_context"
      ],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 1,
      "return_type": "void"
    },
    "fall": {
      "file": "src/GameObject.cpp",
      "line": 572,
      "signature": "void fall()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "void"
    },
    "continue_falling": {
      "file": "src/GameObject.cpp",
      "line": 587,
      "signature": "void continue_falling(float deltaTime)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 1,
      "return_type": "void"
    },
    "snap": {
      "file": "src/GameObject.cpp",
      "line": 603,
      "signature": "void snap()",
      "calls": [
        "grid_to_pixel"
      ],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "void"
    },
    "set_dir": {
      "file": "src/GameObject.cpp",
      "line": 612,
      "signature": "void set_dir(Direction _dir)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 1,
      "return_type": "void"
    },
    "set_pos": {
      "file": "src/GameObject.cpp",
      "line": 617,
      "signature": "void set_pos(int _x, int _y)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 2,
      "return_type": "void"
    },
    "set_orig": {
      "file": "src/GameObject.cpp",
      "line": 623,
      "signature": "void set_orig(int _x, int _y)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 2,
      "return_type": "void"
    },
    "move_pos": {
      "file": "src/GameObject.cpp",
      "line": 629,
      "signature": "void move_pos(int _x, int _y)",
      "calls": [
        "get_context"
      ],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 2,
      "return_type": "void"
    },
    "get_x": {
      "file": "src/GameObject.cpp",
      "line": 645,
      "signature": "int get_x()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "int"
    },
    "get_y": {
      "file": "src/GameObject.cpp",
      "line": 650,
      "signature": "int get_y()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "int"
    },
    "get_z": {
      "file": "src/GameObject.cpp",
      "line": 655,
      "signature": "int get_z()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "int"
    },
    "get_speed": {
      "file": "src/GameObject.cpp",
      "line": 660,
      "signature": "int get_speed()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "int"
    },
    "get_map_x": {
      "file": "src/GameObject.cpp",
      "line": 665,
      "signature": "int get_map_x()",
      "calls": [],
      "called_by": [
        "show"
      ],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "int"
    },
    "get_map_y": {
      "file": "src/GameObject.cpp",
      "line": 679,
      "signature": "int get_map_y()",
      "calls": [],
      "called_by": [
        "show"
      ],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "int"
    },
    "set_speed": {
      "file": "src/GameObject.cpp",
      "line": 703,
      "signature": "void set_speed(int _speed)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 1,
      "return_type": "void"
    },
    "is_flying": {
      "file": "src/GameObject.cpp",
      "line": 708,
      "signature": "bool is_flying()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "bool"
    },
    "is_stopped": {
      "file": "src/GameObject.cpp",
      "line": 713,
      "signature": "bool is_stopped()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "bool"
    },
    "get_cur_dir": {
      "file": "src/GameObject.cpp",
      "line": 718,
      "signature": "Direction get_cur_dir()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "Direction"
    },
    "whats_left": {
      "file": "src/GameObject.cpp",
      "line": 723,
      "signature": "int whats_left()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "int"
    },
    "whats_right": {
      "file": "src/GameObject.cpp",
      "line": 728,
      "signature": "int whats_right()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "int"
    },
    "whats_up": {
      "file": "src/GameObject.cpp",
      "line": 733,
      "signature": "int whats_up()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "int"
    },
    "whats_down": {
      "file": "src/GameObject.cpp",
      "line": 738,
      "signature": "int whats_down()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "int"
    },
    "get_legacy_tile": {
      "file": "src/GameObject.cpp",
      "line": 759,
      "signature": "MapTile * get_legacy_tile()",
      "calls": [
        "get_map",
        "get_context"
      ],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "MapTile *"
    },
    "get_tile_type_at": {
      "file": "src/GameObject.cpp",
      "line": 791,
      "signature": "int get_tile_type_at(int pixel_x, int pixel_y)",
      "calls": [
        "get_tile_entity",
        "get_map",
        "get_context",
        "get_tile"
      ],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 2,
      "return_type": "int"
    },
    "set_bomb_on_tile": {
      "file": "src/GameObject.cpp",
      "line": 885,
      "signature": "void set_bomb_on_tile(Bomb * bomb)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 1,
      "return_type": "void"
    },
    "remove_bomb_from_tile": {
      "file": "src/GameObject.cpp",
      "line": 890,
      "signature": "void remove_bomb_from_tile(Bomb * bomb)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 1,
      "return_type": "void"
    },
    "is_falling": {
      "file": "src/GameObject.cpp",
      "line": 958,
      "signature": "bool is_falling()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "bool"
    },
    "output_object_info": {
      "file": "src/GameObject.cpp",
      "line": 963,
      "signature": "void output_object_info()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "void"
    },
    "set_next_fly_job": {
      "file": "src/GameObject.cpp",
      "line": 983,
      "signature": "void set_next_fly_job(int flyjobx, int flyjoby, int flyjobspeed)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 3,
      "return_type": "void"
    },
    "reset_next_fly_job": {
      "file": "src/GameObject.cpp",
      "line": 990,
      "signature": "void reset_next_fly_job()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "void"
    },
    "is_next_fly_job": {
      "file": "src/GameObject.cpp",
      "line": 997,
      "signature": "bool is_next_fly_job()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "bool"
    },
    "detonate_other_bombs": {
      "file": "src/Explosion.cpp",
      "line": 106,
      "signature": "void detonate_other_bombs()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "void"
    },
    "draw_explosion_tile": {
      "file": "src/Explosion.cpp",
      "line": 194,
      "signature": "void draw_explosion_tile(float tile_x, float tile_y)",
      "calls": [
        "get_gpu_renderer"
      ],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 2,
      "return_type": "void"
    },
    "get_dummy_white_texture": {
      "file": "src/Explosion.cpp",
      "line": 227,
      "signature": "int get_dummy_white_texture()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "int"
    },
    "kill_bombers": {
      "file": "src/Explosion.cpp",
      "line": 311,
      "signature": "void kill_bombers()",
      "calls": [
        "get_context",
        "get_spatial_grid"
      ],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "void"
    },
    "explode_corpses": {
      "file": "src/Explosion.cpp",
      "line": 441,
      "signature": "void explode_corpses()",
      "calls": [
        "get_context",
        "get_spatial_grid"
      ],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "void"
    },
    "destroy_tile_at": {
      "file": "src/Explosion.cpp",
      "line": 559,
      "signature": "void destroy_tile_at(int map_x, int map_y)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 2,
      "return_type": "void"
    },
    "notify_explosion_haptics": {
      "file": "src/Explosion.cpp",
      "line": 570,
      "signature": "void notify_explosion_haptics()",
      "calls": [
        "get_context"
      ],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "void"
    },
    "load_texture": {
      "file": "src/Resources.cpp",
      "line": 115,
      "signature": "TextureInfo * load_texture(const std::string & path, int sprite_width, int sprite_height)",
      "calls": [
        "SDL_ConvertSurface"
      ],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 3,
      "return_type": "TextureInfo *"
    },
    "get_texture": {
      "file": "src/Resources.cpp",
      "line": 172,
      "signature": "TextureInfo * get_texture(const std::string & name)",
      "calls": [],
      "called_by": [
        "register_gl_texture_metadata",
        "get_gl_texture"
      ],
      "is_definition": true,
      "is_static": false,
      "parameters": 1,
      "return_type": "TextureInfo *"
    },
    "get_gl_texture": {
      "file": "src/Resources.cpp",
      "line": 182,
      "signature": "int get_gl_texture(const std::string & name)",
      "calls": [
        "get_texture"
      ],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 1,
      "return_type": "int"
    },
    "load_shader_source": {
      "file": "src/Resources.cpp",
      "line": 224,
      "signature": "std::string load_shader_source(const std::string & path)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 1,
      "return_type": "std::string"
    },
    "register_gl_texture_metadata": {
      "file": "src/Resources.cpp",
      "line": 237,
      "signature": "void register_gl_texture_metadata(const std::string & texture_name, GPUAcceleratedRenderer * renderer)",
      "calls": [
        "get_texture"
      ],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 2,
      "return_type": "void"
    },
    "get_total_time": {
      "file": "src/Controller_AI_Modern.cpp",
      "line": 28,
      "signature": "float get_total_time()",
      "calls": [],
      "called_by": [
        "update"
      ],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "float"
    },
    "execute": {
      "file": "src/Controller_AI_Modern.cpp",
      "line": 57,
      "signature": "void execute()",
      "calls": [
        "grid_to_pixel",
        "pixel_to_grid"
      ],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "void"
    },
    "set_personality": {
      "file": "src/Controller_AI_Modern.cpp",
      "line": 215,
      "signature": "void set_personality(ModernAIPersonality new_personality)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 1,
      "return_type": "void"
    },
    "generate_rating_map": {
      "file": "src/Controller_AI_Modern.cpp",
      "line": 290,
      "signature": "void generate_rating_map()",
      "calls": [
        "scan_ai_targets"
      ],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "void"
    },
    "apply_bomb_rating": {
      "file": "src/Controller_AI_Modern.cpp",
      "line": 372,
      "signature": "void apply_bomb_rating(int x, int y, int power, float countdown, int dir)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 5,
      "return_type": "void"
    },
    "job_ready": {
      "file": "src/Controller_AI_Modern.cpp",
      "line": 407,
      "signature": "bool job_ready()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "bool"
    },
    "find_new_jobs": {
      "file": "src/Controller_AI_Modern.cpp",
      "line": 429,
      "signature": "void find_new_jobs()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "void"
    },
    "do_job": {
      "file": "src/Controller_AI_Modern.cpp",
      "line": 456,
      "signature": "void do_job()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "void"
    },
    "avoid_bombs": {
      "file": "src/Controller_AI_Modern.cpp",
      "line": 462,
      "signature": "bool avoid_bombs()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "bool"
    },
    "find_bombing_opportunities": {
      "file": "src/Controller_AI_Modern.cpp",
      "line": 491,
      "signature": "bool find_bombing_opportunities(int max_distance)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 1,
      "return_type": "bool"
    },
    "find_way": {
      "file": "src/Controller_AI_Modern.cpp",
      "line": 531,
      "signature": "bool find_way(int dest_rating, int avoid_rating, int max_distance)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 3,
      "return_type": "bool"
    },
    "clear_all_jobs": {
      "file": "src/Controller_AI_Modern.cpp",
      "line": 633,
      "signature": "void clear_all_jobs()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "void"
    },
    "is_hotspot": {
      "file": "src/Controller_AI_Modern.cpp",
      "line": 637,
      "signature": "bool is_hotspot(int x, int y)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 2,
      "return_type": "bool"
    },
    "is_death": {
      "file": "src/Controller_AI_Modern.cpp",
      "line": 642,
      "signature": "bool is_death(int x, int y)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 2,
      "return_type": "bool"
    },
    "can_escape_from_bomb": {
      "file": "src/Controller_AI_Modern.cpp",
      "line": 647,
      "signature": "bool can_escape_from_bomb(int x, int y)",
      "calls": [
        "vector_distance",
        "find_safe_position"
      ],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 2,
      "return_type": "bool"
    },
    "bomber_rating": {
      "file": "src/Controller_AI_Modern.cpp",
      "line": 660,
      "signature": "int bomber_rating(int x, int y)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 2,
      "return_type": "int"
    },
    "extra_rating": {
      "file": "src/Controller_AI_Modern.cpp",
      "line": 665,
      "signature": "int extra_rating(int x, int y)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 2,
      "return_type": "int"
    },
    "get_aggression_modifier": {
      "file": "src/Controller_AI_Modern.cpp",
      "line": 670,
      "signature": "float get_aggression_modifier()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "float"
    },
    "get_reaction_delay": {
      "file": "src/Controller_AI_Modern.cpp",
      "line": 681,
      "signature": "float get_reaction_delay()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "float"
    },
    "should_hunt_enemies": {
      "file": "src/Controller_AI_Modern.cpp",
      "line": 685,
      "signature": "bool should_hunt_enemies()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "bool"
    },
    "get_current_state": {
      "file": "src/Controller_AI_Modern.cpp",
      "line": 698,
      "signature": "std::string get_current_state()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "std::string"
    },
    "is_starting_corner_position": {
      "file": "src/Controller_AI_Modern.cpp",
      "line": 711,
      "signature": "bool is_starting_corner_position(int x, int y)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 2,
      "return_type": "bool"
    },
    "can_escape_from_bomb_safely": {
      "file": "src/Controller_AI_Modern.cpp",
      "line": 719,
      "signature": "bool can_escape_from_bomb_safely(int x, int y)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 2,
      "return_type": "bool"
    },
    "bombing_is_beneficial": {
      "file": "src/Controller_AI_Modern.cpp",
      "line": 769,
      "signature": "bool bombing_is_beneficial(int x, int y)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 2,
      "return_type": "bool"
    },
    "should_move_to_better_position": {
      "file": "src/Controller_AI_Modern.cpp",
      "line": 808,
      "signature": "bool should_move_to_better_position()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "bool"
    },
    "count_active_bombs": {
      "file": "src/Controller_AI_Modern.cpp",
      "line": 845,
      "signature": "int count_active_bombs()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "int"
    },
    "add_escape_sequence": {
      "file": "src/Controller_AI_Modern.cpp",
      "line": 880,
      "signature": "void add_escape_sequence(int bomb_x, int bomb_y)",
      "calls": [
        "find_best_escape_direction"
      ],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 2,
      "return_type": "void"
    },
    "find_best_escape_direction": {
      "file": "src/Controller_AI_Modern.cpp",
      "line": 893,
      "signature": "int find_best_escape_direction(int bomb_x, int bomb_y)",
      "calls": [
        "evaluate_escape_direction"
      ],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 2,
      "return_type": "int"
    },
    "evaluate_escape_direction": {
      "file": "src/Controller_AI_Modern.cpp",
      "line": 911,
      "signature": "int evaluate_escape_direction(int bomb_x, int bomb_y, int direction)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 3,
      "return_type": "int"
    },
    "count_nearby_threats": {
      "file": "src/Controller_AI_Modern.cpp",
      "line": 953,
      "signature": "int count_nearby_threats(int x, int y)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 2,
      "return_type": "int"
    },
    "vector_distance": {
      "file": "src/Controller_AI_Smart.cpp",
      "line": 25,
      "signature": "float vector_distance(const CL_Vector & a, const CL_Vector & b)",
      "calls": [],
      "called_by": [
        "can_escape_from_bomb"
      ],
      "is_definition": true,
      "is_static": false,
      "parameters": 2,
      "return_type": "float"
    },
    "vector_length": {
      "file": "src/Controller_AI_Smart.cpp",
      "line": 31,
      "signature": "float vector_length(const CL_Vector & v)",
      "calls": [],
      "called_by": [
        "vector_normalize",
        "find_path_to"
      ],
      "is_definition": true,
      "is_static": false,
      "parameters": 1,
      "return_type": "float"
    },
    "vector_subtract": {
      "file": "src/Controller_AI_Smart.cpp",
      "line": 35,
      "signature": "CL_Vector vector_subtract(const CL_Vector & a, const CL_Vector & b)",
      "calls": [],
      "called_by": [
        "find_path_to"
      ],
      "is_definition": true,
      "is_static": false,
      "parameters": 2,
      "return_type": "CL_Vector"
    },
    "vector_add": {
      "file": "src/Controller_AI_Smart.cpp",
      "line": 39,
      "signature": "CL_Vector vector_add(const CL_Vector & a, const CL_Vector & b)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 2,
      "return_type": "CL_Vector"
    },
    "vector_multiply": {
      "file": "src/Controller_AI_Smart.cpp",
      "line": 43,
      "signature": "CL_Vector vector_multiply(const CL_Vector & v, float scalar)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 2,
      "return_type": "CL_Vector"
    },
    "vector_normalize": {
      "file": "src/Controller_AI_Smart.cpp",
      "line": 47,
      "signature": "CL_Vector vector_normalize(const CL_Vector & v)",
      "calls": [
        "vector_length"
      ],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 1,
      "return_type": "CL_Vector"
    },
    "think": {
      "file": "src/Controller_AI_Smart.cpp",
      "line": 166,
      "signature": "void think()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "void"
    },
    "update_current_state": {
      "file": "src/Controller_AI_Smart.cpp",
      "line": 185,
      "signature": "void update_current_state()",
      "calls": [
        "calculate_danger_level"
      ],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "void"
    },
    "transition_to_state": {
      "file": "src/Controller_AI_Smart.cpp",
      "line": 220,
      "signature": "void transition_to_state(AIState new_state)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 1,
      "return_type": "void"
    },
    "execute_behavior": {
      "file": "src/Controller_AI_Smart.cpp",
      "line": 248,
      "signature": "void execute_behavior()",
      "calls": [
        "find_safe_position"
      ],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "void"
    },
    "find_path_to": {
      "file": "src/Controller_AI_Smart.cpp",
      "line": 338,
      "signature": "int find_path_to(CL_Vector target)",
      "calls": [
        "vector_subtract",
        "vector_length"
      ],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 1,
      "return_type": "int"
    },
    "is_position_safe": {
      "file": "src/Controller_AI_Smart.cpp",
      "line": 401,
      "signature": "bool is_position_safe(CL_Vector pos, float time_ahead)",
      "calls": [
        "calculate_danger_level"
      ],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 2,
      "return_type": "bool"
    },
    "calculate_danger_level": {
      "file": "src/Controller_AI_Smart.cpp",
      "line": 407,
      "signature": "float calculate_danger_level(CL_Vector pos)",
      "calls": [],
      "called_by": [
        "find_safe_position"
      ],
      "is_definition": true,
      "is_static": false,
      "parameters": 1,
      "return_type": "float"
    },
    "find_safe_position": {
      "file": "src/Controller_AI_Smart.cpp",
      "line": 484,
      "signature": "CL_Vector find_safe_position()",
      "calls": [
        "calculate_danger_level"
      ],
      "called_by": [
        "can_escape_from_bomb"
      ],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "CL_Vector"
    },
    "scan_for_targets": {
      "file": "src/Controller_AI_Smart.cpp",
      "line": 524,
      "signature": "int scan_for_targets()",
      "calls": [
        "scan_ai_targets"
      ],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "int"
    },
    "select_best_target": {
      "file": "src/Controller_AI_Smart.cpp",
      "line": 626,
      "signature": "AITarget select_best_target(const int & targets)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 1,
      "return_type": "AITarget"
    },
    "evaluate_powerup_value": {
      "file": "src/Controller_AI_Smart.cpp",
      "line": 650,
      "signature": "float evaluate_powerup_value(int powerup_type)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 1,
      "return_type": "float"
    },
    "should_place_bomb": {
      "file": "src/Controller_AI_Smart.cpp",
      "line": 655,
      "signature": "bool should_place_bomb()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "bool"
    },
    "would_hit_enemy": {
      "file": "src/Controller_AI_Smart.cpp",
      "line": 692,
      "signature": "bool would_hit_enemy(CL_Vector bomb_pos)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 1,
      "return_type": "bool"
    },
    "predict_explosion_tiles": {
      "file": "src/Controller_AI_Smart.cpp",
      "line": 715,
      "signature": "int predict_explosion_tiles(CL_Vector bomb_pos, int power)",
      "calls": [
        "grid_to_pixel"
      ],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 2,
      "return_type": "int"
    },
    "analyze_enemies": {
      "file": "src/Controller_AI_Smart.cpp",
      "line": 752,
      "signature": "void analyze_enemies()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "void"
    },
    "predict_enemy_position": {
      "file": "src/Controller_AI_Smart.cpp",
      "line": 776,
      "signature": "CL_Vector predict_enemy_position(Bomber * enemy, float time_ahead)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 2,
      "return_type": "CL_Vector"
    },
    "is_enemy_dangerous": {
      "file": "src/Controller_AI_Smart.cpp",
      "line": 784,
      "signature": "bool is_enemy_dangerous(Bomber * enemy)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 1,
      "return_type": "bool"
    },
    "get_bomb_frequency_modifier": {
      "file": "src/Controller_AI_Smart.cpp",
      "line": 809,
      "signature": "float get_bomb_frequency_modifier()",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 0,
      "return_type": "float"
    },
    "set_reaction_time": {
      "file": "src/Controller_AI_Smart.cpp",
      "line": 817,
      "signature": "void set_reaction_time(float seconds)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 1,
      "return_type": "void"
    },
    "set_aggression_level": {
      "file": "src/Controller_AI_Smart.cpp",
      "line": 821,
      "signature": "void set_aggression_level(float level)",
      "calls": [],
      "called_by": [],
      "is_definition": true,
      "is_static": false,
      "parameters": 1,
      "return_type": "void"
    }
  },
  "classes": {},
  "enums": {
    "FragmentType": {
      "file": "src/TileEntity.cpp",
      "line": 382,
      "values": [
        "CORNER_PIECE",
        "EDGE_PLANK",
        "INNER_WOOD",
        "SPLINTER"
      ]
    }
  },
  "global_vars": {
    "TILE_SIZE": {
      "file": "src/Controller_AI_Smart.cpp",
      "line": 14,
      "type": "const int",
      "is_static": true
    }
  }
}