{
  "metadata": {
    "project_name": "ClanBomber",
    "source_files_count": 99,
    "functions_count": 670,
    "findings_count": 49
  },
  "functions": {
    "Timer::init": {
      "name": "init",
      "location": {
        "file": "src/Timer.cpp",
        "line": 8,
        "column": 0
      },
      "signature": "void Timer::init() {",
      "class_name": "Timer",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 7 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "Timer::tick": {
      "name": "tick",
      "location": {
        "file": "src/Timer.cpp",
        "line": 13,
        "column": 0
      },
      "signature": "void Timer::tick() {",
      "class_name": "Timer",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 2 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "Timer::time_elapsed": {
      "name": "time_elapsed",
      "location": {
        "file": "src/Timer.cpp",
        "line": 19,
        "column": 0
      },
      "signature": "float Timer::time_elapsed() {",
      "class_name": "Timer",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 7 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "MapEntry::load": {
      "name": "load",
      "location": {
        "file": "src/MapEntry.cpp",
        "line": 44,
        "column": 0
      },
      "signature": "bool MapEntry::load() {",
      "class_name": "MapEntry",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 5 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "MapEntry::get_data": {
      "name": "get_data",
      "location": {
        "file": "src/MapEntry.cpp",
        "line": 85,
        "column": 0
      },
      "signature": "char MapEntry::get_data(int x, int y) {",
      "class_name": "MapEntry",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 2 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "MapEntry::read_bomber_positions": {
      "name": "read_bomber_positions",
      "location": {
        "file": "src/MapEntry.cpp",
        "line": 92,
        "column": 0
      },
      "signature": "void MapEntry::read_bomber_positions() {",
      "class_name": "MapEntry",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.5,
      "evidence": [
        "Called within same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "MapEntry::get_bomber_pos": {
      "name": "get_bomber_pos",
      "location": {
        "file": "src/MapEntry.cpp",
        "line": 118,
        "column": 0
      },
      "signature": "CL_Vector MapEntry::get_bomber_pos(int nr) {",
      "class_name": "MapEntry",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 4 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "Controller_Keyboard::update_keyboard_state": {
      "name": "update_keyboard_state",
      "location": {
        "file": "src/Controller_Keyboard.cpp",
        "line": 42,
        "column": 0
      },
      "signature": "void Controller_Keyboard::update_keyboard_state() {",
      "class_name": "Controller_Keyboard",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 2 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "Controller_Keyboard::update": {
      "name": "update",
      "location": {
        "file": "src/Controller_Keyboard.cpp",
        "line": 46,
        "column": 0
      },
      "signature": "void Controller_Keyboard::update() {",
      "class_name": "Controller_Keyboard",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 15 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "Controller_Keyboard::reset": {
      "name": "reset",
      "location": {
        "file": "src/Controller_Keyboard.cpp",
        "line": 51,
        "column": 0
      },
      "signature": "void Controller_Keyboard::reset() {",
      "class_name": "Controller_Keyboard",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 10 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "Controller_Keyboard::is_left": {
      "name": "is_left",
      "location": {
        "file": "src/Controller_Keyboard.cpp",
        "line": 54,
        "column": 0
      },
      "signature": "bool Controller_Keyboard::is_left() {",
      "class_name": "Controller_Keyboard",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 7 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "Controller_Keyboard::is_right": {
      "name": "is_right",
      "location": {
        "file": "src/Controller_Keyboard.cpp",
        "line": 58,
        "column": 0
      },
      "signature": "bool Controller_Keyboard::is_right() {",
      "class_name": "Controller_Keyboard",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 7 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "Controller_Keyboard::is_up": {
      "name": "is_up",
      "location": {
        "file": "src/Controller_Keyboard.cpp",
        "line": 62,
        "column": 0
      },
      "signature": "bool Controller_Keyboard::is_up() {",
      "class_name": "Controller_Keyboard",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 7 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "Controller_Keyboard::is_down": {
      "name": "is_down",
      "location": {
        "file": "src/Controller_Keyboard.cpp",
        "line": 66,
        "column": 0
      },
      "signature": "bool Controller_Keyboard::is_down() {",
      "class_name": "Controller_Keyboard",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 8 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "Controller_Keyboard::is_bomb": {
      "name": "is_bomb",
      "location": {
        "file": "src/Controller_Keyboard.cpp",
        "line": 70,
        "column": 0
      },
      "signature": "bool Controller_Keyboard::is_bomb() {",
      "class_name": "Controller_Keyboard",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 6 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "MapTile_Pure::create": {
      "name": "create",
      "location": {
        "file": "src/MapTile_Pure.cpp",
        "line": 25,
        "column": 0
      },
      "signature": "MapTile_Pure* MapTile_Pure::create(TILE_TYPE type, int grid_x, int grid_y) {",
      "class_name": "MapTile_Pure",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 7 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "MapTile_Box_Pure::on_destruction_request": {
      "name": "on_destruction_request",
      "location": {
        "file": "src/MapTile_Pure.cpp",
        "line": 66,
        "column": 0
      },
      "signature": "void MapTile_Box_Pure::on_destruction_request() {",
      "class_name": "MapTile_Box_Pure",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 2 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "GameSystems::update_all_systems": {
      "name": "update_all_systems",
      "location": {
        "file": "src/GameSystems.cpp",
        "line": 19,
        "column": 0
      },
      "signature": "void GameSystems::update_all_systems(float deltaTime) {",
      "class_name": "GameSystems",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 2 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "GameSystems::render_all_systems": {
      "name": "render_all_systems",
      "location": {
        "file": "src/GameSystems.cpp",
        "line": 46,
        "column": 0
      },
      "signature": "void GameSystems::render_all_systems() {",
      "class_name": "GameSystems",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 1 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "GameSystems::update_input_system": {
      "name": "update_input_system",
      "location": {
        "file": "src/GameSystems.cpp",
        "line": 52,
        "column": 0
      },
      "signature": "void GameSystems::update_input_system(float deltaTime) {",
      "class_name": "GameSystems",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.5,
      "evidence": [
        "Called within same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "GameSystems::update_physics_system": {
      "name": "update_physics_system",
      "location": {
        "file": "src/GameSystems.cpp",
        "line": 56,
        "column": 0
      },
      "signature": "void GameSystems::update_physics_system(float deltaTime) {",
      "class_name": "GameSystems",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.5,
      "evidence": [
        "Called within same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "GameSystems::update_ai_system": {
      "name": "update_ai_system",
      "location": {
        "file": "src/GameSystems.cpp",
        "line": 67,
        "column": 0
      },
      "signature": "void GameSystems::update_ai_system(float deltaTime) {",
      "class_name": "GameSystems",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.5,
      "evidence": [
        "Called within same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "GameSystems::update_collision_system": {
      "name": "update_collision_system",
      "location": {
        "file": "src/GameSystems.cpp",
        "line": 78,
        "column": 0
      },
      "signature": "void GameSystems::update_collision_system(float deltaTime) {",
      "class_name": "GameSystems",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.5,
      "evidence": [
        "Called within same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "GameSystems::update_animation_system": {
      "name": "update_animation_system",
      "location": {
        "file": "src/GameSystems.cpp",
        "line": 82,
        "column": 0
      },
      "signature": "void GameSystems::update_animation_system(float deltaTime) {",
      "class_name": "GameSystems",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.5,
      "evidence": [
        "Called within same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "GameSystems::render_world": {
      "name": "render_world",
      "location": {
        "file": "src/GameSystems.cpp",
        "line": 86,
        "column": 0
      },
      "signature": "void GameSystems::render_world() {",
      "class_name": "GameSystems",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.5,
      "evidence": [
        "Called within same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "GameSystems::render_effects": {
      "name": "render_effects",
      "location": {
        "file": "src/GameSystems.cpp",
        "line": 90,
        "column": 0
      },
      "signature": "void GameSystems::render_effects() {",
      "class_name": "GameSystems",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.5,
      "evidence": [
        "Called within same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "GameSystems::render_ui": {
      "name": "render_ui",
      "location": {
        "file": "src/GameSystems.cpp",
        "line": 94,
        "column": 0
      },
      "signature": "void GameSystems::render_ui() {",
      "class_name": "GameSystems",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.5,
      "evidence": [
        "Called within same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "GameSystems::init_all_systems": {
      "name": "init_all_systems",
      "location": {
        "file": "src/GameSystems.cpp",
        "line": 105,
        "column": 0
      },
      "signature": "void GameSystems::init_all_systems() {",
      "class_name": "GameSystems",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 2 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "GameSystems::register_object": {
      "name": "register_object",
      "location": {
        "file": "src/GameSystems.cpp",
        "line": 121,
        "column": 0
      },
      "signature": "void GameSystems::register_object(GameObject* obj) {",
      "class_name": "GameSystems",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 13 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "GameSystems::register_bomber": {
      "name": "register_bomber",
      "location": {
        "file": "src/GameSystems.cpp",
        "line": 128,
        "column": 0
      },
      "signature": "void GameSystems::register_bomber(Bomber* bomber) {",
      "class_name": "GameSystems",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 1 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "GameSystems::cleanup_destroyed_objects": {
      "name": "cleanup_destroyed_objects",
      "location": {
        "file": "src/GameSystems.cpp",
        "line": 135,
        "column": 0
      },
      "signature": "void GameSystems::cleanup_destroyed_objects() {",
      "class_name": "GameSystems",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.5,
      "evidence": [
        "Called within same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "CorpsePart::act": {
      "name": "act",
      "location": {
        "file": "src/CorpsePart.cpp",
        "line": 59,
        "column": 0
      },
      "signature": "void CorpsePart::act(float deltaTime) {",
      "class_name": "CorpsePart",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 20 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "CorpsePart::show": {
      "name": "show",
      "location": {
        "file": "src/CorpsePart.cpp",
        "line": 154,
        "column": 0
      },
      "signature": "void CorpsePart::show() {",
      "class_name": "CorpsePart",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 22 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "CorpsePart::apply_force": {
      "name": "apply_force",
      "location": {
        "file": "src/CorpsePart.cpp",
        "line": 158,
        "column": 0
      },
      "signature": "void CorpsePart::apply_force(const Vector2D& force) {",
      "class_name": "CorpsePart",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (4) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "CorpsePart::apply_drag": {
      "name": "apply_drag",
      "location": {
        "file": "src/CorpsePart.cpp",
        "line": 164,
        "column": 0
      },
      "signature": "void CorpsePart::apply_drag() {",
      "class_name": "CorpsePart",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.5,
      "evidence": [
        "Called within same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "CorpsePart::apply_gravity": {
      "name": "apply_gravity",
      "location": {
        "file": "src/CorpsePart.cpp",
        "line": 179,
        "column": 0
      },
      "signature": "void CorpsePart::apply_gravity() {",
      "class_name": "CorpsePart",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.5,
      "evidence": [
        "Called within same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "CorpsePart::handle_collisions": {
      "name": "handle_collisions",
      "location": {
        "file": "src/CorpsePart.cpp",
        "line": 185,
        "column": 0
      },
      "signature": "void CorpsePart::handle_collisions(float deltaTime) {",
      "class_name": "CorpsePart",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.5,
      "evidence": [
        "Called within same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "CorpsePart::update_blood_trail": {
      "name": "update_blood_trail",
      "location": {
        "file": "src/CorpsePart.cpp",
        "line": 227,
        "column": 0
      },
      "signature": "void CorpsePart::update_blood_trail(float deltaTime) {",
      "class_name": "CorpsePart",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.5,
      "evidence": [
        "Called within same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "CorpsePart::emit_blood": {
      "name": "emit_blood",
      "location": {
        "file": "src/CorpsePart.cpp",
        "line": 244,
        "column": 0
      },
      "signature": "void CorpsePart::emit_blood() {",
      "class_name": "CorpsePart",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.5,
      "evidence": [
        "Called within same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "CorpsePart::render_blood_trails": {
      "name": "render_blood_trails",
      "location": {
        "file": "src/CorpsePart.cpp",
        "line": 262,
        "column": 0
      },
      "signature": "void CorpsePart::render_blood_trails() {",
      "class_name": "CorpsePart",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 1 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "CorpsePart::get_part_mass": {
      "name": "get_part_mass",
      "location": {
        "file": "src/CorpsePart.cpp",
        "line": 268,
        "column": 0
      },
      "signature": "float CorpsePart::get_part_mass(int part_type) {",
      "class_name": "CorpsePart",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.5,
      "evidence": [
        "Called within same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "CorpsePart::get_part_surface_area": {
      "name": "get_part_surface_area",
      "location": {
        "file": "src/CorpsePart.cpp",
        "line": 279,
        "column": 0
      },
      "signature": "float CorpsePart::get_part_surface_area(int part_type) {",
      "class_name": "CorpsePart",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.5,
      "evidence": [
        "Called within same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "ErrorHandler::handle_error": {
      "name": "handle_error",
      "location": {
        "file": "src/ErrorHandling.cpp",
        "line": 6,
        "column": 0
      },
      "signature": "ErrorRecoveryStrategy ErrorHandler::handle_error(const GameException& error) {",
      "class_name": "ErrorHandler",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 1 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "ErrorHandler::register_error_handler": {
      "name": "register_error_handler",
      "location": {
        "file": "src/ErrorHandling.cpp",
        "line": 34,
        "column": 0
      },
      "signature": "void ErrorHandler::register_error_handler(GameErrorType error_type, ErrorCallback callback) {",
      "class_name": "ErrorHandler",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 1 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "ErrorHandler::get_error_statistics": {
      "name": "get_error_statistics",
      "location": {
        "file": "src/ErrorHandling.cpp",
        "line": 45,
        "column": 0
      },
      "signature": "ErrorHandler::ErrorStats ErrorHandler::get_error_statistics() const {",
      "class_name": "ErrorHandler",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (3) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "ErrorHandler::clear_error_statistics": {
      "name": "clear_error_statistics",
      "location": {
        "file": "src/ErrorHandling.cpp",
        "line": 73,
        "column": 0
      },
      "signature": "void ErrorHandler::clear_error_statistics() {",
      "class_name": "ErrorHandler",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 1 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "ErrorHandler::log_error": {
      "name": "log_error",
      "location": {
        "file": "src/ErrorHandling.cpp",
        "line": 78,
        "column": 0
      },
      "signature": "void ErrorHandler::log_error(const GameException& error) {",
      "class_name": "ErrorHandler",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.5,
      "evidence": [
        "Called within same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "ErrorHandler::get_default_strategy": {
      "name": "get_default_strategy",
      "location": {
        "file": "src/ErrorHandling.cpp",
        "line": 119,
        "column": 0
      },
      "signature": "ErrorRecoveryStrategy ErrorHandler::get_default_strategy(GameErrorType type, ErrorSeverity severity) {",
      "class_name": "ErrorHandler",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.5,
      "evidence": [
        "Called within same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "GameLogic::update_frame": {
      "name": "update_frame",
      "location": {
        "file": "src/GameLogic.cpp",
        "line": 16,
        "column": 0
      },
      "signature": "void GameLogic::update_frame(float deltaTime) {",
      "class_name": "GameLogic",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 1 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "GameLogic::update_all_objects": {
      "name": "update_all_objects",
      "location": {
        "file": "src/GameLogic.cpp",
        "line": 36,
        "column": 0
      },
      "signature": "void GameLogic::update_all_objects(float deltaTime) {",
      "class_name": "GameLogic",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (3) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "GameLogic::render_all_objects": {
      "name": "render_all_objects",
      "location": {
        "file": "src/GameLogic.cpp",
        "line": 55,
        "column": 0
      },
      "signature": "void GameLogic::render_all_objects() {",
      "class_name": "GameLogic",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 2 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "GameLogic::cleanup_deleted_objects": {
      "name": "cleanup_deleted_objects",
      "location": {
        "file": "src/GameLogic.cpp",
        "line": 82,
        "column": 0
      },
      "signature": "void GameLogic::cleanup_deleted_objects() {",
      "class_name": "GameLogic",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.5,
      "evidence": [
        "Called within same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "GameLogic::find_object_by_id": {
      "name": "find_object_by_id",
      "location": {
        "file": "src/GameLogic.cpp",
        "line": 89,
        "column": 0
      },
      "signature": "GameObject* GameLogic::find_object_by_id(int object_id) const {",
      "class_name": "GameLogic",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (3) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "GameLogic::find_bomber_by_id": {
      "name": "find_bomber_by_id",
      "location": {
        "file": "src/GameLogic.cpp",
        "line": 96,
        "column": 0
      },
      "signature": "Bomber* GameLogic::find_bomber_by_id(int bomber_id) const {",
      "class_name": "GameLogic",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (3) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "GameLogic::count_active_objects": {
      "name": "count_active_objects",
      "location": {
        "file": "src/GameLogic.cpp",
        "line": 103,
        "column": 0
      },
      "signature": "size_t GameLogic::count_active_objects() const {",
      "class_name": "GameLogic",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (3) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "GameLogic::clear_all_objects": {
      "name": "clear_all_objects",
      "location": {
        "file": "src/GameLogic.cpp",
        "line": 114,
        "column": 0
      },
      "signature": "void GameLogic::clear_all_objects() {",
      "class_name": "GameLogic",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.5,
      "evidence": [
        "Called within same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "GameLogic::reset_game_state": {
      "name": "reset_game_state",
      "location": {
        "file": "src/GameLogic.cpp",
        "line": 121,
        "column": 0
      },
      "signature": "void GameLogic::reset_game_state() {",
      "class_name": "GameLogic",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 1 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "GameLogic::get_game_statistics": {
      "name": "get_game_statistics",
      "location": {
        "file": "src/GameLogic.cpp",
        "line": 132,
        "column": 0
      },
      "signature": "GameLogic::GameStats GameLogic::get_game_statistics() const {",
      "class_name": "GameLogic",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (4) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "GameLogic::log_frame_statistics": {
      "name": "log_frame_statistics",
      "location": {
        "file": "src/GameLogic.cpp",
        "line": 166,
        "column": 0
      },
      "signature": "void GameLogic::log_frame_statistics() const {",
      "class_name": "GameLogic",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (4) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "GameLogic::should_skip_object_update": {
      "name": "should_skip_object_update",
      "location": {
        "file": "src/GameLogic.cpp",
        "line": 178,
        "column": 0
      },
      "signature": "bool GameLogic::should_skip_object_update(GameObject* obj) const {",
      "class_name": "GameLogic",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (4) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "GPUAcceleratedRenderer::initialize": {
      "name": "initialize",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 36,
        "column": 0
      },
      "signature": "GameResult<void> GPUAcceleratedRenderer::initialize(SDL_Window* _window, int width, int height) {",
      "class_name": "GPUAcceleratedRenderer",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (19) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "GPUAcceleratedRenderer::shutdown": {
      "name": "shutdown",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 182,
        "column": 0
      },
      "signature": "void GPUAcceleratedRenderer::shutdown() {",
      "class_name": "GPUAcceleratedRenderer",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (10) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "GPUAcceleratedRenderer::load_all_shaders": {
      "name": "load_all_shaders",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 211,
        "column": 0
      },
      "signature": "bool GPUAcceleratedRenderer::load_all_shaders() {",
      "class_name": "GPUAcceleratedRenderer",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 1 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "GPUAcceleratedRenderer::compile_shader": {
      "name": "compile_shader",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 325,
        "column": 0
      },
      "signature": "GLuint GPUAcceleratedRenderer::compile_shader(const std::string& source, GLenum type, const std::string& name) {",
      "class_name": "GPUAcceleratedRenderer",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (4) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "GPUAcceleratedRenderer::create_program": {
      "name": "create_program",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 344,
        "column": 0
      },
      "signature": "GLuint GPUAcceleratedRenderer::create_program(GLuint vertex, GLuint fragment, const std::string& name) {",
      "class_name": "GPUAcceleratedRenderer",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.5,
      "evidence": [
        "Called within same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "GPUAcceleratedRenderer::create_compute_program": {
      "name": "create_compute_program",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 372,
        "column": 0
      },
      "signature": "GLuint GPUAcceleratedRenderer::create_compute_program(GLuint compute, const std::string& name) {",
      "class_name": "GPUAcceleratedRenderer",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.5,
      "evidence": [
        "Called within same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "GPUAcceleratedRenderer::setup_matrices": {
      "name": "setup_matrices",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 391,
        "column": 0
      },
      "signature": "void GPUAcceleratedRenderer::setup_matrices() {",
      "class_name": "GPUAcceleratedRenderer",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.5,
      "evidence": [
        "Called within same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "GPUAcceleratedRenderer::setup_sprite_rendering": {
      "name": "setup_sprite_rendering",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 408,
        "column": 0
      },
      "signature": "void GPUAcceleratedRenderer::setup_sprite_rendering() {",
      "class_name": "GPUAcceleratedRenderer",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.5,
      "evidence": [
        "Called within same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "GPUAcceleratedRenderer::init_particle_system": {
      "name": "init_particle_system",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 480,
        "column": 0
      },
      "signature": "bool GPUAcceleratedRenderer::init_particle_system(int max_particles) {",
      "class_name": "GPUAcceleratedRenderer",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 1 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "GPUAcceleratedRenderer::begin_frame": {
      "name": "begin_frame",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 520,
        "column": 0
      },
      "signature": "void GPUAcceleratedRenderer::begin_frame() {",
      "class_name": "GPUAcceleratedRenderer",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 4 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "GPUAcceleratedRenderer::end_frame": {
      "name": "end_frame",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 536,
        "column": 0
      },
      "signature": "void GPUAcceleratedRenderer::end_frame() {",
      "class_name": "GPUAcceleratedRenderer",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 4 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "GPUAcceleratedRenderer::present": {
      "name": "present",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 545,
        "column": 0
      },
      "signature": "void GPUAcceleratedRenderer::present() {",
      "class_name": "GPUAcceleratedRenderer",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 1 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "GPUAcceleratedRenderer::check_gl_error": {
      "name": "check_gl_error",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 550,
        "column": 0
      },
      "signature": "void GPUAcceleratedRenderer::check_gl_error(const std::string& operation) {",
      "class_name": "GPUAcceleratedRenderer",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (34) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "GPUAcceleratedRenderer::preprocess_shader_includes": {
      "name": "preprocess_shader_includes",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 566,
        "column": 0
      },
      "signature": "std::string GPUAcceleratedRenderer::preprocess_shader_includes(const std::string& source) {",
      "class_name": "GPUAcceleratedRenderer",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.5,
      "evidence": [
        "Called within same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "GPUAcceleratedRenderer::begin_batch": {
      "name": "begin_batch",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 616,
        "column": 0
      },
      "signature": "void GPUAcceleratedRenderer::begin_batch(EffectType effect) {",
      "class_name": "GPUAcceleratedRenderer",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 5 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "GPUAcceleratedRenderer::flush_batch": {
      "name": "flush_batch",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 623,
        "column": 0
      },
      "signature": "void GPUAcceleratedRenderer::flush_batch() {",
      "class_name": "GPUAcceleratedRenderer",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (8) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "GPUAcceleratedRenderer::update_uniforms": {
      "name": "update_uniforms",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 762,
        "column": 0
      },
      "signature": "void GPUAcceleratedRenderer::update_uniforms() {",
      "class_name": "GPUAcceleratedRenderer",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.5,
      "evidence": [
        "Called within same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "GPUAcceleratedRenderer::end_batch": {
      "name": "end_batch",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 933,
        "column": 0
      },
      "signature": "void GPUAcceleratedRenderer::end_batch() {",
      "class_name": "GPUAcceleratedRenderer",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 5 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "GPUAcceleratedRenderer::update_particles_gpu": {
      "name": "update_particles_gpu",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 937,
        "column": 0
      },
      "signature": "void GPUAcceleratedRenderer::update_particles_gpu(float deltaTime) {",
      "class_name": "GPUAcceleratedRenderer",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 1 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "GPUAcceleratedRenderer::render_particles": {
      "name": "render_particles",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 1083,
        "column": 0
      },
      "signature": "void GPUAcceleratedRenderer::render_particles() {",
      "class_name": "GPUAcceleratedRenderer",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 3 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "GPUAcceleratedRenderer::set_camera": {
      "name": "set_camera",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 1089,
        "column": 0
      },
      "signature": "void GPUAcceleratedRenderer::set_camera(const float* position, float zoom) {",
      "class_name": "GPUAcceleratedRenderer",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 1 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "GPUAcceleratedRenderer::set_global_effect_params": {
      "name": "set_global_effect_params",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 1102,
        "column": 0
      },
      "signature": "void GPUAcceleratedRenderer::set_global_effect_params(const float* params) {",
      "class_name": "GPUAcceleratedRenderer",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 1 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "GPUAcceleratedRenderer::create_texture_from_surface": {
      "name": "create_texture_from_surface",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 1108,
        "column": 0
      },
      "signature": "GLuint GPUAcceleratedRenderer::create_texture_from_surface(SDL_Surface* surface) {",
      "class_name": "GPUAcceleratedRenderer",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 1 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "GPUAcceleratedRenderer::print_performance_stats": {
      "name": "print_performance_stats",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 1127,
        "column": 0
      },
      "signature": "void GPUAcceleratedRenderer::print_performance_stats() {",
      "class_name": "GPUAcceleratedRenderer",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 1 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "GPUAcceleratedRenderer::register_texture_metadata": {
      "name": "register_texture_metadata",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 1136,
        "column": 0
      },
      "signature": "void GPUAcceleratedRenderer::register_texture_metadata(GLuint texture_id, int width, int height, int sprite_width, int sprite_height) {",
      "class_name": "GPUAcceleratedRenderer",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 2 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "GPUAcceleratedRenderer::calculate_sprite_uv": {
      "name": "calculate_sprite_uv",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 1148,
        "column": 0
      },
      "signature": "void GPUAcceleratedRenderer::calculate_sprite_uv(GLuint texture, int sprite_number, float& u_start, float& u_end, float& v_start, float& v_end) {",
      "class_name": "GPUAcceleratedRenderer",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.5,
      "evidence": [
        "Called within same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "GPUAcceleratedRenderer::set_explosion_effect": {
      "name": "set_explosion_effect",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 1183,
        "column": 0
      },
      "signature": "void GPUAcceleratedRenderer::set_explosion_effect(float center_x, float center_y, float radius, float strength) {",
      "class_name": "GPUAcceleratedRenderer",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 2 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "GPUAcceleratedRenderer::set_vortex_effect": {
      "name": "set_vortex_effect",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 1190,
        "column": 0
      },
      "signature": "void GPUAcceleratedRenderer::set_vortex_effect(float center_x, float center_y, float radius, float strength) {",
      "class_name": "GPUAcceleratedRenderer",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 1 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "GPUAcceleratedRenderer::set_environmental_effects": {
      "name": "set_environmental_effects",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 1197,
        "column": 0
      },
      "signature": "void GPUAcceleratedRenderer::set_environmental_effects(float air_density_value, const float* magnetic_field_value) {",
      "class_name": "GPUAcceleratedRenderer",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 1 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "GPUAcceleratedRenderer::clear_effects": {
      "name": "clear_effects",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 1207,
        "column": 0
      },
      "signature": "void GPUAcceleratedRenderer::clear_effects() {",
      "class_name": "GPUAcceleratedRenderer",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 1 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "GPUAcceleratedRenderer::set_explosion_info": {
      "name": "set_explosion_info",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 1217,
        "column": 0
      },
      "signature": "void GPUAcceleratedRenderer::set_explosion_info(float center_x, float center_y, float age, int up, int down, int left, int right) {",
      "class_name": "GPUAcceleratedRenderer",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 2 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "GPUAcceleratedRenderer::clear_explosion_info": {
      "name": "clear_explosion_info",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 1232,
        "column": 0
      },
      "signature": "void GPUAcceleratedRenderer::clear_explosion_info() {",
      "class_name": "GPUAcceleratedRenderer",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 2 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "ClanBomberApplication::initialize_game_context": {
      "name": "initialize_game_context",
      "location": {
        "file": "src/ClanBomber.cpp",
        "line": 65,
        "column": 0
      },
      "signature": "void ClanBomberApplication::initialize_game_context() {",
      "class_name": "ClanBomberApplication",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 3 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "ClanBomberApplication::is_server": {
      "name": "is_server",
      "location": {
        "file": "src/ClanBomber.cpp",
        "line": 98,
        "column": 0
      },
      "signature": "bool ClanBomberApplication::is_server() {",
      "class_name": "ClanBomberApplication",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 1 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "ClanBomberApplication::is_client": {
      "name": "is_client",
      "location": {
        "file": "src/ClanBomber.cpp",
        "line": 102,
        "column": 0
      },
      "signature": "bool ClanBomberApplication::is_client() {",
      "class_name": "ClanBomberApplication",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 1 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "ClanBomberApplication::get_server": {
      "name": "get_server",
      "location": {
        "file": "src/ClanBomber.cpp",
        "line": 106,
        "column": 0
      },
      "signature": "Server* ClanBomberApplication::get_server() {",
      "class_name": "ClanBomberApplication",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 2 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "ClanBomberApplication::get_client": {
      "name": "get_client",
      "location": {
        "file": "src/ClanBomber.cpp",
        "line": 110,
        "column": 0
      },
      "signature": "Client* ClanBomberApplication::get_client() {",
      "class_name": "ClanBomberApplication",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 1 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "ClanBomberApplication::get_server_setup": {
      "name": "get_server_setup",
      "location": {
        "file": "src/ClanBomber.cpp",
        "line": 114,
        "column": 0
      },
      "signature": "ServerSetup* ClanBomberApplication::get_server_setup() {",
      "class_name": "ClanBomberApplication",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 1 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "ClanBomberApplication::get_client_setup": {
      "name": "get_client_setup",
      "location": {
        "file": "src/ClanBomber.cpp",
        "line": 118,
        "column": 0
      },
      "signature": "ClientSetup* ClanBomberApplication::get_client_setup() {",
      "class_name": "ClanBomberApplication",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 1 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "ClanBomberApplication::get_chat": {
      "name": "get_chat",
      "location": {
        "file": "src/ClanBomber.cpp",
        "line": 122,
        "column": 0
      },
      "signature": "Chat* ClanBomberApplication::get_chat() {",
      "class_name": "ClanBomberApplication",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 1 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "ClanBomberApplication::get_menu": {
      "name": "get_menu",
      "location": {
        "file": "src/ClanBomber.cpp",
        "line": 126,
        "column": 0
      },
      "signature": "Menu* ClanBomberApplication::get_menu() {",
      "class_name": "ClanBomberApplication",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 1 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "ClanBomberApplication::get_next_object_id": {
      "name": "get_next_object_id",
      "location": {
        "file": "src/ClanBomber.cpp",
        "line": 130,
        "column": 0
      },
      "signature": "unsigned short ClanBomberApplication::get_next_object_id() {",
      "class_name": "ClanBomberApplication",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 2 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "ClanBomberApplication::get_map_path": {
      "name": "get_map_path",
      "location": {
        "file": "src/ClanBomber.cpp",
        "line": 135,
        "column": 0
      },
      "signature": "std::filesystem::path ClanBomberApplication::get_map_path() {",
      "class_name": "ClanBomberApplication",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 1 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "ClanBomberApplication::get_local_map_path": {
      "name": "get_local_map_path",
      "location": {
        "file": "src/ClanBomber.cpp",
        "line": 139,
        "column": 0
      },
      "signature": "std::filesystem::path ClanBomberApplication::get_local_map_path() {",
      "class_name": "ClanBomberApplication",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 1 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "ClanBomberApplication::lock": {
      "name": "lock",
      "location": {
        "file": "src/ClanBomber.cpp",
        "line": 143,
        "column": 0
      },
      "signature": "void ClanBomberApplication::lock() {",
      "class_name": "ClanBomberApplication",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 1 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "ClanBomberApplication::unlock": {
      "name": "unlock",
      "location": {
        "file": "src/ClanBomber.cpp",
        "line": 147,
        "column": 0
      },
      "signature": "void ClanBomberApplication::unlock() {",
      "class_name": "ClanBomberApplication",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 1 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "ClanBomberApplication::wait": {
      "name": "wait",
      "location": {
        "file": "src/ClanBomber.cpp",
        "line": 151,
        "column": 0
      },
      "signature": "void ClanBomberApplication::wait() {",
      "class_name": "ClanBomberApplication",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 1 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "ClanBomberApplication::signal": {
      "name": "signal",
      "location": {
        "file": "src/ClanBomber.cpp",
        "line": 155,
        "column": 0
      },
      "signature": "void ClanBomberApplication::signal() {",
      "class_name": "ClanBomberApplication",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 1 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "ClanBomberApplication::delete_all_game_objects": {
      "name": "delete_all_game_objects",
      "location": {
        "file": "src/ClanBomber.cpp",
        "line": 159,
        "column": 0
      },
      "signature": "void ClanBomberApplication::delete_all_game_objects() {",
      "class_name": "ClanBomberApplication",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.5,
      "evidence": [
        "Called within same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "ClanBomberApplication::get_object_by_id": {
      "name": "get_object_by_id",
      "location": {
        "file": "src/ClanBomber.cpp",
        "line": 171,
        "column": 0
      },
      "signature": "GameObject* ClanBomberApplication::get_object_by_id(int object_id) {",
      "class_name": "ClanBomberApplication",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 1 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "ClanBomberApplication::get_server_frame_counter": {
      "name": "get_server_frame_counter",
      "location": {
        "file": "src/ClanBomber.cpp",
        "line": 180,
        "column": 0
      },
      "signature": "int ClanBomberApplication::get_server_frame_counter() {",
      "class_name": "ClanBomberApplication",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 1 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "ClanBomberApplication::inc_server_frame_counter": {
      "name": "inc_server_frame_counter",
      "location": {
        "file": "src/ClanBomber.cpp",
        "line": 184,
        "column": 0
      },
      "signature": "void ClanBomberApplication::inc_server_frame_counter() {",
      "class_name": "ClanBomberApplication",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 1 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "ClanBomberApplication::paused_game": {
      "name": "paused_game",
      "location": {
        "file": "src/ClanBomber.cpp",
        "line": 188,
        "column": 0
      },
      "signature": "bool ClanBomberApplication::paused_game() {",
      "class_name": "ClanBomberApplication",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 1 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "ClanBomberApplication::set_pause_game": {
      "name": "set_pause_game",
      "location": {
        "file": "src/ClanBomber.cpp",
        "line": 192,
        "column": 0
      },
      "signature": "void ClanBomberApplication::set_pause_game(bool paused) {",
      "class_name": "ClanBomberApplication",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 1 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "ClanBomberApplication::set_client_disconnected_from_server": {
      "name": "set_client_disconnected_from_server",
      "location": {
        "file": "src/ClanBomber.cpp",
        "line": 196,
        "column": 0
      },
      "signature": "void ClanBomberApplication::set_client_disconnected_from_server(bool d) {",
      "class_name": "ClanBomberApplication",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 1 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "ClanBomberApplication::is_client_disconnected_from_server": {
      "name": "is_client_disconnected_from_server",
      "location": {
        "file": "src/ClanBomber.cpp",
        "line": 200,
        "column": 0
      },
      "signature": "bool ClanBomberApplication::is_client_disconnected_from_server() {",
      "class_name": "ClanBomberApplication",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 1 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "ClanBomberApplication::set_client_connecting_to_new_server": {
      "name": "set_client_connecting_to_new_server",
      "location": {
        "file": "src/ClanBomber.cpp",
        "line": 204,
        "column": 0
      },
      "signature": "void ClanBomberApplication::set_client_connecting_to_new_server(bool c) {",
      "class_name": "ClanBomberApplication",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 1 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "ClanBomberApplication::is_client_connecting_to_new_server": {
      "name": "is_client_connecting_to_new_server",
      "location": {
        "file": "src/ClanBomber.cpp",
        "line": 208,
        "column": 0
      },
      "signature": "bool ClanBomberApplication::is_client_connecting_to_new_server() {",
      "class_name": "ClanBomberApplication",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 1 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "ClanBomberApplication::get_map": {
      "name": "get_map",
      "location": {
        "file": "src/ClanBomber.cpp",
        "line": 212,
        "column": 0
      },
      "signature": "Map* ClanBomberApplication::get_map() {",
      "class_name": "ClanBomberApplication",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 6 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "ParticleEffectsManager::request_effect": {
      "name": "request_effect",
      "location": {
        "file": "src/ParticleEffectsManager.cpp",
        "line": 18,
        "column": 0
      },
      "signature": "void ParticleEffectsManager::request_effect(const EffectRequest& request) {",
      "class_name": "ParticleEffectsManager",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (3) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "ParticleEffectsManager::update": {
      "name": "update",
      "location": {
        "file": "src/ParticleEffectsManager.cpp",
        "line": 22,
        "column": 0
      },
      "signature": "void ParticleEffectsManager::update(float deltaTime) {",
      "class_name": "ParticleEffectsManager",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 15 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "ParticleEffectsManager::render": {
      "name": "render",
      "location": {
        "file": "src/ParticleEffectsManager.cpp",
        "line": 38,
        "column": 0
      },
      "signature": "void ParticleEffectsManager::render() {",
      "class_name": "ParticleEffectsManager",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 7 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "ParticleEffectsManager::create_box_destruction_effect": {
      "name": "create_box_destruction_effect",
      "location": {
        "file": "src/ParticleEffectsManager.cpp",
        "line": 41,
        "column": 0
      },
      "signature": "void ParticleEffectsManager::create_box_destruction_effect(float x, float y, float intensity) {",
      "class_name": "ParticleEffectsManager",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 3 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "ParticleEffectsManager::create_explosion_effect": {
      "name": "create_explosion_effect",
      "location": {
        "file": "src/ParticleEffectsManager.cpp",
        "line": 45,
        "column": 0
      },
      "signature": "void ParticleEffectsManager::create_explosion_effect(float x, float y, float intensity) {",
      "class_name": "ParticleEffectsManager",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 1 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "ParticleEffectsManager::process_box_destruction": {
      "name": "process_box_destruction",
      "location": {
        "file": "src/ParticleEffectsManager.cpp",
        "line": 49,
        "column": 0
      },
      "signature": "void ParticleEffectsManager::process_box_destruction(float x, float y, float intensity) {",
      "class_name": "ParticleEffectsManager",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.5,
      "evidence": [
        "Called within same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "ParticleEffectsManager::process_explosion": {
      "name": "process_explosion",
      "location": {
        "file": "src/ParticleEffectsManager.cpp",
        "line": 68,
        "column": 0
      },
      "signature": "void ParticleEffectsManager::process_explosion(float x, float y, float intensity) {",
      "class_name": "ParticleEffectsManager",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.5,
      "evidence": [
        "Called within same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "TextRenderer::initialize": {
      "name": "initialize",
      "location": {
        "file": "src/TextRenderer.cpp",
        "line": 20,
        "column": 0
      },
      "signature": "bool TextRenderer::initialize() {",
      "class_name": "TextRenderer",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 6 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "TextRenderer::shutdown": {
      "name": "shutdown",
      "location": {
        "file": "src/TextRenderer.cpp",
        "line": 31,
        "column": 0
      },
      "signature": "void TextRenderer::shutdown() {",
      "class_name": "TextRenderer",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (10) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "TextRenderer::load_font": {
      "name": "load_font",
      "location": {
        "file": "src/TextRenderer.cpp",
        "line": 49,
        "column": 0
      },
      "signature": "bool TextRenderer::load_font(const std::string& name, const std::string& path, int size) {",
      "class_name": "TextRenderer",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 3 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "TextRenderer::get_font": {
      "name": "get_font",
      "location": {
        "file": "src/TextRenderer.cpp",
        "line": 61,
        "column": 0
      },
      "signature": "TTF_Font* TextRenderer::get_font(const std::string& name) {",
      "class_name": "TextRenderer",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (3) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "TextRenderer::create_gl_texture_from_surface": {
      "name": "create_gl_texture_from_surface",
      "location": {
        "file": "src/TextRenderer.cpp",
        "line": 69,
        "column": 0
      },
      "signature": "GLuint TextRenderer::create_gl_texture_from_surface(SDL_Surface* surface) {",
      "class_name": "TextRenderer",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.5,
      "evidence": [
        "Called within same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "TextRenderer::make_cache_key": {
      "name": "make_cache_key",
      "location": {
        "file": "src/TextRenderer.cpp",
        "line": 95,
        "column": 0
      },
      "signature": "std::string TextRenderer::make_cache_key(const std::string& text, const std::string& font_name, SDL_Color color) {",
      "class_name": "TextRenderer",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.5,
      "evidence": [
        "Called within same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "TextRenderer::render_text": {
      "name": "render_text",
      "location": {
        "file": "src/TextRenderer.cpp",
        "line": 101,
        "column": 0
      },
      "signature": "std::shared_ptr<TextTexture> TextRenderer::render_text(const std::string& text, const std::string& font_name, SDL_Color color) {",
      "class_name": "TextRenderer",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (7) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "Game::run": {
      "name": "run",
      "location": {
        "file": "src/Game.cpp",
        "line": 154,
        "column": 0
      },
      "signature": "void Game::run() {",
      "class_name": "Game",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 2 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "Game::handle_events": {
      "name": "handle_events",
      "location": {
        "file": "src/Game.cpp",
        "line": 163,
        "column": 0
      },
      "signature": "void Game::handle_events() {",
      "class_name": "Game",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (7) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "Game::update": {
      "name": "update",
      "location": {
        "file": "src/Game.cpp",
        "line": 174,
        "column": 0
      },
      "signature": "void Game::update(float deltaTime) {",
      "class_name": "Game",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (23) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "Game::render": {
      "name": "render",
      "location": {
        "file": "src/Game.cpp",
        "line": 197,
        "column": 0
      },
      "signature": "void Game::render() {",
      "class_name": "Game",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (8) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "Game::change_screen": {
      "name": "change_screen",
      "location": {
        "file": "src/Game.cpp",
        "line": 222,
        "column": 0
      },
      "signature": "void Game::change_screen(GameState next_state) {",
      "class_name": "Game",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (6) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "MainMenuScreen::handle_events": {
      "name": "handle_events",
      "location": {
        "file": "src/MainMenuScreen.cpp",
        "line": 35,
        "column": 0
      },
      "signature": "void MainMenuScreen::handle_events(SDL_Event& event) {",
      "class_name": "MainMenuScreen",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 6 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "MainMenuScreen::update": {
      "name": "update",
      "location": {
        "file": "src/MainMenuScreen.cpp",
        "line": 73,
        "column": 0
      },
      "signature": "void MainMenuScreen::update(float deltaTime) {",
      "class_name": "MainMenuScreen",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (23) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "MainMenuScreen::render": {
      "name": "render",
      "location": {
        "file": "src/MainMenuScreen.cpp",
        "line": 130,
        "column": 0
      },
      "signature": "void MainMenuScreen::render(SDL_Renderer* renderer) {",
      "class_name": "MainMenuScreen",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 7 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "MainMenuScreen::get_next_state": {
      "name": "get_next_state",
      "location": {
        "file": "src/MainMenuScreen.cpp",
        "line": 168,
        "column": 0
      },
      "signature": "GameState MainMenuScreen::get_next_state() const {",
      "class_name": "MainMenuScreen",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (9) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "Controller_Joystick::update": {
      "name": "update",
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 40,
        "column": 0
      },
      "signature": "void Controller_Joystick::update() {",
      "class_name": "Controller_Joystick",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 15 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "Controller_Joystick::reset": {
      "name": "reset",
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 50,
        "column": 0
      },
      "signature": "void Controller_Joystick::reset() {",
      "class_name": "Controller_Joystick",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (14) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "Controller_Joystick::is_left": {
      "name": "is_left",
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 58,
        "column": 0
      },
      "signature": "bool Controller_Joystick::is_left() {",
      "class_name": "Controller_Joystick",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 7 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "Controller_Joystick::is_right": {
      "name": "is_right",
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 63,
        "column": 0
      },
      "signature": "bool Controller_Joystick::is_right() {",
      "class_name": "Controller_Joystick",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 7 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "Controller_Joystick::is_up": {
      "name": "is_up",
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 68,
        "column": 0
      },
      "signature": "bool Controller_Joystick::is_up() {",
      "class_name": "Controller_Joystick",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 7 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "Controller_Joystick::is_down": {
      "name": "is_down",
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 73,
        "column": 0
      },
      "signature": "bool Controller_Joystick::is_down() {",
      "class_name": "Controller_Joystick",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 8 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "Controller_Joystick::is_bomb": {
      "name": "is_bomb",
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 78,
        "column": 0
      },
      "signature": "bool Controller_Joystick::is_bomb() {",
      "class_name": "Controller_Joystick",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 6 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "Controller_Joystick::initialize_joystick_system": {
      "name": "initialize_joystick_system",
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 94,
        "column": 0
      },
      "signature": "void Controller_Joystick::initialize_joystick_system() {",
      "class_name": "Controller_Joystick",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (4) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "Controller_Joystick::shutdown_joystick_system": {
      "name": "shutdown_joystick_system",
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 127,
        "column": 0
      },
      "signature": "void Controller_Joystick::shutdown_joystick_system() {",
      "class_name": "Controller_Joystick",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 2 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "Controller_Joystick::update_all_joysticks": {
      "name": "update_all_joysticks",
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 146,
        "column": 0
      },
      "signature": "void Controller_Joystick::update_all_joysticks() {",
      "class_name": "Controller_Joystick",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 1 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "Controller_Joystick::get_joystick_count": {
      "name": "get_joystick_count",
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 155,
        "column": 0
      },
      "signature": "int Controller_Joystick::get_joystick_count() {",
      "class_name": "Controller_Joystick",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 1 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "Controller_Joystick::initialize_joystick": {
      "name": "initialize_joystick",
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 171,
        "column": 0
      },
      "signature": "bool Controller_Joystick::initialize_joystick() {",
      "class_name": "Controller_Joystick",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.5,
      "evidence": [
        "Called within same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "Controller_Joystick::cleanup_joystick": {
      "name": "cleanup_joystick",
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 231,
        "column": 0
      },
      "signature": "void Controller_Joystick::cleanup_joystick() {",
      "class_name": "Controller_Joystick",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.5,
      "evidence": [
        "Called within same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "Controller_Joystick::is_joystick_connected": {
      "name": "is_joystick_connected",
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 245,
        "column": 0
      },
      "signature": "bool Controller_Joystick::is_joystick_connected() const {",
      "class_name": "Controller_Joystick",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (8) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "Controller_Joystick::update_input_state": {
      "name": "update_input_state",
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 249,
        "column": 0
      },
      "signature": "void Controller_Joystick::update_input_state() {",
      "class_name": "Controller_Joystick",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.5,
      "evidence": [
        "Called within same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "Controller_Joystick::get_analog_left": {
      "name": "get_analog_left",
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 266,
        "column": 0
      },
      "signature": "bool Controller_Joystick::get_analog_left() const {",
      "class_name": "Controller_Joystick",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (4) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "Controller_Joystick::get_analog_right": {
      "name": "get_analog_right",
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 275,
        "column": 0
      },
      "signature": "bool Controller_Joystick::get_analog_right() const {",
      "class_name": "Controller_Joystick",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (4) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "Controller_Joystick::get_analog_up": {
      "name": "get_analog_up",
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 284,
        "column": 0
      },
      "signature": "bool Controller_Joystick::get_analog_up() const {",
      "class_name": "Controller_Joystick",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (4) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "Controller_Joystick::get_analog_down": {
      "name": "get_analog_down",
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 293,
        "column": 0
      },
      "signature": "bool Controller_Joystick::get_analog_down() const {",
      "class_name": "Controller_Joystick",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (4) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "Controller_Joystick::get_dpad_left": {
      "name": "get_dpad_left",
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 304,
        "column": 0
      },
      "signature": "bool Controller_Joystick::get_dpad_left() const {",
      "class_name": "Controller_Joystick",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (4) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "Controller_Joystick::get_dpad_right": {
      "name": "get_dpad_right",
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 313,
        "column": 0
      },
      "signature": "bool Controller_Joystick::get_dpad_right() const {",
      "class_name": "Controller_Joystick",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (4) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "Controller_Joystick::get_dpad_up": {
      "name": "get_dpad_up",
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 322,
        "column": 0
      },
      "signature": "bool Controller_Joystick::get_dpad_up() const {",
      "class_name": "Controller_Joystick",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (4) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "Controller_Joystick::get_dpad_down": {
      "name": "get_dpad_down",
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 331,
        "column": 0
      },
      "signature": "bool Controller_Joystick::get_dpad_down() const {",
      "class_name": "Controller_Joystick",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (4) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "Controller_Joystick::get_button_bomb": {
      "name": "get_button_bomb",
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 342,
        "column": 0
      },
      "signature": "bool Controller_Joystick::get_button_bomb() const {",
      "class_name": "Controller_Joystick",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (4) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "Controller_Joystick::initialize_haptic": {
      "name": "initialize_haptic",
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 366,
        "column": 0
      },
      "signature": "void Controller_Joystick::initialize_haptic() {",
      "class_name": "Controller_Joystick",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.5,
      "evidence": [
        "Called within same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "Controller_Joystick::cleanup_haptic": {
      "name": "cleanup_haptic",
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 390,
        "column": 0
      },
      "signature": "void Controller_Joystick::cleanup_haptic() {",
      "class_name": "Controller_Joystick",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.5,
      "evidence": [
        "Called within same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "Controller_Joystick::apply_vibration": {
      "name": "apply_vibration",
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 399,
        "column": 0
      },
      "signature": "void Controller_Joystick::apply_vibration(float intensity) {",
      "class_name": "Controller_Joystick",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.5,
      "evidence": [
        "Called within same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "Controller_Joystick::update_haptic": {
      "name": "update_haptic",
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 571,
        "column": 0
      },
      "signature": "void Controller_Joystick::update_haptic(float deltaTime) {",
      "class_name": "Controller_Joystick",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 1 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "Controller_Joystick::stop_vibration": {
      "name": "stop_vibration",
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 593,
        "column": 0
      },
      "signature": "void Controller_Joystick::stop_vibration() {",
      "class_name": "Controller_Joystick",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 1 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "LifecycleManager::register_object": {
      "name": "register_object",
      "location": {
        "file": "src/LifecycleManager.cpp",
        "line": 19,
        "column": 0
      },
      "signature": "void LifecycleManager::register_object(GameObject* obj) {",
      "class_name": "LifecycleManager",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (18) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "LifecycleManager::register_tile": {
      "name": "register_tile",
      "location": {
        "file": "src/LifecycleManager.cpp",
        "line": 32,
        "column": 0
      },
      "signature": "void LifecycleManager::register_tile(MapTile* tile, int map_x, int map_y) {",
      "class_name": "LifecycleManager",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 2 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "LifecycleManager::register_tile_entity": {
      "name": "register_tile_entity",
      "location": {
        "file": "src/LifecycleManager.cpp",
        "line": 45,
        "column": 0
      },
      "signature": "void LifecycleManager::register_tile_entity(TileEntity* tile_entity) {",
      "class_name": "LifecycleManager",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 1 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "LifecycleManager::mark_for_destruction": {
      "name": "mark_for_destruction",
      "location": {
        "file": "src/LifecycleManager.cpp",
        "line": 53,
        "column": 0
      },
      "signature": "void LifecycleManager::mark_for_destruction(GameObject* obj) {",
      "class_name": "LifecycleManager",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (5) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "LifecycleManager::mark_tile_for_destruction": {
      "name": "mark_tile_for_destruction",
      "location": {
        "file": "src/LifecycleManager.cpp",
        "line": 73,
        "column": 0
      },
      "signature": "void LifecycleManager::mark_tile_for_destruction(MapTile* tile, MapTile* replacement) {",
      "class_name": "LifecycleManager",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 1 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "LifecycleManager::mark_tile_entity_for_destruction": {
      "name": "mark_tile_entity_for_destruction",
      "location": {
        "file": "src/LifecycleManager.cpp",
        "line": 91,
        "column": 0
      },
      "signature": "void LifecycleManager::mark_tile_entity_for_destruction(TileEntity* tile_entity) {",
      "class_name": "LifecycleManager",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 2 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "LifecycleManager::update_states": {
      "name": "update_states",
      "location": {
        "file": "src/LifecycleManager.cpp",
        "line": 99,
        "column": 0
      },
      "signature": "void LifecycleManager::update_states(float deltaTime) {",
      "class_name": "LifecycleManager",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 2 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "LifecycleManager::update_object_state": {
      "name": "update_object_state",
      "location": {
        "file": "src/LifecycleManager.cpp",
        "line": 115,
        "column": 0
      },
      "signature": "void LifecycleManager::update_object_state(ManagedObject& managed, float deltaTime) {",
      "class_name": "LifecycleManager",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.5,
      "evidence": [
        "Called within same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "LifecycleManager::update_tile_state": {
      "name": "update_tile_state",
      "location": {
        "file": "src/LifecycleManager.cpp",
        "line": 150,
        "column": 0
      },
      "signature": "void LifecycleManager::update_tile_state(ManagedTile& managed, float deltaTime) {",
      "class_name": "LifecycleManager",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.5,
      "evidence": [
        "Called within same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "LifecycleManager::cleanup_dead_objects": {
      "name": "cleanup_dead_objects",
      "location": {
        "file": "src/LifecycleManager.cpp",
        "line": 195,
        "column": 0
      },
      "signature": "void LifecycleManager::cleanup_dead_objects() {",
      "class_name": "LifecycleManager",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 3 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "LifecycleManager::get_object_state": {
      "name": "get_object_state",
      "location": {
        "file": "src/LifecycleManager.cpp",
        "line": 243,
        "column": 0
      },
      "signature": "LifecycleManager::ObjectState LifecycleManager::get_object_state(GameObject* obj) const {",
      "class_name": "LifecycleManager",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (8) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "LifecycleManager::get_tile_state": {
      "name": "get_tile_state",
      "location": {
        "file": "src/LifecycleManager.cpp",
        "line": 248,
        "column": 0
      },
      "signature": "LifecycleManager::ObjectState LifecycleManager::get_tile_state(MapTile* tile) const {",
      "class_name": "LifecycleManager",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (7) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "LifecycleManager::get_tile_entity_state": {
      "name": "get_tile_entity_state",
      "location": {
        "file": "src/LifecycleManager.cpp",
        "line": 253,
        "column": 0
      },
      "signature": "LifecycleManager::ObjectState LifecycleManager::get_tile_entity_state(TileEntity* tile_entity) const {",
      "class_name": "LifecycleManager",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (3) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "LifecycleManager::is_dying_or_dead": {
      "name": "is_dying_or_dead",
      "location": {
        "file": "src/LifecycleManager.cpp",
        "line": 268,
        "column": 0
      },
      "signature": "bool LifecycleManager::is_dying_or_dead(TileEntity* tile_entity) const {",
      "class_name": "LifecycleManager",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (10) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "LifecycleManager::clear_all": {
      "name": "clear_all",
      "location": {
        "file": "src/LifecycleManager.cpp",
        "line": 273,
        "column": 0
      },
      "signature": "void LifecycleManager::clear_all() {",
      "class_name": "LifecycleManager",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (3) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "LifecycleManager::get_active_object_count": {
      "name": "get_active_object_count",
      "location": {
        "file": "src/LifecycleManager.cpp",
        "line": 295,
        "column": 0
      },
      "signature": "size_t LifecycleManager::get_active_object_count() const {",
      "class_name": "LifecycleManager",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (3) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "LifecycleManager::get_active_tile_count": {
      "name": "get_active_tile_count",
      "location": {
        "file": "src/LifecycleManager.cpp",
        "line": 302,
        "column": 0
      },
      "signature": "size_t LifecycleManager::get_active_tile_count() const {",
      "class_name": "LifecycleManager",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (3) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "LifecycleManager::find_managed_object": {
      "name": "find_managed_object",
      "location": {
        "file": "src/LifecycleManager.cpp",
        "line": 326,
        "column": 0
      },
      "signature": "const LifecycleManager::ManagedObject* LifecycleManager::find_managed_object(GameObject* obj) const {",
      "class_name": "LifecycleManager",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (6) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "LifecycleManager::find_managed_tile": {
      "name": "find_managed_tile",
      "location": {
        "file": "src/LifecycleManager.cpp",
        "line": 334,
        "column": 0
      },
      "signature": "const LifecycleManager::ManagedTile* LifecycleManager::find_managed_tile(MapTile* tile) const {",
      "class_name": "LifecycleManager",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (6) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "Bomb::act": {
      "name": "act",
      "location": {
        "file": "src/Bomb.cpp",
        "line": 39,
        "column": 0
      },
      "signature": "void Bomb::act(float deltaTime) {",
      "class_name": "Bomb",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 20 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "Bomb::explode": {
      "name": "explode",
      "location": {
        "file": "src/Bomb.cpp",
        "line": 61,
        "column": 0
      },
      "signature": "void Bomb::explode() {",
      "class_name": "Bomb",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (5) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "Bomb::explode_delayed": {
      "name": "explode_delayed",
      "location": {
        "file": "src/Bomb.cpp",
        "line": 81,
        "column": 0
      },
      "signature": "void Bomb::explode_delayed() {",
      "class_name": "Bomb",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 2 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "Bomb::kick": {
      "name": "kick",
      "location": {
        "file": "src/Bomb.cpp",
        "line": 88,
        "column": 0
      },
      "signature": "void Bomb::kick(Direction dir) {",
      "class_name": "Bomb",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 1 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "Bomb::stop": {
      "name": "stop",
      "location": {
        "file": "src/Bomb.cpp",
        "line": 98,
        "column": 0
      },
      "signature": "void Bomb::stop() {",
      "class_name": "Bomb",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (6) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "RenderingFacade::initialize": {
      "name": "initialize",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 23,
        "column": 0
      },
      "signature": "GameResult<void> RenderingFacade::initialize(SDL_Window* window, int width, int height) {",
      "class_name": "RenderingFacade",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (12) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "RenderingFacade::shutdown": {
      "name": "shutdown",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 56,
        "column": 0
      },
      "signature": "void RenderingFacade::shutdown() {",
      "class_name": "RenderingFacade",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (10) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "RenderingFacade::begin_frame": {
      "name": "begin_frame",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 72,
        "column": 0
      },
      "signature": "GameResult<void> RenderingFacade::begin_frame() {",
      "class_name": "RenderingFacade",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (4) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "RenderingFacade::end_frame": {
      "name": "end_frame",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 103,
        "column": 0
      },
      "signature": "GameResult<void> RenderingFacade::end_frame() {",
      "class_name": "RenderingFacade",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (4) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "RenderingFacade::clear_screen": {
      "name": "clear_screen",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 126,
        "column": 0
      },
      "signature": "void RenderingFacade::clear_screen(uint8_t r, uint8_t g, uint8_t b, uint8_t a) {",
      "class_name": "RenderingFacade",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.5,
      "evidence": [
        "Called within same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "RenderingFacade::screen_to_world": {
      "name": "screen_to_world",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 335,
        "column": 0
      },
      "signature": "PixelCoord RenderingFacade::screen_to_world(const PixelCoord& screen_coord) const {",
      "class_name": "RenderingFacade",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (3) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "RenderingFacade::world_to_screen": {
      "name": "world_to_screen",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 341,
        "column": 0
      },
      "signature": "PixelCoord RenderingFacade::world_to_screen(const PixelCoord& world_coord) const {",
      "class_name": "RenderingFacade",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (3) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "RenderingFacade::is_position_visible": {
      "name": "is_position_visible",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 346,
        "column": 0
      },
      "signature": "bool RenderingFacade::is_position_visible(const PixelCoord& position) const {",
      "class_name": "RenderingFacade",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (3) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "RenderingFacade::get_viewport_bounds": {
      "name": "get_viewport_bounds",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 351,
        "column": 0
      },
      "signature": "RenderingFacade::ViewportBounds RenderingFacade::get_viewport_bounds() const {",
      "class_name": "RenderingFacade",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (3) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "RenderingFacade::update_config": {
      "name": "update_config",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 357,
        "column": 0
      },
      "signature": "void RenderingFacade::update_config(const RenderingConfig& new_config) {",
      "class_name": "RenderingFacade",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 1 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "RenderingFacade::set_debug_mode": {
      "name": "set_debug_mode",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 367,
        "column": 0
      },
      "signature": "void RenderingFacade::set_debug_mode(bool enabled) {",
      "class_name": "RenderingFacade",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 1 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "RenderingFacade::reset_statistics": {
      "name": "reset_statistics",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 374,
        "column": 0
      },
      "signature": "void RenderingFacade::reset_statistics() {",
      "class_name": "RenderingFacade",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.5,
      "evidence": [
        "Called within same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "RenderingFacade::render_debug_info": {
      "name": "render_debug_info",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 378,
        "column": 0
      },
      "signature": "void RenderingFacade::render_debug_info() {",
      "class_name": "RenderingFacade",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.5,
      "evidence": [
        "Called within same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "RenderingFacade::preload_texture": {
      "name": "preload_texture",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 392,
        "column": 0
      },
      "signature": "GameResult<void> RenderingFacade::preload_texture(const std::string& texture_name) {",
      "class_name": "RenderingFacade",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 1 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "RenderingFacade::unload_texture": {
      "name": "unload_texture",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 410,
        "column": 0
      },
      "signature": "void RenderingFacade::unload_texture(const std::string& texture_name) {",
      "class_name": "RenderingFacade",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 1 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "RenderingFacade::get_texture_info": {
      "name": "get_texture_info",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 418,
        "column": 0
      },
      "signature": "RenderingFacade::TextureInfo RenderingFacade::get_texture_info(const std::string& texture_name) const {",
      "class_name": "RenderingFacade",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (3) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "RenderingFacade::initialize_gpu_renderer": {
      "name": "initialize_gpu_renderer",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 438,
        "column": 0
      },
      "signature": "GameResult<void> RenderingFacade::initialize_gpu_renderer(SDL_Window* window) {",
      "class_name": "RenderingFacade",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.5,
      "evidence": [
        "Called within same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "RenderingFacade::initialize_text_renderer": {
      "name": "initialize_text_renderer",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 465,
        "column": 0
      },
      "signature": "GameResult<void> RenderingFacade::initialize_text_renderer() {",
      "class_name": "RenderingFacade",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.5,
      "evidence": [
        "Called within same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "RenderingFacade::initialize_particle_manager": {
      "name": "initialize_particle_manager",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 507,
        "column": 0
      },
      "signature": "GameResult<void> RenderingFacade::initialize_particle_manager() {",
      "class_name": "RenderingFacade",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.5,
      "evidence": [
        "Called within same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "RenderingFacade::update_statistics": {
      "name": "update_statistics",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 528,
        "column": 0
      },
      "signature": "void RenderingFacade::update_statistics() {",
      "class_name": "RenderingFacade",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.5,
      "evidence": [
        "Called within same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "RenderingFacade::validate_rendering_state": {
      "name": "validate_rendering_state",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 539,
        "column": 0
      },
      "signature": "void RenderingFacade::validate_rendering_state() const {",
      "class_name": "RenderingFacade",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (4) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "RenderingFacade::handle_gpu_error": {
      "name": "handle_gpu_error",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 551,
        "column": 0
      },
      "signature": "GameResult<void> RenderingFacade::handle_gpu_error(const std::string& operation) const {",
      "class_name": "RenderingFacade",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (4) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "RenderingFacade::handle_text_error": {
      "name": "handle_text_error",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 557,
        "column": 0
      },
      "signature": "GameResult<void> RenderingFacade::handle_text_error(const std::string& operation) const {",
      "class_name": "RenderingFacade",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (4) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "RenderingFacade::handle_particle_error": {
      "name": "handle_particle_error",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 562,
        "column": 0
      },
      "signature": "GameResult<void> RenderingFacade::handle_particle_error(const std::string& operation) const {",
      "class_name": "RenderingFacade",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (4) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "Bomber::act": {
      "name": "act",
      "location": {
        "file": "src/Bomber.cpp",
        "line": 40,
        "column": 0
      },
      "signature": "void Bomber::act(float deltaTime) {",
      "class_name": "Bomber",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 20 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "Bomber::show": {
      "name": "show",
      "location": {
        "file": "src/Bomber.cpp",
        "line": 69,
        "column": 0
      },
      "signature": "void Bomber::show() {",
      "class_name": "Bomber",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (37) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "Bomber::die": {
      "name": "die",
      "location": {
        "file": "src/Bomber.cpp",
        "line": 87,
        "column": 0
      },
      "signature": "void Bomber::die() {",
      "class_name": "Bomber",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (5) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "Bomber::is_dead": {
      "name": "is_dead",
      "location": {
        "file": "src/Bomber.cpp",
        "line": 91,
        "column": 0
      },
      "signature": "bool Bomber::is_dead() const {",
      "class_name": "Bomber",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (7) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "Bomber::set_lives": {
      "name": "set_lives",
      "location": {
        "file": "src/Bomber.cpp",
        "line": 96,
        "column": 0
      },
      "signature": "void Bomber::set_lives(int lives) {",
      "class_name": "Bomber",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (3) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "Bomber::get_lives": {
      "name": "get_lives",
      "location": {
        "file": "src/Bomber.cpp",
        "line": 100,
        "column": 0
      },
      "signature": "int Bomber::get_lives() const {",
      "class_name": "Bomber",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (5) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "Bomber::lose_life": {
      "name": "lose_life",
      "location": {
        "file": "src/Bomber.cpp",
        "line": 104,
        "column": 0
      },
      "signature": "void Bomber::lose_life() {",
      "class_name": "Bomber",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.5,
      "evidence": [
        "Called within same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "Bomber::has_lives": {
      "name": "has_lives",
      "location": {
        "file": "src/Bomber.cpp",
        "line": 108,
        "column": 0
      },
      "signature": "bool Bomber::has_lives() const {",
      "class_name": "Bomber",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (6) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "Bomber::respawn": {
      "name": "respawn",
      "location": {
        "file": "src/Bomber.cpp",
        "line": 113,
        "column": 0
      },
      "signature": "void Bomber::respawn() {",
      "class_name": "Bomber",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (3) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "Bomber::is_respawning": {
      "name": "is_respawning",
      "location": {
        "file": "src/Bomber.cpp",
        "line": 117,
        "column": 0
      },
      "signature": "bool Bomber::is_respawning() const {",
      "class_name": "Bomber",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (5) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "Bomber::set_invincible": {
      "name": "set_invincible",
      "location": {
        "file": "src/Bomber.cpp",
        "line": 121,
        "column": 0
      },
      "signature": "void Bomber::set_invincible(bool inv) {",
      "class_name": "Bomber",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.5,
      "evidence": [
        "Called within same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "Bomber::is_invincible": {
      "name": "is_invincible",
      "location": {
        "file": "src/Bomber.cpp",
        "line": 125,
        "column": 0
      },
      "signature": "bool Bomber::is_invincible() const {",
      "class_name": "Bomber",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (5) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "Bomber::set_team": {
      "name": "set_team",
      "location": {
        "file": "src/Bomber.cpp",
        "line": 130,
        "column": 0
      },
      "signature": "void Bomber::set_team(int team) {",
      "class_name": "Bomber",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (7) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "Bomber::get_team": {
      "name": "get_team",
      "location": {
        "file": "src/Bomber.cpp",
        "line": 134,
        "column": 0
      },
      "signature": "int Bomber::get_team() const {",
      "class_name": "Bomber",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (13) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "Bomber::set_name": {
      "name": "set_name",
      "location": {
        "file": "src/Bomber.cpp",
        "line": 139,
        "column": 0
      },
      "signature": "void Bomber::set_name(const std::string& name) {",
      "class_name": "Bomber",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (14) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "Bomber::get_name": {
      "name": "get_name",
      "location": {
        "file": "src/Bomber.cpp",
        "line": 143,
        "column": 0
      },
      "signature": "std::string Bomber::get_name() const {",
      "class_name": "Bomber",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (14) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "Bomber::set_number": {
      "name": "set_number",
      "location": {
        "file": "src/Bomber.cpp",
        "line": 148,
        "column": 0
      },
      "signature": "void Bomber::set_number(int number) {",
      "class_name": "Bomber",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (3) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "Bomber::get_number": {
      "name": "get_number",
      "location": {
        "file": "src/Bomber.cpp",
        "line": 152,
        "column": 0
      },
      "signature": "int Bomber::get_number() const {",
      "class_name": "Bomber",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (5) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "Bomber::fly_to": {
      "name": "fly_to",
      "location": {
        "file": "src/Bomber.cpp",
        "line": 157,
        "column": 0
      },
      "signature": "void Bomber::fly_to(int target_x, int target_y, float duration_ms) {",
      "class_name": "Bomber",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (9) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "Bomber::can_move": {
      "name": "can_move",
      "location": {
        "file": "src/Bomber.cpp",
        "line": 167,
        "column": 0
      },
      "signature": "bool Bomber::can_move() const {",
      "class_name": "Bomber",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (8) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "Bomber::place_bomb": {
      "name": "place_bomb",
      "location": {
        "file": "src/Bomber.cpp",
        "line": 172,
        "column": 0
      },
      "signature": "void Bomber::place_bomb() {",
      "class_name": "Bomber",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (4) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "Bomber::throw_bomb": {
      "name": "throw_bomb",
      "location": {
        "file": "src/Bomber.cpp",
        "line": 176,
        "column": 0
      },
      "signature": "void Bomber::throw_bomb() {",
      "class_name": "Bomber",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (4) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "Bomber::can_place_bomb": {
      "name": "can_place_bomb",
      "location": {
        "file": "src/Bomber.cpp",
        "line": 180,
        "column": 0
      },
      "signature": "bool Bomber::can_place_bomb() const {",
      "class_name": "Bomber",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (8) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "Bomber::inc_speed": {
      "name": "inc_speed",
      "location": {
        "file": "src/Bomber.cpp",
        "line": 185,
        "column": 0
      },
      "signature": "void Bomber::inc_speed(int amount) {",
      "class_name": "Bomber",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 4 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "Bomber::dec_speed": {
      "name": "dec_speed",
      "location": {
        "file": "src/Bomber.cpp",
        "line": 192,
        "column": 0
      },
      "signature": "void Bomber::dec_speed(int amount) {",
      "class_name": "Bomber",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 4 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "Bomber::get_power": {
      "name": "get_power",
      "location": {
        "file": "src/Bomber.cpp",
        "line": 199,
        "column": 0
      },
      "signature": "int Bomber::get_power() const {",
      "class_name": "Bomber",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (9) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "Bomber::inc_power": {
      "name": "inc_power",
      "location": {
        "file": "src/Bomber.cpp",
        "line": 203,
        "column": 0
      },
      "signature": "void Bomber::inc_power(int amount) {",
      "class_name": "Bomber",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (3) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "Bomber::get_max_bombs": {
      "name": "get_max_bombs",
      "location": {
        "file": "src/Bomber.cpp",
        "line": 208,
        "column": 0
      },
      "signature": "int Bomber::get_max_bombs() const {",
      "class_name": "Bomber",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (11) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "Bomber::inc_max_bombs": {
      "name": "inc_max_bombs",
      "location": {
        "file": "src/Bomber.cpp",
        "line": 212,
        "column": 0
      },
      "signature": "void Bomber::inc_max_bombs(int amount) {",
      "class_name": "Bomber",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (3) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "Bomber::get_current_bombs": {
      "name": "get_current_bombs",
      "location": {
        "file": "src/Bomber.cpp",
        "line": 216,
        "column": 0
      },
      "signature": "int Bomber::get_current_bombs() const {",
      "class_name": "Bomber",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (6) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "Bomber::inc_current_bombs": {
      "name": "inc_current_bombs",
      "location": {
        "file": "src/Bomber.cpp",
        "line": 220,
        "column": 0
      },
      "signature": "void Bomber::inc_current_bombs() {",
      "class_name": "Bomber",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (4) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "Bomber::dec_current_bombs": {
      "name": "dec_current_bombs",
      "location": {
        "file": "src/Bomber.cpp",
        "line": 224,
        "column": 0
      },
      "signature": "void Bomber::dec_current_bombs() {",
      "class_name": "Bomber",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (3) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "Bomber::can_kick": {
      "name": "can_kick",
      "location": {
        "file": "src/Bomber.cpp",
        "line": 229,
        "column": 0
      },
      "signature": "bool Bomber::can_kick() const {",
      "class_name": "Bomber",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (3) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "Bomber::can_throw": {
      "name": "can_throw",
      "location": {
        "file": "src/Bomber.cpp",
        "line": 233,
        "column": 0
      },
      "signature": "bool Bomber::can_throw() const {",
      "class_name": "Bomber",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (3) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "Bomber::can_ignore_bomb_collision": {
      "name": "can_ignore_bomb_collision",
      "location": {
        "file": "src/Bomber.cpp",
        "line": 237,
        "column": 0
      },
      "signature": "bool Bomber::can_ignore_bomb_collision(Bomb* bomb) const {",
      "class_name": "Bomber",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (6) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "Bomber::set_can_kick": {
      "name": "set_can_kick",
      "location": {
        "file": "src/Bomber.cpp",
        "line": 241,
        "column": 0
      },
      "signature": "void Bomber::set_can_kick(bool kick) {",
      "class_name": "Bomber",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 2 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "Bomber::set_can_throw": {
      "name": "set_can_throw",
      "location": {
        "file": "src/Bomber.cpp",
        "line": 245,
        "column": 0
      },
      "signature": "void Bomber::set_can_throw(bool throw_ability) {",
      "class_name": "Bomber",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 2 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "GameplayScreen::get_next_state": {
      "name": "get_next_state",
      "location": {
        "file": "src/GameplayScreen.cpp",
        "line": 45,
        "column": 0
      },
      "signature": "GameState GameplayScreen::get_next_state() {",
      "class_name": "GameplayScreen",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 6 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "GameplayScreen::init_game": {
      "name": "init_game",
      "location": {
        "file": "src/GameplayScreen.cpp",
        "line": 49,
        "column": 0
      },
      "signature": "void GameplayScreen::init_game() {",
      "class_name": "GameplayScreen",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (3) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "GameplayScreen::deinit_game": {
      "name": "deinit_game",
      "location": {
        "file": "src/GameplayScreen.cpp",
        "line": 189,
        "column": 0
      },
      "signature": "void GameplayScreen::deinit_game() {",
      "class_name": "GameplayScreen",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (4) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "GameplayScreen::handle_events": {
      "name": "handle_events",
      "location": {
        "file": "src/GameplayScreen.cpp",
        "line": 213,
        "column": 0
      },
      "signature": "void GameplayScreen::handle_events(SDL_Event& event) {",
      "class_name": "GameplayScreen",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 6 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "GameplayScreen::update": {
      "name": "update",
      "location": {
        "file": "src/GameplayScreen.cpp",
        "line": 226,
        "column": 0
      },
      "signature": "void GameplayScreen::update(float deltaTime) {",
      "class_name": "GameplayScreen",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 15 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "GameplayScreen::update_audio_listener": {
      "name": "update_audio_listener",
      "location": {
        "file": "src/GameplayScreen.cpp",
        "line": 332,
        "column": 0
      },
      "signature": "void GameplayScreen::update_audio_listener() {",
      "class_name": "GameplayScreen",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.5,
      "evidence": [
        "Called within same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "GameplayScreen::render": {
      "name": "render",
      "location": {
        "file": "src/GameplayScreen.cpp",
        "line": 353,
        "column": 0
      },
      "signature": "void GameplayScreen::render(SDL_Renderer* renderer) {",
      "class_name": "GameplayScreen",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 7 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "GameplayScreen::act_all": {
      "name": "act_all",
      "location": {
        "file": "src/GameplayScreen.cpp",
        "line": 381,
        "column": 0
      },
      "signature": "void GameplayScreen::act_all() {",
      "class_name": "GameplayScreen",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (4) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "GameplayScreen::delete_some": {
      "name": "delete_some",
      "location": {
        "file": "src/GameplayScreen.cpp",
        "line": 412,
        "column": 0
      },
      "signature": "void GameplayScreen::delete_some() {",
      "class_name": "GameplayScreen",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (3) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "GameplayScreen::show_all": {
      "name": "show_all",
      "location": {
        "file": "src/GameplayScreen.cpp",
        "line": 446,
        "column": 0
      },
      "signature": "void GameplayScreen::show_all() {",
      "class_name": "GameplayScreen",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (3) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "GameplayScreen::check_victory_conditions": {
      "name": "check_victory_conditions",
      "location": {
        "file": "src/GameplayScreen.cpp",
        "line": 483,
        "column": 0
      },
      "signature": "void GameplayScreen::check_victory_conditions() {",
      "class_name": "GameplayScreen",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (3) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "GameplayScreen::render_victory_screen": {
      "name": "render_victory_screen",
      "location": {
        "file": "src/GameplayScreen.cpp",
        "line": 540,
        "column": 0
      },
      "signature": "void GameplayScreen::render_victory_screen() {",
      "class_name": "GameplayScreen",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (3) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "ThrownBomb::calculate_flight_path": {
      "name": "calculate_flight_path",
      "location": {
        "file": "src/ThrownBomb.cpp",
        "line": 28,
        "column": 0
      },
      "signature": "void ThrownBomb::calculate_flight_path() {",
      "class_name": "ThrownBomb",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.5,
      "evidence": [
        "Called within same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "ThrownBomb::act": {
      "name": "act",
      "location": {
        "file": "src/ThrownBomb.cpp",
        "line": 38,
        "column": 0
      },
      "signature": "void ThrownBomb::act(float deltaTime) {",
      "class_name": "ThrownBomb",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (24) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "ThrownBomb::show": {
      "name": "show",
      "location": {
        "file": "src/ThrownBomb.cpp",
        "line": 81,
        "column": 0
      },
      "signature": "void ThrownBomb::show() {",
      "class_name": "ThrownBomb",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (37) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "MapTile::create": {
      "name": "create",
      "location": {
        "file": "src/MapTile.cpp",
        "line": 23,
        "column": 0
      },
      "signature": "MapTile* MapTile::create(MAPTILE_TYPE type, int x, int y, GameContext* context) {",
      "class_name": "MapTile",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 7 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "MapTile::act": {
      "name": "act",
      "location": {
        "file": "src/MapTile.cpp",
        "line": 49,
        "column": 0
      },
      "signature": "void MapTile::act() {",
      "class_name": "MapTile",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 20 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "MapTile::show": {
      "name": "show",
      "location": {
        "file": "src/MapTile.cpp",
        "line": 53,
        "column": 0
      },
      "signature": "void MapTile::show() {",
      "class_name": "MapTile",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (38) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "MapTile::destroy": {
      "name": "destroy",
      "location": {
        "file": "src/MapTile.cpp",
        "line": 57,
        "column": 0
      },
      "signature": "void MapTile::destroy() {",
      "class_name": "MapTile",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 6 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "MapTile::spawn_extra": {
      "name": "spawn_extra",
      "location": {
        "file": "src/MapTile.cpp",
        "line": 61,
        "column": 0
      },
      "signature": "void MapTile::spawn_extra() {",
      "class_name": "MapTile",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 4 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "GameContext::is_position_blocked": {
      "name": "is_position_blocked",
      "location": {
        "file": "src/GameContext.cpp",
        "line": 64,
        "column": 0
      },
      "signature": "bool GameContext::is_position_blocked(int map_x, int map_y) const {",
      "class_name": "GameContext",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (7) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "GameContext::has_bomb_at": {
      "name": "has_bomb_at",
      "location": {
        "file": "src/GameContext.cpp",
        "line": 68,
        "column": 0
      },
      "signature": "bool GameContext::has_bomb_at(int map_x, int map_y) const {",
      "class_name": "GameContext",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (8) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "GameContext::is_position_walkable": {
      "name": "is_position_walkable",
      "location": {
        "file": "src/GameContext.cpp",
        "line": 72,
        "column": 0
      },
      "signature": "bool GameContext::is_position_walkable(int map_x, int map_y) const {",
      "class_name": "GameContext",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (6) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "GameContext::request_destruction_effect": {
      "name": "request_destruction_effect",
      "location": {
        "file": "src/GameContext.cpp",
        "line": 76,
        "column": 0
      },
      "signature": "void GameContext::request_destruction_effect(float x, float y, float intensity) const {",
      "class_name": "GameContext",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (3) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "GameContext::mark_for_destruction": {
      "name": "mark_for_destruction",
      "location": {
        "file": "src/GameContext.cpp",
        "line": 82,
        "column": 0
      },
      "signature": "void GameContext::mark_for_destruction(GameObject* obj) const {",
      "class_name": "GameContext",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (6) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "GameContext::remove_from_spatial_systems": {
      "name": "remove_from_spatial_systems",
      "location": {
        "file": "src/GameContext.cpp",
        "line": 91,
        "column": 0
      },
      "signature": "void GameContext::remove_from_spatial_systems(GameObject* obj) const {",
      "class_name": "GameContext",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (5) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "GameContext::register_object": {
      "name": "register_object",
      "location": {
        "file": "src/GameContext.cpp",
        "line": 99,
        "column": 0
      },
      "signature": "void GameContext::register_object(GameObject* obj) const {",
      "class_name": "GameContext",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (19) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "GameContext::set_object_lists": {
      "name": "set_object_lists",
      "location": {
        "file": "src/GameContext.cpp",
        "line": 120,
        "column": 0
      },
      "signature": "void GameContext::set_object_lists(std::list<GameObject*>* objects) {",
      "class_name": "GameContext",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 2 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "GameContext::set_map": {
      "name": "set_map",
      "location": {
        "file": "src/GameContext.cpp",
        "line": 125,
        "column": 0
      },
      "signature": "void GameContext::set_map(Map* new_map) {",
      "class_name": "GameContext",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 3 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "GameContext::update_object_position_in_spatial_grid": {
      "name": "update_object_position_in_spatial_grid",
      "location": {
        "file": "src/GameContext.cpp",
        "line": 130,
        "column": 0
      },
      "signature": "void GameContext::update_object_position_in_spatial_grid(GameObject* obj, float old_x, float old_y) const {",
      "class_name": "GameContext",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (5) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "Map::enumerate_maps": {
      "name": "enumerate_maps",
      "location": {
        "file": "src/Map.cpp",
        "line": 42,
        "column": 0
      },
      "signature": "void Map::enumerate_maps() {",
      "class_name": "Map",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.5,
      "evidence": [
        "Called within same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "Map::load": {
      "name": "load",
      "location": {
        "file": "src/Map.cpp",
        "line": 70,
        "column": 0
      },
      "signature": "void Map::load() {",
      "class_name": "Map",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 5 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "Map::clear": {
      "name": "clear",
      "location": {
        "file": "src/Map.cpp",
        "line": 79,
        "column": 0
      },
      "signature": "void Map::clear() {",
      "class_name": "Map",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (35) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "Map::reload": {
      "name": "reload",
      "location": {
        "file": "src/Map.cpp",
        "line": 97,
        "column": 0
      },
      "signature": "void Map::reload() {",
      "class_name": "Map",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (5) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "Map::show": {
      "name": "show",
      "location": {
        "file": "src/Map.cpp",
        "line": 160,
        "column": 0
      },
      "signature": "void Map::show() {",
      "class_name": "Map",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (37) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "Map::get_tile": {
      "name": "get_tile",
      "location": {
        "file": "src/Map.cpp",
        "line": 177,
        "column": 0
      },
      "signature": "MapTile* Map::get_tile(int tx, int ty) {",
      "class_name": "Map",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 5 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "Map::get_tile_entity": {
      "name": "get_tile_entity",
      "location": {
        "file": "src/Map.cpp",
        "line": 184,
        "column": 0
      },
      "signature": "TileEntity* Map::get_tile_entity(int tx, int ty) {",
      "class_name": "Map",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 5 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "Map::set_tile": {
      "name": "set_tile",
      "location": {
        "file": "src/Map.cpp",
        "line": 191,
        "column": 0
      },
      "signature": "void Map::set_tile(int tx, int ty, MapTile* tile) {",
      "class_name": "Map",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (4) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "Map::set_tile_entity": {
      "name": "set_tile_entity",
      "location": {
        "file": "src/Map.cpp",
        "line": 201,
        "column": 0
      },
      "signature": "void Map::set_tile_entity(int tx, int ty, TileEntity* tile_entity) {",
      "class_name": "Map",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (3) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "Map::clear_tile_entity_at": {
      "name": "clear_tile_entity_at",
      "location": {
        "file": "src/Map.cpp",
        "line": 211,
        "column": 0
      },
      "signature": "void Map::clear_tile_entity_at(int tx, int ty) {",
      "class_name": "Map",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (4) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "Map::load_random_valid": {
      "name": "load_random_valid",
      "location": {
        "file": "src/Map.cpp",
        "line": 223,
        "column": 0
      },
      "signature": "void Map::load_random_valid() {",
      "class_name": "Map",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 2 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "Map::load_next_valid": {
      "name": "load_next_valid",
      "location": {
        "file": "src/Map.cpp",
        "line": 231,
        "column": 0
      },
      "signature": "void Map::load_next_valid(int map_nr) {",
      "class_name": "Map",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 2 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "Map::act": {
      "name": "act",
      "location": {
        "file": "src/Map.cpp",
        "line": 244,
        "column": 0
      },
      "signature": "void Map::act() {",
      "class_name": "Map",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 20 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "Map::refresh_holes": {
      "name": "refresh_holes",
      "location": {
        "file": "src/Map.cpp",
        "line": 252,
        "column": 0
      },
      "signature": "void Map::refresh_holes() {",
      "class_name": "Map",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 2 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "Map::any_valid_map": {
      "name": "any_valid_map",
      "location": {
        "file": "src/Map.cpp",
        "line": 256,
        "column": 0
      },
      "signature": "bool Map::any_valid_map() {",
      "class_name": "Map",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 1 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "Map::get_map_count": {
      "name": "get_map_count",
      "location": {
        "file": "src/Map.cpp",
        "line": 260,
        "column": 0
      },
      "signature": "int Map::get_map_count() {",
      "class_name": "Map",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 2 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "Map::get_name": {
      "name": "get_name",
      "location": {
        "file": "src/Map.cpp",
        "line": 264,
        "column": 0
      },
      "signature": "std::string Map::get_name() {",
      "class_name": "Map",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (13) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "Map::get_author": {
      "name": "get_author",
      "location": {
        "file": "src/Map.cpp",
        "line": 271,
        "column": 0
      },
      "signature": "std::string Map::get_author() {",
      "class_name": "Map",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (3) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "Map::get_bomber_pos": {
      "name": "get_bomber_pos",
      "location": {
        "file": "src/Map.cpp",
        "line": 278,
        "column": 0
      },
      "signature": "CL_Vector Map::get_bomber_pos(int nr) {",
      "class_name": "Map",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (4) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "Map::randomize_bomber_positions": {
      "name": "randomize_bomber_positions",
      "location": {
        "file": "src/Map.cpp",
        "line": 296,
        "column": 0
      },
      "signature": "void Map::randomize_bomber_positions() {",
      "class_name": "Map",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 2 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "BomberMovementComponent::update": {
      "name": "update",
      "location": {
        "file": "src/BomberComponents.cpp",
        "line": 25,
        "column": 0
      },
      "signature": "void BomberMovementComponent::update(float deltaTime) {",
      "class_name": "BomberMovementComponent",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 15 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "BomberMovementComponent::handle_controller_input": {
      "name": "handle_controller_input",
      "location": {
        "file": "src/BomberComponents.cpp",
        "line": 31,
        "column": 0
      },
      "signature": "void BomberMovementComponent::handle_controller_input(Controller* controller, float deltaTime) {",
      "class_name": "BomberMovementComponent",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 2 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "BomberMovementComponent::fly_to": {
      "name": "fly_to",
      "location": {
        "file": "src/BomberComponents.cpp",
        "line": 77,
        "column": 0
      },
      "signature": "void BomberMovementComponent::fly_to(int target_x, int target_y, float duration_ms) {",
      "class_name": "BomberMovementComponent",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 5 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "BomberMovementComponent::can_move": {
      "name": "can_move",
      "location": {
        "file": "src/BomberComponents.cpp",
        "line": 90,
        "column": 0
      },
      "signature": "bool BomberMovementComponent::can_move() const {",
      "class_name": "BomberMovementComponent",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (8) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "BomberMovementComponent::update_flight_animation": {
      "name": "update_flight_animation",
      "location": {
        "file": "src/BomberComponents.cpp",
        "line": 103,
        "column": 0
      },
      "signature": "void BomberMovementComponent::update_flight_animation(float deltaTime) {",
      "class_name": "BomberMovementComponent",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.5,
      "evidence": [
        "Called within same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "BomberCombatComponent::update": {
      "name": "update",
      "location": {
        "file": "src/BomberComponents.cpp",
        "line": 134,
        "column": 0
      },
      "signature": "void BomberCombatComponent::update(float deltaTime) {",
      "class_name": "BomberCombatComponent",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 15 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "BomberCombatComponent::handle_controller_input": {
      "name": "handle_controller_input",
      "location": {
        "file": "src/BomberComponents.cpp",
        "line": 140,
        "column": 0
      },
      "signature": "void BomberCombatComponent::handle_controller_input(Controller* controller, float deltaTime) {",
      "class_name": "BomberCombatComponent",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 2 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "BomberCombatComponent::place_bomb": {
      "name": "place_bomb",
      "location": {
        "file": "src/BomberComponents.cpp",
        "line": 171,
        "column": 0
      },
      "signature": "void BomberCombatComponent::place_bomb() {",
      "class_name": "BomberCombatComponent",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (4) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "BomberCombatComponent::throw_bomb": {
      "name": "throw_bomb",
      "location": {
        "file": "src/BomberComponents.cpp",
        "line": 222,
        "column": 0
      },
      "signature": "void BomberCombatComponent::throw_bomb() {",
      "class_name": "BomberCombatComponent",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (4) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "BomberCombatComponent::can_place_bomb": {
      "name": "can_place_bomb",
      "location": {
        "file": "src/BomberComponents.cpp",
        "line": 254,
        "column": 0
      },
      "signature": "bool BomberCombatComponent::can_place_bomb() const {",
      "class_name": "BomberCombatComponent",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (8) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "BomberCombatComponent::die": {
      "name": "die",
      "location": {
        "file": "src/BomberComponents.cpp",
        "line": 258,
        "column": 0
      },
      "signature": "void BomberCombatComponent::die() {",
      "class_name": "BomberCombatComponent",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 4 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "BomberCombatComponent::update_bomb_cooldown": {
      "name": "update_bomb_cooldown",
      "location": {
        "file": "src/BomberComponents.cpp",
        "line": 275,
        "column": 0
      },
      "signature": "void BomberCombatComponent::update_bomb_cooldown(float deltaTime) {",
      "class_name": "BomberCombatComponent",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.5,
      "evidence": [
        "Called within same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "BomberCombatComponent::update_bomb_throwing": {
      "name": "update_bomb_throwing",
      "location": {
        "file": "src/BomberComponents.cpp",
        "line": 284,
        "column": 0
      },
      "signature": "void BomberCombatComponent::update_bomb_throwing(float deltaTime) {",
      "class_name": "BomberCombatComponent",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.5,
      "evidence": [
        "Called within same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "BomberCombatComponent::can_ignore_bomb_collision": {
      "name": "can_ignore_bomb_collision",
      "location": {
        "file": "src/BomberComponents.cpp",
        "line": 291,
        "column": 0
      },
      "signature": "bool BomberCombatComponent::can_ignore_bomb_collision(Bomb* bomb) const {",
      "class_name": "BomberCombatComponent",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (6) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "BomberCombatComponent::update_bomb_escape_status": {
      "name": "update_bomb_escape_status",
      "location": {
        "file": "src/BomberComponents.cpp",
        "line": 299,
        "column": 0
      },
      "signature": "void BomberCombatComponent::update_bomb_escape_status() {",
      "class_name": "BomberCombatComponent",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.5,
      "evidence": [
        "Called within same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "BomberAnimationComponent::update": {
      "name": "update",
      "location": {
        "file": "src/BomberComponents.cpp",
        "line": 334,
        "column": 0
      },
      "signature": "void BomberAnimationComponent::update(float deltaTime) {",
      "class_name": "BomberAnimationComponent",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 15 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "BomberAnimationComponent::set_texture_from_color": {
      "name": "set_texture_from_color",
      "location": {
        "file": "src/BomberComponents.cpp",
        "line": 342,
        "column": 0
      },
      "signature": "void BomberAnimationComponent::set_texture_from_color(int color) {",
      "class_name": "BomberAnimationComponent",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 2 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "BomberAnimationComponent::update_animation_frame": {
      "name": "update_animation_frame",
      "location": {
        "file": "src/BomberComponents.cpp",
        "line": 346,
        "column": 0
      },
      "signature": "void BomberAnimationComponent::update_animation_frame(float deltaTime, Direction direction) {",
      "class_name": "BomberAnimationComponent",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.5,
      "evidence": [
        "Called within same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "BomberAnimationComponent::set_standing_sprite": {
      "name": "set_standing_sprite",
      "location": {
        "file": "src/BomberComponents.cpp",
        "line": 380,
        "column": 0
      },
      "signature": "void BomberAnimationComponent::set_standing_sprite(Direction direction) {",
      "class_name": "BomberAnimationComponent",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.5,
      "evidence": [
        "Called within same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "BomberAnimationComponent::update_invincibility_effects": {
      "name": "update_invincibility_effects",
      "location": {
        "file": "src/BomberComponents.cpp",
        "line": 397,
        "column": 0
      },
      "signature": "void BomberAnimationComponent::update_invincibility_effects(float deltaTime) {",
      "class_name": "BomberAnimationComponent",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.5,
      "evidence": [
        "Called within same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "BomberAnimationComponent::choose_texture_for_color": {
      "name": "choose_texture_for_color",
      "location": {
        "file": "src/BomberComponents.cpp",
        "line": 405,
        "column": 0
      },
      "signature": "void BomberAnimationComponent::choose_texture_for_color(int color) {",
      "class_name": "BomberAnimationComponent",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.5,
      "evidence": [
        "Called within same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "BomberLifecycleComponent::update": {
      "name": "update",
      "location": {
        "file": "src/BomberComponents.cpp",
        "line": 425,
        "column": 0
      },
      "signature": "void BomberLifecycleComponent::update(float deltaTime) {",
      "class_name": "BomberLifecycleComponent",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 15 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "BomberLifecycleComponent::respawn": {
      "name": "respawn",
      "location": {
        "file": "src/BomberComponents.cpp",
        "line": 431,
        "column": 0
      },
      "signature": "void BomberLifecycleComponent::respawn() {",
      "class_name": "BomberLifecycleComponent",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 3 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "BomberLifecycleComponent::update_respawn_timer": {
      "name": "update_respawn_timer",
      "location": {
        "file": "src/BomberComponents.cpp",
        "line": 441,
        "column": 0
      },
      "signature": "void BomberLifecycleComponent::update_respawn_timer(float deltaTime) {",
      "class_name": "BomberLifecycleComponent",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.5,
      "evidence": [
        "Called within same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "SpatialGrid::clear": {
      "name": "clear",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 21,
        "column": 0
      },
      "signature": "void SpatialGrid::clear() {",
      "class_name": "SpatialGrid",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (35) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "SpatialGrid::add_object": {
      "name": "add_object",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 27,
        "column": 0
      },
      "signature": "void SpatialGrid::add_object(GameObject* obj) {",
      "class_name": "SpatialGrid",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (4) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "SpatialGrid::remove_object": {
      "name": "remove_object",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 37,
        "column": 0
      },
      "signature": "void SpatialGrid::remove_object(GameObject* obj) {",
      "class_name": "SpatialGrid",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (3) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "SpatialGrid::update_object_position": {
      "name": "update_object_position",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 47,
        "column": 0
      },
      "signature": "void SpatialGrid::update_object_position(GameObject* obj, const PixelCoord& old_position) {",
      "class_name": "SpatialGrid",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 2 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "SpatialGrid::rebuild_from_objects": {
      "name": "rebuild_from_objects",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 62,
        "column": 0
      },
      "signature": "void SpatialGrid::rebuild_from_objects(const std::list<GameObject*>& objects) {",
      "class_name": "SpatialGrid",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 1 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "SpatialGrid::get_objects_at_position": {
      "name": "get_objects_at_position",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 74,
        "column": 0
      },
      "signature": "std::vector<GameObject*> SpatialGrid::get_objects_at_position(const PixelCoord& position) const {",
      "class_name": "SpatialGrid",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (5) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "SpatialGrid::get_bombers_near": {
      "name": "get_bombers_near",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 108,
        "column": 0
      },
      "signature": "std::vector<GameObject*> SpatialGrid::get_bombers_near(const PixelCoord& position, int radius) const {",
      "class_name": "SpatialGrid",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (5) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "SpatialGrid::get_bombs_near": {
      "name": "get_bombs_near",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 112,
        "column": 0
      },
      "signature": "std::vector<GameObject*> SpatialGrid::get_bombs_near(const PixelCoord& position, int radius) const {",
      "class_name": "SpatialGrid",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (5) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "SpatialGrid::get_extras_near": {
      "name": "get_extras_near",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 116,
        "column": 0
      },
      "signature": "std::vector<GameObject*> SpatialGrid::get_extras_near(const PixelCoord& position, int radius) const {",
      "class_name": "SpatialGrid",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (3) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "SpatialGrid::get_statistics": {
      "name": "get_statistics",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 193,
        "column": 0
      },
      "signature": "SpatialGrid::GridStats SpatialGrid::get_statistics() const {",
      "class_name": "SpatialGrid",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (4) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "SpatialGrid::print_debug_info": {
      "name": "print_debug_info",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 223,
        "column": 0
      },
      "signature": "void SpatialGrid::print_debug_info() const {",
      "class_name": "SpatialGrid",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (3) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "SpatialGrid::visualize_grid": {
      "name": "visualize_grid",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 236,
        "column": 0
      },
      "signature": "std::string SpatialGrid::visualize_grid(int max_width, int max_height) const {",
      "class_name": "SpatialGrid",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (3) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "SpatialGrid::pixel_to_grid_coord": {
      "name": "pixel_to_grid_coord",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 285,
        "column": 0
      },
      "signature": "GridCoord SpatialGrid::pixel_to_grid_coord(const PixelCoord& position) const {",
      "class_name": "SpatialGrid",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (10) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "SpatialGrid::get_cells_in_radius": {
      "name": "get_cells_in_radius",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 291,
        "column": 0
      },
      "signature": "std::vector<GridCoord> SpatialGrid::get_cells_in_radius(const GridCoord& center, int radius) const {",
      "class_name": "SpatialGrid",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (4) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "SpatialGrid::get_or_create_cell": {
      "name": "get_or_create_cell",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 320,
        "column": 0
      },
      "signature": "SpatialCell& SpatialGrid::get_or_create_cell(const GridCoord& coord) {",
      "class_name": "SpatialGrid",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.5,
      "evidence": [
        "Called within same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "SpatialGrid::get_cell": {
      "name": "get_cell",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 324,
        "column": 0
      },
      "signature": "const SpatialCell* SpatialGrid::get_cell(const GridCoord& coord) const {",
      "class_name": "SpatialGrid",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (7) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "SpatialGrid::add_object_to_cell": {
      "name": "add_object_to_cell",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 332,
        "column": 0
      },
      "signature": "void SpatialGrid::add_object_to_cell(GameObject* obj, const GridCoord& coord) {",
      "class_name": "SpatialGrid",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (3) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "SpatialGrid::remove_object_from_cell": {
      "name": "remove_object_from_cell",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 337,
        "column": 0
      },
      "signature": "void SpatialGrid::remove_object_from_cell(GameObject* obj, const GridCoord& coord) {",
      "class_name": "SpatialGrid",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (3) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "CollisionHelper::find_nearest_bomber": {
      "name": "find_nearest_bomber",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 351,
        "column": 0
      },
      "signature": "GameObject* CollisionHelper::find_nearest_bomber(const PixelCoord& extra_position, float max_distance) {",
      "class_name": "CollisionHelper",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 2 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "CollisionHelper::find_explosion_victims": {
      "name": "find_explosion_victims",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 404,
        "column": 0
      },
      "signature": "std::vector<GameObject*> CollisionHelper::find_explosion_victims(const std::vector<GridCoord>& explosion_area) {",
      "class_name": "CollisionHelper",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 2 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "CollisionHelper::scan_ai_targets": {
      "name": "scan_ai_targets",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 488,
        "column": 0
      },
      "signature": "CollisionHelper::AITargets CollisionHelper::scan_ai_targets(const PixelCoord& bomber_position, int scan_radius) {",
      "class_name": "CollisionHelper",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 3 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "GameObject::is_blocked": {
      "name": "is_blocked",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 211,
        "column": 0
      },
      "signature": "bool GameObject::is_blocked(float check_x, float check_y) {",
      "class_name": "GameObject",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 1 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "GameObject::move_dist": {
      "name": "move_dist",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 331,
        "column": 0
      },
      "signature": "bool GameObject::move_dist(float distance, Direction dir) {",
      "class_name": "GameObject",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 2 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "GameObject::set_bomb_on_tile": {
      "name": "set_bomb_on_tile",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 885,
        "column": 0
      },
      "signature": "void GameObject::set_bomb_on_tile(Bomb* bomb) const {",
      "class_name": "GameObject",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (7) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "GameObject::remove_bomb_from_tile": {
      "name": "remove_bomb_from_tile",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 890,
        "column": 0
      },
      "signature": "void GameObject::remove_bomb_from_tile(Bomb* bomb) const {",
      "class_name": "GameObject",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (7) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "Resources::init": {
      "name": "init",
      "location": {
        "file": "src/Resources.cpp",
        "line": 19,
        "column": 0
      },
      "signature": "void Resources::init() {",
      "class_name": "Resources",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (10) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "Resources::shutdown": {
      "name": "shutdown",
      "location": {
        "file": "src/Resources.cpp",
        "line": 98,
        "column": 0
      },
      "signature": "void Resources::shutdown() {",
      "class_name": "Resources",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (11) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "Resources::load_texture": {
      "name": "load_texture",
      "location": {
        "file": "src/Resources.cpp",
        "line": 115,
        "column": 0
      },
      "signature": "TextureInfo* Resources::load_texture(const std::string& path, int sprite_width, int sprite_height) {",
      "class_name": "Resources",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (37) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "Resources::load_font": {
      "name": "load_font",
      "location": {
        "file": "src/Resources.cpp",
        "line": 163,
        "column": 0
      },
      "signature": "TTF_Font* Resources::load_font(const std::string& path, int size) {",
      "class_name": "Resources",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 3 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "Resources::get_texture": {
      "name": "get_texture",
      "location": {
        "file": "src/Resources.cpp",
        "line": 172,
        "column": 0
      },
      "signature": "TextureInfo* Resources::get_texture(const std::string& name) {",
      "class_name": "Resources",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (5) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "Resources::get_gl_texture": {
      "name": "get_gl_texture",
      "location": {
        "file": "src/Resources.cpp",
        "line": 182,
        "column": 0
      },
      "signature": "GLuint Resources::get_gl_texture(const std::string& name) {",
      "class_name": "Resources",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 4 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "Resources::load_shader_source": {
      "name": "load_shader_source",
      "location": {
        "file": "src/Resources.cpp",
        "line": 224,
        "column": 0
      },
      "signature": "std::string Resources::load_shader_source(const std::string& path) {",
      "class_name": "Resources",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 2 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "Resources::register_gl_texture_metadata": {
      "name": "register_gl_texture_metadata",
      "location": {
        "file": "src/Resources.cpp",
        "line": 237,
        "column": 0
      },
      "signature": "void Resources::register_gl_texture_metadata(const std::string& texture_name, GPUAcceleratedRenderer* renderer) {",
      "class_name": "Resources",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 2 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "get_total_time": {
      "name": "get_total_time",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 58,
        "column": 0
      },
      "signature": "float get_total_time() {",
      "class_name": null,
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (5) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "AIJob_Go::execute": {
      "name": "execute",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 57,
        "column": 0
      },
      "signature": "void AIJob_Go::execute() {",
      "class_name": "AIJob_Go",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (5) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "AIJob_Go::init": {
      "name": "init",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 108,
        "column": 0
      },
      "signature": "void AIJob_Go::init() {",
      "class_name": "AIJob_Go",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (9) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "AIJob_PutBomb::execute": {
      "name": "execute",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 156,
        "column": 0
      },
      "signature": "void AIJob_PutBomb::execute() {",
      "class_name": "AIJob_PutBomb",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (5) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "AIJob_Wait::execute": {
      "name": "execute",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 181,
        "column": 0
      },
      "signature": "void AIJob_Wait::execute() {",
      "class_name": "AIJob_Wait",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (5) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "Controller_AI_Modern::set_personality": {
      "name": "set_personality",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 215,
        "column": 0
      },
      "signature": "void Controller_AI_Modern::set_personality(ModernAIPersonality new_personality) {",
      "class_name": "Controller_AI_Modern",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (4) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "Controller_AI_Modern::attach": {
      "name": "attach",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 242,
        "column": 0
      },
      "signature": "void Controller_AI_Modern::attach(Bomber* _bomber) {",
      "class_name": "Controller_AI_Modern",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (5) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "Controller_AI_Modern::reset": {
      "name": "reset",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 252,
        "column": 0
      },
      "signature": "void Controller_AI_Modern::reset() {",
      "class_name": "Controller_AI_Modern",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (14) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "Controller_AI_Modern::update": {
      "name": "update",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 273,
        "column": 0
      },
      "signature": "void Controller_AI_Modern::update() {",
      "class_name": "Controller_AI_Modern",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 15 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "Controller_AI_Modern::generate_rating_map": {
      "name": "generate_rating_map",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 290,
        "column": 0
      },
      "signature": "void Controller_AI_Modern::generate_rating_map() {",
      "class_name": "Controller_AI_Modern",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.5,
      "evidence": [
        "Called within same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "Controller_AI_Modern::apply_bomb_rating": {
      "name": "apply_bomb_rating",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 372,
        "column": 0
      },
      "signature": "void Controller_AI_Modern::apply_bomb_rating(int x, int y, int power, float countdown, int dir) {",
      "class_name": "Controller_AI_Modern",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (3) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "Controller_AI_Modern::job_ready": {
      "name": "job_ready",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 407,
        "column": 0
      },
      "signature": "bool Controller_AI_Modern::job_ready() {",
      "class_name": "Controller_AI_Modern",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (3) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "Controller_AI_Modern::find_new_jobs": {
      "name": "find_new_jobs",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 429,
        "column": 0
      },
      "signature": "void Controller_AI_Modern::find_new_jobs() {",
      "class_name": "Controller_AI_Modern",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.5,
      "evidence": [
        "Called within same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "Controller_AI_Modern::do_job": {
      "name": "do_job",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 456,
        "column": 0
      },
      "signature": "void Controller_AI_Modern::do_job() {",
      "class_name": "Controller_AI_Modern",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.5,
      "evidence": [
        "Called within same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "Controller_AI_Modern::avoid_bombs": {
      "name": "avoid_bombs",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 462,
        "column": 0
      },
      "signature": "bool Controller_AI_Modern::avoid_bombs() {",
      "class_name": "Controller_AI_Modern",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 1 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "Controller_AI_Modern::find_bombing_opportunities": {
      "name": "find_bombing_opportunities",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 491,
        "column": 0
      },
      "signature": "bool Controller_AI_Modern::find_bombing_opportunities(int max_distance) {",
      "class_name": "Controller_AI_Modern",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 1 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "Controller_AI_Modern::find_way": {
      "name": "find_way",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 531,
        "column": 0
      },
      "signature": "bool Controller_AI_Modern::find_way(int dest_rating, int avoid_rating, int max_distance) {",
      "class_name": "Controller_AI_Modern",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (3) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "Controller_AI_Modern::clear_all_jobs": {
      "name": "clear_all_jobs",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 633,
        "column": 0
      },
      "signature": "void Controller_AI_Modern::clear_all_jobs() {",
      "class_name": "Controller_AI_Modern",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (5) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "Controller_AI_Modern::is_hotspot": {
      "name": "is_hotspot",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 637,
        "column": 0
      },
      "signature": "bool Controller_AI_Modern::is_hotspot(int x, int y) const {",
      "class_name": "Controller_AI_Modern",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (7) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "Controller_AI_Modern::is_death": {
      "name": "is_death",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 642,
        "column": 0
      },
      "signature": "bool Controller_AI_Modern::is_death(int x, int y) const {",
      "class_name": "Controller_AI_Modern",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (3) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "Controller_AI_Modern::can_escape_from_bomb": {
      "name": "can_escape_from_bomb",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 647,
        "column": 0
      },
      "signature": "bool Controller_AI_Modern::can_escape_from_bomb(int x, int y) const {",
      "class_name": "Controller_AI_Modern",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (5) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "Controller_AI_Modern::bomber_rating": {
      "name": "bomber_rating",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 660,
        "column": 0
      },
      "signature": "int Controller_AI_Modern::bomber_rating(int x, int y) const {",
      "class_name": "Controller_AI_Modern",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (3) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "Controller_AI_Modern::extra_rating": {
      "name": "extra_rating",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 665,
        "column": 0
      },
      "signature": "int Controller_AI_Modern::extra_rating(int x, int y) const {",
      "class_name": "Controller_AI_Modern",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (3) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "Controller_AI_Modern::get_aggression_modifier": {
      "name": "get_aggression_modifier",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 670,
        "column": 0
      },
      "signature": "float Controller_AI_Modern::get_aggression_modifier() const {",
      "class_name": "Controller_AI_Modern",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (5) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "Controller_AI_Modern::get_reaction_delay": {
      "name": "get_reaction_delay",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 681,
        "column": 0
      },
      "signature": "float Controller_AI_Modern::get_reaction_delay() const {",
      "class_name": "Controller_AI_Modern",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (5) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "Controller_AI_Modern::should_hunt_enemies": {
      "name": "should_hunt_enemies",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 685,
        "column": 0
      },
      "signature": "bool Controller_AI_Modern::should_hunt_enemies() const {",
      "class_name": "Controller_AI_Modern",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (4) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "Controller_AI_Modern::is_bomb": {
      "name": "is_bomb",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 689,
        "column": 0
      },
      "signature": "bool Controller_AI_Modern::is_bomb() {",
      "class_name": "Controller_AI_Modern",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 6 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "Controller_AI_Modern::get_current_state": {
      "name": "get_current_state",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 698,
        "column": 0
      },
      "signature": "std::string Controller_AI_Modern::get_current_state() const {",
      "class_name": "Controller_AI_Modern",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (4) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "Controller_AI_Modern::is_starting_corner_position": {
      "name": "is_starting_corner_position",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 711,
        "column": 0
      },
      "signature": "bool Controller_AI_Modern::is_starting_corner_position(int x, int y) const {",
      "class_name": "Controller_AI_Modern",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (3) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "Controller_AI_Modern::can_escape_from_bomb_safely": {
      "name": "can_escape_from_bomb_safely",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 719,
        "column": 0
      },
      "signature": "bool Controller_AI_Modern::can_escape_from_bomb_safely(int x, int y) const {",
      "class_name": "Controller_AI_Modern",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (3) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "Controller_AI_Modern::bombing_is_beneficial": {
      "name": "bombing_is_beneficial",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 769,
        "column": 0
      },
      "signature": "bool Controller_AI_Modern::bombing_is_beneficial(int x, int y) const {",
      "class_name": "Controller_AI_Modern",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (3) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "Controller_AI_Modern::should_move_to_better_position": {
      "name": "should_move_to_better_position",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 808,
        "column": 0
      },
      "signature": "bool Controller_AI_Modern::should_move_to_better_position() {",
      "class_name": "Controller_AI_Modern",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 1 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "Controller_AI_Modern::count_active_bombs": {
      "name": "count_active_bombs",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 845,
        "column": 0
      },
      "signature": "int Controller_AI_Modern::count_active_bombs() const {",
      "class_name": "Controller_AI_Modern",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (3) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "Controller_AI_Modern::get_max_bombs": {
      "name": "get_max_bombs",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 868,
        "column": 0
      },
      "signature": "int Controller_AI_Modern::get_max_bombs() const {",
      "class_name": "Controller_AI_Modern",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (11) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "Controller_AI_Modern::add_escape_sequence": {
      "name": "add_escape_sequence",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 880,
        "column": 0
      },
      "signature": "void Controller_AI_Modern::add_escape_sequence(int bomb_x, int bomb_y) {",
      "class_name": "Controller_AI_Modern",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.5,
      "evidence": [
        "Called within same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "Controller_AI_Modern::find_best_escape_direction": {
      "name": "find_best_escape_direction",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 893,
        "column": 0
      },
      "signature": "int Controller_AI_Modern::find_best_escape_direction(int bomb_x, int bomb_y) const {",
      "class_name": "Controller_AI_Modern",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (4) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "Controller_AI_Modern::evaluate_escape_direction": {
      "name": "evaluate_escape_direction",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 911,
        "column": 0
      },
      "signature": "int Controller_AI_Modern::evaluate_escape_direction(int bomb_x, int bomb_y, int direction) const {",
      "class_name": "Controller_AI_Modern",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (4) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "Controller_AI_Modern::count_nearby_threats": {
      "name": "count_nearby_threats",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 953,
        "column": 0
      },
      "signature": "int Controller_AI_Modern::count_nearby_threats(int x, int y) const {",
      "class_name": "Controller_AI_Modern",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (3) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "SettingsScreen::handle_events": {
      "name": "handle_events",
      "location": {
        "file": "src/SettingsScreen.cpp",
        "line": 19,
        "column": 0
      },
      "signature": "void SettingsScreen::handle_events(SDL_Event& event) {",
      "class_name": "SettingsScreen",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 6 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "SettingsScreen::update": {
      "name": "update",
      "location": {
        "file": "src/SettingsScreen.cpp",
        "line": 50,
        "column": 0
      },
      "signature": "void SettingsScreen::update(float deltaTime) {",
      "class_name": "SettingsScreen",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 15 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "SettingsScreen::render": {
      "name": "render",
      "location": {
        "file": "src/SettingsScreen.cpp",
        "line": 53,
        "column": 0
      },
      "signature": "void SettingsScreen::render(SDL_Renderer* renderer) {",
      "class_name": "SettingsScreen",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 7 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "SettingsScreen::get_next_state": {
      "name": "get_next_state",
      "location": {
        "file": "src/SettingsScreen.cpp",
        "line": 87,
        "column": 0
      },
      "signature": "GameState SettingsScreen::get_next_state() const {",
      "class_name": "SettingsScreen",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (9) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "SettingsScreen::render_player_setup": {
      "name": "render_player_setup",
      "location": {
        "file": "src/SettingsScreen.cpp",
        "line": 91,
        "column": 0
      },
      "signature": "void SettingsScreen::render_player_setup() {",
      "class_name": "SettingsScreen",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.5,
      "evidence": [
        "Called within same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "SettingsScreen::render_game_options": {
      "name": "render_game_options",
      "location": {
        "file": "src/SettingsScreen.cpp",
        "line": 139,
        "column": 0
      },
      "signature": "void SettingsScreen::render_game_options() {",
      "class_name": "SettingsScreen",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.5,
      "evidence": [
        "Called within same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "SettingsScreen::handle_player_setup_input": {
      "name": "handle_player_setup_input",
      "location": {
        "file": "src/SettingsScreen.cpp",
        "line": 178,
        "column": 0
      },
      "signature": "void SettingsScreen::handle_player_setup_input(SDL_Event& event) {",
      "class_name": "SettingsScreen",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.5,
      "evidence": [
        "Called within same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "SettingsScreen::get_controller_name": {
      "name": "get_controller_name",
      "location": {
        "file": "src/SettingsScreen.cpp",
        "line": 201,
        "column": 0
      },
      "signature": "std::string SettingsScreen::get_controller_name(int controller_type) {",
      "class_name": "SettingsScreen",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.5,
      "evidence": [
        "Called within same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "SettingsScreen::get_team_name": {
      "name": "get_team_name",
      "location": {
        "file": "src/SettingsScreen.cpp",
        "line": 210,
        "column": 0
      },
      "signature": "std::string SettingsScreen::get_team_name(int team) {",
      "class_name": "SettingsScreen",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.5,
      "evidence": [
        "Called within same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "main": {
      "name": "main",
      "location": {
        "file": "src/main.cpp",
        "line": 3,
        "column": 0
      },
      "signature": "int main(int argc, char* argv[]) {",
      "class_name": null,
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 1.0,
      "evidence": [
        "Always-used function type"
      ],
      "calls_to": [],
      "called_from": []
    },
    "TileManager::set_context": {
      "name": "set_context",
      "location": {
        "file": "src/TileManager.cpp",
        "line": 20,
        "column": 0
      },
      "signature": "void TileManager::set_context(GameContext* new_context) {",
      "class_name": "TileManager",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 2 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "TileManager::update_tiles": {
      "name": "update_tiles",
      "location": {
        "file": "src/TileManager.cpp",
        "line": 31,
        "column": 0
      },
      "signature": "void TileManager::update_tiles(float deltaTime) {",
      "class_name": "TileManager",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 2 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "TileManager::handle_tile_updates": {
      "name": "handle_tile_updates",
      "location": {
        "file": "src/TileManager.cpp",
        "line": 47,
        "column": 0
      },
      "signature": "void TileManager::handle_tile_updates() {",
      "class_name": "TileManager",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.5,
      "evidence": [
        "Called within same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "iterate_all_tiles": {
      "name": "iterate_all_tiles",
      "location": {
        "file": "src/TileManager.cpp",
        "line": 81,
        "column": 0
      },
      "signature": "iterate_all_tiles([this](MapTile* tile, int x, int y) {",
      "class_name": null,
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 1 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "TileManager::coordinate_with_lifecycle_manager": {
      "name": "coordinate_with_lifecycle_manager",
      "location": {
        "file": "src/TileManager.cpp",
        "line": 57,
        "column": 0
      },
      "signature": "void TileManager::coordinate_with_lifecycle_manager() {",
      "class_name": "TileManager",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.5,
      "evidence": [
        "Called within same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "TileManager::process_dying_tiles": {
      "name": "process_dying_tiles",
      "location": {
        "file": "src/TileManager.cpp",
        "line": 68,
        "column": 0
      },
      "signature": "void TileManager::process_dying_tiles() {",
      "class_name": "TileManager",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.5,
      "evidence": [
        "Called within same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "TileManager::process_dead_tiles": {
      "name": "process_dead_tiles",
      "location": {
        "file": "src/TileManager.cpp",
        "line": 80,
        "column": 0
      },
      "signature": "void TileManager::process_dead_tiles() {",
      "class_name": "TileManager",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.5,
      "evidence": [
        "Called within same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "TileManager::request_tile_destruction": {
      "name": "request_tile_destruction",
      "location": {
        "file": "src/TileManager.cpp",
        "line": 94,
        "column": 0
      },
      "signature": "void TileManager::request_tile_destruction(int map_x, int map_y) {",
      "class_name": "TileManager",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (3) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "TileManager::replace_tile_when_ready": {
      "name": "replace_tile_when_ready",
      "location": {
        "file": "src/TileManager.cpp",
        "line": 138,
        "column": 0
      },
      "signature": "void TileManager::replace_tile_when_ready(int map_x, int map_y, int new_tile_type) {",
      "class_name": "TileManager",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.5,
      "evidence": [
        "Called within same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "TileManager::is_tile_ready_for_replacement": {
      "name": "is_tile_ready_for_replacement",
      "location": {
        "file": "src/TileManager.cpp",
        "line": 144,
        "column": 0
      },
      "signature": "bool TileManager::is_tile_ready_for_replacement(MapTile* tile) {",
      "class_name": "TileManager",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 1 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "TileManager::is_position_walkable": {
      "name": "is_position_walkable",
      "location": {
        "file": "src/TileManager.cpp",
        "line": 153,
        "column": 0
      },
      "signature": "bool TileManager::is_position_walkable(int map_x, int map_y) {",
      "class_name": "TileManager",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (5) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "TileManager::is_position_blocked": {
      "name": "is_position_blocked",
      "location": {
        "file": "src/TileManager.cpp",
        "line": 163,
        "column": 0
      },
      "signature": "bool TileManager::is_position_blocked(int map_x, int map_y) {",
      "class_name": "TileManager",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 5 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "TileManager::get_tile_at": {
      "name": "get_tile_at",
      "location": {
        "file": "src/TileManager.cpp",
        "line": 167,
        "column": 0
      },
      "signature": "MapTile* TileManager::get_tile_at(int map_x, int map_y) {",
      "class_name": "TileManager",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (12) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "TileManager::is_tile_blocking_at": {
      "name": "is_tile_blocking_at",
      "location": {
        "file": "src/TileManager.cpp",
        "line": 175,
        "column": 0
      },
      "signature": "bool TileManager::is_tile_blocking_at(int map_x, int map_y) {",
      "class_name": "TileManager",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 8 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "TileManager::has_bomb_at": {
      "name": "has_bomb_at",
      "location": {
        "file": "src/TileManager.cpp",
        "line": 191,
        "column": 0
      },
      "signature": "bool TileManager::has_bomb_at(int map_x, int map_y) {",
      "class_name": "TileManager",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 5 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "TileManager::is_tile_destructible_at": {
      "name": "is_tile_destructible_at",
      "location": {
        "file": "src/TileManager.cpp",
        "line": 207,
        "column": 0
      },
      "signature": "bool TileManager::is_tile_destructible_at(int map_x, int map_y) {",
      "class_name": "TileManager",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 1 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "TileManager::register_bomb_at": {
      "name": "register_bomb_at",
      "location": {
        "file": "src/TileManager.cpp",
        "line": 225,
        "column": 0
      },
      "signature": "void TileManager::register_bomb_at(int map_x, int map_y, Bomb* bomb) {",
      "class_name": "TileManager",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 2 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "TileManager::unregister_bomb_at": {
      "name": "unregister_bomb_at",
      "location": {
        "file": "src/TileManager.cpp",
        "line": 241,
        "column": 0
      },
      "signature": "void TileManager::unregister_bomb_at(int map_x, int map_y, Bomb* bomb) {",
      "class_name": "TileManager",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 1 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "TileManager::get_bomb_at": {
      "name": "get_bomb_at",
      "location": {
        "file": "src/TileManager.cpp",
        "line": 252,
        "column": 0
      },
      "signature": "Bomb* TileManager::get_bomb_at(int map_x, int map_y) {",
      "class_name": "TileManager",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 1 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "TileManager::register_bomber_at": {
      "name": "register_bomber_at",
      "location": {
        "file": "src/TileManager.cpp",
        "line": 257,
        "column": 0
      },
      "signature": "void TileManager::register_bomber_at(int map_x, int map_y, Bomber* bomber) {",
      "class_name": "TileManager",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 1 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "TileManager::unregister_bomber_at": {
      "name": "unregister_bomber_at",
      "location": {
        "file": "src/TileManager.cpp",
        "line": 265,
        "column": 0
      },
      "signature": "void TileManager::unregister_bomber_at(int map_x, int map_y) {",
      "class_name": "TileManager",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 1 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "TileManager::get_bomber_at": {
      "name": "get_bomber_at",
      "location": {
        "file": "src/TileManager.cpp",
        "line": 273,
        "column": 0
      },
      "signature": "Bomber* TileManager::get_bomber_at(int map_x, int map_y) {",
      "class_name": "TileManager",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.5,
      "evidence": [
        "Called within same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "TileManager::has_bomber_at": {
      "name": "has_bomber_at",
      "location": {
        "file": "src/TileManager.cpp",
        "line": 278,
        "column": 0
      },
      "signature": "bool TileManager::has_bomber_at(int map_x, int map_y) {",
      "class_name": "TileManager",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 3 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "TileManager::get_destructible_tiles_in_radius": {
      "name": "get_destructible_tiles_in_radius",
      "location": {
        "file": "src/TileManager.cpp",
        "line": 295,
        "column": 0
      },
      "signature": "std::vector<MapTile*> TileManager::get_destructible_tiles_in_radius(int center_x, int center_y, int radius) {",
      "class_name": "TileManager",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 1 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "TileManager::update_single_tile": {
      "name": "update_single_tile",
      "location": {
        "file": "src/TileManager.cpp",
        "line": 317,
        "column": 0
      },
      "signature": "void TileManager::update_single_tile(MapTile* tile, int map_x, int map_y) {",
      "class_name": "TileManager",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.5,
      "evidence": [
        "Called within same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "TileManager::handle_tile_destruction_request": {
      "name": "handle_tile_destruction_request",
      "location": {
        "file": "src/TileManager.cpp",
        "line": 329,
        "column": 0
      },
      "signature": "void TileManager::handle_tile_destruction_request(int map_x, int map_y) {",
      "class_name": "TileManager",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 1 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "TileManager::perform_tile_replacement": {
      "name": "perform_tile_replacement",
      "location": {
        "file": "src/TileManager.cpp",
        "line": 337,
        "column": 0
      },
      "signature": "void TileManager::perform_tile_replacement(int map_x, int map_y, int new_tile_type) {",
      "class_name": "TileManager",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.5,
      "evidence": [
        "Called within same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "TileManager::is_valid_position": {
      "name": "is_valid_position",
      "location": {
        "file": "src/TileManager.cpp",
        "line": 362,
        "column": 0
      },
      "signature": "bool TileManager::is_valid_position(int map_x, int map_y) const {",
      "class_name": "TileManager",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (10) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "calculate_distance": {
      "name": "calculate_distance",
      "location": {
        "file": "src/AudioMixer.cpp",
        "line": 15,
        "column": 0
      },
      "signature": "static float calculate_distance(const AudioPosition& sound_pos) {",
      "class_name": null,
      "is_static": true,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.5,
      "evidence": [
        "Called within same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "calculate_stereo_pan": {
      "name": "calculate_stereo_pan",
      "location": {
        "file": "src/AudioMixer.cpp",
        "line": 22,
        "column": 0
      },
      "signature": "static void calculate_stereo_pan(const AudioPosition& sound_pos, float& left_gain, float& right_gain) {",
      "class_name": null,
      "is_static": true,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.5,
      "evidence": [
        "Called within same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "AudioMixer::init": {
      "name": "init",
      "location": {
        "file": "src/AudioMixer.cpp",
        "line": 41,
        "column": 0
      },
      "signature": "void AudioMixer::init() {",
      "class_name": "AudioMixer",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 7 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "AudioMixer::shutdown": {
      "name": "shutdown",
      "location": {
        "file": "src/AudioMixer.cpp",
        "line": 56,
        "column": 0
      },
      "signature": "void AudioMixer::shutdown() {",
      "class_name": "AudioMixer",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 10 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "AudioMixer::load_sound": {
      "name": "load_sound",
      "location": {
        "file": "src/AudioMixer.cpp",
        "line": 71,
        "column": 0
      },
      "signature": "MixerAudio* AudioMixer::load_sound(const std::string& path) {",
      "class_name": "AudioMixer",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 2 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "AudioMixer::add_sound": {
      "name": "add_sound",
      "location": {
        "file": "src/AudioMixer.cpp",
        "line": 107,
        "column": 0
      },
      "signature": "void AudioMixer::add_sound(const std::string& name, MixerAudio* audio) {",
      "class_name": "AudioMixer",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 2 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "AudioMixer::play_sound": {
      "name": "play_sound",
      "location": {
        "file": "src/AudioMixer.cpp",
        "line": 113,
        "column": 0
      },
      "signature": "bool AudioMixer::play_sound(const std::string& name) {",
      "class_name": "AudioMixer",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 1 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "AudioMixer::play_sound_3d": {
      "name": "play_sound_3d",
      "location": {
        "file": "src/AudioMixer.cpp",
        "line": 117,
        "column": 0
      },
      "signature": "bool AudioMixer::play_sound_3d(const std::string& name, const AudioPosition& pos, float max_distance) {",
      "class_name": "AudioMixer",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (18) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "AudioMixer::set_listener_position": {
      "name": "set_listener_position",
      "location": {
        "file": "src/AudioMixer.cpp",
        "line": 165,
        "column": 0
      },
      "signature": "void AudioMixer::set_listener_position(const AudioPosition& pos) {",
      "class_name": "AudioMixer",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 2 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "AudioMixer::audio_callback": {
      "name": "audio_callback",
      "location": {
        "file": "src/AudioMixer.cpp",
        "line": 169,
        "column": 0
      },
      "signature": "void AudioMixer::audio_callback(void* userdata, SDL_AudioStream* stream, int additional_amount, int total_amount) {",
      "class_name": "AudioMixer",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 1 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "vector_distance": {
      "name": "vector_distance",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 26,
        "column": 0
      },
      "signature": "float vector_distance(const CL_Vector& a, const CL_Vector& b) {",
      "class_name": null,
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (11) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "vector_length": {
      "name": "vector_length",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 32,
        "column": 0
      },
      "signature": "float vector_length(const CL_Vector& v) {",
      "class_name": null,
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.5,
      "evidence": [
        "Called within same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "vector_subtract": {
      "name": "vector_subtract",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 36,
        "column": 0
      },
      "signature": "CL_Vector vector_subtract(const CL_Vector& a, const CL_Vector& b) {",
      "class_name": null,
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.5,
      "evidence": [
        "Called within same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "vector_add": {
      "name": "vector_add",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 40,
        "column": 0
      },
      "signature": "CL_Vector vector_add(const CL_Vector& a, const CL_Vector& b) {",
      "class_name": null,
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (4) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "vector_multiply": {
      "name": "vector_multiply",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 44,
        "column": 0
      },
      "signature": "CL_Vector vector_multiply(const CL_Vector& v, float scalar) {",
      "class_name": null,
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (3) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "vector_normalize": {
      "name": "vector_normalize",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 48,
        "column": 0
      },
      "signature": "CL_Vector vector_normalize(const CL_Vector& v) {",
      "class_name": null,
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.5,
      "evidence": [
        "Called within same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "Controller_AI_Smart::reset": {
      "name": "reset",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 88,
        "column": 0
      },
      "signature": "void Controller_AI_Smart::reset() {",
      "class_name": "Controller_AI_Smart",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (14) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "Controller_AI_Smart::set_personality": {
      "name": "set_personality",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 100,
        "column": 0
      },
      "signature": "void Controller_AI_Smart::set_personality(AIPersonality new_personality) {",
      "class_name": "Controller_AI_Smart",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (4) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "Controller_AI_Smart::update": {
      "name": "update",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 136,
        "column": 0
      },
      "signature": "void Controller_AI_Smart::update() {",
      "class_name": "Controller_AI_Smart",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 15 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "Controller_AI_Smart::think": {
      "name": "think",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 167,
        "column": 0
      },
      "signature": "void Controller_AI_Smart::think() {",
      "class_name": "Controller_AI_Smart",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.5,
      "evidence": [
        "Called within same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "Controller_AI_Smart::update_current_state": {
      "name": "update_current_state",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 186,
        "column": 0
      },
      "signature": "void Controller_AI_Smart::update_current_state() {",
      "class_name": "Controller_AI_Smart",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.5,
      "evidence": [
        "Called within same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "Controller_AI_Smart::transition_to_state": {
      "name": "transition_to_state",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 221,
        "column": 0
      },
      "signature": "void Controller_AI_Smart::transition_to_state(AIState new_state) {",
      "class_name": "Controller_AI_Smart",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (8) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "Controller_AI_Smart::execute_behavior": {
      "name": "execute_behavior",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 249,
        "column": 0
      },
      "signature": "void Controller_AI_Smart::execute_behavior() {",
      "class_name": "Controller_AI_Smart",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.5,
      "evidence": [
        "Called within same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "Controller_AI_Smart::find_path_to": {
      "name": "find_path_to",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 339,
        "column": 0
      },
      "signature": "std::vector<CL_Vector> Controller_AI_Smart::find_path_to(CL_Vector target) {",
      "class_name": "Controller_AI_Smart",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (3) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "Controller_AI_Smart::is_position_safe": {
      "name": "is_position_safe",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 402,
        "column": 0
      },
      "signature": "bool Controller_AI_Smart::is_position_safe(CL_Vector pos, float time_ahead) {",
      "class_name": "Controller_AI_Smart",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (5) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "Controller_AI_Smart::calculate_danger_level": {
      "name": "calculate_danger_level",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 408,
        "column": 0
      },
      "signature": "float Controller_AI_Smart::calculate_danger_level(CL_Vector pos) {",
      "class_name": "Controller_AI_Smart",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (4) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "Controller_AI_Smart::find_safe_position": {
      "name": "find_safe_position",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 485,
        "column": 0
      },
      "signature": "CL_Vector Controller_AI_Smart::find_safe_position() {",
      "class_name": "Controller_AI_Smart",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (4) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "Controller_AI_Smart::scan_for_targets": {
      "name": "scan_for_targets",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 525,
        "column": 0
      },
      "signature": "std::vector<AITarget> Controller_AI_Smart::scan_for_targets() {",
      "class_name": "Controller_AI_Smart",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.5,
      "evidence": [
        "Called within same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "Controller_AI_Smart::select_best_target": {
      "name": "select_best_target",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 627,
        "column": 0
      },
      "signature": "AITarget Controller_AI_Smart::select_best_target(const std::vector<AITarget>& targets) {",
      "class_name": "Controller_AI_Smart",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.5,
      "evidence": [
        "Called within same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "Controller_AI_Smart::evaluate_powerup_value": {
      "name": "evaluate_powerup_value",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 651,
        "column": 0
      },
      "signature": "float Controller_AI_Smart::evaluate_powerup_value(int powerup_type) {",
      "class_name": "Controller_AI_Smart",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (3) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "Controller_AI_Smart::should_place_bomb": {
      "name": "should_place_bomb",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 656,
        "column": 0
      },
      "signature": "bool Controller_AI_Smart::should_place_bomb() {",
      "class_name": "Controller_AI_Smart",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.5,
      "evidence": [
        "Called within same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "Controller_AI_Smart::can_escape_from_bomb": {
      "name": "can_escape_from_bomb",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 684,
        "column": 0
      },
      "signature": "bool Controller_AI_Smart::can_escape_from_bomb(CL_Vector bomb_pos) {",
      "class_name": "Controller_AI_Smart",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (4) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "Controller_AI_Smart::would_hit_enemy": {
      "name": "would_hit_enemy",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 693,
        "column": 0
      },
      "signature": "bool Controller_AI_Smart::would_hit_enemy(CL_Vector bomb_pos) {",
      "class_name": "Controller_AI_Smart",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 1 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "Controller_AI_Smart::predict_explosion_tiles": {
      "name": "predict_explosion_tiles",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 724,
        "column": 0
      },
      "signature": "std::vector<CL_Vector> Controller_AI_Smart::predict_explosion_tiles(CL_Vector bomb_pos, int power) {",
      "class_name": "Controller_AI_Smart",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.5,
      "evidence": [
        "Called within same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "Controller_AI_Smart::analyze_enemies": {
      "name": "analyze_enemies",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 761,
        "column": 0
      },
      "signature": "void Controller_AI_Smart::analyze_enemies() {",
      "class_name": "Controller_AI_Smart",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.5,
      "evidence": [
        "Called within same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "Controller_AI_Smart::predict_enemy_position": {
      "name": "predict_enemy_position",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 785,
        "column": 0
      },
      "signature": "CL_Vector Controller_AI_Smart::predict_enemy_position(Bomber* enemy, float time_ahead) {",
      "class_name": "Controller_AI_Smart",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 1 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "Controller_AI_Smart::is_enemy_dangerous": {
      "name": "is_enemy_dangerous",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 793,
        "column": 0
      },
      "signature": "bool Controller_AI_Smart::is_enemy_dangerous(Bomber* enemy) {",
      "class_name": "Controller_AI_Smart",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 1 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "Controller_AI_Smart::get_aggression_modifier": {
      "name": "get_aggression_modifier",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 803,
        "column": 0
      },
      "signature": "float Controller_AI_Smart::get_aggression_modifier() {",
      "class_name": "Controller_AI_Smart",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (4) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "Controller_AI_Smart::get_reaction_delay": {
      "name": "get_reaction_delay",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 814,
        "column": 0
      },
      "signature": "float Controller_AI_Smart::get_reaction_delay() {",
      "class_name": "Controller_AI_Smart",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (4) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "Controller_AI_Smart::get_bomb_frequency_modifier": {
      "name": "get_bomb_frequency_modifier",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 818,
        "column": 0
      },
      "signature": "float Controller_AI_Smart::get_bomb_frequency_modifier() {",
      "class_name": "Controller_AI_Smart",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.5,
      "evidence": [
        "Called within same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "Controller_AI_Smart::should_hunt_enemies": {
      "name": "should_hunt_enemies",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 822,
        "column": 0
      },
      "signature": "bool Controller_AI_Smart::should_hunt_enemies() {",
      "class_name": "Controller_AI_Smart",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 3 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "Controller_AI_Smart::set_reaction_time": {
      "name": "set_reaction_time",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 826,
        "column": 0
      },
      "signature": "void Controller_AI_Smart::set_reaction_time(float seconds) {",
      "class_name": "Controller_AI_Smart",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 1 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "Controller_AI_Smart::set_aggression_level": {
      "name": "set_aggression_level",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 830,
        "column": 0
      },
      "signature": "void Controller_AI_Smart::set_aggression_level(float level) {",
      "class_name": "Controller_AI_Smart",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 1 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "ParticleSystem::reset_for_pool": {
      "name": "reset_for_pool",
      "location": {
        "file": "src/ParticleSystem.cpp",
        "line": 49,
        "column": 0
      },
      "signature": "void ParticleSystem::reset_for_pool() {",
      "class_name": "ParticleSystem",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 2 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "ParticleSystem::act": {
      "name": "act",
      "location": {
        "file": "src/ParticleSystem.cpp",
        "line": 60,
        "column": 0
      },
      "signature": "void ParticleSystem::act(float deltaTime) {",
      "class_name": "ParticleSystem",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 20 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "ParticleSystem::show": {
      "name": "show",
      "location": {
        "file": "src/ParticleSystem.cpp",
        "line": 93,
        "column": 0
      },
      "signature": "void ParticleSystem::show() {",
      "class_name": "ParticleSystem",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 22 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "ParticleSystem::update_particles": {
      "name": "update_particles",
      "location": {
        "file": "src/ParticleSystem.cpp",
        "line": 97,
        "column": 0
      },
      "signature": "void ParticleSystem::update_particles(float deltaTime) {",
      "class_name": "ParticleSystem",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.5,
      "evidence": [
        "Called within same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "ParticleSystem::render_particles": {
      "name": "render_particles",
      "location": {
        "file": "src/ParticleSystem.cpp",
        "line": 133,
        "column": 0
      },
      "signature": "void ParticleSystem::render_particles() {",
      "class_name": "ParticleSystem",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (3) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "ParticleSystem::emit_explosion_sparks": {
      "name": "emit_explosion_sparks",
      "location": {
        "file": "src/ParticleSystem.cpp",
        "line": 159,
        "column": 0
      },
      "signature": "void ParticleSystem::emit_explosion_sparks(int count) {",
      "class_name": "ParticleSystem",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.5,
      "evidence": [
        "Called within same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "ParticleSystem::emit_dust_cloud": {
      "name": "emit_dust_cloud",
      "location": {
        "file": "src/ParticleSystem.cpp",
        "line": 181,
        "column": 0
      },
      "signature": "void ParticleSystem::emit_dust_cloud(int count) {",
      "class_name": "ParticleSystem",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (3) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "ParticleSystem::emit_fire_particles": {
      "name": "emit_fire_particles",
      "location": {
        "file": "src/ParticleSystem.cpp",
        "line": 214,
        "column": 0
      },
      "signature": "void ParticleSystem::emit_fire_particles(int count) {",
      "class_name": "ParticleSystem",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (3) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "ParticleSystem::emit_smoke_trail": {
      "name": "emit_smoke_trail",
      "location": {
        "file": "src/ParticleSystem.cpp",
        "line": 249,
        "column": 0
      },
      "signature": "void ParticleSystem::emit_smoke_trail(int count) {",
      "class_name": "ParticleSystem",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (3) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "Explosion::act": {
      "name": "act",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 83,
        "column": 0
      },
      "signature": "void Explosion::act(float deltaTime) {",
      "class_name": "Explosion",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 20 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "Explosion::detonate_other_bombs": {
      "name": "detonate_other_bombs",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 105,
        "column": 0
      },
      "signature": "void Explosion::detonate_other_bombs() {",
      "class_name": "Explosion",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (3) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "Explosion::draw_explosion_tile": {
      "name": "draw_explosion_tile",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 193,
        "column": 0
      },
      "signature": "void Explosion::draw_explosion_tile(float tile_x, float tile_y) {",
      "class_name": "Explosion",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 1 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "Explosion::get_dummy_white_texture": {
      "name": "get_dummy_white_texture",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 226,
        "column": 0
      },
      "signature": "GLuint Explosion::get_dummy_white_texture() {",
      "class_name": "Explosion",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (3) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "Explosion::show": {
      "name": "show",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 247,
        "column": 0
      },
      "signature": "void Explosion::show() {",
      "class_name": "Explosion",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 22 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "Explosion::kill_bombers": {
      "name": "kill_bombers",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 310,
        "column": 0
      },
      "signature": "void Explosion::kill_bombers() {",
      "class_name": "Explosion",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (4) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "Explosion::explode_corpses": {
      "name": "explode_corpses",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 440,
        "column": 0
      },
      "signature": "void Explosion::explode_corpses() {",
      "class_name": "Explosion",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (4) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "Explosion::is_tile_blocking_at": {
      "name": "is_tile_blocking_at",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 537,
        "column": 0
      },
      "signature": "bool Explosion::is_tile_blocking_at(int map_x, int map_y) {",
      "class_name": "Explosion",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (16) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "Explosion::destroy_tile_at": {
      "name": "destroy_tile_at",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 558,
        "column": 0
      },
      "signature": "void Explosion::destroy_tile_at(int map_x, int map_y) {",
      "class_name": "Explosion",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (6) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "Explosion::notify_explosion_haptics": {
      "name": "notify_explosion_haptics",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 569,
        "column": 0
      },
      "signature": "void Explosion::notify_explosion_haptics() {",
      "class_name": "Explosion",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.5,
      "evidence": [
        "Called within same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "TileEntity::act": {
      "name": "act",
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 50,
        "column": 0
      },
      "signature": "void TileEntity::act(float deltaTime) {",
      "class_name": "TileEntity",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (26) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "TileEntity::show": {
      "name": "show",
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 66,
        "column": 0
      },
      "signature": "void TileEntity::show() {",
      "class_name": "TileEntity",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (38) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "TileEntity::destroy": {
      "name": "destroy",
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 85,
        "column": 0
      },
      "signature": "void TileEntity::destroy() {",
      "class_name": "TileEntity",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (13) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "TileEntity::spawn_extra": {
      "name": "spawn_extra",
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 113,
        "column": 0
      },
      "signature": "void TileEntity::spawn_extra() {",
      "class_name": "TileEntity",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (4) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "TileEntity::update_destruction_animation": {
      "name": "update_destruction_animation",
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 172,
        "column": 0
      },
      "signature": "void TileEntity::update_destruction_animation(float deltaTime) {",
      "class_name": "TileEntity",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.5,
      "evidence": [
        "Called within same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "TileEntity::render_destruction_effects": {
      "name": "render_destruction_effects",
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 189,
        "column": 0
      },
      "signature": "void TileEntity::render_destruction_effects() {",
      "class_name": "TileEntity",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (3) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "TileEntity_Box::act": {
      "name": "act",
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 219,
        "column": 0
      },
      "signature": "void TileEntity_Box::act(float deltaTime) {",
      "class_name": "TileEntity_Box",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (24) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "TileEntity_Box::show": {
      "name": "show",
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 232,
        "column": 0
      },
      "signature": "void TileEntity_Box::show() {",
      "class_name": "TileEntity_Box",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (37) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "TileEntity_Box::destroy": {
      "name": "destroy",
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 240,
        "column": 0
      },
      "signature": "void TileEntity_Box::destroy() {",
      "class_name": "TileEntity_Box",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (10) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "TileEntity_Box::render_fragmentation_effects": {
      "name": "render_fragmentation_effects",
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 271,
        "column": 0
      },
      "signature": "void TileEntity_Box::render_fragmentation_effects() {",
      "class_name": "TileEntity_Box",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.5,
      "evidence": [
        "Called within same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "Extra::act": {
      "name": "act",
      "location": {
        "file": "src/Extra.cpp",
        "line": 39,
        "column": 0
      },
      "signature": "void Extra::act(float deltaTime) {",
      "class_name": "Extra",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 20 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "Extra::show": {
      "name": "show",
      "location": {
        "file": "src/Extra.cpp",
        "line": 106,
        "column": 0
      },
      "signature": "void Extra::show() {",
      "class_name": "Extra",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (37) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "Extra::collect": {
      "name": "collect",
      "location": {
        "file": "src/Extra.cpp",
        "line": 123,
        "column": 0
      },
      "signature": "void Extra::collect() {",
      "class_name": "Extra",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (3) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "Extra::apply_effect_to_bomber": {
      "name": "apply_effect_to_bomber",
      "location": {
        "file": "src/Extra.cpp",
        "line": 144,
        "column": 0
      },
      "signature": "void Extra::apply_effect_to_bomber(Bomber* bomber) {",
      "class_name": "Extra",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (3) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "BomberCorpse::act": {
      "name": "act",
      "location": {
        "file": "src/BomberCorpse.cpp",
        "line": 45,
        "column": 0
      },
      "signature": "void BomberCorpse::act(float deltaTime) {",
      "class_name": "BomberCorpse",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 20 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "BomberCorpse::show": {
      "name": "show",
      "location": {
        "file": "src/BomberCorpse.cpp",
        "line": 65,
        "column": 0
      },
      "signature": "void BomberCorpse::show() {",
      "class_name": "BomberCorpse",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 22 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "BomberCorpse::explode": {
      "name": "explode",
      "location": {
        "file": "src/BomberCorpse.cpp",
        "line": 69,
        "column": 0
      },
      "signature": "void BomberCorpse::explode() {",
      "class_name": "BomberCorpse",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 4 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "BomberCorpse::create_gore_explosion": {
      "name": "create_gore_explosion",
      "location": {
        "file": "src/BomberCorpse.cpp",
        "line": 80,
        "column": 0
      },
      "signature": "void BomberCorpse::create_gore_explosion() {",
      "class_name": "BomberCorpse",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.5,
      "evidence": [
        "Called within same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "MapTile_Box::act": {
      "name": "act",
      "location": {
        "file": "src/MapTile_Box.cpp",
        "line": 29,
        "column": 0
      },
      "signature": "void MapTile_Box::act() {",
      "class_name": "MapTile_Box",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 20 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "MapTile_Box::show": {
      "name": "show",
      "location": {
        "file": "src/MapTile_Box.cpp",
        "line": 51,
        "column": 0
      },
      "signature": "void MapTile_Box::show() {",
      "class_name": "MapTile_Box",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (37) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "MapTile_Box::destroy": {
      "name": "destroy",
      "location": {
        "file": "src/MapTile_Box.cpp",
        "line": 242,
        "column": 0
      },
      "signature": "void MapTile_Box::destroy() {",
      "class_name": "MapTile_Box",
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (11) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "Controller_AI": {
      "name": "Controller_AI",
      "location": {
        "file": "src/Controller_AI.h",
        "line": 8,
        "column": 0
      },
      "signature": "Controller_AI() {}",
      "class_name": null,
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.5,
      "evidence": [
        "Called within same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "send_SERVER_OBSERVER_FLY": {
      "name": "send_SERVER_OBSERVER_FLY",
      "location": {
        "file": "src/Server.h",
        "line": 6,
        "column": 0
      },
      "signature": "void send_SERVER_OBSERVER_FLY(int x, int y, int speed) {}",
      "class_name": null,
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 1 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "send_SERVER_OBJECT_FLY": {
      "name": "send_SERVER_OBJECT_FLY",
      "location": {
        "file": "src/Server.h",
        "line": 7,
        "column": 0
      },
      "signature": "void send_SERVER_OBJECT_FLY(int x, int y, int speed, bool walls, int obj_id) {}",
      "class_name": null,
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 1 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "send_SERVER_OBJECT_FALL": {
      "name": "send_SERVER_OBJECT_FALL",
      "location": {
        "file": "src/Server.h",
        "line": 8,
        "column": 0
      },
      "signature": "void send_SERVER_OBJECT_FALL(int obj_id) {}",
      "class_name": null,
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 1 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "lock": {
      "name": "lock",
      "location": {
        "file": "src/Mutex.h",
        "line": 9,
        "column": 0
      },
      "signature": "void lock() { m.lock(); }",
      "class_name": null,
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 1 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "unlock": {
      "name": "unlock",
      "location": {
        "file": "src/Mutex.h",
        "line": 10,
        "column": 0
      },
      "signature": "void unlock() { m.unlock(); }",
      "class_name": null,
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 1 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "get_name": {
      "name": "get_name",
      "location": {
        "file": "src/BomberComponents.h",
        "line": 193,
        "column": 0
      },
      "signature": "std::string get_name() const { return bomber_name; }",
      "class_name": null,
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (13) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "get_author": {
      "name": "get_author",
      "location": {
        "file": "src/MapEntry.h",
        "line": 37,
        "column": 0
      },
      "signature": "std::string get_author() const { return author; }",
      "class_name": null,
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (3) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "get_max_players": {
      "name": "get_max_players",
      "location": {
        "file": "src/MapEntry.h",
        "line": 38,
        "column": 0
      },
      "signature": "int get_max_players() const { return max_players; }",
      "class_name": null,
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.5,
      "evidence": [
        "Called within same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "is_enabled": {
      "name": "is_enabled",
      "location": {
        "file": "src/MapEntry.h",
        "line": 39,
        "column": 0
      },
      "signature": "bool is_enabled() const { return enabled; }",
      "class_name": null,
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (6) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "enable": {
      "name": "enable",
      "location": {
        "file": "src/MapEntry.h",
        "line": 40,
        "column": 0
      },
      "signature": "void enable() { enabled = true; }",
      "class_name": null,
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 3 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "disable": {
      "name": "disable",
      "location": {
        "file": "src/MapEntry.h",
        "line": 41,
        "column": 0
      },
      "signature": "void disable() { enabled = false; }",
      "class_name": null,
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 3 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "get_current_target": {
      "name": "get_current_target",
      "location": {
        "file": "src/Controller_AI_Smart.h",
        "line": 51,
        "column": 0
      },
      "signature": "CL_Vector get_current_target() const { return current_target; }",
      "class_name": null,
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.5,
      "evidence": [
        "Called within same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "get_current_state": {
      "name": "get_current_state",
      "location": {
        "file": "src/Controller_AI_Smart.h",
        "line": 52,
        "column": 0
      },
      "signature": "std::string get_current_state() const { return current_state_name; }",
      "class_name": null,
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (3) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "update": {
      "name": "update",
      "location": {
        "file": "src/Controller.h",
        "line": 59,
        "column": 0
      },
      "signature": "virtual void update() {};",
      "class_name": null,
      "is_static": false,
      "is_virtual": true,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 1.0,
      "evidence": [
        "Always-used function type"
      ],
      "calls_to": [],
      "called_from": []
    },
    "is_exploded": {
      "name": "is_exploded",
      "location": {
        "file": "src/BomberCorpse.h",
        "line": 20,
        "column": 0
      },
      "signature": "bool is_exploded() const { return exploded; }",
      "class_name": null,
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.5,
      "evidence": [
        "Called within same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "is_blocking": {
      "name": "is_blocking",
      "location": {
        "file": "src/MapTile_Pure.h",
        "line": 36,
        "column": 0
      },
      "signature": "bool is_blocking() const { return blocking; }",
      "class_name": null,
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (10) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "is_destructible": {
      "name": "is_destructible",
      "location": {
        "file": "src/MapTile_Pure.h",
        "line": 37,
        "column": 0
      },
      "signature": "bool is_destructible() const { return destructible; }",
      "class_name": null,
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (7) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "is_burnable": {
      "name": "is_burnable",
      "location": {
        "file": "src/MapTile_Pure.h",
        "line": 38,
        "column": 0
      },
      "signature": "bool is_burnable() const { return destructible; }",
      "class_name": null,
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (6) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "has_bomb": {
      "name": "has_bomb",
      "location": {
        "file": "src/MapTile_Pure.h",
        "line": 49,
        "column": 0
      },
      "signature": "bool has_bomb() const { return bomb != nullptr; }",
      "class_name": null,
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (4) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "has_bomber": {
      "name": "has_bomber",
      "location": {
        "file": "src/MapTile_Pure.h",
        "line": 53,
        "column": 0
      },
      "signature": "bool has_bomber() const { return bomber != nullptr; }",
      "class_name": null,
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (6) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "get_tile_type": {
      "name": "get_tile_type",
      "location": {
        "file": "src/MapTile_Pure.h",
        "line": 64,
        "column": 0
      },
      "signature": "int get_tile_type() const {",
      "class_name": null,
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (5) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "set_bomb": {
      "name": "set_bomb",
      "location": {
        "file": "src/MapTile_Pure.h",
        "line": 47,
        "column": 0
      },
      "signature": "void set_bomb(Bomb* bomb) { this->bomb = bomb; }",
      "class_name": null,
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 1 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "get_bomb": {
      "name": "get_bomb",
      "location": {
        "file": "src/MapTile_Pure.h",
        "line": 48,
        "column": 0
      },
      "signature": "Bomb* get_bomb() const { return bomb; }",
      "class_name": null,
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (8) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "set_bomber": {
      "name": "set_bomber",
      "location": {
        "file": "src/MapTile_Pure.h",
        "line": 51,
        "column": 0
      },
      "signature": "void set_bomber(Bomber* bomber) { this->bomber = bomber; }",
      "class_name": null,
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 1 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "get_bomber": {
      "name": "get_bomber",
      "location": {
        "file": "src/MapTile_Pure.h",
        "line": 52,
        "column": 0
      },
      "signature": "Bomber* get_bomber() const { return bomber; }",
      "class_name": null,
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (4) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "get_tile_data": {
      "name": "get_tile_data",
      "location": {
        "file": "src/TileEntity.h",
        "line": 26,
        "column": 0
      },
      "signature": "MapTile_Pure* get_tile_data() const { return tile_data; }",
      "class_name": null,
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.5,
      "evidence": [
        "Called within same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "get_map_x": {
      "name": "get_map_x",
      "location": {
        "file": "src/TileEntity.h",
        "line": 65,
        "column": 0
      },
      "signature": "int get_map_x() const { return tile_data ? tile_data->get_grid_x() : 0; }",
      "class_name": null,
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (51) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "get_map_y": {
      "name": "get_map_y",
      "location": {
        "file": "src/TileEntity.h",
        "line": 66,
        "column": 0
      },
      "signature": "int get_map_y() const { return tile_data ? tile_data->get_grid_y() : 0; }",
      "class_name": null,
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (51) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "is_destroyed": {
      "name": "is_destroyed",
      "location": {
        "file": "src/TileEntity.h",
        "line": 69,
        "column": 0
      },
      "signature": "bool is_destroyed() const { return destroyed; }",
      "class_name": null,
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.5,
      "evidence": [
        "Called within same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "magnitude": {
      "name": "magnitude",
      "location": {
        "file": "src/CorpsePart.h",
        "line": 14,
        "column": 0
      },
      "signature": "float magnitude() const { return std::sqrt(x*x + y*y); }",
      "class_name": null,
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (3) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "normalized": {
      "name": "normalized",
      "location": {
        "file": "src/CorpsePart.h",
        "line": 15,
        "column": 0
      },
      "signature": "Vector2D normalized() const { float m = magnitude(); return m > 0 ? *this * (1.0f/m) : Vector2D(); }",
      "class_name": null,
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (3) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "get_extra_type": {
      "name": "get_extra_type",
      "location": {
        "file": "src/Extra.h",
        "line": 27,
        "column": 0
      },
      "signature": "EXTRA_TYPE get_extra_type() const { return extra_type; }",
      "class_name": null,
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.5,
      "evidence": [
        "Called within same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "is_collected": {
      "name": "is_collected",
      "location": {
        "file": "src/Extra.h",
        "line": 29,
        "column": 0
      },
      "signature": "bool is_collected() const { return collected; }",
      "class_name": null,
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.5,
      "evidence": [
        "Called within same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "is_finished": {
      "name": "is_finished",
      "location": {
        "file": "src/Controller_AI_Modern.h",
        "line": 49,
        "column": 0
      },
      "signature": "bool is_finished() const { return finished; }",
      "class_name": null,
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.5,
      "evidence": [
        "Called within same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "is_obsolete": {
      "name": "is_obsolete",
      "location": {
        "file": "src/Controller_AI_Modern.h",
        "line": 50,
        "column": 0
      },
      "signature": "bool is_obsolete() const { return obsolete; }",
      "class_name": null,
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.5,
      "evidence": [
        "Called within same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "init": {
      "name": "init",
      "location": {
        "file": "src/Controller_AI_Modern.h",
        "line": 53,
        "column": 0
      },
      "signature": "virtual void init() {}",
      "class_name": null,
      "is_static": false,
      "is_virtual": true,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 1.0,
      "evidence": [
        "Always-used function type"
      ],
      "calls_to": [],
      "called_from": []
    },
    "get_personality": {
      "name": "get_personality",
      "location": {
        "file": "src/Controller_AI_Modern.h",
        "line": 124,
        "column": 0
      },
      "signature": "ModernAIPersonality get_personality() const { return personality; }",
      "class_name": null,
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.5,
      "evidence": [
        "Called within same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "set_paused": {
      "name": "set_paused",
      "location": {
        "file": "src/GameLogic.h",
        "line": 85,
        "column": 0
      },
      "signature": "void set_paused(bool paused) { is_paused = paused; }",
      "class_name": null,
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 1 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "is_game_paused": {
      "name": "is_game_paused",
      "location": {
        "file": "src/GameLogic.h",
        "line": 91,
        "column": 0
      },
      "signature": "bool is_game_paused() const { return is_paused; }",
      "class_name": null,
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.5,
      "evidence": [
        "Called within same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "get_type": {
      "name": "get_type",
      "location": {
        "file": "src/MapTile_Pure.h",
        "line": 35,
        "column": 0
      },
      "signature": "TILE_TYPE get_type() const { return type; }",
      "class_name": null,
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (33) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "get_severity": {
      "name": "get_severity",
      "location": {
        "file": "src/ErrorHandling.h",
        "line": 178,
        "column": 0
      },
      "signature": "ErrorSeverity get_severity() const { return severity; }",
      "class_name": null,
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (5) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "get_context": {
      "name": "get_context",
      "location": {
        "file": "src/ErrorHandling.h",
        "line": 81,
        "column": 0
      },
      "signature": "const std::string& get_context() const { return error_context; }",
      "class_name": null,
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (78) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "success": {
      "name": "success",
      "location": {
        "file": "src/ErrorHandling.h",
        "line": 165,
        "column": 0
      },
      "signature": "static GameResult success() {",
      "class_name": null,
      "is_static": true,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (20) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "is_ok": {
      "name": "is_ok",
      "location": {
        "file": "src/ErrorHandling.h",
        "line": 174,
        "column": 0
      },
      "signature": "bool is_ok() const { return is_success; }",
      "class_name": null,
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.5,
      "evidence": [
        "Called within same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "is_error": {
      "name": "is_error",
      "location": {
        "file": "src/ErrorHandling.h",
        "line": 175,
        "column": 0
      },
      "signature": "bool is_error() const { return !is_success; }",
      "class_name": null,
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.5,
      "evidence": [
        "Called within same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "get_value": {
      "name": "get_value",
      "location": {
        "file": "src/ErrorHandling.h",
        "line": 124,
        "column": 0
      },
      "signature": "T& get_value() {",
      "class_name": null,
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.5,
      "evidence": [
        "Called within same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "get_error_type": {
      "name": "get_error_type",
      "location": {
        "file": "src/ErrorHandling.h",
        "line": 177,
        "column": 0
      },
      "signature": "GameErrorType get_error_type() const { return error_type; }",
      "class_name": null,
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (3) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "get_error_message": {
      "name": "get_error_message",
      "location": {
        "file": "src/ErrorHandling.h",
        "line": 179,
        "column": 0
      },
      "signature": "const std::string& get_error_message() const { return error_message; }",
      "class_name": null,
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (8) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "get_error_context": {
      "name": "get_error_context",
      "location": {
        "file": "src/ErrorHandling.h",
        "line": 180,
        "column": 0
      },
      "signature": "const std::string& get_error_context() const { return error_context; }",
      "class_name": null,
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (6) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "getInstance": {
      "name": "getInstance",
      "location": {
        "file": "src/MemoryManagement.h",
        "line": 127,
        "column": 0
      },
      "signature": "static GameObjectFactory& getInstance() {",
      "class_name": null,
      "is_static": true,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 6 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "set_error_logging": {
      "name": "set_error_logging",
      "location": {
        "file": "src/ErrorHandling.h",
        "line": 225,
        "column": 0
      },
      "signature": "void set_error_logging(bool enabled) { log_errors = enabled; }",
      "class_name": null,
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "unused",
      "confidence": 0.8,
      "evidence": [
        "No calls found"
      ],
      "calls_to": [],
      "called_from": []
    },
    "add_object": {
      "name": "add_object",
      "location": {
        "file": "src/SpatialPartitioning.h",
        "line": 44,
        "column": 0
      },
      "signature": "void add_object(GameObject* obj) {",
      "class_name": null,
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (4) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "remove_object": {
      "name": "remove_object",
      "location": {
        "file": "src/SpatialPartitioning.h",
        "line": 48,
        "column": 0
      },
      "signature": "void remove_object(GameObject* obj) {",
      "class_name": null,
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (3) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "clear": {
      "name": "clear",
      "location": {
        "file": "src/SpatialPartitioning.h",
        "line": 54,
        "column": 0
      },
      "signature": "void clear() {",
      "class_name": null,
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (35) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "object_count": {
      "name": "object_count",
      "location": {
        "file": "src/SpatialPartitioning.h",
        "line": 58,
        "column": 0
      },
      "signature": "size_t object_count() const {",
      "class_name": null,
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (3) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "set_wind": {
      "name": "set_wind",
      "location": {
        "file": "src/GPUAcceleratedRenderer.h",
        "line": 113,
        "column": 0
      },
      "signature": "void set_wind(const float* wind) { if(wind) { wind_force[0] = wind[0]; wind_force[1] = wind[1]; } }",
      "class_name": null,
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "unused",
      "confidence": 0.8,
      "evidence": [
        "No calls found"
      ],
      "calls_to": [],
      "called_from": []
    },
    "enable_debug_overlay": {
      "name": "enable_debug_overlay",
      "location": {
        "file": "src/GPUAcceleratedRenderer.h",
        "line": 120,
        "column": 0
      },
      "signature": "void enable_debug_overlay(bool enable) { debug_overlay = enable; }",
      "class_name": null,
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "unused",
      "confidence": 0.8,
      "evidence": [
        "No calls found"
      ],
      "calls_to": [],
      "called_from": []
    },
    "is_ready": {
      "name": "is_ready",
      "location": {
        "file": "src/RenderingFacade.h",
        "line": 98,
        "column": 0
      },
      "signature": "bool is_ready() const { return initialized; }",
      "class_name": null,
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.5,
      "evidence": [
        "Called within same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "get_config": {
      "name": "get_config",
      "location": {
        "file": "src/RenderingFacade.h",
        "line": 214,
        "column": 0
      },
      "signature": "const RenderingConfig& get_config() const { return config; }",
      "class_name": null,
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.5,
      "evidence": [
        "Called within same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "get_frame_statistics": {
      "name": "get_frame_statistics",
      "location": {
        "file": "src/RenderingFacade.h",
        "line": 226,
        "column": 0
      },
      "signature": "const RenderingStats& get_frame_statistics() const { return stats; }",
      "class_name": null,
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.5,
      "evidence": [
        "Called within same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "get_gpu_renderer": {
      "name": "get_gpu_renderer",
      "location": {
        "file": "src/RenderingFacade.h",
        "line": 267,
        "column": 0
      },
      "signature": "GPUAcceleratedRenderer* get_gpu_renderer() const {",
      "class_name": null,
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (6) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "set_game_context": {
      "name": "set_game_context",
      "location": {
        "file": "src/LifecycleManager.h",
        "line": 54,
        "column": 0
      },
      "signature": "void set_game_context(GameContext* context) { game_context = context; }",
      "class_name": null,
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 1 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "get_object_lists": {
      "name": "get_object_lists",
      "location": {
        "file": "src/GameContext.h",
        "line": 39,
        "column": 0
      },
      "signature": "const std::list<GameObject*>& get_object_lists() const {",
      "class_name": null,
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (8) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "get_lifecycle_manager": {
      "name": "get_lifecycle_manager",
      "location": {
        "file": "src/GameContext.h",
        "line": 48,
        "column": 0
      },
      "signature": "LifecycleManager* get_lifecycle_manager() const { return lifecycle_manager; }",
      "class_name": null,
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (15) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "get_tile_manager": {
      "name": "get_tile_manager",
      "location": {
        "file": "src/GameContext.h",
        "line": 49,
        "column": 0
      },
      "signature": "TileManager* get_tile_manager() const { return tile_manager; }",
      "class_name": null,
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (10) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "get_particle_effects": {
      "name": "get_particle_effects",
      "location": {
        "file": "src/GameContext.h",
        "line": 50,
        "column": 0
      },
      "signature": "ParticleEffectsManager* get_particle_effects() const { return particle_effects; }",
      "class_name": null,
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.5,
      "evidence": [
        "Called within same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "get_map": {
      "name": "get_map",
      "location": {
        "file": "src/GameContext.h",
        "line": 51,
        "column": 0
      },
      "signature": "Map* get_map() const { return map; }",
      "class_name": null,
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (32) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "get_renderer": {
      "name": "get_renderer",
      "location": {
        "file": "src/GameContext.h",
        "line": 52,
        "column": 0
      },
      "signature": "GPUAcceleratedRenderer* get_renderer() const { return nullptr; } // REMOVED: Legacy renderer",
      "class_name": null,
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (10) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "get_text_renderer": {
      "name": "get_text_renderer",
      "location": {
        "file": "src/GameContext.h",
        "line": 53,
        "column": 0
      },
      "signature": "TextRenderer* get_text_renderer() const { return text_renderer; }",
      "class_name": null,
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.5,
      "evidence": [
        "Called within same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "get_spatial_grid": {
      "name": "get_spatial_grid",
      "location": {
        "file": "src/GameContext.h",
        "line": 54,
        "column": 0
      },
      "signature": "SpatialGrid* get_spatial_grid() const { return spatial_grid; }",
      "class_name": null,
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (10) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "get_rendering_facade": {
      "name": "get_rendering_facade",
      "location": {
        "file": "src/GameContext.h",
        "line": 55,
        "column": 0
      },
      "signature": "RenderingFacade* get_rendering_facade() const { return rendering_facade; }",
      "class_name": null,
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (10) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "get_color": {
      "name": "get_color",
      "location": {
        "file": "src/Bomber.h",
        "line": 43,
        "column": 0
      },
      "signature": "COLOR get_color() const { return color; }",
      "class_name": null,
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (3) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "get_controller": {
      "name": "get_controller",
      "location": {
        "file": "src/Bomber.h",
        "line": 77,
        "column": 0
      },
      "signature": "Controller* get_controller() { return controller; }",
      "class_name": null,
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 5 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "set_speed": {
      "name": "set_speed",
      "location": {
        "file": "src/BomberComponents.h",
        "line": 35,
        "column": 0
      },
      "signature": "void set_speed(int new_speed) { speed = new_speed; }",
      "class_name": null,
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 4 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "get_speed": {
      "name": "get_speed",
      "location": {
        "file": "src/BomberComponents.h",
        "line": 36,
        "column": 0
      },
      "signature": "int get_speed() const { return speed; }",
      "class_name": null,
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (7) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "is_flying": {
      "name": "is_flying",
      "location": {
        "file": "src/BomberComponents.h",
        "line": 40,
        "column": 0
      },
      "signature": "bool is_flying() const { return flying; }",
      "class_name": null,
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (3) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "get_power": {
      "name": "get_power",
      "location": {
        "file": "src/BomberComponents.h",
        "line": 80,
        "column": 0
      },
      "signature": "int get_power() const { return power; }",
      "class_name": null,
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (8) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "set_power": {
      "name": "set_power",
      "location": {
        "file": "src/BomberComponents.h",
        "line": 81,
        "column": 0
      },
      "signature": "void set_power(int new_power) { power = new_power; }",
      "class_name": null,
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 2 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "inc_power": {
      "name": "inc_power",
      "location": {
        "file": "src/BomberComponents.h",
        "line": 82,
        "column": 0
      },
      "signature": "void inc_power(int amount) { power += amount; }",
      "class_name": null,
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 3 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "get_max_bombs": {
      "name": "get_max_bombs",
      "location": {
        "file": "src/BomberComponents.h",
        "line": 85,
        "column": 0
      },
      "signature": "int get_max_bombs() const { return max_bombs; }",
      "class_name": null,
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (10) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "set_max_bombs": {
      "name": "set_max_bombs",
      "location": {
        "file": "src/BomberComponents.h",
        "line": 86,
        "column": 0
      },
      "signature": "void set_max_bombs(int bombs) { max_bombs = bombs; }",
      "class_name": null,
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 2 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "inc_max_bombs": {
      "name": "inc_max_bombs",
      "location": {
        "file": "src/BomberComponents.h",
        "line": 87,
        "column": 0
      },
      "signature": "void inc_max_bombs(int amount) { max_bombs += amount; }",
      "class_name": null,
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 3 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "get_current_bombs": {
      "name": "get_current_bombs",
      "location": {
        "file": "src/BomberComponents.h",
        "line": 89,
        "column": 0
      },
      "signature": "int get_current_bombs() const { return current_bombs; }",
      "class_name": null,
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (5) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "inc_current_bombs": {
      "name": "inc_current_bombs",
      "location": {
        "file": "src/BomberComponents.h",
        "line": 90,
        "column": 0
      },
      "signature": "void inc_current_bombs() { current_bombs++; }",
      "class_name": null,
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 3 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "dec_current_bombs": {
      "name": "dec_current_bombs",
      "location": {
        "file": "src/BomberComponents.h",
        "line": 91,
        "column": 0
      },
      "signature": "void dec_current_bombs() { if (current_bombs > 0) current_bombs--; }",
      "class_name": null,
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 3 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "is_dead": {
      "name": "is_dead",
      "location": {
        "file": "src/BomberComponents.h",
        "line": 99,
        "column": 0
      },
      "signature": "bool is_dead() const { return dead; }",
      "class_name": null,
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (6) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "set_invincible": {
      "name": "set_invincible",
      "location": {
        "file": "src/BomberComponents.h",
        "line": 147,
        "column": 0
      },
      "signature": "void set_invincible(bool inv) { invincible = inv; }",
      "class_name": null,
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 2 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "is_invincible": {
      "name": "is_invincible",
      "location": {
        "file": "src/BomberComponents.h",
        "line": 148,
        "column": 0
      },
      "signature": "bool is_invincible() const { return invincible; }",
      "class_name": null,
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (4) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "set_lives": {
      "name": "set_lives",
      "location": {
        "file": "src/BomberComponents.h",
        "line": 180,
        "column": 0
      },
      "signature": "void set_lives(int lives) { remaining_lives = lives; }",
      "class_name": null,
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 3 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "get_lives": {
      "name": "get_lives",
      "location": {
        "file": "src/BomberComponents.h",
        "line": 181,
        "column": 0
      },
      "signature": "int get_lives() const { return remaining_lives; }",
      "class_name": null,
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (4) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "lose_life": {
      "name": "lose_life",
      "location": {
        "file": "src/BomberComponents.h",
        "line": 182,
        "column": 0
      },
      "signature": "void lose_life() { if (remaining_lives > 0) remaining_lives--; }",
      "class_name": null,
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 2 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "has_lives": {
      "name": "has_lives",
      "location": {
        "file": "src/BomberComponents.h",
        "line": 183,
        "column": 0
      },
      "signature": "bool has_lives() const { return remaining_lives > 0; }",
      "class_name": null,
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (5) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "is_respawning": {
      "name": "is_respawning",
      "location": {
        "file": "src/BomberComponents.h",
        "line": 187,
        "column": 0
      },
      "signature": "bool is_respawning() const { return respawning; }",
      "class_name": null,
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (4) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "set_team": {
      "name": "set_team",
      "location": {
        "file": "src/BomberComponents.h",
        "line": 190,
        "column": 0
      },
      "signature": "void set_team(int team) { bomber_team = team; }",
      "class_name": null,
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 5 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "get_team": {
      "name": "get_team",
      "location": {
        "file": "src/BomberComponents.h",
        "line": 191,
        "column": 0
      },
      "signature": "int get_team() const { return bomber_team; }",
      "class_name": null,
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (12) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "set_name": {
      "name": "set_name",
      "location": {
        "file": "src/BomberComponents.h",
        "line": 192,
        "column": 0
      },
      "signature": "void set_name(const std::string& name) { bomber_name = name; }",
      "class_name": null,
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 5 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "set_number": {
      "name": "set_number",
      "location": {
        "file": "src/BomberComponents.h",
        "line": 194,
        "column": 0
      },
      "signature": "void set_number(int number) { bomber_number = number; }",
      "class_name": null,
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 3 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "get_number": {
      "name": "get_number",
      "location": {
        "file": "src/BomberComponents.h",
        "line": 195,
        "column": 0
      },
      "signature": "int get_number() const { return bomber_number; }",
      "class_name": null,
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (4) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "get_grid_x": {
      "name": "get_grid_x",
      "location": {
        "file": "src/MapTile_Pure.h",
        "line": 41,
        "column": 0
      },
      "signature": "int get_grid_x() const { return grid_x; }",
      "class_name": null,
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (3) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "get_grid_y": {
      "name": "get_grid_y",
      "location": {
        "file": "src/MapTile_Pure.h",
        "line": 42,
        "column": 0
      },
      "signature": "int get_grid_y() const { return grid_y; }",
      "class_name": null,
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (3) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "get_pixel_x": {
      "name": "get_pixel_x",
      "location": {
        "file": "src/MapTile_Pure.h",
        "line": 43,
        "column": 0
      },
      "signature": "int get_pixel_x() const { return grid_x * 40; }",
      "class_name": null,
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.5,
      "evidence": [
        "Called within same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "get_pixel_y": {
      "name": "get_pixel_y",
      "location": {
        "file": "src/MapTile_Pure.h",
        "line": 44,
        "column": 0
      },
      "signature": "int get_pixel_y() const { return grid_y * 40; }",
      "class_name": null,
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.5,
      "evidence": [
        "Called within same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "get_sprite_number": {
      "name": "get_sprite_number",
      "location": {
        "file": "src/MapTile_Pure.h",
        "line": 56,
        "column": 0
      },
      "signature": "int get_sprite_number() const { return sprite_nr; }",
      "class_name": null,
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.5,
      "evidence": [
        "Called within same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "set_sprite_number": {
      "name": "set_sprite_number",
      "location": {
        "file": "src/MapTile_Pure.h",
        "line": 57,
        "column": 0
      },
      "signature": "void set_sprite_number(int sprite) { sprite_nr = sprite; }",
      "class_name": null,
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "unused",
      "confidence": 0.8,
      "evidence": [
        "No calls found"
      ],
      "calls_to": [],
      "called_from": []
    },
    "can_be_destroyed": {
      "name": "can_be_destroyed",
      "location": {
        "file": "src/MapTile_Pure.h",
        "line": 60,
        "column": 0
      },
      "signature": "virtual bool can_be_destroyed() const { return destructible; }",
      "class_name": null,
      "is_static": false,
      "is_virtual": true,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 1.0,
      "evidence": [
        "Always-used function type"
      ],
      "calls_to": [],
      "called_from": []
    },
    "on_destruction_request": {
      "name": "on_destruction_request",
      "location": {
        "file": "src/MapTile_Pure.h",
        "line": 61,
        "column": 0
      },
      "signature": "virtual void on_destruction_request() {} // Override en subclases",
      "class_name": null,
      "is_static": false,
      "is_virtual": true,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 1.0,
      "evidence": [
        "Always-used function type"
      ],
      "calls_to": [],
      "called_from": []
    },
    "to_string": {
      "name": "to_string",
      "location": {
        "file": "src/CoordinateSystem.h",
        "line": 80,
        "column": 0
      },
      "signature": "std::string to_string() const {",
      "class_name": null,
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (18) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "is_valid": {
      "name": "is_valid",
      "location": {
        "file": "src/CoordinateSystem.h",
        "line": 53,
        "column": 0
      },
      "signature": "bool is_valid() const {",
      "class_name": null,
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.5,
      "evidence": [
        "Called within same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "distance_to": {
      "name": "distance_to",
      "location": {
        "file": "src/CoordinateSystem.h",
        "line": 87,
        "column": 0
      },
      "signature": "float distance_to(const PixelCoord& other) const {",
      "class_name": null,
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.5,
      "evidence": [
        "Called within same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "manhattan_distance_to": {
      "name": "manhattan_distance_to",
      "location": {
        "file": "src/CoordinateSystem.h",
        "line": 96,
        "column": 0
      },
      "signature": "float manhattan_distance_to(const PixelCoord& other) const {",
      "class_name": null,
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.5,
      "evidence": [
        "Called within same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "grid_to_pixel": {
      "name": "grid_to_pixel",
      "location": {
        "file": "src/CoordinateSystem.h",
        "line": 113,
        "column": 0
      },
      "signature": "static PixelCoord grid_to_pixel(const GridCoord& grid) {",
      "class_name": null,
      "is_static": true,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (18) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "pixel_to_grid": {
      "name": "pixel_to_grid",
      "location": {
        "file": "src/CoordinateSystem.h",
        "line": 126,
        "column": 0
      },
      "signature": "static GridCoord pixel_to_grid(const PixelCoord& pixel) {",
      "class_name": null,
      "is_static": true,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (29) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "grid_to_pixel_corner": {
      "name": "grid_to_pixel_corner",
      "location": {
        "file": "src/CoordinateSystem.h",
        "line": 137,
        "column": 0
      },
      "signature": "static PixelCoord grid_to_pixel_corner(const GridCoord& grid) {",
      "class_name": null,
      "is_static": true,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.5,
      "evidence": [
        "Called within same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "is_grid_valid": {
      "name": "is_grid_valid",
      "location": {
        "file": "src/CoordinateSystem.h",
        "line": 148,
        "column": 0
      },
      "signature": "static bool is_grid_valid(const GridCoord& grid) {",
      "class_name": null,
      "is_static": true,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.5,
      "evidence": [
        "Called within same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "is_pixel_in_map_bounds": {
      "name": "is_pixel_in_map_bounds",
      "location": {
        "file": "src/CoordinateSystem.h",
        "line": 155,
        "column": 0
      },
      "signature": "static bool is_pixel_in_map_bounds(const PixelCoord& pixel) {",
      "class_name": null,
      "is_static": true,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "unused",
      "confidence": 0.8,
      "evidence": [
        "No calls found"
      ],
      "calls_to": [],
      "called_from": []
    },
    "clamp_grid": {
      "name": "clamp_grid",
      "location": {
        "file": "src/CoordinateSystem.h",
        "line": 163,
        "column": 0
      },
      "signature": "static GridCoord clamp_grid(const GridCoord& grid) {",
      "class_name": null,
      "is_static": true,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "unused",
      "confidence": 0.8,
      "evidence": [
        "No calls found"
      ],
      "calls_to": [],
      "called_from": []
    },
    "grid_distance": {
      "name": "grid_distance",
      "location": {
        "file": "src/CoordinateSystem.h",
        "line": 174,
        "column": 0
      },
      "signature": "static float grid_distance(const GridCoord& a, const GridCoord& b) {",
      "class_name": null,
      "is_static": true,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 1 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "grid_manhattan_distance": {
      "name": "grid_manhattan_distance",
      "location": {
        "file": "src/CoordinateSystem.h",
        "line": 183,
        "column": 0
      },
      "signature": "static int grid_manhattan_distance(const GridCoord& a, const GridCoord& b) {",
      "class_name": null,
      "is_static": true,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.5,
      "evidence": [
        "Called within same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "are_grid_adjacent": {
      "name": "are_grid_adjacent",
      "location": {
        "file": "src/CoordinateSystem.h",
        "line": 190,
        "column": 0
      },
      "signature": "static bool are_grid_adjacent(const GridCoord& a, const GridCoord& b) {",
      "class_name": null,
      "is_static": true,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "unused",
      "confidence": 0.8,
      "evidence": [
        "No calls found"
      ],
      "calls_to": [],
      "called_from": []
    },
    "get_grid_area_manhattan": {
      "name": "get_grid_area_manhattan",
      "location": {
        "file": "src/CoordinateSystem.h",
        "line": 202,
        "column": 0
      },
      "signature": "static std::vector<GridCoord> get_grid_area_manhattan(const GridCoord& center, int radius) {",
      "class_name": null,
      "is_static": true,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "unused",
      "confidence": 0.8,
      "evidence": [
        "No calls found"
      ],
      "calls_to": [],
      "called_from": []
    },
    "get_grid_area_circular": {
      "name": "get_grid_area_circular",
      "location": {
        "file": "src/CoordinateSystem.h",
        "line": 222,
        "column": 0
      },
      "signature": "static std::vector<GridCoord> get_grid_area_circular(const GridCoord& center, float radius) {",
      "class_name": null,
      "is_static": true,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "unused",
      "confidence": 0.8,
      "evidence": [
        "No calls found"
      ],
      "calls_to": [],
      "called_from": []
    },
    "legacy_to_pixel": {
      "name": "legacy_to_pixel",
      "location": {
        "file": "src/CoordinateSystem.h",
        "line": 247,
        "column": 0
      },
      "signature": "static PixelCoord legacy_to_pixel(int x, int y) {",
      "class_name": null,
      "is_static": true,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "unused",
      "confidence": 0.8,
      "evidence": [
        "No calls found"
      ],
      "calls_to": [],
      "called_from": []
    },
    "pixel_to_legacy": {
      "name": "pixel_to_legacy",
      "location": {
        "file": "src/CoordinateSystem.h",
        "line": 254,
        "column": 0
      },
      "signature": "static void pixel_to_legacy(const PixelCoord& pixel, int& x, int& y) {",
      "class_name": null,
      "is_static": true,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "unused",
      "confidence": 0.8,
      "evidence": [
        "No calls found"
      ],
      "calls_to": [],
      "called_from": []
    },
    "debug_conversion": {
      "name": "debug_conversion",
      "location": {
        "file": "src/CoordinateSystem.h",
        "line": 264,
        "column": 0
      },
      "signature": "static std::string debug_conversion(const GridCoord& grid) {",
      "class_name": null,
      "is_static": true,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "unused",
      "confidence": 0.8,
      "evidence": [
        "No calls found"
      ],
      "calls_to": [],
      "called_from": []
    },
    "get_listener_position": {
      "name": "get_listener_position",
      "location": {
        "file": "src/AudioMixer.h",
        "line": 44,
        "column": 0
      },
      "signature": "static AudioPosition get_listener_position() { return listener_pos; }",
      "class_name": null,
      "is_static": true,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 1 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "pixel_to_map_x": {
      "name": "pixel_to_map_x",
      "location": {
        "file": "src/GameObject.h",
        "line": 148,
        "column": 0
      },
      "signature": "int pixel_to_map_x(int pixel_x) const {",
      "class_name": null,
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.5,
      "evidence": [
        "Called within same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "pixel_to_map_y": {
      "name": "pixel_to_map_y",
      "location": {
        "file": "src/GameObject.h",
        "line": 151,
        "column": 0
      },
      "signature": "int pixel_to_map_y(int pixel_y) const {",
      "class_name": null,
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.5,
      "evidence": [
        "Called within same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "map_to_pixel_x": {
      "name": "map_to_pixel_x",
      "location": {
        "file": "src/GameObject.h",
        "line": 154,
        "column": 0
      },
      "signature": "int map_to_pixel_x(int map_x) const {",
      "class_name": null,
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.5,
      "evidence": [
        "Called within same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "map_to_pixel_y": {
      "name": "map_to_pixel_y",
      "location": {
        "file": "src/GameObject.h",
        "line": 157,
        "column": 0
      },
      "signature": "int map_to_pixel_y(int map_y) const {",
      "class_name": null,
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.5,
      "evidence": [
        "Called within same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "get_center_map_x": {
      "name": "get_center_map_x",
      "location": {
        "file": "src/GameObject.h",
        "line": 162,
        "column": 0
      },
      "signature": "int get_center_map_x() const {",
      "class_name": null,
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.5,
      "evidence": [
        "Called within same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "get_center_map_y": {
      "name": "get_center_map_y",
      "location": {
        "file": "src/GameObject.h",
        "line": 165,
        "column": 0
      },
      "signature": "int get_center_map_y() const {",
      "class_name": null,
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.5,
      "evidence": [
        "Called within same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "reset_for_pool": {
      "name": "reset_for_pool",
      "location": {
        "file": "src/GameObject.h",
        "line": 207,
        "column": 0
      },
      "signature": "virtual void\t\treset_for_pool() {}",
      "class_name": null,
      "is_static": false,
      "is_virtual": true,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 1.0,
      "evidence": [
        "Always-used function type"
      ],
      "calls_to": [],
      "called_from": []
    },
    "set_texture_name": {
      "name": "set_texture_name",
      "location": {
        "file": "src/GameObject.h",
        "line": 229,
        "column": 0
      },
      "signature": "void set_texture_name(const std::string& name) { texture_name = name; }",
      "class_name": null,
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 1 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "set_sprite_nr": {
      "name": "set_sprite_nr",
      "location": {
        "file": "src/GameObject.h",
        "line": 230,
        "column": 0
      },
      "signature": "void set_sprite_nr(int nr) { sprite_nr = nr; }",
      "class_name": null,
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 1 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "get_sprite_nr": {
      "name": "get_sprite_nr",
      "location": {
        "file": "src/GameObject.h",
        "line": 231,
        "column": 0
      },
      "signature": "int get_sprite_nr() const { return sprite_nr; }",
      "class_name": null,
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.5,
      "evidence": [
        "Called within same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "ObjectPool": {
      "name": "ObjectPool",
      "location": {
        "file": "src/MemoryManagement.h",
        "line": 82,
        "column": 0
      },
      "signature": "explicit ObjectPool(size_t initial_size = 50) {",
      "class_name": null,
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "unused",
      "confidence": 0.8,
      "evidence": [
        "No calls found"
      ],
      "calls_to": [],
      "called_from": []
    },
    "acquire": {
      "name": "acquire",
      "location": {
        "file": "src/MemoryManagement.h",
        "line": 92,
        "column": 0
      },
      "signature": "UniquePtr<T> acquire() {",
      "class_name": null,
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "unused",
      "confidence": 0.8,
      "evidence": [
        "No calls found"
      ],
      "calls_to": [],
      "called_from": []
    },
    "release": {
      "name": "release",
      "location": {
        "file": "src/MemoryManagement.h",
        "line": 258,
        "column": 0
      },
      "signature": "UniquePtr<T> release() {",
      "class_name": null,
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.5,
      "evidence": [
        "Called within same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "constexpr": {
      "name": "constexpr",
      "location": {
        "file": "src/MemoryManagement.h",
        "line": 107,
        "column": 0
      },
      "signature": "if constexpr (std::is_base_of_v<GameObject, T>) {",
      "class_name": null,
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "unused",
      "confidence": 0.8,
      "evidence": [
        "No calls found"
      ],
      "calls_to": [],
      "called_from": []
    },
    "size": {
      "name": "size",
      "location": {
        "file": "src/MemoryManagement.h",
        "line": 114,
        "column": 0
      },
      "signature": "size_t size() const { return pool.size(); }",
      "class_name": null,
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (30) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "set_max_size": {
      "name": "set_max_size",
      "location": {
        "file": "src/MemoryManagement.h",
        "line": 115,
        "column": 0
      },
      "signature": "void set_max_size(size_t size) { max_size = size; }",
      "class_name": null,
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "unused",
      "confidence": 0.8,
      "evidence": [
        "No calls found"
      ],
      "calls_to": [],
      "called_from": []
    },
    "create_unique": {
      "name": "create_unique",
      "location": {
        "file": "src/MemoryManagement.h",
        "line": 136,
        "column": 0
      },
      "signature": "UniquePtr<T> create_unique(Args&&... args) {",
      "class_name": null,
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "unused",
      "confidence": 0.8,
      "evidence": [
        "No calls found"
      ],
      "calls_to": [],
      "called_from": []
    },
    "create_shared": {
      "name": "create_shared",
      "location": {
        "file": "src/MemoryManagement.h",
        "line": 142,
        "column": 0
      },
      "signature": "SharedPtr<T> create_shared(Args&&... args) {",
      "class_name": null,
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "unused",
      "confidence": 0.8,
      "evidence": [
        "No calls found"
      ],
      "calls_to": [],
      "called_from": []
    },
    "create_particle_system": {
      "name": "create_particle_system",
      "location": {
        "file": "src/MemoryManagement.h",
        "line": 152,
        "column": 0
      },
      "signature": "class ParticleSystem* create_particle_system(int x, int y, ParticleType type, GameContext* context, Args&&... args) {",
      "class_name": null,
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.9,
      "evidence": [
        "Called from 5 external files"
      ],
      "calls_to": [],
      "called_from": []
    },
    "get": {
      "name": "get",
      "location": {
        "file": "src/MemoryManagement.h",
        "line": 254,
        "column": 0
      },
      "signature": "T* get() const { return object_.get(); }",
      "class_name": null,
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "used",
      "confidence": 0.7,
      "evidence": [
        "Multiple calls (9) in same file"
      ],
      "calls_to": [],
      "called_from": []
    },
    "bool": {
      "name": "bool",
      "location": {
        "file": "src/MemoryManagement.h",
        "line": 218,
        "column": 0
      },
      "signature": "explicit operator bool() const { return resource_ != nullptr; }",
      "class_name": null,
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": false,
      "status": "unused",
      "confidence": 0.8,
      "evidence": [
        "No calls found"
      ],
      "calls_to": [],
      "called_from": []
    },
    "get_ownership_guideline": {
      "name": "get_ownership_guideline",
      "location": {
        "file": "src/MemoryManagement.h",
        "line": 295,
        "column": 0
      },
      "signature": "inline std::string get_ownership_guideline(const std::string& object_type) {",
      "class_name": null,
      "is_static": false,
      "is_virtual": false,
      "is_constructor": false,
      "is_destructor": false,
      "is_inline": true,
      "status": "unused",
      "confidence": 0.8,
      "evidence": [
        "No calls found"
      ],
      "calls_to": [],
      "called_from": []
    }
  },
  "function_calls": [
    {
      "caller_function": "t",
      "called_function": "SDL_GetPerformanceFrequency",
      "location": {
        "file": "src/Timer.cpp",
        "line": 9,
        "column": 0
      },
      "context": "performance_frequency = SDL_GetPerformanceFrequency();"
    },
    {
      "caller_function": "t",
      "called_function": "SDL_GetPerformanceCounter",
      "location": {
        "file": "src/Timer.cpp",
        "line": 10,
        "column": 0
      },
      "context": "last_tick = SDL_GetPerformanceCounter();"
    },
    {
      "caller_function": "k",
      "called_function": "SDL_GetPerformanceCounter",
      "location": {
        "file": "src/Timer.cpp",
        "line": 14,
        "column": 0
      },
      "context": "Uint64 current_tick = SDL_GetPerformanceCounter();"
    },
    {
      "caller_function": "y",
      "called_function": "path",
      "location": {
        "file": "src/MapEntry.cpp",
        "line": 29,
        "column": 0
      },
      "context": "std::filesystem::path path(filename);"
    },
    {
      "caller_function": "y",
      "called_function": "stem",
      "location": {
        "file": "src/MapEntry.cpp",
        "line": 30,
        "column": 0
      },
      "context": "name = path.stem().string();"
    },
    {
      "caller_function": "y",
      "called_function": "string",
      "location": {
        "file": "src/MapEntry.cpp",
        "line": 30,
        "column": 0
      },
      "context": "name = path.stem().string();"
    },
    {
      "caller_function": "r",
      "called_function": "MapEntry",
      "location": {
        "file": "src/MapEntry.cpp",
        "line": 41,
        "column": 0
      },
      "context": "MapEntry::~MapEntry() {"
    },
    {
      "caller_function": "d",
      "called_function": "file",
      "location": {
        "file": "src/MapEntry.cpp",
        "line": 45,
        "column": 0
      },
      "context": "std::ifstream file(filename);"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/MapEntry.cpp",
        "line": 47,
        "column": 0
      },
      "context": "SDL_Log(\"Failed to open map file: %s\", filename.c_str());"
    },
    {
      "caller_function": "f",
      "called_function": "c_str",
      "location": {
        "file": "src/MapEntry.cpp",
        "line": 47,
        "column": 0
      },
      "context": "SDL_Log(\"Failed to open map file: %s\", filename.c_str());"
    },
    {
      "caller_function": "f",
      "called_function": "std::stoi",
      "location": {
        "file": "src/MapEntry.cpp",
        "line": 62,
        "column": 0
      },
      "context": "max_players = std::stoi(line);"
    },
    {
      "caller_function": "f",
      "called_function": "stoi",
      "location": {
        "file": "src/MapEntry.cpp",
        "line": 62,
        "column": 0
      },
      "context": "max_players = std::stoi(line);"
    },
    {
      "caller_function": "r",
      "called_function": "close",
      "location": {
        "file": "src/MapEntry.cpp",
        "line": 76,
        "column": 0
      },
      "context": "file.close();"
    },
    {
      "caller_function": "r",
      "called_function": "read_bomber_positions",
      "location": {
        "file": "src/MapEntry.cpp",
        "line": 79,
        "column": 0
      },
      "context": "read_bomber_positions();"
    },
    {
      "caller_function": "r",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/MapEntry.cpp",
        "line": 81,
        "column": 0
      },
      "context": "SDL_Log(\"Loaded map: %s by %s (max %d players)\", name.c_str(), author.c_str(), max_players);"
    },
    {
      "caller_function": "r",
      "called_function": "c_str",
      "location": {
        "file": "src/MapEntry.cpp",
        "line": 81,
        "column": 0
      },
      "context": "SDL_Log(\"Loaded map: %s by %s (max %d players)\", name.c_str(), author.c_str(), max_players);"
    },
    {
      "caller_function": "r",
      "called_function": "c_str",
      "location": {
        "file": "src/MapEntry.cpp",
        "line": 81,
        "column": 0
      },
      "context": "SDL_Log(\"Loaded map: %s by %s (max %d players)\", name.c_str(), author.c_str(), max_players);"
    },
    {
      "caller_function": "s",
      "called_function": "clear",
      "location": {
        "file": "src/MapEntry.cpp",
        "line": 93,
        "column": 0
      },
      "context": "bomber_positions.clear();"
    },
    {
      "caller_function": "f",
      "called_function": "push_back",
      "location": {
        "file": "src/MapEntry.cpp",
        "line": 100,
        "column": 0
      },
      "context": "bomber_positions.push_back(CL_Vector(x, y));"
    },
    {
      "caller_function": "f",
      "called_function": "CL_Vector",
      "location": {
        "file": "src/MapEntry.cpp",
        "line": 100,
        "column": 0
      },
      "context": "bomber_positions.push_back(CL_Vector(x, y));"
    },
    {
      "caller_function": "f",
      "called_function": "push_back",
      "location": {
        "file": "src/MapEntry.cpp",
        "line": 107,
        "column": 0
      },
      "context": "bomber_positions.push_back(CL_Vector(2, 2));   // Top-left"
    },
    {
      "caller_function": "f",
      "called_function": "CL_Vector",
      "location": {
        "file": "src/MapEntry.cpp",
        "line": 107,
        "column": 0
      },
      "context": "bomber_positions.push_back(CL_Vector(2, 2));   // Top-left"
    },
    {
      "caller_function": "f",
      "called_function": "push_back",
      "location": {
        "file": "src/MapEntry.cpp",
        "line": 108,
        "column": 0
      },
      "context": "bomber_positions.push_back(CL_Vector(17, 2));  // Top-right"
    },
    {
      "caller_function": "f",
      "called_function": "CL_Vector",
      "location": {
        "file": "src/MapEntry.cpp",
        "line": 108,
        "column": 0
      },
      "context": "bomber_positions.push_back(CL_Vector(17, 2));  // Top-right"
    },
    {
      "caller_function": "f",
      "called_function": "push_back",
      "location": {
        "file": "src/MapEntry.cpp",
        "line": 109,
        "column": 0
      },
      "context": "bomber_positions.push_back(CL_Vector(2, 12));  // Bottom-left"
    },
    {
      "caller_function": "f",
      "called_function": "CL_Vector",
      "location": {
        "file": "src/MapEntry.cpp",
        "line": 109,
        "column": 0
      },
      "context": "bomber_positions.push_back(CL_Vector(2, 12));  // Bottom-left"
    },
    {
      "caller_function": "f",
      "called_function": "push_back",
      "location": {
        "file": "src/MapEntry.cpp",
        "line": 110,
        "column": 0
      },
      "context": "bomber_positions.push_back(CL_Vector(17, 12)); // Bottom-right"
    },
    {
      "caller_function": "f",
      "called_function": "CL_Vector",
      "location": {
        "file": "src/MapEntry.cpp",
        "line": 110,
        "column": 0
      },
      "context": "bomber_positions.push_back(CL_Vector(17, 12)); // Bottom-right"
    },
    {
      "caller_function": "f",
      "called_function": "push_back",
      "location": {
        "file": "src/MapEntry.cpp",
        "line": 111,
        "column": 0
      },
      "context": "bomber_positions.push_back(CL_Vector(9, 2));   // Top-center"
    },
    {
      "caller_function": "f",
      "called_function": "CL_Vector",
      "location": {
        "file": "src/MapEntry.cpp",
        "line": 111,
        "column": 0
      },
      "context": "bomber_positions.push_back(CL_Vector(9, 2));   // Top-center"
    },
    {
      "caller_function": "f",
      "called_function": "push_back",
      "location": {
        "file": "src/MapEntry.cpp",
        "line": 112,
        "column": 0
      },
      "context": "bomber_positions.push_back(CL_Vector(9, 12));  // Bottom-center"
    },
    {
      "caller_function": "f",
      "called_function": "CL_Vector",
      "location": {
        "file": "src/MapEntry.cpp",
        "line": 112,
        "column": 0
      },
      "context": "bomber_positions.push_back(CL_Vector(9, 12));  // Bottom-center"
    },
    {
      "caller_function": "f",
      "called_function": "push_back",
      "location": {
        "file": "src/MapEntry.cpp",
        "line": 113,
        "column": 0
      },
      "context": "bomber_positions.push_back(CL_Vector(2, 7));   // Left-center"
    },
    {
      "caller_function": "f",
      "called_function": "CL_Vector",
      "location": {
        "file": "src/MapEntry.cpp",
        "line": 113,
        "column": 0
      },
      "context": "bomber_positions.push_back(CL_Vector(2, 7));   // Left-center"
    },
    {
      "caller_function": "f",
      "called_function": "push_back",
      "location": {
        "file": "src/MapEntry.cpp",
        "line": 114,
        "column": 0
      },
      "context": "bomber_positions.push_back(CL_Vector(17, 7));  // Right-center"
    },
    {
      "caller_function": "f",
      "called_function": "CL_Vector",
      "location": {
        "file": "src/MapEntry.cpp",
        "line": 114,
        "column": 0
      },
      "context": "bomber_positions.push_back(CL_Vector(17, 7));  // Right-center"
    },
    {
      "caller_function": "f",
      "called_function": "CL_Vector",
      "location": {
        "file": "src/MapEntry.cpp",
        "line": 122,
        "column": 0
      },
      "context": "return CL_Vector(2, 2); // Default position"
    },
    {
      "caller_function": "e",
      "called_function": "SDL_GetKeyboardState",
      "location": {
        "file": "src/Controller_Keyboard.cpp",
        "line": 43,
        "column": 0
      },
      "context": "keyboard_state = SDL_GetKeyboardState(nullptr);"
    },
    {
      "caller_function": null,
      "called_function": "MapTile_Pure::MapTile_Pure",
      "location": {
        "file": "src/MapTile_Pure.cpp",
        "line": 8,
        "column": 0
      },
      "context": "MapTile_Pure::MapTile_Pure(TILE_TYPE type, int grid_x, int grid_y)"
    },
    {
      "caller_function": null,
      "called_function": "MapTile_Pure",
      "location": {
        "file": "src/MapTile_Pure.cpp",
        "line": 8,
        "column": 0
      },
      "context": "MapTile_Pure::MapTile_Pure(TILE_TYPE type, int grid_x, int grid_y)"
    },
    {
      "caller_function": null,
      "called_function": "type",
      "location": {
        "file": "src/MapTile_Pure.cpp",
        "line": 9,
        "column": 0
      },
      "context": ": type(type), grid_x(grid_x), grid_y(grid_y) {"
    },
    {
      "caller_function": null,
      "called_function": "grid_x",
      "location": {
        "file": "src/MapTile_Pure.cpp",
        "line": 9,
        "column": 0
      },
      "context": ": type(type), grid_x(grid_x), grid_y(grid_y) {"
    },
    {
      "caller_function": null,
      "called_function": "grid_y",
      "location": {
        "file": "src/MapTile_Pure.cpp",
        "line": 9,
        "column": 0
      },
      "context": ": type(type), grid_x(grid_x), grid_y(grid_y) {"
    },
    {
      "caller_function": null,
      "called_function": "SDL_Log",
      "location": {
        "file": "src/MapTile_Pure.cpp",
        "line": 16,
        "column": 0
      },
      "context": "SDL_Log(\"MapTile_Pure: Created %s tile at grid (%d,%d)\","
    },
    {
      "caller_function": null,
      "called_function": "grid",
      "location": {
        "file": "src/MapTile_Pure.cpp",
        "line": 16,
        "column": 0
      },
      "context": "SDL_Log(\"MapTile_Pure: Created %s tile at grid (%d,%d)\","
    },
    {
      "caller_function": null,
      "called_function": "MapTile_Pure",
      "location": {
        "file": "src/MapTile_Pure.cpp",
        "line": 21,
        "column": 0
      },
      "context": "MapTile_Pure::~MapTile_Pure() {"
    },
    {
      "caller_function": "h",
      "called_function": "MapTile_Ground_Pure",
      "location": {
        "file": "src/MapTile_Pure.cpp",
        "line": 28,
        "column": 0
      },
      "context": "return new MapTile_Ground_Pure(grid_x, grid_y);"
    },
    {
      "caller_function": "h",
      "called_function": "MapTile_Wall_Pure",
      "location": {
        "file": "src/MapTile_Pure.cpp",
        "line": 30,
        "column": 0
      },
      "context": "return new MapTile_Wall_Pure(grid_x, grid_y);"
    },
    {
      "caller_function": "h",
      "called_function": "MapTile_Box_Pure",
      "location": {
        "file": "src/MapTile_Pure.cpp",
        "line": 32,
        "column": 0
      },
      "context": "return new MapTile_Box_Pure(grid_x, grid_y);"
    },
    {
      "caller_function": "h",
      "called_function": "MapTile_Ground_Pure",
      "location": {
        "file": "src/MapTile_Pure.cpp",
        "line": 35,
        "column": 0
      },
      "context": "return new MapTile_Ground_Pure(grid_x, grid_y); // Default to ground"
    },
    {
      "caller_function": "h",
      "called_function": "MapTile_Ground_Pure::MapTile_Ground_Pure",
      "location": {
        "file": "src/MapTile_Pure.cpp",
        "line": 41,
        "column": 0
      },
      "context": "MapTile_Ground_Pure::MapTile_Ground_Pure(int grid_x, int grid_y)"
    },
    {
      "caller_function": "h",
      "called_function": "MapTile_Ground_Pure",
      "location": {
        "file": "src/MapTile_Pure.cpp",
        "line": 41,
        "column": 0
      },
      "context": "MapTile_Ground_Pure::MapTile_Ground_Pure(int grid_x, int grid_y)"
    },
    {
      "caller_function": "h",
      "called_function": "MapTile_Pure",
      "location": {
        "file": "src/MapTile_Pure.cpp",
        "line": 42,
        "column": 0
      },
      "context": ": MapTile_Pure(GROUND, grid_x, grid_y) {"
    },
    {
      "caller_function": "h",
      "called_function": "sprite",
      "location": {
        "file": "src/MapTile_Pure.cpp",
        "line": 45,
        "column": 0
      },
      "context": "sprite_nr = 0; // Ground sprite (matches legacy MapTile_Ground)"
    },
    {
      "caller_function": "h",
      "called_function": "MapTile_Wall_Pure::MapTile_Wall_Pure",
      "location": {
        "file": "src/MapTile_Pure.cpp",
        "line": 50,
        "column": 0
      },
      "context": "MapTile_Wall_Pure::MapTile_Wall_Pure(int grid_x, int grid_y)"
    },
    {
      "caller_function": "h",
      "called_function": "MapTile_Wall_Pure",
      "location": {
        "file": "src/MapTile_Pure.cpp",
        "line": 50,
        "column": 0
      },
      "context": "MapTile_Wall_Pure::MapTile_Wall_Pure(int grid_x, int grid_y)"
    },
    {
      "caller_function": "h",
      "called_function": "MapTile_Pure",
      "location": {
        "file": "src/MapTile_Pure.cpp",
        "line": 51,
        "column": 0
      },
      "context": ": MapTile_Pure(WALL, grid_x, grid_y) {"
    },
    {
      "caller_function": "h",
      "called_function": "sprite",
      "location": {
        "file": "src/MapTile_Pure.cpp",
        "line": 54,
        "column": 0
      },
      "context": "sprite_nr = 1; // Wall sprite (matches legacy MapTile_Wall)"
    },
    {
      "caller_function": "h",
      "called_function": "MapTile_Box_Pure::MapTile_Box_Pure",
      "location": {
        "file": "src/MapTile_Pure.cpp",
        "line": 59,
        "column": 0
      },
      "context": "MapTile_Box_Pure::MapTile_Box_Pure(int grid_x, int grid_y)"
    },
    {
      "caller_function": "h",
      "called_function": "MapTile_Box_Pure",
      "location": {
        "file": "src/MapTile_Pure.cpp",
        "line": 59,
        "column": 0
      },
      "context": "MapTile_Box_Pure::MapTile_Box_Pure(int grid_x, int grid_y)"
    },
    {
      "caller_function": "h",
      "called_function": "MapTile_Pure",
      "location": {
        "file": "src/MapTile_Pure.cpp",
        "line": 60,
        "column": 0
      },
      "context": ": MapTile_Pure(BOX, grid_x, grid_y) {"
    },
    {
      "caller_function": "t",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/MapTile_Pure.cpp",
        "line": 67,
        "column": 0
      },
      "context": "SDL_Log(\"MapTile_Box_Pure: Destruction requested at grid (%d,%d)\", grid_x, grid_y);"
    },
    {
      "caller_function": "t",
      "called_function": "grid",
      "location": {
        "file": "src/MapTile_Pure.cpp",
        "line": 67,
        "column": 0
      },
      "context": "SDL_Log(\"MapTile_Box_Pure: Destruction requested at grid (%d,%d)\", grid_x, grid_y);"
    },
    {
      "caller_function": null,
      "called_function": "GameSystems::GameSystems",
      "location": {
        "file": "src/GameSystems.cpp",
        "line": 8,
        "column": 0
      },
      "context": "GameSystems::GameSystems(GameContext* context)"
    },
    {
      "caller_function": null,
      "called_function": "GameSystems",
      "location": {
        "file": "src/GameSystems.cpp",
        "line": 8,
        "column": 0
      },
      "context": "GameSystems::GameSystems(GameContext* context)"
    },
    {
      "caller_function": null,
      "called_function": "context",
      "location": {
        "file": "src/GameSystems.cpp",
        "line": 9,
        "column": 0
      },
      "context": ": context(context)"
    },
    {
      "caller_function": null,
      "called_function": "objects_ref",
      "location": {
        "file": "src/GameSystems.cpp",
        "line": 10,
        "column": 0
      },
      "context": ", objects_ref(nullptr)"
    },
    {
      "caller_function": null,
      "called_function": "bombers_ref",
      "location": {
        "file": "src/GameSystems.cpp",
        "line": 11,
        "column": 0
      },
      "context": ", bombers_ref(nullptr) {"
    },
    {
      "caller_function": null,
      "called_function": "SDL_Log",
      "location": {
        "file": "src/GameSystems.cpp",
        "line": 12,
        "column": 0
      },
      "context": "SDL_Log(\"GameSystems: Initialized modular game systems\");"
    },
    {
      "caller_function": null,
      "called_function": "GameSystems",
      "location": {
        "file": "src/GameSystems.cpp",
        "line": 15,
        "column": 0
      },
      "context": "GameSystems::~GameSystems() {"
    },
    {
      "caller_function": null,
      "called_function": "SDL_Log",
      "location": {
        "file": "src/GameSystems.cpp",
        "line": 16,
        "column": 0
      },
      "context": "SDL_Log(\"GameSystems: Shutdown complete\");"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/GameSystems.cpp",
        "line": 21,
        "column": 0
      },
      "context": "SDL_Log(\"WARNING: GameSystems not initialized, skipping update\");"
    },
    {
      "caller_function": "f",
      "called_function": "update_input_system",
      "location": {
        "file": "src/GameSystems.cpp",
        "line": 36,
        "column": 0
      },
      "context": "update_input_system(deltaTime);"
    },
    {
      "caller_function": "f",
      "called_function": "update_ai_system",
      "location": {
        "file": "src/GameSystems.cpp",
        "line": 37,
        "column": 0
      },
      "context": "update_ai_system(deltaTime);"
    },
    {
      "caller_function": "f",
      "called_function": "update_physics_system",
      "location": {
        "file": "src/GameSystems.cpp",
        "line": 38,
        "column": 0
      },
      "context": "update_physics_system(deltaTime);"
    },
    {
      "caller_function": "f",
      "called_function": "update_collision_system",
      "location": {
        "file": "src/GameSystems.cpp",
        "line": 39,
        "column": 0
      },
      "context": "update_collision_system(deltaTime);"
    },
    {
      "caller_function": "f",
      "called_function": "update_animation_system",
      "location": {
        "file": "src/GameSystems.cpp",
        "line": 40,
        "column": 0
      },
      "context": "update_animation_system(deltaTime);"
    },
    {
      "caller_function": "f",
      "called_function": "cleanup_destroyed_objects",
      "location": {
        "file": "src/GameSystems.cpp",
        "line": 43,
        "column": 0
      },
      "context": "cleanup_destroyed_objects();"
    },
    {
      "caller_function": "s",
      "called_function": "render_world",
      "location": {
        "file": "src/GameSystems.cpp",
        "line": 47,
        "column": 0
      },
      "context": "render_world();"
    },
    {
      "caller_function": "s",
      "called_function": "render_effects",
      "location": {
        "file": "src/GameSystems.cpp",
        "line": 48,
        "column": 0
      },
      "context": "render_effects();"
    },
    {
      "caller_function": "s",
      "called_function": "render_ui",
      "location": {
        "file": "src/GameSystems.cpp",
        "line": 49,
        "column": 0
      },
      "context": "render_ui();"
    },
    {
      "caller_function": "f",
      "called_function": "act",
      "location": {
        "file": "src/GameSystems.cpp",
        "line": 62,
        "column": 0
      },
      "context": "obj->act(deltaTime);"
    },
    {
      "caller_function": "f",
      "called_function": "act",
      "location": {
        "file": "src/GameSystems.cpp",
        "line": 73,
        "column": 0
      },
      "context": "bomber->act(deltaTime);"
    },
    {
      "caller_function": "i",
      "called_function": "GameSystems::set_object_references",
      "location": {
        "file": "src/GameSystems.cpp",
        "line": 98,
        "column": 0
      },
      "context": "void GameSystems::set_object_references(std::list<GameObject*>* objects,"
    },
    {
      "caller_function": "i",
      "called_function": "set_object_references",
      "location": {
        "file": "src/GameSystems.cpp",
        "line": 98,
        "column": 0
      },
      "context": "void GameSystems::set_object_references(std::list<GameObject*>* objects,"
    },
    {
      "caller_function": "i",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/GameSystems.cpp",
        "line": 102,
        "column": 0
      },
      "context": "SDL_Log(\"GameSystems: Object references set successfully\");"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/GameSystems.cpp",
        "line": 107,
        "column": 0
      },
      "context": "SDL_Log(\"ERROR: GameSystems cannot initialize without GameContext\");"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/GameSystems.cpp",
        "line": 112,
        "column": 0
      },
      "context": "SDL_Log(\"ERROR: GameSystems cannot initialize without object references\");"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/GameSystems.cpp",
        "line": 118,
        "column": 0
      },
      "context": "SDL_Log(\"GameSystems: All systems initialized successfully\");"
    },
    {
      "caller_function": "f",
      "called_function": "push_back",
      "location": {
        "file": "src/GameSystems.cpp",
        "line": 123,
        "column": 0
      },
      "context": "objects_ref->push_back(obj);"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/GameSystems.cpp",
        "line": 124,
        "column": 0
      },
      "context": "SDL_Log(\"GameSystems: Registered object %p\", obj);"
    },
    {
      "caller_function": "f",
      "called_function": "push_back",
      "location": {
        "file": "src/GameSystems.cpp",
        "line": 130,
        "column": 0
      },
      "context": "bombers_ref->push_back(bomber);"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/GameSystems.cpp",
        "line": 131,
        "column": 0
      },
      "context": "SDL_Log(\"GameSystems: Registered bomber %p\", bomber);"
    },
    {
      "caller_function": "d",
      "called_function": "MapTile_Ground",
      "location": {
        "file": "src/MapTile_Ground.cpp",
        "line": 11,
        "column": 0
      },
      "context": "MapTile_Ground::~MapTile_Ground() {"
    },
    {
      "caller_function": "l",
      "called_function": "MapTile_Wall",
      "location": {
        "file": "src/MapTile_Wall.cpp",
        "line": 11,
        "column": 0
      },
      "context": "MapTile_Wall::~MapTile_Wall() {"
    },
    {
      "caller_function": null,
      "called_function": "CorpsePart::CorpsePart",
      "location": {
        "file": "src/CorpsePart.cpp",
        "line": 8,
        "column": 0
      },
      "context": "CorpsePart::CorpsePart(int _x, int _y, int part_type, float vel_x, float vel_y, float explosion_forc"
    },
    {
      "caller_function": null,
      "called_function": "CorpsePart",
      "location": {
        "file": "src/CorpsePart.cpp",
        "line": 8,
        "column": 0
      },
      "context": "CorpsePart::CorpsePart(int _x, int _y, int part_type, float vel_x, float vel_y, float explosion_forc"
    },
    {
      "caller_function": null,
      "called_function": "GameObject",
      "location": {
        "file": "src/CorpsePart.cpp",
        "line": 9,
        "column": 0
      },
      "context": ": GameObject(_x, _y, context) {"
    },
    {
      "caller_function": null,
      "called_function": "Vector2D",
      "location": {
        "file": "src/CorpsePart.cpp",
        "line": 12,
        "column": 0
      },
      "context": "position = Vector2D(_x, _y);"
    },
    {
      "caller_function": null,
      "called_function": "Vector2D",
      "location": {
        "file": "src/CorpsePart.cpp",
        "line": 13,
        "column": 0
      },
      "context": "velocity = Vector2D(vel_x, vel_y);"
    },
    {
      "caller_function": null,
      "called_function": "Vector2D",
      "location": {
        "file": "src/CorpsePart.cpp",
        "line": 14,
        "column": 0
      },
      "context": "acceleration = Vector2D(0.0f, 0.0f);"
    },
    {
      "caller_function": null,
      "called_function": "get_part_mass",
      "location": {
        "file": "src/CorpsePart.cpp",
        "line": 17,
        "column": 0
      },
      "context": "mass = get_part_mass(part_type);"
    },
    {
      "caller_function": null,
      "called_function": "get_part_surface_area",
      "location": {
        "file": "src/CorpsePart.cpp",
        "line": 18,
        "column": 0
      },
      "context": "surface_area = get_part_surface_area(part_type);"
    },
    {
      "caller_function": null,
      "called_function": "gen",
      "location": {
        "file": "src/CorpsePart.cpp",
        "line": 44,
        "column": 0
      },
      "context": "std::mt19937 gen(rd());"
    },
    {
      "caller_function": null,
      "called_function": "rot_dist",
      "location": {
        "file": "src/CorpsePart.cpp",
        "line": 45,
        "column": 0
      },
      "context": "std::uniform_real_distribution<> rot_dist(0.0f, 360.0f);"
    },
    {
      "caller_function": null,
      "called_function": "angular_dist",
      "location": {
        "file": "src/CorpsePart.cpp",
        "line": 46,
        "column": 0
      },
      "context": "std::uniform_real_distribution<> angular_dist(-720.0f, 720.0f); // Up to 2 full rotations/sec"
    },
    {
      "caller_function": null,
      "called_function": "rot_dist",
      "location": {
        "file": "src/CorpsePart.cpp",
        "line": 48,
        "column": 0
      },
      "context": "rotation = rot_dist(gen);"
    },
    {
      "caller_function": null,
      "called_function": "angular_dist",
      "location": {
        "file": "src/CorpsePart.cpp",
        "line": 49,
        "column": 0
      },
      "context": "angular_velocity = angular_dist(gen) * (explosion_force / mass); // More force = more spin"
    },
    {
      "caller_function": null,
      "called_function": "normalized",
      "location": {
        "file": "src/CorpsePart.cpp",
        "line": 52,
        "column": 0
      },
      "context": "Vector2D explosion_vector = velocity.normalized() * explosion_force;"
    },
    {
      "caller_function": null,
      "called_function": "apply_force",
      "location": {
        "file": "src/CorpsePart.cpp",
        "line": 53,
        "column": 0
      },
      "context": "apply_force(explosion_vector);"
    },
    {
      "caller_function": null,
      "called_function": "CorpsePart",
      "location": {
        "file": "src/CorpsePart.cpp",
        "line": 56,
        "column": 0
      },
      "context": "CorpsePart::~CorpsePart() {"
    },
    {
      "caller_function": "f",
      "called_function": "Vector2D",
      "location": {
        "file": "src/CorpsePart.cpp",
        "line": 64,
        "column": 0
      },
      "context": "acceleration = Vector2D(0.0f, 0.0f);"
    },
    {
      "caller_function": "f",
      "called_function": "apply_gravity",
      "location": {
        "file": "src/CorpsePart.cpp",
        "line": 67,
        "column": 0
      },
      "context": "apply_gravity();"
    },
    {
      "caller_function": "f",
      "called_function": "apply_drag",
      "location": {
        "file": "src/CorpsePart.cpp",
        "line": 68,
        "column": 0
      },
      "context": "apply_drag();"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/CorpsePart.cpp",
        "line": 107,
        "column": 0
      },
      "context": "SDL_Log(\"CorpsePart: Safety limit hit, resetting rotation\");"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/CorpsePart.cpp",
        "line": 113,
        "column": 0
      },
      "context": "SDL_Log(\"CorpsePart: Fixed problematic rotation value: %f\", rotation);"
    },
    {
      "caller_function": "f",
      "called_function": "handle_collisions",
      "location": {
        "file": "src/CorpsePart.cpp",
        "line": 117,
        "column": 0
      },
      "context": "handle_collisions(deltaTime);"
    },
    {
      "caller_function": "f",
      "called_function": "Vector2D",
      "location": {
        "file": "src/CorpsePart.cpp",
        "line": 128,
        "column": 0
      },
      "context": "velocity = Vector2D(0.0f, 0.0f);"
    },
    {
      "caller_function": "f",
      "called_function": "update_blood_trail",
      "location": {
        "file": "src/CorpsePart.cpp",
        "line": 137,
        "column": 0
      },
      "context": "update_blood_trail(deltaTime);"
    },
    {
      "caller_function": "f",
      "called_function": "emit_blood",
      "location": {
        "file": "src/CorpsePart.cpp",
        "line": 143,
        "column": 0
      },
      "context": "emit_blood();"
    },
    {
      "caller_function": "f",
      "called_function": "magnitude",
      "location": {
        "file": "src/CorpsePart.cpp",
        "line": 167,
        "column": 0
      },
      "context": "float speed = velocity.magnitude();"
    },
    {
      "caller_function": "f",
      "called_function": "normalized",
      "location": {
        "file": "src/CorpsePart.cpp",
        "line": 174,
        "column": 0
      },
      "context": "Vector2D drag_vector = velocity.normalized() * (-drag_force);"
    },
    {
      "caller_function": "f",
      "called_function": "apply_force",
      "location": {
        "file": "src/CorpsePart.cpp",
        "line": 175,
        "column": 0
      },
      "context": "apply_force(drag_vector);"
    },
    {
      "caller_function": "y",
      "called_function": "gravity_force",
      "location": {
        "file": "src/CorpsePart.cpp",
        "line": 181,
        "column": 0
      },
      "context": "Vector2D gravity_force(0.0f, mass * 980.0f); // 980 pixels/s\u00b2 \u2248 9.8 m/s\u00b2"
    },
    {
      "caller_function": "y",
      "called_function": "apply_force",
      "location": {
        "file": "src/CorpsePart.cpp",
        "line": 182,
        "column": 0
      },
      "context": "apply_force(gravity_force);"
    },
    {
      "caller_function": "f",
      "called_function": "std::abs",
      "location": {
        "file": "src/CorpsePart.cpp",
        "line": 206,
        "column": 0
      },
      "context": "float impact_force = std::abs(normal_velocity);"
    },
    {
      "caller_function": "f",
      "called_function": "abs",
      "location": {
        "file": "src/CorpsePart.cpp",
        "line": 206,
        "column": 0
      },
      "context": "float impact_force = std::abs(normal_velocity);"
    },
    {
      "caller_function": "f",
      "called_function": "erase",
      "location": {
        "file": "src/CorpsePart.cpp",
        "line": 237,
        "column": 0
      },
      "context": "it = blood_trails.erase(it);"
    },
    {
      "caller_function": "f",
      "called_function": "gen",
      "location": {
        "file": "src/CorpsePart.cpp",
        "line": 247,
        "column": 0
      },
      "context": "std::mt19937 gen(rd());"
    },
    {
      "caller_function": "f",
      "called_function": "offset_dist",
      "location": {
        "file": "src/CorpsePart.cpp",
        "line": 248,
        "column": 0
      },
      "context": "std::uniform_real_distribution<> offset_dist(-5.0f, 5.0f);"
    },
    {
      "caller_function": "f",
      "called_function": "size_dist",
      "location": {
        "file": "src/CorpsePart.cpp",
        "line": 249,
        "column": 0
      },
      "context": "std::uniform_real_distribution<> size_dist(1.0f, 3.0f);"
    },
    {
      "caller_function": "f",
      "called_function": "Vector2D",
      "location": {
        "file": "src/CorpsePart.cpp",
        "line": 252,
        "column": 0
      },
      "context": "drop.position = Vector2D(position.x + offset_dist(gen), position.y + offset_dist(gen));"
    },
    {
      "caller_function": "f",
      "called_function": "offset_dist",
      "location": {
        "file": "src/CorpsePart.cpp",
        "line": 252,
        "column": 0
      },
      "context": "drop.position = Vector2D(position.x + offset_dist(gen), position.y + offset_dist(gen));"
    },
    {
      "caller_function": "f",
      "called_function": "offset_dist",
      "location": {
        "file": "src/CorpsePart.cpp",
        "line": 252,
        "column": 0
      },
      "context": "drop.position = Vector2D(position.x + offset_dist(gen), position.y + offset_dist(gen));"
    },
    {
      "caller_function": "f",
      "called_function": "size_dist",
      "location": {
        "file": "src/CorpsePart.cpp",
        "line": 254,
        "column": 0
      },
      "context": "drop.size = size_dist(gen);"
    },
    {
      "caller_function": "f",
      "called_function": "push_back",
      "location": {
        "file": "src/CorpsePart.cpp",
        "line": 257,
        "column": 0
      },
      "context": "blood_trails.push_back(drop);"
    },
    {
      "caller_function": "f",
      "called_function": "log_error",
      "location": {
        "file": "src/ErrorHandling.cpp",
        "line": 9,
        "column": 0
      },
      "context": "log_error(error);"
    },
    {
      "caller_function": "f",
      "called_function": "std::find_if",
      "location": {
        "file": "src/ErrorHandling.cpp",
        "line": 14,
        "column": 0
      },
      "context": "auto it = std::find_if(error_counts.begin(), error_counts.end(),"
    },
    {
      "caller_function": "f",
      "called_function": "find_if",
      "location": {
        "file": "src/ErrorHandling.cpp",
        "line": 14,
        "column": 0
      },
      "context": "auto it = std::find_if(error_counts.begin(), error_counts.end(),"
    },
    {
      "caller_function": "f",
      "called_function": "begin",
      "location": {
        "file": "src/ErrorHandling.cpp",
        "line": 14,
        "column": 0
      },
      "context": "auto it = std::find_if(error_counts.begin(), error_counts.end(),"
    },
    {
      "caller_function": "f",
      "called_function": "end",
      "location": {
        "file": "src/ErrorHandling.cpp",
        "line": 14,
        "column": 0
      },
      "context": "auto it = std::find_if(error_counts.begin(), error_counts.end(),"
    },
    {
      "caller_function": "f",
      "called_function": "get_type",
      "location": {
        "file": "src/ErrorHandling.cpp",
        "line": 15,
        "column": 0
      },
      "context": "[&error](const auto& pair) { return pair.first == error.get_type(); });"
    },
    {
      "caller_function": "f",
      "called_function": "emplace_back",
      "location": {
        "file": "src/ErrorHandling.cpp",
        "line": 20,
        "column": 0
      },
      "context": "error_counts.emplace_back(error.get_type(), 1);"
    },
    {
      "caller_function": "f",
      "called_function": "get_type",
      "location": {
        "file": "src/ErrorHandling.cpp",
        "line": 20,
        "column": 0
      },
      "context": "error_counts.emplace_back(error.get_type(), 1);"
    },
    {
      "caller_function": "f",
      "called_function": "second",
      "location": {
        "file": "src/ErrorHandling.cpp",
        "line": 26,
        "column": 0
      },
      "context": "return handler.second(error);"
    },
    {
      "caller_function": "f",
      "called_function": "get_default_strategy",
      "location": {
        "file": "src/ErrorHandling.cpp",
        "line": 31,
        "column": 0
      },
      "context": "return get_default_strategy(error.get_type(), error.get_severity());"
    },
    {
      "caller_function": "f",
      "called_function": "get_type",
      "location": {
        "file": "src/ErrorHandling.cpp",
        "line": 31,
        "column": 0
      },
      "context": "return get_default_strategy(error.get_type(), error.get_severity());"
    },
    {
      "caller_function": "f",
      "called_function": "get_severity",
      "location": {
        "file": "src/ErrorHandling.cpp",
        "line": 31,
        "column": 0
      },
      "context": "return get_default_strategy(error.get_type(), error.get_severity());"
    },
    {
      "caller_function": "r",
      "called_function": "erase",
      "location": {
        "file": "src/ErrorHandling.cpp",
        "line": 36,
        "column": 0
      },
      "context": "error_handlers.erase("
    },
    {
      "caller_function": "r",
      "called_function": "std::remove_if",
      "location": {
        "file": "src/ErrorHandling.cpp",
        "line": 37,
        "column": 0
      },
      "context": "std::remove_if(error_handlers.begin(), error_handlers.end(),"
    },
    {
      "caller_function": "r",
      "called_function": "remove_if",
      "location": {
        "file": "src/ErrorHandling.cpp",
        "line": 37,
        "column": 0
      },
      "context": "std::remove_if(error_handlers.begin(), error_handlers.end(),"
    },
    {
      "caller_function": "r",
      "called_function": "begin",
      "location": {
        "file": "src/ErrorHandling.cpp",
        "line": 37,
        "column": 0
      },
      "context": "std::remove_if(error_handlers.begin(), error_handlers.end(),"
    },
    {
      "caller_function": "r",
      "called_function": "end",
      "location": {
        "file": "src/ErrorHandling.cpp",
        "line": 37,
        "column": 0
      },
      "context": "std::remove_if(error_handlers.begin(), error_handlers.end(),"
    },
    {
      "caller_function": "r",
      "called_function": "end",
      "location": {
        "file": "src/ErrorHandling.cpp",
        "line": 39,
        "column": 0
      },
      "context": "error_handlers.end());"
    },
    {
      "caller_function": "r",
      "called_function": "emplace_back",
      "location": {
        "file": "src/ErrorHandling.cpp",
        "line": 42,
        "column": 0
      },
      "context": "error_handlers.emplace_back(error_type, callback);"
    },
    {
      "caller_function": "r",
      "called_function": "ErrorHandler::get_error_statistics",
      "location": {
        "file": "src/ErrorHandling.cpp",
        "line": 45,
        "column": 0
      },
      "context": "ErrorHandler::ErrorStats ErrorHandler::get_error_statistics() const {"
    },
    {
      "caller_function": "r",
      "called_function": "get_error_statistics",
      "location": {
        "file": "src/ErrorHandling.cpp",
        "line": 45,
        "column": 0
      },
      "context": "ErrorHandler::ErrorStats ErrorHandler::get_error_statistics() const {"
    },
    {
      "caller_function": "s",
      "called_function": "clear",
      "location": {
        "file": "src/ErrorHandling.cpp",
        "line": 74,
        "column": 0
      },
      "context": "error_counts.clear();"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/ErrorHandling.cpp",
        "line": 112,
        "column": 0
      },
      "context": "SDL_Log(\"GameError [%s] %s: %s\", severity_str, type_str, error.what());"
    },
    {
      "caller_function": "f",
      "called_function": "what",
      "location": {
        "file": "src/ErrorHandling.cpp",
        "line": 112,
        "column": 0
      },
      "context": "SDL_Log(\"GameError [%s] %s: %s\", severity_str, type_str, error.what());"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/ErrorHandling.cpp",
        "line": 114,
        "column": 0
      },
      "context": "SDL_Log(\"GameError [%s] %s: %s (Context: %s)\","
    },
    {
      "caller_function": "f",
      "called_function": "what",
      "location": {
        "file": "src/ErrorHandling.cpp",
        "line": 115,
        "column": 0
      },
      "context": "severity_str, type_str, error.what(), error.get_context().c_str());"
    },
    {
      "caller_function": "f",
      "called_function": "get_context",
      "location": {
        "file": "src/ErrorHandling.cpp",
        "line": 115,
        "column": 0
      },
      "context": "severity_str, type_str, error.what(), error.get_context().c_str());"
    },
    {
      "caller_function": "f",
      "called_function": "c_str",
      "location": {
        "file": "src/ErrorHandling.cpp",
        "line": 115,
        "column": 0
      },
      "context": "severity_str, type_str, error.what(), error.get_context().c_str());"
    },
    {
      "caller_function": null,
      "called_function": "GameLogic::GameLogic",
      "location": {
        "file": "src/GameLogic.cpp",
        "line": 9,
        "column": 0
      },
      "context": "GameLogic::GameLogic(GameContext* context)"
    },
    {
      "caller_function": null,
      "called_function": "GameLogic",
      "location": {
        "file": "src/GameLogic.cpp",
        "line": 9,
        "column": 0
      },
      "context": "GameLogic::GameLogic(GameContext* context)"
    },
    {
      "caller_function": null,
      "called_function": "game_context",
      "location": {
        "file": "src/GameLogic.cpp",
        "line": 10,
        "column": 0
      },
      "context": ": game_context(context), is_paused(false), frame_counter(0) {"
    },
    {
      "caller_function": null,
      "called_function": "is_paused",
      "location": {
        "file": "src/GameLogic.cpp",
        "line": 10,
        "column": 0
      },
      "context": ": game_context(context), is_paused(false), frame_counter(0) {"
    },
    {
      "caller_function": null,
      "called_function": "frame_counter",
      "location": {
        "file": "src/GameLogic.cpp",
        "line": 10,
        "column": 0
      },
      "context": ": game_context(context), is_paused(false), frame_counter(0) {"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/GameLogic.cpp",
        "line": 12,
        "column": 0
      },
      "context": "SDL_Log(\"ERROR: GameLogic initialized with null GameContext\");"
    },
    {
      "caller_function": "f",
      "called_function": "update_all_objects",
      "location": {
        "file": "src/GameLogic.cpp",
        "line": 27,
        "column": 0
      },
      "context": "update_all_objects(deltaTime);"
    },
    {
      "caller_function": "f",
      "called_function": "cleanup_deleted_objects",
      "location": {
        "file": "src/GameLogic.cpp",
        "line": 28,
        "column": 0
      },
      "context": "cleanup_deleted_objects();"
    },
    {
      "caller_function": "f",
      "called_function": "log_frame_statistics",
      "location": {
        "file": "src/GameLogic.cpp",
        "line": 32,
        "column": 0
      },
      "context": "log_frame_statistics();"
    },
    {
      "caller_function": "s",
      "called_function": "get_object_lists",
      "location": {
        "file": "src/GameLogic.cpp",
        "line": 39,
        "column": 0
      },
      "context": "const auto& objects = game_context->get_object_lists();"
    },
    {
      "caller_function": "r",
      "called_function": "should_skip_object_update",
      "location": {
        "file": "src/GameLogic.cpp",
        "line": 43,
        "column": 0
      },
      "context": "if (should_skip_object_update(obj)) continue;"
    },
    {
      "caller_function": "r",
      "called_function": "act",
      "location": {
        "file": "src/GameLogic.cpp",
        "line": 46,
        "column": 0
      },
      "context": "obj->act(deltaTime);"
    },
    {
      "caller_function": "r",
      "called_function": "catch",
      "location": {
        "file": "src/GameLogic.cpp",
        "line": 47,
        "column": 0
      },
      "context": "} catch (const std::exception& e) {"
    },
    {
      "caller_function": "r",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/GameLogic.cpp",
        "line": 48,
        "column": 0
      },
      "context": "SDL_Log(\"ERROR: Exception in object update: %s\", e.what());"
    },
    {
      "caller_function": "r",
      "called_function": "what",
      "location": {
        "file": "src/GameLogic.cpp",
        "line": 48,
        "column": 0
      },
      "context": "SDL_Log(\"ERROR: Exception in object update: %s\", e.what());"
    },
    {
      "caller_function": "s",
      "called_function": "get_object_lists",
      "location": {
        "file": "src/GameLogic.cpp",
        "line": 58,
        "column": 0
      },
      "context": "const auto& objects = game_context->get_object_lists();"
    },
    {
      "caller_function": "r",
      "called_function": "push_back",
      "location": {
        "file": "src/GameLogic.cpp",
        "line": 64,
        "column": 0
      },
      "context": "draw_list.push_back(obj);"
    },
    {
      "caller_function": "t",
      "called_function": "get_z",
      "location": {
        "file": "src/GameLogic.cpp",
        "line": 69,
        "column": 0
      },
      "context": "return go1->get_z() < go2->get_z();"
    },
    {
      "caller_function": "t",
      "called_function": "get_z",
      "location": {
        "file": "src/GameLogic.cpp",
        "line": 69,
        "column": 0
      },
      "context": "return go1->get_z() < go2->get_z();"
    },
    {
      "caller_function": "r",
      "called_function": "show",
      "location": {
        "file": "src/GameLogic.cpp",
        "line": 75,
        "column": 0
      },
      "context": "obj->show();"
    },
    {
      "caller_function": "r",
      "called_function": "catch",
      "location": {
        "file": "src/GameLogic.cpp",
        "line": 76,
        "column": 0
      },
      "context": "} catch (const std::exception& e) {"
    },
    {
      "caller_function": "r",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/GameLogic.cpp",
        "line": 77,
        "column": 0
      },
      "context": "SDL_Log(\"ERROR: Exception in object rendering: %s\", e.what());"
    },
    {
      "caller_function": "r",
      "called_function": "what",
      "location": {
        "file": "src/GameLogic.cpp",
        "line": 77,
        "column": 0
      },
      "context": "SDL_Log(\"ERROR: Exception in object rendering: %s\", e.what());"
    },
    {
      "caller_function": "s",
      "called_function": "get_lifecycle_manager",
      "location": {
        "file": "src/GameLogic.cpp",
        "line": 83,
        "column": 0
      },
      "context": "if (!game_context || !game_context->get_lifecycle_manager()) return;"
    },
    {
      "caller_function": "s",
      "called_function": "get_lifecycle_manager",
      "location": {
        "file": "src/GameLogic.cpp",
        "line": 86,
        "column": 0
      },
      "context": "game_context->get_lifecycle_manager()->cleanup_dead_objects();"
    },
    {
      "caller_function": "s",
      "called_function": "cleanup_dead_objects",
      "location": {
        "file": "src/GameLogic.cpp",
        "line": 86,
        "column": 0
      },
      "context": "game_context->get_lifecycle_manager()->cleanup_dead_objects();"
    },
    {
      "caller_function": "s",
      "called_function": "GameLogic::find_object_by_id",
      "location": {
        "file": "src/GameLogic.cpp",
        "line": 89,
        "column": 0
      },
      "context": "GameObject* GameLogic::find_object_by_id(int object_id) const {"
    },
    {
      "caller_function": "s",
      "called_function": "find_object_by_id",
      "location": {
        "file": "src/GameLogic.cpp",
        "line": 89,
        "column": 0
      },
      "context": "GameObject* GameLogic::find_object_by_id(int object_id) const {"
    },
    {
      "caller_function": "s",
      "called_function": "GameLogic::find_bomber_by_id",
      "location": {
        "file": "src/GameLogic.cpp",
        "line": 96,
        "column": 0
      },
      "context": "Bomber* GameLogic::find_bomber_by_id(int bomber_id) const {"
    },
    {
      "caller_function": "s",
      "called_function": "find_bomber_by_id",
      "location": {
        "file": "src/GameLogic.cpp",
        "line": 96,
        "column": 0
      },
      "context": "Bomber* GameLogic::find_bomber_by_id(int bomber_id) const {"
    },
    {
      "caller_function": "s",
      "called_function": "GameLogic::count_active_objects",
      "location": {
        "file": "src/GameLogic.cpp",
        "line": 103,
        "column": 0
      },
      "context": "size_t GameLogic::count_active_objects() const {"
    },
    {
      "caller_function": "s",
      "called_function": "count_active_objects",
      "location": {
        "file": "src/GameLogic.cpp",
        "line": 103,
        "column": 0
      },
      "context": "size_t GameLogic::count_active_objects() const {"
    },
    {
      "caller_function": "s",
      "called_function": "get_object_lists",
      "location": {
        "file": "src/GameLogic.cpp",
        "line": 106,
        "column": 0
      },
      "context": "const auto& objects = game_context->get_object_lists();"
    },
    {
      "caller_function": "s",
      "called_function": "std::count_if",
      "location": {
        "file": "src/GameLogic.cpp",
        "line": 108,
        "column": 0
      },
      "context": "return std::count_if(objects.begin(), objects.end(),"
    },
    {
      "caller_function": "s",
      "called_function": "count_if",
      "location": {
        "file": "src/GameLogic.cpp",
        "line": 108,
        "column": 0
      },
      "context": "return std::count_if(objects.begin(), objects.end(),"
    },
    {
      "caller_function": "s",
      "called_function": "begin",
      "location": {
        "file": "src/GameLogic.cpp",
        "line": 108,
        "column": 0
      },
      "context": "return std::count_if(objects.begin(), objects.end(),"
    },
    {
      "caller_function": "s",
      "called_function": "end",
      "location": {
        "file": "src/GameLogic.cpp",
        "line": 108,
        "column": 0
      },
      "context": "return std::count_if(objects.begin(), objects.end(),"
    },
    {
      "caller_function": "s",
      "called_function": "get_lifecycle_manager",
      "location": {
        "file": "src/GameLogic.cpp",
        "line": 115,
        "column": 0
      },
      "context": "if (!game_context || !game_context->get_lifecycle_manager()) return;"
    },
    {
      "caller_function": "s",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/GameLogic.cpp",
        "line": 117,
        "column": 0
      },
      "context": "SDL_Log(\"GameLogic: Clearing all game objects\");"
    },
    {
      "caller_function": "s",
      "called_function": "get_lifecycle_manager",
      "location": {
        "file": "src/GameLogic.cpp",
        "line": 118,
        "column": 0
      },
      "context": "game_context->get_lifecycle_manager()->clear_all();"
    },
    {
      "caller_function": "s",
      "called_function": "clear_all",
      "location": {
        "file": "src/GameLogic.cpp",
        "line": 118,
        "column": 0
      },
      "context": "game_context->get_lifecycle_manager()->clear_all();"
    },
    {
      "caller_function": "e",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/GameLogic.cpp",
        "line": 122,
        "column": 0
      },
      "context": "SDL_Log(\"GameLogic: Resetting game state\");"
    },
    {
      "caller_function": "e",
      "called_function": "clear_all_objects",
      "location": {
        "file": "src/GameLogic.cpp",
        "line": 125,
        "column": 0
      },
      "context": "clear_all_objects();"
    },
    {
      "caller_function": "e",
      "called_function": "GameLogic::get_game_statistics",
      "location": {
        "file": "src/GameLogic.cpp",
        "line": 132,
        "column": 0
      },
      "context": "GameLogic::GameStats GameLogic::get_game_statistics() const {"
    },
    {
      "caller_function": "e",
      "called_function": "get_game_statistics",
      "location": {
        "file": "src/GameLogic.cpp",
        "line": 132,
        "column": 0
      },
      "context": "GameLogic::GameStats GameLogic::get_game_statistics() const {"
    },
    {
      "caller_function": "e",
      "called_function": "get_object_lists",
      "location": {
        "file": "src/GameLogic.cpp",
        "line": 137,
        "column": 0
      },
      "context": "const auto& objects = game_context->get_object_lists();"
    },
    {
      "caller_function": "h",
      "called_function": "GameLogic::log_frame_statistics",
      "location": {
        "file": "src/GameLogic.cpp",
        "line": 166,
        "column": 0
      },
      "context": "void GameLogic::log_frame_statistics() const {"
    },
    {
      "caller_function": "h",
      "called_function": "log_frame_statistics",
      "location": {
        "file": "src/GameLogic.cpp",
        "line": 166,
        "column": 0
      },
      "context": "void GameLogic::log_frame_statistics() const {"
    },
    {
      "caller_function": "h",
      "called_function": "get_game_statistics",
      "location": {
        "file": "src/GameLogic.cpp",
        "line": 167,
        "column": 0
      },
      "context": "auto stats = get_game_statistics();"
    },
    {
      "caller_function": "h",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/GameLogic.cpp",
        "line": 169,
        "column": 0
      },
      "context": "SDL_Log(\"GameLogic Stats - Frame: %llu, Objects: %zu (Bombers: %zu, Bombs: %zu, Explosions: %zu, Ext"
    },
    {
      "caller_function": "h",
      "called_function": "GameLogic::should_skip_object_update",
      "location": {
        "file": "src/GameLogic.cpp",
        "line": 178,
        "column": 0
      },
      "context": "bool GameLogic::should_skip_object_update(GameObject* obj) const {"
    },
    {
      "caller_function": "h",
      "called_function": "should_skip_object_update",
      "location": {
        "file": "src/GameLogic.cpp",
        "line": 178,
        "column": 0
      },
      "context": "bool GameLogic::should_skip_object_update(GameObject* obj) const {"
    },
    {
      "caller_function": null,
      "called_function": "GPUAcceleratedRenderer::GPUAcceleratedRenderer",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 11,
        "column": 0
      },
      "context": "GPUAcceleratedRenderer::GPUAcceleratedRenderer()"
    },
    {
      "caller_function": null,
      "called_function": "GPUAcceleratedRenderer",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 11,
        "column": 0
      },
      "context": "GPUAcceleratedRenderer::GPUAcceleratedRenderer()"
    },
    {
      "caller_function": null,
      "called_function": "gl_context",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 12,
        "column": 0
      },
      "context": ": gl_context(nullptr), main_program(0), particle_compute_program(0), debug_program(0),"
    },
    {
      "caller_function": null,
      "called_function": "main_program",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 12,
        "column": 0
      },
      "context": ": gl_context(nullptr), main_program(0), particle_compute_program(0), debug_program(0),"
    },
    {
      "caller_function": null,
      "called_function": "particle_compute_program",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 12,
        "column": 0
      },
      "context": ": gl_context(nullptr), main_program(0), particle_compute_program(0), debug_program(0),"
    },
    {
      "caller_function": null,
      "called_function": "debug_program",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 12,
        "column": 0
      },
      "context": ": gl_context(nullptr), main_program(0), particle_compute_program(0), debug_program(0),"
    },
    {
      "caller_function": null,
      "called_function": "sprite_vao",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 13,
        "column": 0
      },
      "context": "sprite_vao(0), sprite_vbo(0), sprite_ebo(0), particle_vao(0), particle_vbo(0),"
    },
    {
      "caller_function": null,
      "called_function": "sprite_vbo",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 13,
        "column": 0
      },
      "context": "sprite_vao(0), sprite_vbo(0), sprite_ebo(0), particle_vao(0), particle_vbo(0),"
    },
    {
      "caller_function": null,
      "called_function": "sprite_ebo",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 13,
        "column": 0
      },
      "context": "sprite_vao(0), sprite_vbo(0), sprite_ebo(0), particle_vao(0), particle_vbo(0),"
    },
    {
      "caller_function": null,
      "called_function": "particle_vao",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 13,
        "column": 0
      },
      "context": "sprite_vao(0), sprite_vbo(0), sprite_ebo(0), particle_vao(0), particle_vbo(0),"
    },
    {
      "caller_function": null,
      "called_function": "particle_vbo",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 13,
        "column": 0
      },
      "context": "sprite_vao(0), sprite_vbo(0), sprite_ebo(0), particle_vao(0), particle_vbo(0),"
    },
    {
      "caller_function": null,
      "called_function": "particle_ssbo",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 14,
        "column": 0
      },
      "context": "particle_ssbo(0), particle_counter_buffer(0), max_gpu_particles(0),"
    },
    {
      "caller_function": null,
      "called_function": "particle_counter_buffer",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 14,
        "column": 0
      },
      "context": "particle_ssbo(0), particle_counter_buffer(0), max_gpu_particles(0),"
    },
    {
      "caller_function": null,
      "called_function": "max_gpu_particles",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 14,
        "column": 0
      },
      "context": "particle_ssbo(0), particle_counter_buffer(0), max_gpu_particles(0),"
    },
    {
      "caller_function": null,
      "called_function": "current_quad_count",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 15,
        "column": 0
      },
      "context": "current_quad_count(0), current_effect(NORMAL), current_texture(0), next_particle_index(0),"
    },
    {
      "caller_function": null,
      "called_function": "current_effect",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 15,
        "column": 0
      },
      "context": "current_quad_count(0), current_effect(NORMAL), current_texture(0), next_particle_index(0),"
    },
    {
      "caller_function": null,
      "called_function": "current_texture",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 15,
        "column": 0
      },
      "context": "current_quad_count(0), current_effect(NORMAL), current_texture(0), next_particle_index(0),"
    },
    {
      "caller_function": null,
      "called_function": "next_particle_index",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 15,
        "column": 0
      },
      "context": "current_quad_count(0), current_effect(NORMAL), current_texture(0), next_particle_index(0),"
    },
    {
      "caller_function": "e",
      "called_function": "glm_vec2_zero",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 19,
        "column": 0
      },
      "context": "glm_vec2_zero(camera_position);"
    },
    {
      "caller_function": "e",
      "called_function": "glm_vec4_zero",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 20,
        "column": 0
      },
      "context": "glm_vec4_zero(global_effect_params);"
    },
    {
      "caller_function": "y",
      "called_function": "glm_vec2_zero",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 22,
        "column": 0
      },
      "context": "glm_vec2_zero(wind_force);"
    },
    {
      "caller_function": "y",
      "called_function": "glm_vec4_zero",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 25,
        "column": 0
      },
      "context": "glm_vec4_zero(current_explosion_center);"
    },
    {
      "caller_function": "y",
      "called_function": "glm_vec4_zero",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 26,
        "column": 0
      },
      "context": "glm_vec4_zero(current_explosion_size);"
    },
    {
      "caller_function": "y",
      "called_function": "memset",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 29,
        "column": 0
      },
      "context": "memset(&perf_stats, 0, sizeof(perf_stats));"
    },
    {
      "caller_function": "y",
      "called_function": "GPUAcceleratedRenderer",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 32,
        "column": 0
      },
      "context": "GPUAcceleratedRenderer::~GPUAcceleratedRenderer() {"
    },
    {
      "caller_function": "y",
      "called_function": "shutdown",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 33,
        "column": 0
      },
      "context": "shutdown();"
    },
    {
      "caller_function": "e",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 37,
        "column": 0
      },
      "context": "SDL_Log(\"GPU Renderer: Starting initialization...\");"
    },
    {
      "caller_function": "e",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 43,
        "column": 0
      },
      "context": "SDL_Log(\"GPU Renderer: Creating OpenGL context...\");"
    },
    {
      "caller_function": "e",
      "called_function": "SDL_GL_CreateContext",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 44,
        "column": 0
      },
      "context": "gl_context = SDL_GL_CreateContext(window);"
    },
    {
      "caller_function": "f",
      "called_function": "std::string",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 47,
        "column": 0
      },
      "context": "std::string error_msg = \"Failed to create OpenGL context: \" + std::string(SDL_GetError());"
    },
    {
      "caller_function": "f",
      "called_function": "string",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 47,
        "column": 0
      },
      "context": "std::string error_msg = \"Failed to create OpenGL context: \" + std::string(SDL_GetError());"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_GetError",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 47,
        "column": 0
      },
      "context": "std::string error_msg = \"Failed to create OpenGL context: \" + std::string(SDL_GetError());"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 50,
        "column": 0
      },
      "context": "SDL_Log(\"Attempting fallback to OpenGL 3.3...\");"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_GL_SetAttribute",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 51,
        "column": 0
      },
      "context": "SDL_GL_SetAttribute(SDL_GL_CONTEXT_MAJOR_VERSION, 3);"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_GL_SetAttribute",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 52,
        "column": 0
      },
      "context": "SDL_GL_SetAttribute(SDL_GL_CONTEXT_MINOR_VERSION, 3);"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_GL_CreateContext",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 53,
        "column": 0
      },
      "context": "gl_context = SDL_GL_CreateContext(window);"
    },
    {
      "caller_function": "f",
      "called_function": "std::string",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 56,
        "column": 0
      },
      "context": "std::string fallback_error = \"Failed to create OpenGL 3.3 context: \" + std::string(SDL_GetError());"
    },
    {
      "caller_function": "f",
      "called_function": "string",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 56,
        "column": 0
      },
      "context": "std::string fallback_error = \"Failed to create OpenGL 3.3 context: \" + std::string(SDL_GetError());"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_GetError",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 56,
        "column": 0
      },
      "context": "std::string fallback_error = \"Failed to create OpenGL 3.3 context: \" + std::string(SDL_GetError());"
    },
    {
      "caller_function": "f",
      "called_function": "error",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 57,
        "column": 0
      },
      "context": "return GameResult<void>::error("
    },
    {
      "caller_function": "f",
      "called_function": "GPUAcceleratedRenderer::initialize",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 61,
        "column": 0
      },
      "context": "\"GPUAcceleratedRenderer::initialize() - OpenGL context creation\""
    },
    {
      "caller_function": "f",
      "called_function": "initialize",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 61,
        "column": 0
      },
      "context": "\"GPUAcceleratedRenderer::initialize() - OpenGL context creation\""
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 65,
        "column": 0
      },
      "context": "SDL_Log(\"GPU Renderer: OpenGL context created successfully\");"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 68,
        "column": 0
      },
      "context": "SDL_Log(\"GPU Renderer: Making context current...\");"
    },
    {
      "caller_function": "f",
      "called_function": "std::string",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 71,
        "column": 0
      },
      "context": "std::string error_msg = \"Failed to make GL context current: \" + std::string(SDL_GetError());"
    },
    {
      "caller_function": "f",
      "called_function": "string",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 71,
        "column": 0
      },
      "context": "std::string error_msg = \"Failed to make GL context current: \" + std::string(SDL_GetError());"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_GetError",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 71,
        "column": 0
      },
      "context": "std::string error_msg = \"Failed to make GL context current: \" + std::string(SDL_GetError());"
    },
    {
      "caller_function": "f",
      "called_function": "error",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 72,
        "column": 0
      },
      "context": "return GameResult<void>::error("
    },
    {
      "caller_function": "f",
      "called_function": "GPUAcceleratedRenderer::initialize",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 76,
        "column": 0
      },
      "context": "\"GPUAcceleratedRenderer::initialize() - OpenGL context activation\""
    },
    {
      "caller_function": "f",
      "called_function": "initialize",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 76,
        "column": 0
      },
      "context": "\"GPUAcceleratedRenderer::initialize() - OpenGL context activation\""
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 81,
        "column": 0
      },
      "context": "SDL_Log(\"GPU Renderer: Loading OpenGL extensions with GLAD...\");"
    },
    {
      "caller_function": "f",
      "called_function": "error",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 84,
        "column": 0
      },
      "context": "return GameResult<void>::error("
    },
    {
      "caller_function": "f",
      "called_function": "GPUAcceleratedRenderer::initialize",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 88,
        "column": 0
      },
      "context": "\"GPUAcceleratedRenderer::initialize() - GLAD initialization\""
    },
    {
      "caller_function": "f",
      "called_function": "initialize",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 88,
        "column": 0
      },
      "context": "\"GPUAcceleratedRenderer::initialize() - GLAD initialization\""
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 91,
        "column": 0
      },
      "context": "SDL_Log(\"GPU Renderer: GLAD loaded successfully\");"
    },
    {
      "caller_function": "f",
      "called_function": "glGetString",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 94,
        "column": 0
      },
      "context": "const char* version = (const char*)glGetString(GL_VERSION);"
    },
    {
      "caller_function": "f",
      "called_function": "glGetString",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 95,
        "column": 0
      },
      "context": "const char* glsl_version = (const char*)glGetString(GL_SHADING_LANGUAGE_VERSION);"
    },
    {
      "caller_function": "f",
      "called_function": "glGetString",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 96,
        "column": 0
      },
      "context": "const char* renderer = (const char*)glGetString(GL_RENDERER);"
    },
    {
      "caller_function": "f",
      "called_function": "glGetString",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 97,
        "column": 0
      },
      "context": "const char* vendor = (const char*)glGetString(GL_VENDOR);"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 99,
        "column": 0
      },
      "context": "SDL_Log(\"=== OpenGL Context Information ===\");"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 100,
        "column": 0
      },
      "context": "SDL_Log(\"OpenGL Version: %s\", version ? version : \"Unknown\");"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 101,
        "column": 0
      },
      "context": "SDL_Log(\"GLSL Version: %s\", glsl_version ? glsl_version : \"Unknown\");"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 102,
        "column": 0
      },
      "context": "SDL_Log(\"Renderer: %s\", renderer ? renderer : \"Unknown\");"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 103,
        "column": 0
      },
      "context": "SDL_Log(\"Vendor: %s\", vendor ? vendor : \"Unknown\");"
    },
    {
      "caller_function": "f",
      "called_function": "error",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 108,
        "column": 0
      },
      "context": "return GameResult<void>::error("
    },
    {
      "caller_function": "f",
      "called_function": "GPUAcceleratedRenderer::initialize",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 112,
        "column": 0
      },
      "context": "\"GPUAcceleratedRenderer::initialize() - OpenGL version check\""
    },
    {
      "caller_function": "f",
      "called_function": "initialize",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 112,
        "column": 0
      },
      "context": "\"GPUAcceleratedRenderer::initialize() - OpenGL version check\""
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 117,
        "column": 0
      },
      "context": "SDL_Log(\"OpenGL 4.6 supported - using advanced features\");"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 119,
        "column": 0
      },
      "context": "SDL_Log(\"OpenGL 4.0 supported - using most features\");"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 121,
        "column": 0
      },
      "context": "SDL_Log(\"OpenGL 3.3 supported - using basic features\");"
    },
    {
      "caller_function": "f",
      "called_function": "glEnable",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 125,
        "column": 0
      },
      "context": "glEnable(GL_BLEND);"
    },
    {
      "caller_function": "f",
      "called_function": "glBlendFunc",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 126,
        "column": 0
      },
      "context": "glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);"
    },
    {
      "caller_function": "f",
      "called_function": "glDisable",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 128,
        "column": 0
      },
      "context": "glDisable(GL_DEPTH_TEST);"
    },
    {
      "caller_function": "f",
      "called_function": "glDisable",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 130,
        "column": 0
      },
      "context": "glDisable(GL_MULTISAMPLE);"
    },
    {
      "caller_function": "f",
      "called_function": "glEnable",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 133,
        "column": 0
      },
      "context": "glEnable(GL_TEXTURE_CUBE_MAP_SEAMLESS);"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_GL_SetSwapInterval",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 136,
        "column": 0
      },
      "context": "SDL_GL_SetSwapInterval(1);"
    },
    {
      "caller_function": "f",
      "called_function": "error",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 141,
        "column": 0
      },
      "context": "return GameResult<void>::error("
    },
    {
      "caller_function": "f",
      "called_function": "GPUAcceleratedRenderer::initialize",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 145,
        "column": 0
      },
      "context": "\"GPUAcceleratedRenderer::initialize() - Shader loading\""
    },
    {
      "caller_function": "f",
      "called_function": "initialize",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 145,
        "column": 0
      },
      "context": "\"GPUAcceleratedRenderer::initialize() - Shader loading\""
    },
    {
      "caller_function": "f",
      "called_function": "setup_matrices",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 150,
        "column": 0
      },
      "context": "setup_matrices();"
    },
    {
      "caller_function": "f",
      "called_function": "setup_sprite_rendering",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 151,
        "column": 0
      },
      "context": "setup_sprite_rendering();"
    },
    {
      "caller_function": "f",
      "called_function": "error",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 156,
        "column": 0
      },
      "context": "return GameResult<void>::error("
    },
    {
      "caller_function": "f",
      "called_function": "GPUAcceleratedRenderer::initialize",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 160,
        "column": 0
      },
      "context": "\"GPUAcceleratedRenderer::initialize() - Particle system initialization\""
    },
    {
      "caller_function": "f",
      "called_function": "initialize",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 160,
        "column": 0
      },
      "context": "\"GPUAcceleratedRenderer::initialize() - Particle system initialization\""
    },
    {
      "caller_function": "f",
      "called_function": "error",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 167,
        "column": 0
      },
      "context": "return GameResult<void>::error("
    },
    {
      "caller_function": "f",
      "called_function": "GPUAcceleratedRenderer::initialize",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 171,
        "column": 0
      },
      "context": "\"GPUAcceleratedRenderer::initialize() - Shader program validation\""
    },
    {
      "caller_function": "f",
      "called_function": "initialize",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 171,
        "column": 0
      },
      "context": "\"GPUAcceleratedRenderer::initialize() - Shader program validation\""
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 175,
        "column": 0
      },
      "context": "SDL_Log(\"GPU Accelerated Renderer initialized successfully!\");"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 176,
        "column": 0
      },
      "context": "SDL_Log(\"Max particles: %d\", max_gpu_particles);"
    },
    {
      "caller_function": "f",
      "called_function": "success",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 179,
        "column": 0
      },
      "context": "return GameResult<void>::success();"
    },
    {
      "caller_function": "n",
      "called_function": "glDeleteProgram",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 184,
        "column": 0
      },
      "context": "if (main_program) glDeleteProgram(main_program);"
    },
    {
      "caller_function": "n",
      "called_function": "glDeleteProgram",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 185,
        "column": 0
      },
      "context": "if (particle_compute_program) glDeleteProgram(particle_compute_program);"
    },
    {
      "caller_function": "n",
      "called_function": "glDeleteProgram",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 186,
        "column": 0
      },
      "context": "if (debug_program) glDeleteProgram(debug_program);"
    },
    {
      "caller_function": "n",
      "called_function": "glDeleteVertexArrays",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 188,
        "column": 0
      },
      "context": "if (sprite_vao) glDeleteVertexArrays(1, &sprite_vao);"
    },
    {
      "caller_function": "n",
      "called_function": "glDeleteBuffers",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 189,
        "column": 0
      },
      "context": "if (sprite_vbo) glDeleteBuffers(1, &sprite_vbo);"
    },
    {
      "caller_function": "n",
      "called_function": "glDeleteBuffers",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 190,
        "column": 0
      },
      "context": "if (sprite_ebo) glDeleteBuffers(1, &sprite_ebo);"
    },
    {
      "caller_function": "n",
      "called_function": "glDeleteVertexArrays",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 192,
        "column": 0
      },
      "context": "if (particle_vao) glDeleteVertexArrays(1, &particle_vao);"
    },
    {
      "caller_function": "n",
      "called_function": "glDeleteBuffers",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 193,
        "column": 0
      },
      "context": "if (particle_vbo) glDeleteBuffers(1, &particle_vbo);"
    },
    {
      "caller_function": "n",
      "called_function": "glDeleteBuffers",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 194,
        "column": 0
      },
      "context": "if (particle_ssbo) glDeleteBuffers(1, &particle_ssbo);"
    },
    {
      "caller_function": "n",
      "called_function": "glDeleteBuffers",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 195,
        "column": 0
      },
      "context": "if (particle_counter_buffer) glDeleteBuffers(1, &particle_counter_buffer);"
    },
    {
      "caller_function": "r",
      "called_function": "glDeleteTextures",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 199,
        "column": 0
      },
      "context": "glDeleteTextures(1, &texture);"
    },
    {
      "caller_function": "r",
      "called_function": "clear",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 201,
        "column": 0
      },
      "context": "loaded_textures.clear();"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_GL_DestroyContext",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 204,
        "column": 0
      },
      "context": "SDL_GL_DestroyContext(gl_context);"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 208,
        "column": 0
      },
      "context": "SDL_Log(\"GPU Accelerated Renderer shutdown complete\");"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 214,
        "column": 0
      },
      "context": "SDL_Log(\"ERROR: Failed to make context current before loading shaders: %s\", SDL_GetError());"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_GetError",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 214,
        "column": 0
      },
      "context": "SDL_Log(\"ERROR: Failed to make context current before loading shaders: %s\", SDL_GetError());"
    },
    {
      "caller_function": "f",
      "called_function": "Resources::load_shader_source",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 219,
        "column": 0
      },
      "context": "std::string vertex_src = Resources::load_shader_source(\"shaders/optimized_vertex_simple.glsl\");"
    },
    {
      "caller_function": "f",
      "called_function": "load_shader_source",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 219,
        "column": 0
      },
      "context": "std::string vertex_src = Resources::load_shader_source(\"shaders/optimized_vertex_simple.glsl\");"
    },
    {
      "caller_function": "f",
      "called_function": "Resources::load_shader_source",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 220,
        "column": 0
      },
      "context": "std::string fragment_src = Resources::load_shader_source(\"shaders/optimized_fragment_simple.glsl\");"
    },
    {
      "caller_function": "f",
      "called_function": "load_shader_source",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 220,
        "column": 0
      },
      "context": "std::string fragment_src = Resources::load_shader_source(\"shaders/optimized_fragment_simple.glsl\");"
    },
    {
      "caller_function": "f",
      "called_function": "preprocess_shader_includes",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 223,
        "column": 0
      },
      "context": "fragment_src = preprocess_shader_includes(fragment_src);"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 226,
        "column": 0
      },
      "context": "SDL_Log(\"Failed to load main shader sources\");"
    },
    {
      "caller_function": "f",
      "called_function": "compile_shader",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 230,
        "column": 0
      },
      "context": "GLuint vertex_shader = compile_shader(vertex_src, GL_VERTEX_SHADER, \"main_vertex\");"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 232,
        "column": 0
      },
      "context": "SDL_Log(\"ERROR: Vertex shader compilation failed!\");"
    },
    {
      "caller_function": "f",
      "called_function": "compile_shader",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 236,
        "column": 0
      },
      "context": "GLuint fragment_shader = compile_shader(fragment_src, GL_FRAGMENT_SHADER, \"main_fragment\");"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 238,
        "column": 0
      },
      "context": "SDL_Log(\"ERROR: Fragment shader compilation failed!\");"
    },
    {
      "caller_function": "f",
      "called_function": "glDeleteShader",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 239,
        "column": 0
      },
      "context": "glDeleteShader(vertex_shader);"
    },
    {
      "caller_function": "f",
      "called_function": "create_program",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 243,
        "column": 0
      },
      "context": "main_program = create_program(vertex_shader, fragment_shader, \"main_program\");"
    },
    {
      "caller_function": "f",
      "called_function": "glDeleteShader",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 244,
        "column": 0
      },
      "context": "glDeleteShader(vertex_shader);"
    },
    {
      "caller_function": "f",
      "called_function": "glDeleteShader",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 245,
        "column": 0
      },
      "context": "glDeleteShader(fragment_shader);"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 248,
        "column": 0
      },
      "context": "SDL_Log(\"ERROR: Shader program linking failed!\");"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 251,
        "column": 0
      },
      "context": "SDL_Log(\"Shaders compiled and linked successfully\");"
    },
    {
      "caller_function": "f",
      "called_function": "glUseProgram",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 254,
        "column": 0
      },
      "context": "glUseProgram(main_program);"
    },
    {
      "caller_function": "f",
      "called_function": "glGetUniformLocation",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 255,
        "column": 0
      },
      "context": "u_projection = glGetUniformLocation(main_program, \"uProjection\");"
    },
    {
      "caller_function": "f",
      "called_function": "glGetUniformLocation",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 256,
        "column": 0
      },
      "context": "u_view = glGetUniformLocation(main_program, \"uView\");"
    },
    {
      "caller_function": "f",
      "called_function": "glGetUniformLocation",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 258,
        "column": 0
      },
      "context": "u_time = glGetUniformLocation(main_program, \"uTimeData\");"
    },
    {
      "caller_function": "f",
      "called_function": "glGetUniformLocation",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 259,
        "column": 0
      },
      "context": "u_explosion_center = glGetUniformLocation(main_program, \"uExplosionCenter\");"
    },
    {
      "caller_function": "f",
      "called_function": "glGetUniformLocation",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 260,
        "column": 0
      },
      "context": "u_explosion_size = glGetUniformLocation(main_program, \"uExplosionSize\");"
    },
    {
      "caller_function": "f",
      "called_function": "glGetUniformLocation",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 263,
        "column": 0
      },
      "context": "u_texture = glGetUniformLocation(main_program, \"uTexture\");"
    },
    {
      "caller_function": "f",
      "called_function": "glGetUniformLocation",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 264,
        "column": 0
      },
      "context": "u_resolution = glGetUniformLocation(main_program, \"uResolution\");"
    },
    {
      "caller_function": "f",
      "called_function": "glUniform1i",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 268,
        "column": 0
      },
      "context": "glUniform1i(u_texture, 0);"
    },
    {
      "caller_function": "f",
      "called_function": "glUniform2f",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 273,
        "column": 0
      },
      "context": "glUniform2f(u_resolution, (float)screen_width, (float)screen_height);"
    },
    {
      "caller_function": "f",
      "called_function": "glGetUniformLocation",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 277,
        "column": 0
      },
      "context": "u_effect_type = glGetUniformLocation(main_program, \"uEffectType\");"
    },
    {
      "caller_function": "f",
      "called_function": "glGetUniformLocation",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 281,
        "column": 0
      },
      "context": "u_explosion_data = glGetUniformLocation(main_program, \"uExplosionData\");"
    },
    {
      "caller_function": "f",
      "called_function": "glGetUniformLocation",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 282,
        "column": 0
      },
      "context": "u_vortex_data = glGetUniformLocation(main_program, \"uVortexData\");"
    },
    {
      "caller_function": "f",
      "called_function": "glGetUniformLocation",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 283,
        "column": 0
      },
      "context": "u_air_density = glGetUniformLocation(main_program, \"uAirDensity\");"
    },
    {
      "caller_function": "f",
      "called_function": "glGetUniformLocation",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 284,
        "column": 0
      },
      "context": "u_magnetic_field = glGetUniformLocation(main_program, \"uMagneticField\");"
    },
    {
      "caller_function": "f",
      "called_function": "glGetUniformLocation",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 285,
        "column": 0
      },
      "context": "u_noise_lut = glGetUniformLocation(main_program, \"uNoiseLUT\");"
    },
    {
      "caller_function": "f",
      "called_function": "glm_vec4_zero",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 288,
        "column": 0
      },
      "context": "glm_vec4_zero(explosion_data);"
    },
    {
      "caller_function": "f",
      "called_function": "glm_vec4_zero",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 289,
        "column": 0
      },
      "context": "glm_vec4_zero(vortex_data);"
    },
    {
      "caller_function": "f",
      "called_function": "glm_vec2_zero",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 291,
        "column": 0
      },
      "context": "glm_vec2_zero(magnetic_field);"
    },
    {
      "caller_function": "f",
      "called_function": "Resources::load_shader_source",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 296,
        "column": 0
      },
      "context": "std::string compute_src = Resources::load_shader_source(\"shaders/optimized_compute.glsl\");"
    },
    {
      "caller_function": "f",
      "called_function": "load_shader_source",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 296,
        "column": 0
      },
      "context": "std::string compute_src = Resources::load_shader_source(\"shaders/optimized_compute.glsl\");"
    },
    {
      "caller_function": "f",
      "called_function": "compile_shader",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 298,
        "column": 0
      },
      "context": "GLuint compute_shader = compile_shader(compute_src, GL_COMPUTE_SHADER, \"particle_compute\");"
    },
    {
      "caller_function": "f",
      "called_function": "create_compute_program",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 300,
        "column": 0
      },
      "context": "particle_compute_program = create_compute_program(compute_shader, \"particle_system\");"
    },
    {
      "caller_function": "f",
      "called_function": "glDeleteShader",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 301,
        "column": 0
      },
      "context": "glDeleteShader(compute_shader);"
    },
    {
      "caller_function": "f",
      "called_function": "glUseProgram",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 304,
        "column": 0
      },
      "context": "glUseProgram(particle_compute_program);"
    },
    {
      "caller_function": "f",
      "called_function": "glGetUniformLocation",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 305,
        "column": 0
      },
      "context": "u_delta_time = glGetUniformLocation(particle_compute_program, \"uDeltaTime\");"
    },
    {
      "caller_function": "f",
      "called_function": "glGetUniformLocation",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 306,
        "column": 0
      },
      "context": "u_physics_constants = glGetUniformLocation(particle_compute_program, \"uPhysicsConstants\");"
    },
    {
      "caller_function": "f",
      "called_function": "glGetUniformLocation",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 307,
        "column": 0
      },
      "context": "u_world_size = glGetUniformLocation(particle_compute_program, \"uWorldSize\");"
    },
    {
      "caller_function": "f",
      "called_function": "glGetUniformLocation",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 308,
        "column": 0
      },
      "context": "u_turbulence_field = glGetUniformLocation(particle_compute_program, \"uTurbulenceField\");"
    },
    {
      "caller_function": "f",
      "called_function": "glGetUniformLocation",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 311,
        "column": 0
      },
      "context": "GLint u_explosion_compute = glGetUniformLocation(particle_compute_program, \"uExplosionData\");"
    },
    {
      "caller_function": "f",
      "called_function": "glGetUniformLocation",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 312,
        "column": 0
      },
      "context": "GLint u_vortex_compute = glGetUniformLocation(particle_compute_program, \"uVortexData\");"
    },
    {
      "caller_function": "f",
      "called_function": "glGetUniformLocation",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 313,
        "column": 0
      },
      "context": "GLint u_air_density_compute = glGetUniformLocation(particle_compute_program, \"uAirDensity\");"
    },
    {
      "caller_function": "f",
      "called_function": "glGetUniformLocation",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 314,
        "column": 0
      },
      "context": "GLint u_magnetic_compute = glGetUniformLocation(particle_compute_program, \"uMagneticField\");"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 316,
        "column": 0
      },
      "context": "SDL_Log(\"Compute shader uniforms initialized - spectacular effects ready!\");"
    },
    {
      "caller_function": "f",
      "called_function": "check_gl_error",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 321,
        "column": 0
      },
      "context": "check_gl_error(\"shader loading\");"
    },
    {
      "caller_function": "r",
      "called_function": "glCreateShader",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 326,
        "column": 0
      },
      "context": "GLuint shader = glCreateShader(type);"
    },
    {
      "caller_function": "r",
      "called_function": "c_str",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 327,
        "column": 0
      },
      "context": "const char* src = source.c_str();"
    },
    {
      "caller_function": "r",
      "called_function": "glShaderSource",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 328,
        "column": 0
      },
      "context": "glShaderSource(shader, 1, &src, nullptr);"
    },
    {
      "caller_function": "r",
      "called_function": "glCompileShader",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 329,
        "column": 0
      },
      "context": "glCompileShader(shader);"
    },
    {
      "caller_function": "r",
      "called_function": "glGetShaderiv",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 332,
        "column": 0
      },
      "context": "glGetShaderiv(shader, GL_COMPILE_STATUS, &success);"
    },
    {
      "caller_function": "f",
      "called_function": "glGetShaderInfoLog",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 335,
        "column": 0
      },
      "context": "glGetShaderInfoLog(shader, sizeof(info_log), nullptr, info_log);"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 336,
        "column": 0
      },
      "context": "SDL_Log(\"Shader compilation error (%s): %s\", name.c_str(), info_log);"
    },
    {
      "caller_function": "f",
      "called_function": "error",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 336,
        "column": 0
      },
      "context": "SDL_Log(\"Shader compilation error (%s): %s\", name.c_str(), info_log);"
    },
    {
      "caller_function": "f",
      "called_function": "c_str",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 336,
        "column": 0
      },
      "context": "SDL_Log(\"Shader compilation error (%s): %s\", name.c_str(), info_log);"
    },
    {
      "caller_function": "f",
      "called_function": "glDeleteShader",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 337,
        "column": 0
      },
      "context": "glDeleteShader(shader);"
    },
    {
      "caller_function": "m",
      "called_function": "glCreateProgram",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 345,
        "column": 0
      },
      "context": "GLuint program = glCreateProgram();"
    },
    {
      "caller_function": "m",
      "called_function": "glAttachShader",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 347,
        "column": 0
      },
      "context": "glAttachShader(program, vertex);"
    },
    {
      "caller_function": "m",
      "called_function": "check_gl_error",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 348,
        "column": 0
      },
      "context": "check_gl_error(\"attach vertex shader\");"
    },
    {
      "caller_function": "m",
      "called_function": "glAttachShader",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 350,
        "column": 0
      },
      "context": "glAttachShader(program, fragment);"
    },
    {
      "caller_function": "m",
      "called_function": "check_gl_error",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 351,
        "column": 0
      },
      "context": "check_gl_error(\"attach fragment shader\");"
    },
    {
      "caller_function": "m",
      "called_function": "glLinkProgram",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 353,
        "column": 0
      },
      "context": "glLinkProgram(program);"
    },
    {
      "caller_function": "m",
      "called_function": "check_gl_error",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 354,
        "column": 0
      },
      "context": "check_gl_error(\"link program\");"
    },
    {
      "caller_function": "m",
      "called_function": "glGetProgramiv",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 357,
        "column": 0
      },
      "context": "glGetProgramiv(program, GL_LINK_STATUS, &success);"
    },
    {
      "caller_function": "f",
      "called_function": "glGetProgramInfoLog",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 361,
        "column": 0
      },
      "context": "glGetProgramInfoLog(program, sizeof(info_log), nullptr, info_log);"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 362,
        "column": 0
      },
      "context": "SDL_Log(\"ERROR: Program linking error (%s): %s\", name.c_str(), info_log);"
    },
    {
      "caller_function": "f",
      "called_function": "error",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 362,
        "column": 0
      },
      "context": "SDL_Log(\"ERROR: Program linking error (%s): %s\", name.c_str(), info_log);"
    },
    {
      "caller_function": "f",
      "called_function": "c_str",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 362,
        "column": 0
      },
      "context": "SDL_Log(\"ERROR: Program linking error (%s): %s\", name.c_str(), info_log);"
    },
    {
      "caller_function": "f",
      "called_function": "glDeleteProgram",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 364,
        "column": 0
      },
      "context": "glDeleteProgram(program);"
    },
    {
      "caller_function": "m",
      "called_function": "glCreateProgram",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 373,
        "column": 0
      },
      "context": "GLuint program = glCreateProgram();"
    },
    {
      "caller_function": "m",
      "called_function": "glAttachShader",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 374,
        "column": 0
      },
      "context": "glAttachShader(program, compute);"
    },
    {
      "caller_function": "m",
      "called_function": "glLinkProgram",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 375,
        "column": 0
      },
      "context": "glLinkProgram(program);"
    },
    {
      "caller_function": "m",
      "called_function": "glGetProgramiv",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 378,
        "column": 0
      },
      "context": "glGetProgramiv(program, GL_LINK_STATUS, &success);"
    },
    {
      "caller_function": "f",
      "called_function": "glGetProgramInfoLog",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 381,
        "column": 0
      },
      "context": "glGetProgramInfoLog(program, sizeof(info_log), nullptr, info_log);"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 382,
        "column": 0
      },
      "context": "SDL_Log(\"Compute program linking error (%s): %s\", name.c_str(), info_log);"
    },
    {
      "caller_function": "f",
      "called_function": "error",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 382,
        "column": 0
      },
      "context": "SDL_Log(\"Compute program linking error (%s): %s\", name.c_str(), info_log);"
    },
    {
      "caller_function": "f",
      "called_function": "c_str",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 382,
        "column": 0
      },
      "context": "SDL_Log(\"Compute program linking error (%s): %s\", name.c_str(), info_log);"
    },
    {
      "caller_function": "f",
      "called_function": "glDeleteProgram",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 383,
        "column": 0
      },
      "context": "glDeleteProgram(program);"
    },
    {
      "caller_function": "s",
      "called_function": "glm_ortho",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 395,
        "column": 0
      },
      "context": "glm_ortho(0.0f, (float)screen_width, (float)screen_height, 0.0f, -1000.0f, 1000.0f, projection_matri"
    },
    {
      "caller_function": "s",
      "called_function": "glm_mat4_identity",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 398,
        "column": 0
      },
      "context": "glm_mat4_identity(view_matrix);"
    },
    {
      "caller_function": "s",
      "called_function": "glm_mat4_identity",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 399,
        "column": 0
      },
      "context": "glm_mat4_identity(model_matrix);"
    },
    {
      "caller_function": "s",
      "called_function": "glViewport",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 402,
        "column": 0
      },
      "context": "glViewport(0, 0, screen_width, screen_height);"
    },
    {
      "caller_function": "s",
      "called_function": "check_gl_error",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 403,
        "column": 0
      },
      "context": "check_gl_error(\"set viewport\");"
    },
    {
      "caller_function": "s",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 405,
        "column": 0
      },
      "context": "SDL_Log(\"GPU Renderer: Set up matrices and viewport for %dx%d screen (SDL coordinate system)\", scree"
    },
    {
      "caller_function": "s",
      "called_function": "screen",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 405,
        "column": 0
      },
      "context": "SDL_Log(\"GPU Renderer: Set up matrices and viewport for %dx%d screen (SDL coordinate system)\", scree"
    },
    {
      "caller_function": "g",
      "called_function": "glGenVertexArrays",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 410,
        "column": 0
      },
      "context": "glGenVertexArrays(1, &sprite_vao);"
    },
    {
      "caller_function": "g",
      "called_function": "glGenBuffers",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 411,
        "column": 0
      },
      "context": "glGenBuffers(1, &sprite_vbo);"
    },
    {
      "caller_function": "g",
      "called_function": "glGenBuffers",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 412,
        "column": 0
      },
      "context": "glGenBuffers(1, &sprite_ebo);"
    },
    {
      "caller_function": "g",
      "called_function": "glBindVertexArray",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 414,
        "column": 0
      },
      "context": "glBindVertexArray(sprite_vao);"
    },
    {
      "caller_function": "g",
      "called_function": "glBindBuffer",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 417,
        "column": 0
      },
      "context": "glBindBuffer(GL_ARRAY_BUFFER, sprite_vbo);"
    },
    {
      "caller_function": "g",
      "called_function": "glBufferData",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 419,
        "column": 0
      },
      "context": "glBufferData(GL_ARRAY_BUFFER, buffer_size, nullptr, GL_DYNAMIC_DRAW);"
    },
    {
      "caller_function": "g",
      "called_function": "glGetBufferParameteriv",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 423,
        "column": 0
      },
      "context": "glGetBufferParameteriv(GL_ARRAY_BUFFER, GL_BUFFER_SIZE, &actual_buffer_size);"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 426,
        "column": 0
      },
      "context": "SDL_Log(\"ERROR: Failed to create VBO! OpenGL may be out of memory or context invalid\");"
    },
    {
      "caller_function": "f",
      "called_function": "check_gl_error",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 427,
        "column": 0
      },
      "context": "check_gl_error(\"VBO creation failed\");"
    },
    {
      "caller_function": "f",
      "called_function": "glBindBuffer",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 431,
        "column": 0
      },
      "context": "glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, sprite_ebo);"
    },
    {
      "caller_function": "f",
      "called_function": "reserve",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 433,
        "column": 0
      },
      "context": "indices.reserve(MAX_QUADS * 6);"
    },
    {
      "caller_function": "r",
      "called_function": "insert",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 436,
        "column": 0
      },
      "context": "indices.insert(indices.end(), {"
    },
    {
      "caller_function": "r",
      "called_function": "end",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 436,
        "column": 0
      },
      "context": "indices.insert(indices.end(), {"
    },
    {
      "caller_function": "r",
      "called_function": "glBufferData",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 441,
        "column": 0
      },
      "context": "glBufferData(GL_ELEMENT_ARRAY_BUFFER, indices.size() * sizeof(GLuint), indices.data(), GL_STATIC_DRA"
    },
    {
      "caller_function": "r",
      "called_function": "size",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 441,
        "column": 0
      },
      "context": "glBufferData(GL_ELEMENT_ARRAY_BUFFER, indices.size() * sizeof(GLuint), indices.data(), GL_STATIC_DRA"
    },
    {
      "caller_function": "r",
      "called_function": "data",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 441,
        "column": 0
      },
      "context": "glBufferData(GL_ELEMENT_ARRAY_BUFFER, indices.size() * sizeof(GLuint), indices.data(), GL_STATIC_DRA"
    },
    {
      "caller_function": "r",
      "called_function": "glVertexAttribPointer",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 445,
        "column": 0
      },
      "context": "glVertexAttribPointer(0, 2, GL_FLOAT, GL_FALSE, sizeof(AdvancedVertex),"
    },
    {
      "caller_function": "r",
      "called_function": "offsetof",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 446,
        "column": 0
      },
      "context": "(void*)offsetof(AdvancedVertex, position));"
    },
    {
      "caller_function": "r",
      "called_function": "glEnableVertexAttribArray",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 447,
        "column": 0
      },
      "context": "glEnableVertexAttribArray(0);"
    },
    {
      "caller_function": "r",
      "called_function": "glVertexAttribPointer",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 450,
        "column": 0
      },
      "context": "glVertexAttribPointer(1, 2, GL_FLOAT, GL_FALSE, sizeof(AdvancedVertex),"
    },
    {
      "caller_function": "r",
      "called_function": "offsetof",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 451,
        "column": 0
      },
      "context": "(void*)offsetof(AdvancedVertex, texCoord));"
    },
    {
      "caller_function": "r",
      "called_function": "glEnableVertexAttribArray",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 452,
        "column": 0
      },
      "context": "glEnableVertexAttribArray(1);"
    },
    {
      "caller_function": "r",
      "called_function": "glVertexAttribPointer",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 455,
        "column": 0
      },
      "context": "glVertexAttribPointer(2, 4, GL_FLOAT, GL_FALSE, sizeof(AdvancedVertex),"
    },
    {
      "caller_function": "r",
      "called_function": "offsetof",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 456,
        "column": 0
      },
      "context": "(void*)offsetof(AdvancedVertex, color));"
    },
    {
      "caller_function": "r",
      "called_function": "glEnableVertexAttribArray",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 457,
        "column": 0
      },
      "context": "glEnableVertexAttribArray(2);"
    },
    {
      "caller_function": "r",
      "called_function": "glVertexAttribPointer",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 460,
        "column": 0
      },
      "context": "glVertexAttribPointer(3, 1, GL_FLOAT, GL_FALSE, sizeof(AdvancedVertex),"
    },
    {
      "caller_function": "r",
      "called_function": "offsetof",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 461,
        "column": 0
      },
      "context": "(void*)offsetof(AdvancedVertex, rotation));"
    },
    {
      "caller_function": "r",
      "called_function": "glEnableVertexAttribArray",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 462,
        "column": 0
      },
      "context": "glEnableVertexAttribArray(3);"
    },
    {
      "caller_function": "r",
      "called_function": "glVertexAttribPointer",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 465,
        "column": 0
      },
      "context": "glVertexAttribPointer(4, 2, GL_FLOAT, GL_FALSE, sizeof(AdvancedVertex),"
    },
    {
      "caller_function": "r",
      "called_function": "offsetof",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 466,
        "column": 0
      },
      "context": "(void*)offsetof(AdvancedVertex, scale));"
    },
    {
      "caller_function": "r",
      "called_function": "glEnableVertexAttribArray",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 467,
        "column": 0
      },
      "context": "glEnableVertexAttribArray(4);"
    },
    {
      "caller_function": "r",
      "called_function": "glVertexAttribIPointer",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 470,
        "column": 0
      },
      "context": "glVertexAttribIPointer(5, 1, GL_INT, sizeof(AdvancedVertex),"
    },
    {
      "caller_function": "r",
      "called_function": "offsetof",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 471,
        "column": 0
      },
      "context": "(void*)offsetof(AdvancedVertex, effectType));"
    },
    {
      "caller_function": "r",
      "called_function": "glEnableVertexAttribArray",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 472,
        "column": 0
      },
      "context": "glEnableVertexAttribArray(5);"
    },
    {
      "caller_function": "r",
      "called_function": "reserve",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 474,
        "column": 0
      },
      "context": "batch_vertices.reserve(MAX_QUADS * 4);"
    },
    {
      "caller_function": "r",
      "called_function": "reserve",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 475,
        "column": 0
      },
      "context": "batch_indices.reserve(MAX_QUADS * 6);"
    },
    {
      "caller_function": "r",
      "called_function": "check_gl_error",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 477,
        "column": 0
      },
      "context": "check_gl_error(\"sprite rendering setup\");"
    },
    {
      "caller_function": "m",
      "called_function": "resize",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 482,
        "column": 0
      },
      "context": "cpu_particles.resize(max_particles);"
    },
    {
      "caller_function": "r",
      "called_function": "glm_vec2_zero",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 487,
        "column": 0
      },
      "context": "glm_vec2_zero(p.position);"
    },
    {
      "caller_function": "r",
      "called_function": "glm_vec2_zero",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 488,
        "column": 0
      },
      "context": "glm_vec2_zero(p.velocity);"
    },
    {
      "caller_function": "r",
      "called_function": "glm_vec2_zero",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 489,
        "column": 0
      },
      "context": "glm_vec2_zero(p.acceleration);"
    },
    {
      "caller_function": "r",
      "called_function": "glm_vec4_zero",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 494,
        "column": 0
      },
      "context": "glm_vec4_zero(p.color);"
    },
    {
      "caller_function": "r",
      "called_function": "glm_vec4_zero",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 495,
        "column": 0
      },
      "context": "glm_vec4_zero(p.forces);"
    },
    {
      "caller_function": "r",
      "called_function": "glGenBuffers",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 502,
        "column": 0
      },
      "context": "glGenBuffers(1, &particle_ssbo);"
    },
    {
      "caller_function": "r",
      "called_function": "glBindBuffer",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 503,
        "column": 0
      },
      "context": "glBindBuffer(GL_SHADER_STORAGE_BUFFER, particle_ssbo);"
    },
    {
      "caller_function": "r",
      "called_function": "glBufferData",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 504,
        "column": 0
      },
      "context": "glBufferData(GL_SHADER_STORAGE_BUFFER,"
    },
    {
      "caller_function": "r",
      "called_function": "data",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 506,
        "column": 0
      },
      "context": "cpu_particles.data(), GL_DYNAMIC_DRAW);"
    },
    {
      "caller_function": "r",
      "called_function": "glBindBufferBase",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 507,
        "column": 0
      },
      "context": "glBindBufferBase(GL_SHADER_STORAGE_BUFFER, 0, particle_ssbo);"
    },
    {
      "caller_function": "r",
      "called_function": "glGenBuffers",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 510,
        "column": 0
      },
      "context": "glGenBuffers(1, &particle_counter_buffer);"
    },
    {
      "caller_function": "r",
      "called_function": "glBindBuffer",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 511,
        "column": 0
      },
      "context": "glBindBuffer(GL_ATOMIC_COUNTER_BUFFER, particle_counter_buffer);"
    },
    {
      "caller_function": "r",
      "called_function": "glBufferData",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 513,
        "column": 0
      },
      "context": "glBufferData(GL_ATOMIC_COUNTER_BUFFER, sizeof(GLuint), &zero, GL_DYNAMIC_DRAW);"
    },
    {
      "caller_function": "r",
      "called_function": "glBindBufferBase",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 514,
        "column": 0
      },
      "context": "glBindBufferBase(GL_ATOMIC_COUNTER_BUFFER, 0, particle_counter_buffer);"
    },
    {
      "caller_function": "r",
      "called_function": "check_gl_error",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 516,
        "column": 0
      },
      "context": "check_gl_error(\"particle system initialization\");"
    },
    {
      "caller_function": "e",
      "called_function": "glClearColor",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 522,
        "column": 0
      },
      "context": "glClearColor(0.0f, 0.0f, 0.0f, 1.0f);"
    },
    {
      "caller_function": "e",
      "called_function": "glClear",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 523,
        "column": 0
      },
      "context": "glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);"
    },
    {
      "caller_function": "e",
      "called_function": "SDL_GetTicks",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 531,
        "column": 0
      },
      "context": "current_time = SDL_GetTicks() / 1000.0f;"
    },
    {
      "caller_function": "e",
      "called_function": "check_gl_error",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 533,
        "column": 0
      },
      "context": "check_gl_error(\"begin frame\");"
    },
    {
      "caller_function": "f",
      "called_function": "flush_batch",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 539,
        "column": 0
      },
      "context": "flush_batch();"
    },
    {
      "caller_function": "f",
      "called_function": "check_gl_error",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 542,
        "column": 0
      },
      "context": "check_gl_error(\"end frame\");"
    },
    {
      "caller_function": "r",
      "called_function": "glGetError",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 551,
        "column": 0
      },
      "context": "GLenum error = glGetError();"
    },
    {
      "caller_function": "h",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 561,
        "column": 0
      },
      "context": "SDL_Log(\"OpenGL error in %s: 0x%x (%s)\", operation.c_str(), error, error_str);"
    },
    {
      "caller_function": "h",
      "called_function": "c_str",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 561,
        "column": 0
      },
      "context": "SDL_Log(\"OpenGL error in %s: 0x%x (%s)\", operation.c_str(), error, error_str);"
    },
    {
      "caller_function": "e",
      "called_function": "find",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 573,
        "column": 0
      },
      "context": "size_t quote_start = result.find(\"\\\"\", pos);"
    },
    {
      "caller_function": "f",
      "called_function": "find",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 579,
        "column": 0
      },
      "context": "size_t quote_end = result.find(\"\\\"\", quote_start + 1);"
    },
    {
      "caller_function": "f",
      "called_function": "substr",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 586,
        "column": 0
      },
      "context": "std::string filename = result.substr(quote_start + 1, quote_end - quote_start - 1);"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 587,
        "column": 0
      },
      "context": "SDL_Log(\"Processing shader include: %s\", filename.c_str());"
    },
    {
      "caller_function": "f",
      "called_function": "c_str",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 587,
        "column": 0
      },
      "context": "SDL_Log(\"Processing shader include: %s\", filename.c_str());"
    },
    {
      "caller_function": "f",
      "called_function": "Resources::load_shader_source",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 590,
        "column": 0
      },
      "context": "std::string include_content = Resources::load_shader_source(\"shaders/\" + filename);"
    },
    {
      "caller_function": "f",
      "called_function": "load_shader_source",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 590,
        "column": 0
      },
      "context": "std::string include_content = Resources::load_shader_source(\"shaders/\" + filename);"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 592,
        "column": 0
      },
      "context": "SDL_Log(\"ERROR: Failed to load included shader file: %s\", filename.c_str());"
    },
    {
      "caller_function": "f",
      "called_function": "c_str",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 592,
        "column": 0
      },
      "context": "SDL_Log(\"ERROR: Failed to load included shader file: %s\", filename.c_str());"
    },
    {
      "caller_function": "f",
      "called_function": "find",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 598,
        "column": 0
      },
      "context": "size_t line_end = result.find(\"\\n\", pos);"
    },
    {
      "caller_function": "f",
      "called_function": "length",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 600,
        "column": 0
      },
      "context": "line_end = result.length();"
    },
    {
      "caller_function": "f",
      "called_function": "replace",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 606,
        "column": 0
      },
      "context": "result.replace(pos, line_end - pos, include_content + \"\\n\");"
    },
    {
      "caller_function": "f",
      "called_function": "length",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 609,
        "column": 0
      },
      "context": "pos += include_content.length();"
    },
    {
      "caller_function": "f",
      "called_function": "flush_batch",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 618,
        "column": 0
      },
      "context": "flush_batch();"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 630,
        "column": 0
      },
      "context": "SDL_Log(\"GPU Renderer: Critical objects not initialized, skipping batch\");"
    },
    {
      "caller_function": "f",
      "called_function": "clear",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 632,
        "column": 0
      },
      "context": "batch_vertices.clear();"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 643,
        "column": 0
      },
      "context": "SDL_Log(\"ERROR: Vertex count mismatch! Expected %d, got %zu\","
    },
    {
      "caller_function": "f",
      "called_function": "size",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 644,
        "column": 0
      },
      "context": "current_quad_count * 4, batch_vertices.size());"
    },
    {
      "caller_function": "f",
      "called_function": "clear",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 646,
        "column": 0
      },
      "context": "batch_vertices.clear();"
    },
    {
      "caller_function": "f",
      "called_function": "check_gl_error",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 651,
        "column": 0
      },
      "context": "check_gl_error(\"pre-flush\");"
    },
    {
      "caller_function": "f",
      "called_function": "glBindBuffer",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 654,
        "column": 0
      },
      "context": "glBindBuffer(GL_ARRAY_BUFFER, sprite_vbo);"
    },
    {
      "caller_function": "f",
      "called_function": "check_gl_error",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 655,
        "column": 0
      },
      "context": "check_gl_error(\"bind array buffer\");"
    },
    {
      "caller_function": "f",
      "called_function": "glGetBufferParameteriv",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 659,
        "column": 0
      },
      "context": "glGetBufferParameteriv(GL_ARRAY_BUFFER, GL_BUFFER_SIZE, &buffer_size);"
    },
    {
      "caller_function": "f",
      "called_function": "size",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 660,
        "column": 0
      },
      "context": "size_t data_size = batch_vertices.size() * sizeof(AdvancedVertex);"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 664,
        "column": 0
      },
      "context": "SDL_Log(\"WARNING: Buffer size is 0, attempting to recreate VBO\");"
    },
    {
      "caller_function": "f",
      "called_function": "glBufferData",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 668,
        "column": 0
      },
      "context": "glBufferData(GL_ARRAY_BUFFER, expected_buffer_size, nullptr, GL_DYNAMIC_DRAW);"
    },
    {
      "caller_function": "f",
      "called_function": "glGetBufferParameteriv",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 671,
        "column": 0
      },
      "context": "glGetBufferParameteriv(GL_ARRAY_BUFFER, GL_BUFFER_SIZE, &buffer_size);"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 674,
        "column": 0
      },
      "context": "SDL_Log(\"ERROR: Failed to recreate VBO! OpenGL context may be lost\");"
    },
    {
      "caller_function": "f",
      "called_function": "clear",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 676,
        "column": 0
      },
      "context": "batch_vertices.clear();"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 682,
        "column": 0
      },
      "context": "SDL_Log(\"ERROR: Data too large for buffer! Data: %zu, Buffer: %d\", data_size, buffer_size);"
    },
    {
      "caller_function": "f",
      "called_function": "clear",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 684,
        "column": 0
      },
      "context": "batch_vertices.clear();"
    },
    {
      "caller_function": "f",
      "called_function": "glBufferSubData",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 688,
        "column": 0
      },
      "context": "glBufferSubData(GL_ARRAY_BUFFER, 0, data_size, batch_vertices.data());"
    },
    {
      "caller_function": "f",
      "called_function": "data",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 688,
        "column": 0
      },
      "context": "glBufferSubData(GL_ARRAY_BUFFER, 0, data_size, batch_vertices.data());"
    },
    {
      "caller_function": "f",
      "called_function": "check_gl_error",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 689,
        "column": 0
      },
      "context": "check_gl_error(\"buffer subdata\");"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 693,
        "column": 0
      },
      "context": "SDL_Log(\"ERROR: Program %d is no longer a valid OpenGL program object!\", main_program);"
    },
    {
      "caller_function": "f",
      "called_function": "clear",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 695,
        "column": 0
      },
      "context": "batch_vertices.clear();"
    },
    {
      "caller_function": "f",
      "called_function": "glUseProgram",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 700,
        "column": 0
      },
      "context": "glUseProgram(main_program);"
    },
    {
      "caller_function": "f",
      "called_function": "check_gl_error",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 701,
        "column": 0
      },
      "context": "check_gl_error(\"use program\");"
    },
    {
      "caller_function": "f",
      "called_function": "glGetProgramiv",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 705,
        "column": 0
      },
      "context": "glGetProgramiv(main_program, GL_LINK_STATUS, &link_status);"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 707,
        "column": 0
      },
      "context": "SDL_Log(\"ERROR: Shader program %d not linked properly! Link status: %d\", main_program, link_status);"
    },
    {
      "caller_function": "f",
      "called_function": "glGetProgramiv",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 711,
        "column": 0
      },
      "context": "glGetProgramiv(main_program, GL_INFO_LOG_LENGTH, &info_log_length);"
    },
    {
      "caller_function": "f",
      "called_function": "info_log",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 713,
        "column": 0
      },
      "context": "std::vector<char> info_log(info_log_length);"
    },
    {
      "caller_function": "f",
      "called_function": "glGetProgramInfoLog",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 714,
        "column": 0
      },
      "context": "glGetProgramInfoLog(main_program, info_log_length, nullptr, info_log.data());"
    },
    {
      "caller_function": "f",
      "called_function": "data",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 714,
        "column": 0
      },
      "context": "glGetProgramInfoLog(main_program, info_log_length, nullptr, info_log.data());"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 715,
        "column": 0
      },
      "context": "SDL_Log(\"Program info log: %s\", info_log.data());"
    },
    {
      "caller_function": "f",
      "called_function": "data",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 715,
        "column": 0
      },
      "context": "SDL_Log(\"Program info log: %s\", info_log.data());"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 718,
        "column": 0
      },
      "context": "SDL_Log(\"WARNING: Continuing despite link status issue...\");"
    },
    {
      "caller_function": "f",
      "called_function": "update_uniforms",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 721,
        "column": 0
      },
      "context": "update_uniforms();"
    },
    {
      "caller_function": "f",
      "called_function": "check_gl_error",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 722,
        "column": 0
      },
      "context": "check_gl_error(\"update uniforms\");"
    },
    {
      "caller_function": "f",
      "called_function": "glBindVertexArray",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 725,
        "column": 0
      },
      "context": "glBindVertexArray(sprite_vao);"
    },
    {
      "caller_function": "f",
      "called_function": "check_gl_error",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 726,
        "column": 0
      },
      "context": "check_gl_error(\"bind vao\");"
    },
    {
      "caller_function": "f",
      "called_function": "glBindBuffer",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 729,
        "column": 0
      },
      "context": "glBindBuffer(GL_ARRAY_BUFFER, sprite_vbo);"
    },
    {
      "caller_function": "f",
      "called_function": "check_gl_error",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 730,
        "column": 0
      },
      "context": "check_gl_error(\"force rebind vbo after vao\");"
    },
    {
      "caller_function": "f",
      "called_function": "glActiveTexture",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 733,
        "column": 0
      },
      "context": "glActiveTexture(GL_TEXTURE0);"
    },
    {
      "caller_function": "f",
      "called_function": "glBindTexture",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 734,
        "column": 0
      },
      "context": "glBindTexture(GL_TEXTURE_2D, 0);  // Unbind any existing texture first"
    },
    {
      "caller_function": "f",
      "called_function": "check_gl_error",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 735,
        "column": 0
      },
      "context": "check_gl_error(\"clean texture state\");"
    },
    {
      "caller_function": "f",
      "called_function": "glBindTexture",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 739,
        "column": 0
      },
      "context": "glBindTexture(GL_TEXTURE_2D, current_texture);"
    },
    {
      "caller_function": "f",
      "called_function": "check_gl_error",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 740,
        "column": 0
      },
      "context": "check_gl_error(\"bind current texture\");"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 742,
        "column": 0
      },
      "context": "SDL_Log(\"WARNING: No texture set for batch rendering!\");"
    },
    {
      "caller_function": "f",
      "called_function": "glUseProgram",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 747,
        "column": 0
      },
      "context": "glUseProgram(main_program); // Re-bind program right before draw call"
    },
    {
      "caller_function": "f",
      "called_function": "glDrawElements",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 748,
        "column": 0
      },
      "context": "glDrawElements(GL_TRIANGLES, triangle_count, GL_UNSIGNED_INT, 0);"
    },
    {
      "caller_function": "f",
      "called_function": "glUseProgram",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 749,
        "column": 0
      },
      "context": "glUseProgram(0); // Unbind program after draw call"
    },
    {
      "caller_function": "f",
      "called_function": "check_gl_error",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 750,
        "column": 0
      },
      "context": "check_gl_error(\"draw elements\");"
    },
    {
      "caller_function": "f",
      "called_function": "clear",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 757,
        "column": 0
      },
      "context": "batch_vertices.clear();"
    },
    {
      "caller_function": "f",
      "called_function": "glUniformMatrix4fv",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 764,
        "column": 0
      },
      "context": "glUniformMatrix4fv(u_projection, 1, GL_FALSE, (float*)projection_matrix);"
    },
    {
      "caller_function": "f",
      "called_function": "check_gl_error",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 765,
        "column": 0
      },
      "context": "check_gl_error(\"uniform projection\");"
    },
    {
      "caller_function": "f",
      "called_function": "glUniformMatrix4fv",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 769,
        "column": 0
      },
      "context": "glUniformMatrix4fv(u_view, 1, GL_FALSE, (float*)view_matrix);"
    },
    {
      "caller_function": "f",
      "called_function": "check_gl_error",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 770,
        "column": 0
      },
      "context": "check_gl_error(\"uniform view\");"
    },
    {
      "caller_function": "f",
      "called_function": "glUniform1i",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 780,
        "column": 0
      },
      "context": "glUniform1i(u_texture, 0);  // Texture unit 0"
    },
    {
      "caller_function": "f",
      "called_function": "check_gl_error",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 781,
        "column": 0
      },
      "context": "check_gl_error(\"uniform texture\");"
    },
    {
      "caller_function": "f",
      "called_function": "sin",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 788,
        "column": 0
      },
      "context": "sin(current_time),"
    },
    {
      "caller_function": "f",
      "called_function": "cos",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 789,
        "column": 0
      },
      "context": "cos(current_time),"
    },
    {
      "caller_function": "f",
      "called_function": "glUniform4fv",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 792,
        "column": 0
      },
      "context": "glUniform4fv(u_time, 1, time_data);"
    },
    {
      "caller_function": "f",
      "called_function": "check_gl_error",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 793,
        "column": 0
      },
      "context": "check_gl_error(\"uniform timedata\");"
    },
    {
      "caller_function": "f",
      "called_function": "glUniform1i",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 797,
        "column": 0
      },
      "context": "glUniform1i(u_effect_type, (int)current_effect);"
    },
    {
      "caller_function": "f",
      "called_function": "check_gl_error",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 798,
        "column": 0
      },
      "context": "check_gl_error(\"uniform effect_type\");"
    },
    {
      "caller_function": "f",
      "called_function": "glUniform4fv",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 802,
        "column": 0
      },
      "context": "glUniform4fv(u_effect_params, 1, global_effect_params);"
    },
    {
      "caller_function": "f",
      "called_function": "check_gl_error",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 803,
        "column": 0
      },
      "context": "check_gl_error(\"uniform effect_params\");"
    },
    {
      "caller_function": "f",
      "called_function": "glUniform4fv",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 807,
        "column": 0
      },
      "context": "glUniform4fv(u_explosion_center, 1, current_explosion_center);"
    },
    {
      "caller_function": "f",
      "called_function": "check_gl_error",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 808,
        "column": 0
      },
      "context": "check_gl_error(\"uniform explosion_center\");"
    },
    {
      "caller_function": "f",
      "called_function": "glUniform4fv",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 812,
        "column": 0
      },
      "context": "glUniform4fv(u_explosion_size, 1, current_explosion_size);"
    },
    {
      "caller_function": "f",
      "called_function": "check_gl_error",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 813,
        "column": 0
      },
      "context": "check_gl_error(\"uniform explosion_size\");"
    },
    {
      "caller_function": "f",
      "called_function": "glUniform4fv",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 818,
        "column": 0
      },
      "context": "glUniform4fv(u_explosion_data, 1, explosion_data);"
    },
    {
      "caller_function": "f",
      "called_function": "check_gl_error",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 819,
        "column": 0
      },
      "context": "check_gl_error(\"uniform explosion_data\");"
    },
    {
      "caller_function": "f",
      "called_function": "glUniform4fv",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 823,
        "column": 0
      },
      "context": "glUniform4fv(u_vortex_data, 1, vortex_data);"
    },
    {
      "caller_function": "f",
      "called_function": "check_gl_error",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 824,
        "column": 0
      },
      "context": "check_gl_error(\"uniform vortex_data\");"
    },
    {
      "caller_function": "f",
      "called_function": "glUniform1f",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 828,
        "column": 0
      },
      "context": "glUniform1f(u_air_density, air_density);"
    },
    {
      "caller_function": "f",
      "called_function": "check_gl_error",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 829,
        "column": 0
      },
      "context": "check_gl_error(\"uniform air_density\");"
    },
    {
      "caller_function": "f",
      "called_function": "glUniform2fv",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 833,
        "column": 0
      },
      "context": "glUniform2fv(u_magnetic_field, 1, magnetic_field);"
    },
    {
      "caller_function": "f",
      "called_function": "check_gl_error",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 834,
        "column": 0
      },
      "context": "check_gl_error(\"uniform magnetic_field\");"
    },
    {
      "caller_function": "f",
      "called_function": "glActiveTexture",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 839,
        "column": 0
      },
      "context": "glActiveTexture(GL_TEXTURE1);"
    },
    {
      "caller_function": "f",
      "called_function": "glBindTexture",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 840,
        "column": 0
      },
      "context": "glBindTexture(GL_TEXTURE_2D, noise_lut_texture);"
    },
    {
      "caller_function": "f",
      "called_function": "glUniform1i",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 841,
        "column": 0
      },
      "context": "glUniform1i(u_noise_lut, 1);"
    },
    {
      "caller_function": "f",
      "called_function": "check_gl_error",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 842,
        "column": 0
      },
      "context": "check_gl_error(\"uniform noise_lut\");"
    },
    {
      "caller_function": "f",
      "called_function": "glActiveTexture",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 843,
        "column": 0
      },
      "context": "glActiveTexture(GL_TEXTURE0); // Reset to default"
    },
    {
      "caller_function": "f",
      "called_function": "GPUAcceleratedRenderer::add_sprite",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 847,
        "column": 0
      },
      "context": "void GPUAcceleratedRenderer::add_sprite(float x, float y, float w, float h, GLuint texture,"
    },
    {
      "caller_function": "f",
      "called_function": "add_sprite",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 847,
        "column": 0
      },
      "context": "void GPUAcceleratedRenderer::add_sprite(float x, float y, float w, float h, GLuint texture,"
    },
    {
      "caller_function": "f",
      "called_function": "add_animated_sprite",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 849,
        "column": 0
      },
      "context": "add_animated_sprite(x, y, w, h, texture, color, rotation, scale, current_effect, sprite_number);"
    },
    {
      "caller_function": "f",
      "called_function": "GPUAcceleratedRenderer::add_animated_sprite",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 852,
        "column": 0
      },
      "context": "void GPUAcceleratedRenderer::add_animated_sprite(float x, float y, float w, float h, GLuint texture,"
    },
    {
      "caller_function": "f",
      "called_function": "add_animated_sprite",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 852,
        "column": 0
      },
      "context": "void GPUAcceleratedRenderer::add_animated_sprite(float x, float y, float w, float h, GLuint texture,"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 856,
        "column": 0
      },
      "context": "SDL_Log(\"GPU Renderer: Not ready, skipping sprite\");"
    },
    {
      "caller_function": "f",
      "called_function": "flush_batch",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 861,
        "column": 0
      },
      "context": "flush_batch();"
    },
    {
      "caller_function": "f",
      "called_function": "flush_batch",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 865,
        "column": 0
      },
      "context": "flush_batch();"
    },
    {
      "caller_function": "f",
      "called_function": "flush_batch",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 869,
        "column": 0
      },
      "context": "flush_batch();"
    },
    {
      "caller_function": "f",
      "called_function": "calculate_sprite_uv",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 892,
        "column": 0
      },
      "context": "calculate_sprite_uv(texture, sprite_number, u_start, u_end, v_start, v_end);"
    },
    {
      "caller_function": "r",
      "called_function": "memset",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 905,
        "column": 0
      },
      "context": "memset(&vertex, 0, sizeof(AdvancedVertex));"
    },
    {
      "caller_function": "y",
      "called_function": "push_back",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 926,
        "column": 0
      },
      "context": "batch_vertices.push_back(vertex);"
    },
    {
      "caller_function": "y",
      "called_function": "flush_batch",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 930,
        "column": 0
      },
      "context": "flush_batch();"
    },
    {
      "caller_function": "h",
      "called_function": "flush_batch",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 934,
        "column": 0
      },
      "context": "flush_batch();"
    },
    {
      "caller_function": "u",
      "called_function": "glUseProgram",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 940,
        "column": 0
      },
      "context": "glUseProgram(particle_compute_program);"
    },
    {
      "caller_function": "u",
      "called_function": "glUniform1f",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 943,
        "column": 0
      },
      "context": "glUniform1f(u_delta_time, deltaTime);"
    },
    {
      "caller_function": "f",
      "called_function": "glUniform4fv",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 953,
        "column": 0
      },
      "context": "glUniform4fv(u_physics_constants, 1, physics_data);"
    },
    {
      "caller_function": "f",
      "called_function": "glUniform2f",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 956,
        "column": 0
      },
      "context": "glUniform2f(u_world_size, (float)screen_width, (float)screen_height);"
    },
    {
      "caller_function": "f",
      "called_function": "glGetUniformLocation",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 959,
        "column": 0
      },
      "context": "GLint u_explosion_compute = glGetUniformLocation(particle_compute_program, \"uExplosionData\");"
    },
    {
      "caller_function": "f",
      "called_function": "glUniform4fv",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 961,
        "column": 0
      },
      "context": "glUniform4fv(u_explosion_compute, 1, explosion_data);"
    },
    {
      "caller_function": "f",
      "called_function": "glGetUniformLocation",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 964,
        "column": 0
      },
      "context": "GLint u_vortex_compute = glGetUniformLocation(particle_compute_program, \"uVortexData\");"
    },
    {
      "caller_function": "f",
      "called_function": "glUniform4fv",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 966,
        "column": 0
      },
      "context": "glUniform4fv(u_vortex_compute, 1, vortex_data);"
    },
    {
      "caller_function": "f",
      "called_function": "glGetUniformLocation",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 969,
        "column": 0
      },
      "context": "GLint u_air_density_compute = glGetUniformLocation(particle_compute_program, \"uAirDensity\");"
    },
    {
      "caller_function": "f",
      "called_function": "glUniform1f",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 971,
        "column": 0
      },
      "context": "glUniform1f(u_air_density_compute, air_density);"
    },
    {
      "caller_function": "f",
      "called_function": "glGetUniformLocation",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 974,
        "column": 0
      },
      "context": "GLint u_magnetic_compute = glGetUniformLocation(particle_compute_program, \"uMagneticField\");"
    },
    {
      "caller_function": "f",
      "called_function": "glUniform2fv",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 976,
        "column": 0
      },
      "context": "glUniform2fv(u_magnetic_compute, 1, magnetic_field);"
    },
    {
      "caller_function": "f",
      "called_function": "glActiveTexture",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 981,
        "column": 0
      },
      "context": "glActiveTexture(GL_TEXTURE2);"
    },
    {
      "caller_function": "f",
      "called_function": "glBindTexture",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 982,
        "column": 0
      },
      "context": "glBindTexture(GL_TEXTURE_2D, turbulence_texture);"
    },
    {
      "caller_function": "f",
      "called_function": "glUniform1i",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 983,
        "column": 0
      },
      "context": "glUniform1i(u_turbulence_field, 2);"
    },
    {
      "caller_function": "f",
      "called_function": "glActiveTexture",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 984,
        "column": 0
      },
      "context": "glActiveTexture(GL_TEXTURE0); // Reset"
    },
    {
      "caller_function": "f",
      "called_function": "glDispatchCompute",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 989,
        "column": 0
      },
      "context": "glDispatchCompute(num_groups, 1, 1);"
    },
    {
      "caller_function": "f",
      "called_function": "glMemoryBarrier",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 992,
        "column": 0
      },
      "context": "glMemoryBarrier(GL_SHADER_STORAGE_BARRIER_BIT);"
    },
    {
      "caller_function": "f",
      "called_function": "GPUAcceleratedRenderer::emit_particles",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 997,
        "column": 0
      },
      "context": "void GPUAcceleratedRenderer::emit_particles(float x, float y, int count, ParticleType type,"
    },
    {
      "caller_function": "f",
      "called_function": "emit_particles",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 997,
        "column": 0
      },
      "context": "void GPUAcceleratedRenderer::emit_particles(float x, float y, int count, ParticleType type,"
    },
    {
      "caller_function": "f",
      "called_function": "glBindBuffer",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 1000,
        "column": 0
      },
      "context": "glBindBuffer(GL_SHADER_STORAGE_BUFFER, particle_ssbo);"
    },
    {
      "caller_function": "f",
      "called_function": "glMapBuffer",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 1001,
        "column": 0
      },
      "context": "GPUParticle* particles = (GPUParticle*)glMapBuffer(GL_SHADER_STORAGE_BUFFER, GL_READ_WRITE);"
    },
    {
      "caller_function": "f",
      "called_function": "gen",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 1006,
        "column": 0
      },
      "context": "std::mt19937 gen(rd());"
    },
    {
      "caller_function": "f",
      "called_function": "angle_dist",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 1007,
        "column": 0
      },
      "context": "std::uniform_real_distribution<float> angle_dist(0.0f, 2.0f * M_PI);"
    },
    {
      "caller_function": "f",
      "called_function": "speed_dist",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 1008,
        "column": 0
      },
      "context": "std::uniform_real_distribution<float> speed_dist(50.0f, 300.0f);"
    },
    {
      "caller_function": "f",
      "called_function": "size_dist",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 1009,
        "column": 0
      },
      "context": "std::uniform_real_distribution<float> size_dist(1.0f, 4.0f);"
    },
    {
      "caller_function": "f",
      "called_function": "gen",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 1018,
        "column": 0
      },
      "context": "particles[i].position[0] = x + (gen() % 10 - 5); // Small random offset"
    },
    {
      "caller_function": "f",
      "called_function": "gen",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 1019,
        "column": 0
      },
      "context": "particles[i].position[1] = y + (gen() % 10 - 5);"
    },
    {
      "caller_function": "f",
      "called_function": "angle_dist",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 1022,
        "column": 0
      },
      "context": "float angle = angle_dist(gen);"
    },
    {
      "caller_function": "f",
      "called_function": "speed_dist",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 1023,
        "column": 0
      },
      "context": "float speed = speed_dist(gen);"
    },
    {
      "caller_function": "f",
      "called_function": "cos",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 1024,
        "column": 0
      },
      "context": "particles[i].velocity[0] = use_velocity[0] + cos(angle) * speed;"
    },
    {
      "caller_function": "f",
      "called_function": "sin",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 1025,
        "column": 0
      },
      "context": "particles[i].velocity[1] = use_velocity[1] + sin(angle) * speed;"
    },
    {
      "caller_function": "f",
      "called_function": "size_dist",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 1034,
        "column": 0
      },
      "context": "particles[i].size = size_dist(gen);"
    },
    {
      "caller_function": "f",
      "called_function": "gen",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 1035,
        "column": 0
      },
      "context": "particles[i].mass = 1.0f + (gen() % 100) / 100.0f; // 1.0 to 2.0"
    },
    {
      "caller_function": "h",
      "called_function": "gen",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 1073,
        "column": 0
      },
      "context": "particles[i].angular_velocity = (gen() % 200 - 100) / 10.0f; // -10 to 10"
    },
    {
      "caller_function": "h",
      "called_function": "glUnmapBuffer",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 1080,
        "column": 0
      },
      "context": "glUnmapBuffer(GL_SHADER_STORAGE_BUFFER);"
    },
    {
      "caller_function": "f",
      "called_function": "glm_mat4_identity",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 1097,
        "column": 0
      },
      "context": "glm_mat4_identity(view_matrix);"
    },
    {
      "caller_function": "e",
      "called_function": "glm_scale_uni",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 1099,
        "column": 0
      },
      "context": "glm_scale_uni(view_matrix, camera_zoom);"
    },
    {
      "caller_function": "f",
      "called_function": "memcpy",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 1104,
        "column": 0
      },
      "context": "memcpy(global_effect_params, params, 4 * sizeof(float));"
    },
    {
      "caller_function": "e",
      "called_function": "glGenTextures",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 1112,
        "column": 0
      },
      "context": "glGenTextures(1, &texture);"
    },
    {
      "caller_function": "e",
      "called_function": "glBindTexture",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 1113,
        "column": 0
      },
      "context": "glBindTexture(GL_TEXTURE_2D, texture);"
    },
    {
      "caller_function": "e",
      "called_function": "glTexParameteri",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 1115,
        "column": 0
      },
      "context": "glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);"
    },
    {
      "caller_function": "e",
      "called_function": "glTexParameteri",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 1116,
        "column": 0
      },
      "context": "glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);"
    },
    {
      "caller_function": "e",
      "called_function": "glTexParameteri",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 1117,
        "column": 0
      },
      "context": "glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);"
    },
    {
      "caller_function": "e",
      "called_function": "glTexParameteri",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 1118,
        "column": 0
      },
      "context": "glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);"
    },
    {
      "caller_function": "e",
      "called_function": "glTexImage2D",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 1121,
        "column": 0
      },
      "context": "glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA, surface->w, surface->h, 0, GL_RGBA, GL_UNSIGNED_BYTE, surfac"
    },
    {
      "caller_function": "e",
      "called_function": "glGenerateMipmap",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 1122,
        "column": 0
      },
      "context": "glGenerateMipmap(GL_TEXTURE_2D);"
    },
    {
      "caller_function": "s",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 1128,
        "column": 0
      },
      "context": "SDL_Log(\"=== GPU Renderer Performance Stats ===\");"
    },
    {
      "caller_function": "s",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 1129,
        "column": 0
      },
      "context": "SDL_Log(\"Draw calls: %d\", perf_stats.draw_calls);"
    },
    {
      "caller_function": "s",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 1130,
        "column": 0
      },
      "context": "SDL_Log(\"Particles rendered: %d\", perf_stats.particles_rendered);"
    },
    {
      "caller_function": "s",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 1131,
        "column": 0
      },
      "context": "SDL_Log(\"Vertices rendered: %d\", perf_stats.vertices_rendered);"
    },
    {
      "caller_function": "s",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 1132,
        "column": 0
      },
      "context": "SDL_Log(\"GPU time: %.2f ms\", perf_stats.gpu_time);"
    },
    {
      "caller_function": "s",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 1133,
        "column": 0
      },
      "context": "SDL_Log(\"CPU time: %.2f ms\", perf_stats.cpu_time);"
    },
    {
      "caller_function": "v",
      "called_function": "find",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 1150,
        "column": 0
      },
      "context": "auto it = texture_metadata.find(texture);"
    },
    {
      "caller_function": "f",
      "called_function": "glm_vec2_zero",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 1203,
        "column": 0
      },
      "context": "glm_vec2_zero(magnetic_field);"
    },
    {
      "caller_function": "s",
      "called_function": "glm_vec4_zero",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 1209,
        "column": 0
      },
      "context": "glm_vec4_zero(explosion_data);"
    },
    {
      "caller_function": "s",
      "called_function": "glm_vec4_zero",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 1210,
        "column": 0
      },
      "context": "glm_vec4_zero(vortex_data);"
    },
    {
      "caller_function": "s",
      "called_function": "glm_vec2_zero",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 1212,
        "column": 0
      },
      "context": "glm_vec2_zero(magnetic_field);"
    },
    {
      "caller_function": "s",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 1214,
        "column": 0
      },
      "context": "SDL_Log(\"GPU Renderer: All spectacular effects cleared\");"
    },
    {
      "caller_function": "o",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 1228,
        "column": 0
      },
      "context": "SDL_Log(\"DEBUG: Set explosion info - center:(%.1f,%.1f) age:%.3f active:1.0 size:(%d,%d,%d,%d)\","
    },
    {
      "caller_function": "o",
      "called_function": "glm_vec4_zero",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 1233,
        "column": 0
      },
      "context": "glm_vec4_zero(current_explosion_center);"
    },
    {
      "caller_function": "o",
      "called_function": "glm_vec4_zero",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 1234,
        "column": 0
      },
      "context": "glm_vec4_zero(current_explosion_size);"
    },
    {
      "caller_function": "n",
      "called_function": "LifecycleManager",
      "location": {
        "file": "src/ClanBomber.cpp",
        "line": 34,
        "column": 0
      },
      "context": "lifecycle_manager = new LifecycleManager();"
    },
    {
      "caller_function": "n",
      "called_function": "TileManager",
      "location": {
        "file": "src/ClanBomber.cpp",
        "line": 35,
        "column": 0
      },
      "context": "tile_manager = new TileManager();"
    },
    {
      "caller_function": "n",
      "called_function": "ParticleEffectsManager",
      "location": {
        "file": "src/ClanBomber.cpp",
        "line": 36,
        "column": 0
      },
      "context": "particle_effects = new ParticleEffectsManager(this);"
    },
    {
      "caller_function": "n",
      "called_function": "ClanBomberApplication",
      "location": {
        "file": "src/ClanBomber.cpp",
        "line": 40,
        "column": 0
      },
      "context": "ClanBomberApplication::~ClanBomberApplication() {"
    },
    {
      "caller_function": "n",
      "called_function": "delete_all_game_objects",
      "location": {
        "file": "src/ClanBomber.cpp",
        "line": 41,
        "column": 0
      },
      "context": "delete_all_game_objects();"
    },
    {
      "caller_function": "t",
      "called_function": "GameContext",
      "location": {
        "file": "src/ClanBomber.cpp",
        "line": 69,
        "column": 0
      },
      "context": "game_context = new GameContext("
    },
    {
      "caller_function": "t",
      "called_function": "set_map",
      "location": {
        "file": "src/ClanBomber.cpp",
        "line": 73,
        "column": 0
      },
      "context": "nullptr,  // Map will be set later via set_map()"
    },
    {
      "caller_function": "t",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/ClanBomber.cpp",
        "line": 78,
        "column": 0
      },
      "context": "SDL_Log(\"GameContext initialized successfully (map will be set later)\");"
    },
    {
      "caller_function": "t",
      "called_function": "successfully",
      "location": {
        "file": "src/ClanBomber.cpp",
        "line": 78,
        "column": 0
      },
      "context": "SDL_Log(\"GameContext initialized successfully (map will be set later)\");"
    },
    {
      "caller_function": "f",
      "called_function": "set_context",
      "location": {
        "file": "src/ClanBomber.cpp",
        "line": 82,
        "column": 0
      },
      "context": "tile_manager->set_context(game_context);"
    },
    {
      "caller_function": "f",
      "called_function": "set_map",
      "location": {
        "file": "src/ClanBomber.cpp",
        "line": 87,
        "column": 0
      },
      "context": "game_context->set_map(map);"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/ClanBomber.cpp",
        "line": 90,
        "column": 0
      },
      "context": "SDL_Log(\"ERROR: Cannot initialize GameContext - missing dependencies:\");"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/ClanBomber.cpp",
        "line": 91,
        "column": 0
      },
      "context": "SDL_Log(\"  text_renderer: %p\", text_renderer);"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/ClanBomber.cpp",
        "line": 92,
        "column": 0
      },
      "context": "SDL_Log(\"  lifecycle_manager: %p\", lifecycle_manager);"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/ClanBomber.cpp",
        "line": 93,
        "column": 0
      },
      "context": "SDL_Log(\"  tile_manager: %p\", tile_manager);"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/ClanBomber.cpp",
        "line": 94,
        "column": 0
      },
      "context": "SDL_Log(\"  particle_effects: %p\", particle_effects);"
    },
    {
      "caller_function": "r",
      "called_function": "clear",
      "location": {
        "file": "src/ClanBomber.cpp",
        "line": 163,
        "column": 0
      },
      "context": "objects.clear();"
    },
    {
      "caller_function": "r",
      "called_function": "clear",
      "location": {
        "file": "src/ClanBomber.cpp",
        "line": 168,
        "column": 0
      },
      "context": "bomber_objects.clear();"
    },
    {
      "caller_function": null,
      "called_function": "ParticleEffectsManager::ParticleEffectsManager",
      "location": {
        "file": "src/ParticleEffectsManager.cpp",
        "line": 9,
        "column": 0
      },
      "context": "ParticleEffectsManager::ParticleEffectsManager(ClanBomberApplication* app)"
    },
    {
      "caller_function": null,
      "called_function": "ParticleEffectsManager",
      "location": {
        "file": "src/ParticleEffectsManager.cpp",
        "line": 9,
        "column": 0
      },
      "context": "ParticleEffectsManager::ParticleEffectsManager(ClanBomberApplication* app)"
    },
    {
      "caller_function": null,
      "called_function": "app",
      "location": {
        "file": "src/ParticleEffectsManager.cpp",
        "line": 10,
        "column": 0
      },
      "context": ": app(app) {"
    },
    {
      "caller_function": null,
      "called_function": "SDL_Log",
      "location": {
        "file": "src/ParticleEffectsManager.cpp",
        "line": 11,
        "column": 0
      },
      "context": "SDL_Log(\"ParticleEffectsManager: Initialized centralized effects system\");"
    },
    {
      "caller_function": null,
      "called_function": "ParticleEffectsManager",
      "location": {
        "file": "src/ParticleEffectsManager.cpp",
        "line": 14,
        "column": 0
      },
      "context": "ParticleEffectsManager::~ParticleEffectsManager() {"
    },
    {
      "caller_function": null,
      "called_function": "SDL_Log",
      "location": {
        "file": "src/ParticleEffectsManager.cpp",
        "line": 15,
        "column": 0
      },
      "context": "SDL_Log(\"ParticleEffectsManager: Shutdown complete\");"
    },
    {
      "caller_function": "t",
      "called_function": "push_back",
      "location": {
        "file": "src/ParticleEffectsManager.cpp",
        "line": 19,
        "column": 0
      },
      "context": "pending_effects.push_back(request);"
    },
    {
      "caller_function": "h",
      "called_function": "process_box_destruction",
      "location": {
        "file": "src/ParticleEffectsManager.cpp",
        "line": 26,
        "column": 0
      },
      "context": "process_box_destruction(effect.x, effect.y, effect.intensity);"
    },
    {
      "caller_function": "h",
      "called_function": "process_explosion",
      "location": {
        "file": "src/ParticleEffectsManager.cpp",
        "line": 29,
        "column": 0
      },
      "context": "process_explosion(effect.x, effect.y, effect.intensity);"
    },
    {
      "caller_function": "h",
      "called_function": "clear",
      "location": {
        "file": "src/ParticleEffectsManager.cpp",
        "line": 35,
        "column": 0
      },
      "context": "pending_effects.clear();"
    },
    {
      "caller_function": "t",
      "called_function": "request_effect",
      "location": {
        "file": "src/ParticleEffectsManager.cpp",
        "line": 42,
        "column": 0
      },
      "context": "request_effect(EffectRequest(EffectType::BOX_DESTRUCTION, x, y, intensity));"
    },
    {
      "caller_function": "t",
      "called_function": "EffectRequest",
      "location": {
        "file": "src/ParticleEffectsManager.cpp",
        "line": 42,
        "column": 0
      },
      "context": "request_effect(EffectRequest(EffectType::BOX_DESTRUCTION, x, y, intensity));"
    },
    {
      "caller_function": "t",
      "called_function": "request_effect",
      "location": {
        "file": "src/ParticleEffectsManager.cpp",
        "line": 46,
        "column": 0
      },
      "context": "request_effect(EffectRequest(EffectType::EXPLOSION, x, y, intensity));"
    },
    {
      "caller_function": "t",
      "called_function": "EffectRequest",
      "location": {
        "file": "src/ParticleEffectsManager.cpp",
        "line": 46,
        "column": 0
      },
      "context": "request_effect(EffectRequest(EffectType::EXPLOSION, x, y, intensity));"
    },
    {
      "caller_function": "n",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/ParticleEffectsManager.cpp",
        "line": 53,
        "column": 0
      },
      "context": "SDL_Log(\"ParticleEffectsManager: Box destruction effect disabled during renderer migration\");"
    },
    {
      "caller_function": null,
      "called_function": "TextTexture",
      "location": {
        "file": "src/TextRenderer.cpp",
        "line": 7,
        "column": 0
      },
      "context": "TextTexture::~TextTexture() {"
    },
    {
      "caller_function": "f",
      "called_function": "glDeleteTextures",
      "location": {
        "file": "src/TextRenderer.cpp",
        "line": 9,
        "column": 0
      },
      "context": "glDeleteTextures(1, &gl_texture);"
    },
    {
      "caller_function": "r",
      "called_function": "TextRenderer",
      "location": {
        "file": "src/TextRenderer.cpp",
        "line": 16,
        "column": 0
      },
      "context": "TextRenderer::~TextRenderer() {"
    },
    {
      "caller_function": "r",
      "called_function": "shutdown",
      "location": {
        "file": "src/TextRenderer.cpp",
        "line": 17,
        "column": 0
      },
      "context": "shutdown();"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_GetError",
      "location": {
        "file": "src/TextRenderer.cpp",
        "line": 22,
        "column": 0
      },
      "context": "std::cerr << \"Failed to initialize SDL_ttf: \" << SDL_GetError() << std::endl;"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/TextRenderer.cpp",
        "line": 27,
        "column": 0
      },
      "context": "SDL_Log(\"TextRenderer: SDL_ttf initialized successfully\");"
    },
    {
      "caller_function": "n",
      "called_function": "clear",
      "location": {
        "file": "src/TextRenderer.cpp",
        "line": 33,
        "column": 0
      },
      "context": "text_cache.clear();"
    },
    {
      "caller_function": "f",
      "called_function": "TTF_CloseFont",
      "location": {
        "file": "src/TextRenderer.cpp",
        "line": 38,
        "column": 0
      },
      "context": "TTF_CloseFont(pair.second);"
    },
    {
      "caller_function": "f",
      "called_function": "clear",
      "location": {
        "file": "src/TextRenderer.cpp",
        "line": 41,
        "column": 0
      },
      "context": "fonts.clear();"
    },
    {
      "caller_function": "f",
      "called_function": "TTF_Quit",
      "location": {
        "file": "src/TextRenderer.cpp",
        "line": 44,
        "column": 0
      },
      "context": "TTF_Quit();"
    },
    {
      "caller_function": "t",
      "called_function": "TTF_OpenFont",
      "location": {
        "file": "src/TextRenderer.cpp",
        "line": 50,
        "column": 0
      },
      "context": "TTF_Font* font = TTF_OpenFont(path.c_str(), size);"
    },
    {
      "caller_function": "t",
      "called_function": "c_str",
      "location": {
        "file": "src/TextRenderer.cpp",
        "line": 50,
        "column": 0
      },
      "context": "TTF_Font* font = TTF_OpenFont(path.c_str(), size);"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_GetError",
      "location": {
        "file": "src/TextRenderer.cpp",
        "line": 52,
        "column": 0
      },
      "context": "std::cerr << \"Failed to load font \" << path << \": \" << SDL_GetError() << std::endl;"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/TextRenderer.cpp",
        "line": 57,
        "column": 0
      },
      "context": "SDL_Log(\"TextRenderer: Loaded font '%s' from %s (size %d)\", name.c_str(), path.c_str(), size);"
    },
    {
      "caller_function": "f",
      "called_function": "c_str",
      "location": {
        "file": "src/TextRenderer.cpp",
        "line": 57,
        "column": 0
      },
      "context": "SDL_Log(\"TextRenderer: Loaded font '%s' from %s (size %d)\", name.c_str(), path.c_str(), size);"
    },
    {
      "caller_function": "f",
      "called_function": "c_str",
      "location": {
        "file": "src/TextRenderer.cpp",
        "line": 57,
        "column": 0
      },
      "context": "SDL_Log(\"TextRenderer: Loaded font '%s' from %s (size %d)\", name.c_str(), path.c_str(), size);"
    },
    {
      "caller_function": "t",
      "called_function": "find",
      "location": {
        "file": "src/TextRenderer.cpp",
        "line": 62,
        "column": 0
      },
      "context": "auto it = fonts.find(name);"
    },
    {
      "caller_function": "e",
      "called_function": "SDL_ConvertSurface",
      "location": {
        "file": "src/TextRenderer.cpp",
        "line": 73,
        "column": 0
      },
      "context": "SDL_Surface* rgba_surface = SDL_ConvertSurface(surface, SDL_PIXELFORMAT_RGBA32);"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_GetError",
      "location": {
        "file": "src/TextRenderer.cpp",
        "line": 75,
        "column": 0
      },
      "context": "std::cerr << \"Failed to convert text surface to RGBA: \" << SDL_GetError() << std::endl;"
    },
    {
      "caller_function": "f",
      "called_function": "glGenTextures",
      "location": {
        "file": "src/TextRenderer.cpp",
        "line": 80,
        "column": 0
      },
      "context": "glGenTextures(1, &texture);"
    },
    {
      "caller_function": "f",
      "called_function": "glBindTexture",
      "location": {
        "file": "src/TextRenderer.cpp",
        "line": 81,
        "column": 0
      },
      "context": "glBindTexture(GL_TEXTURE_2D, texture);"
    },
    {
      "caller_function": "f",
      "called_function": "glTexImage2D",
      "location": {
        "file": "src/TextRenderer.cpp",
        "line": 83,
        "column": 0
      },
      "context": "glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA, rgba_surface->w, rgba_surface->h, 0,"
    },
    {
      "caller_function": "f",
      "called_function": "glTexParameteri",
      "location": {
        "file": "src/TextRenderer.cpp",
        "line": 86,
        "column": 0
      },
      "context": "glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);"
    },
    {
      "caller_function": "f",
      "called_function": "glTexParameteri",
      "location": {
        "file": "src/TextRenderer.cpp",
        "line": 87,
        "column": 0
      },
      "context": "glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);"
    },
    {
      "caller_function": "f",
      "called_function": "glTexParameteri",
      "location": {
        "file": "src/TextRenderer.cpp",
        "line": 88,
        "column": 0
      },
      "context": "glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE);"
    },
    {
      "caller_function": "f",
      "called_function": "glTexParameteri",
      "location": {
        "file": "src/TextRenderer.cpp",
        "line": 89,
        "column": 0
      },
      "context": "glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_EDGE);"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_DestroySurface",
      "location": {
        "file": "src/TextRenderer.cpp",
        "line": 91,
        "column": 0
      },
      "context": "SDL_DestroySurface(rgba_surface);"
    },
    {
      "caller_function": "y",
      "called_function": "str",
      "location": {
        "file": "src/TextRenderer.cpp",
        "line": 98,
        "column": 0
      },
      "context": "return ss.str();"
    },
    {
      "caller_function": "t",
      "called_function": "make_cache_key",
      "location": {
        "file": "src/TextRenderer.cpp",
        "line": 103,
        "column": 0
      },
      "context": "std::string cache_key = make_cache_key(text, font_name, color);"
    },
    {
      "caller_function": "t",
      "called_function": "find",
      "location": {
        "file": "src/TextRenderer.cpp",
        "line": 104,
        "column": 0
      },
      "context": "auto cache_it = text_cache.find(cache_key);"
    },
    {
      "caller_function": "f",
      "called_function": "get_font",
      "location": {
        "file": "src/TextRenderer.cpp",
        "line": 110,
        "column": 0
      },
      "context": "TTF_Font* font = get_font(font_name);"
    },
    {
      "caller_function": "f",
      "called_function": "TTF_RenderText_Solid",
      "location": {
        "file": "src/TextRenderer.cpp",
        "line": 117,
        "column": 0
      },
      "context": "SDL_Surface* text_surface = TTF_RenderText_Solid(font, text.c_str(), text.length(), color);"
    },
    {
      "caller_function": "f",
      "called_function": "c_str",
      "location": {
        "file": "src/TextRenderer.cpp",
        "line": 117,
        "column": 0
      },
      "context": "SDL_Surface* text_surface = TTF_RenderText_Solid(font, text.c_str(), text.length(), color);"
    },
    {
      "caller_function": "f",
      "called_function": "length",
      "location": {
        "file": "src/TextRenderer.cpp",
        "line": 117,
        "column": 0
      },
      "context": "SDL_Surface* text_surface = TTF_RenderText_Solid(font, text.c_str(), text.length(), color);"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_GetError",
      "location": {
        "file": "src/TextRenderer.cpp",
        "line": 119,
        "column": 0
      },
      "context": "std::cerr << \"Failed to render text: \" << SDL_GetError() << std::endl;"
    },
    {
      "caller_function": "f",
      "called_function": "create_gl_texture_from_surface",
      "location": {
        "file": "src/TextRenderer.cpp",
        "line": 124,
        "column": 0
      },
      "context": "GLuint gl_texture = create_gl_texture_from_surface(text_surface);"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_DestroySurface",
      "location": {
        "file": "src/TextRenderer.cpp",
        "line": 126,
        "column": 0
      },
      "context": "SDL_DestroySurface(text_surface);"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_DestroySurface",
      "location": {
        "file": "src/TextRenderer.cpp",
        "line": 139,
        "column": 0
      },
      "context": "SDL_DestroySurface(text_surface);"
    },
    {
      "caller_function": "f",
      "called_function": "TextRenderer::draw_text",
      "location": {
        "file": "src/TextRenderer.cpp",
        "line": 147,
        "column": 0
      },
      "context": "void TextRenderer::draw_text(RenderingFacade* rendering_facade, const std::string& text,"
    },
    {
      "caller_function": "f",
      "called_function": "draw_text",
      "location": {
        "file": "src/TextRenderer.cpp",
        "line": 147,
        "column": 0
      },
      "context": "void TextRenderer::draw_text(RenderingFacade* rendering_facade, const std::string& text,"
    },
    {
      "caller_function": "f",
      "called_function": "TextRenderer::draw_text",
      "location": {
        "file": "src/TextRenderer.cpp",
        "line": 150,
        "column": 0
      },
      "context": "SDL_Log(\"TextRenderer::draw_text() - No RenderingFacade available\");"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/TextRenderer.cpp",
        "line": 150,
        "column": 0
      },
      "context": "SDL_Log(\"TextRenderer::draw_text() - No RenderingFacade available\");"
    },
    {
      "caller_function": "f",
      "called_function": "draw_text",
      "location": {
        "file": "src/TextRenderer.cpp",
        "line": 150,
        "column": 0
      },
      "context": "SDL_Log(\"TextRenderer::draw_text() - No RenderingFacade available\");"
    },
    {
      "caller_function": "f",
      "called_function": "position",
      "location": {
        "file": "src/TextRenderer.cpp",
        "line": 155,
        "column": 0
      },
      "context": "PixelCoord position(x, y);"
    },
    {
      "caller_function": "f",
      "called_function": "render_text",
      "location": {
        "file": "src/TextRenderer.cpp",
        "line": 156,
        "column": 0
      },
      "context": "auto result = rendering_facade->render_text(text, position, font_name, color.r, color.g, color.b);"
    },
    {
      "caller_function": "f",
      "called_function": "TextRenderer::draw_text",
      "location": {
        "file": "src/TextRenderer.cpp",
        "line": 159,
        "column": 0
      },
      "context": "SDL_Log(\"TextRenderer::draw_text() failed: %s\", result.get_error_message().c_str());"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/TextRenderer.cpp",
        "line": 159,
        "column": 0
      },
      "context": "SDL_Log(\"TextRenderer::draw_text() failed: %s\", result.get_error_message().c_str());"
    },
    {
      "caller_function": "f",
      "called_function": "draw_text",
      "location": {
        "file": "src/TextRenderer.cpp",
        "line": 159,
        "column": 0
      },
      "context": "SDL_Log(\"TextRenderer::draw_text() failed: %s\", result.get_error_message().c_str());"
    },
    {
      "caller_function": "f",
      "called_function": "get_error_message",
      "location": {
        "file": "src/TextRenderer.cpp",
        "line": 159,
        "column": 0
      },
      "context": "SDL_Log(\"TextRenderer::draw_text() failed: %s\", result.get_error_message().c_str());"
    },
    {
      "caller_function": "f",
      "called_function": "c_str",
      "location": {
        "file": "src/TextRenderer.cpp",
        "line": 159,
        "column": 0
      },
      "context": "SDL_Log(\"TextRenderer::draw_text() failed: %s\", result.get_error_message().c_str());"
    },
    {
      "caller_function": "f",
      "called_function": "TextRenderer::draw_text_centered",
      "location": {
        "file": "src/TextRenderer.cpp",
        "line": 163,
        "column": 0
      },
      "context": "void TextRenderer::draw_text_centered(RenderingFacade* rendering_facade, const std::string& text,"
    },
    {
      "caller_function": "f",
      "called_function": "draw_text_centered",
      "location": {
        "file": "src/TextRenderer.cpp",
        "line": 163,
        "column": 0
      },
      "context": "void TextRenderer::draw_text_centered(RenderingFacade* rendering_facade, const std::string& text,"
    },
    {
      "caller_function": "f",
      "called_function": "TextRenderer::draw_text_centered",
      "location": {
        "file": "src/TextRenderer.cpp",
        "line": 166,
        "column": 0
      },
      "context": "SDL_Log(\"TextRenderer::draw_text_centered() - No RenderingFacade available\");"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/TextRenderer.cpp",
        "line": 166,
        "column": 0
      },
      "context": "SDL_Log(\"TextRenderer::draw_text_centered() - No RenderingFacade available\");"
    },
    {
      "caller_function": "f",
      "called_function": "draw_text_centered",
      "location": {
        "file": "src/TextRenderer.cpp",
        "line": 166,
        "column": 0
      },
      "context": "SDL_Log(\"TextRenderer::draw_text_centered() - No RenderingFacade available\");"
    },
    {
      "caller_function": "f",
      "called_function": "position",
      "location": {
        "file": "src/TextRenderer.cpp",
        "line": 172,
        "column": 0
      },
      "context": "PixelCoord position(center_x, y);"
    },
    {
      "caller_function": "f",
      "called_function": "render_text",
      "location": {
        "file": "src/TextRenderer.cpp",
        "line": 173,
        "column": 0
      },
      "context": "auto result = rendering_facade->render_text(text, position, font_name, color.r, color.g, color.b);"
    },
    {
      "caller_function": "f",
      "called_function": "TextRenderer::draw_text_centered",
      "location": {
        "file": "src/TextRenderer.cpp",
        "line": 176,
        "column": 0
      },
      "context": "SDL_Log(\"TextRenderer::draw_text_centered() failed: %s\", result.get_error_message().c_str());"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/TextRenderer.cpp",
        "line": 176,
        "column": 0
      },
      "context": "SDL_Log(\"TextRenderer::draw_text_centered() failed: %s\", result.get_error_message().c_str());"
    },
    {
      "caller_function": "f",
      "called_function": "draw_text_centered",
      "location": {
        "file": "src/TextRenderer.cpp",
        "line": 176,
        "column": 0
      },
      "context": "SDL_Log(\"TextRenderer::draw_text_centered() failed: %s\", result.get_error_message().c_str());"
    },
    {
      "caller_function": "f",
      "called_function": "get_error_message",
      "location": {
        "file": "src/TextRenderer.cpp",
        "line": 176,
        "column": 0
      },
      "context": "SDL_Log(\"TextRenderer::draw_text_centered() failed: %s\", result.get_error_message().c_str());"
    },
    {
      "caller_function": "f",
      "called_function": "c_str",
      "location": {
        "file": "src/TextRenderer.cpp",
        "line": 176,
        "column": 0
      },
      "context": "SDL_Log(\"TextRenderer::draw_text_centered() failed: %s\", result.get_error_message().c_str());"
    },
    {
      "caller_function": null,
      "called_function": "Controller::Controller",
      "location": {
        "file": "src/Controller.cpp",
        "line": 28,
        "column": 0
      },
      "context": "Controller::Controller()"
    },
    {
      "caller_function": null,
      "called_function": "Controller",
      "location": {
        "file": "src/Controller.cpp",
        "line": 28,
        "column": 0
      },
      "context": "Controller::Controller()"
    },
    {
      "caller_function": null,
      "called_function": "Controller::attach",
      "location": {
        "file": "src/Controller.cpp",
        "line": 36,
        "column": 0
      },
      "context": "void Controller::attach(Bomber* _bomber)"
    },
    {
      "caller_function": null,
      "called_function": "attach",
      "location": {
        "file": "src/Controller.cpp",
        "line": 36,
        "column": 0
      },
      "context": "void Controller::attach(Bomber* _bomber)"
    },
    {
      "caller_function": null,
      "called_function": "Controller::activate",
      "location": {
        "file": "src/Controller.cpp",
        "line": 41,
        "column": 0
      },
      "context": "void Controller::activate()"
    },
    {
      "caller_function": null,
      "called_function": "activate",
      "location": {
        "file": "src/Controller.cpp",
        "line": 41,
        "column": 0
      },
      "context": "void Controller::activate()"
    },
    {
      "caller_function": null,
      "called_function": "Controller::deactivate",
      "location": {
        "file": "src/Controller.cpp",
        "line": 46,
        "column": 0
      },
      "context": "void Controller::deactivate()"
    },
    {
      "caller_function": null,
      "called_function": "deactivate",
      "location": {
        "file": "src/Controller.cpp",
        "line": 46,
        "column": 0
      },
      "context": "void Controller::deactivate()"
    },
    {
      "caller_function": null,
      "called_function": "Controller::revert",
      "location": {
        "file": "src/Controller.cpp",
        "line": 51,
        "column": 0
      },
      "context": "void Controller::revert()"
    },
    {
      "caller_function": null,
      "called_function": "revert",
      "location": {
        "file": "src/Controller.cpp",
        "line": 51,
        "column": 0
      },
      "context": "void Controller::revert()"
    },
    {
      "caller_function": null,
      "called_function": "Controller::bomb_normal",
      "location": {
        "file": "src/Controller.cpp",
        "line": 56,
        "column": 0
      },
      "context": "void Controller::bomb_normal()"
    },
    {
      "caller_function": null,
      "called_function": "bomb_normal",
      "location": {
        "file": "src/Controller.cpp",
        "line": 56,
        "column": 0
      },
      "context": "void Controller::bomb_normal()"
    },
    {
      "caller_function": null,
      "called_function": "Controller::bomb_always",
      "location": {
        "file": "src/Controller.cpp",
        "line": 61,
        "column": 0
      },
      "context": "void Controller::bomb_always()"
    },
    {
      "caller_function": null,
      "called_function": "bomb_always",
      "location": {
        "file": "src/Controller.cpp",
        "line": 61,
        "column": 0
      },
      "context": "void Controller::bomb_always()"
    },
    {
      "caller_function": null,
      "called_function": "Controller::create",
      "location": {
        "file": "src/Controller.cpp",
        "line": 68,
        "column": 0
      },
      "context": "Controller* Controller::create( CONTROLLER_TYPE _type )"
    },
    {
      "caller_function": null,
      "called_function": "create",
      "location": {
        "file": "src/Controller.cpp",
        "line": 68,
        "column": 0
      },
      "context": "Controller* Controller::create( CONTROLLER_TYPE _type )"
    },
    {
      "caller_function": "h",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/Controller.cpp",
        "line": 72,
        "column": 0
      },
      "context": "SDL_Log(\"Creating Modern AI controller (NORMAL difficulty)\");"
    },
    {
      "caller_function": "h",
      "called_function": "controller",
      "location": {
        "file": "src/Controller.cpp",
        "line": 72,
        "column": 0
      },
      "context": "SDL_Log(\"Creating Modern AI controller (NORMAL difficulty)\");"
    },
    {
      "caller_function": "h",
      "called_function": "Controller_AI_Modern",
      "location": {
        "file": "src/Controller.cpp",
        "line": 73,
        "column": 0
      },
      "context": "return new Controller_AI_Modern(ModernAIPersonality::NORMAL);"
    },
    {
      "caller_function": "h",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/Controller.cpp",
        "line": 75,
        "column": 0
      },
      "context": "SDL_Log(\"Creating Modern AI controller (HARD difficulty)\");"
    },
    {
      "caller_function": "h",
      "called_function": "controller",
      "location": {
        "file": "src/Controller.cpp",
        "line": 75,
        "column": 0
      },
      "context": "SDL_Log(\"Creating Modern AI controller (HARD difficulty)\");"
    },
    {
      "caller_function": "h",
      "called_function": "Controller_AI_Modern",
      "location": {
        "file": "src/Controller.cpp",
        "line": 76,
        "column": 0
      },
      "context": "return new Controller_AI_Modern(ModernAIPersonality::HARD);"
    },
    {
      "caller_function": "h",
      "called_function": "Controller_Keyboard",
      "location": {
        "file": "src/Controller.cpp",
        "line": 78,
        "column": 0
      },
      "context": "return new Controller_Keyboard(0);"
    },
    {
      "caller_function": "h",
      "called_function": "Controller_Keyboard",
      "location": {
        "file": "src/Controller.cpp",
        "line": 80,
        "column": 0
      },
      "context": "return new Controller_Keyboard(1);"
    },
    {
      "caller_function": "h",
      "called_function": "Controller_Keyboard",
      "location": {
        "file": "src/Controller.cpp",
        "line": 82,
        "column": 0
      },
      "context": "return new Controller_Keyboard(2);"
    },
    {
      "caller_function": "h",
      "called_function": "Controller_Joystick",
      "location": {
        "file": "src/Controller.cpp",
        "line": 86,
        "column": 0
      },
      "context": "return new Controller_Joystick(0);"
    },
    {
      "caller_function": "h",
      "called_function": "Controller_Joystick",
      "location": {
        "file": "src/Controller.cpp",
        "line": 88,
        "column": 0
      },
      "context": "return new Controller_Joystick(1);"
    },
    {
      "caller_function": "h",
      "called_function": "Controller_Joystick",
      "location": {
        "file": "src/Controller.cpp",
        "line": 90,
        "column": 0
      },
      "context": "return new Controller_Joystick(2);"
    },
    {
      "caller_function": "h",
      "called_function": "Controller_Joystick",
      "location": {
        "file": "src/Controller.cpp",
        "line": 92,
        "column": 0
      },
      "context": "return new Controller_Joystick(3);"
    },
    {
      "caller_function": "h",
      "called_function": "Controller_Joystick",
      "location": {
        "file": "src/Controller.cpp",
        "line": 94,
        "column": 0
      },
      "context": "return new Controller_Joystick(4);"
    },
    {
      "caller_function": "h",
      "called_function": "Controller_Joystick",
      "location": {
        "file": "src/Controller.cpp",
        "line": 96,
        "column": 0
      },
      "context": "return new Controller_Joystick(5);"
    },
    {
      "caller_function": "h",
      "called_function": "Controller_Joystick",
      "location": {
        "file": "src/Controller.cpp",
        "line": 98,
        "column": 0
      },
      "context": "return new Controller_Joystick(6);"
    },
    {
      "caller_function": "h",
      "called_function": "Controller_Joystick",
      "location": {
        "file": "src/Controller.cpp",
        "line": 100,
        "column": 0
      },
      "context": "return new Controller_Joystick(7);"
    },
    {
      "caller_function": "h",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/Controller.cpp",
        "line": 102,
        "column": 0
      },
      "context": "SDL_Log(\"Unknown controller type: %d, using KEYMAP_1 instead\", _type);"
    },
    {
      "caller_function": "h",
      "called_function": "Controller_Keyboard",
      "location": {
        "file": "src/Controller.cpp",
        "line": 103,
        "column": 0
      },
      "context": "return new Controller_Keyboard(0);"
    },
    {
      "caller_function": "h",
      "called_function": "Controller::get_type",
      "location": {
        "file": "src/Controller.cpp",
        "line": 107,
        "column": 0
      },
      "context": "Controller::CONTROLLER_TYPE Controller::get_type()"
    },
    {
      "caller_function": "h",
      "called_function": "get_type",
      "location": {
        "file": "src/Controller.cpp",
        "line": 107,
        "column": 0
      },
      "context": "Controller::CONTROLLER_TYPE Controller::get_type()"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/Game.cpp",
        "line": 16,
        "column": 0
      },
      "context": "SDL_Log(\"Unable to initialize SDL: %s\", SDL_GetError());"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_GetError",
      "location": {
        "file": "src/Game.cpp",
        "line": 16,
        "column": 0
      },
      "context": "SDL_Log(\"Unable to initialize SDL: %s\", SDL_GetError());"
    },
    {
      "caller_function": "f",
      "called_function": "exit",
      "location": {
        "file": "src/Game.cpp",
        "line": 17,
        "column": 0
      },
      "context": "exit(1);"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_GL_SetAttribute",
      "location": {
        "file": "src/Game.cpp",
        "line": 22,
        "column": 0
      },
      "context": "SDL_GL_SetAttribute(SDL_GL_CONTEXT_MAJOR_VERSION, 4);"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_GL_SetAttribute",
      "location": {
        "file": "src/Game.cpp",
        "line": 23,
        "column": 0
      },
      "context": "SDL_GL_SetAttribute(SDL_GL_CONTEXT_MINOR_VERSION, 6);"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_GL_SetAttribute",
      "location": {
        "file": "src/Game.cpp",
        "line": 24,
        "column": 0
      },
      "context": "SDL_GL_SetAttribute(SDL_GL_CONTEXT_PROFILE_MASK, SDL_GL_CONTEXT_PROFILE_CORE);"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_GL_SetAttribute",
      "location": {
        "file": "src/Game.cpp",
        "line": 25,
        "column": 0
      },
      "context": "SDL_GL_SetAttribute(SDL_GL_DOUBLEBUFFER, 1);"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_GL_SetAttribute",
      "location": {
        "file": "src/Game.cpp",
        "line": 26,
        "column": 0
      },
      "context": "SDL_GL_SetAttribute(SDL_GL_DEPTH_SIZE, 24);"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_GL_SetAttribute",
      "location": {
        "file": "src/Game.cpp",
        "line": 27,
        "column": 0
      },
      "context": "SDL_GL_SetAttribute(SDL_GL_STENCIL_SIZE, 8);"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_GL_SetAttribute",
      "location": {
        "file": "src/Game.cpp",
        "line": 28,
        "column": 0
      },
      "context": "SDL_GL_SetAttribute(SDL_GL_MULTISAMPLEBUFFERS, 1);"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_GL_SetAttribute",
      "location": {
        "file": "src/Game.cpp",
        "line": 29,
        "column": 0
      },
      "context": "SDL_GL_SetAttribute(SDL_GL_MULTISAMPLESAMPLES, 4);"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_CreateWindow",
      "location": {
        "file": "src/Game.cpp",
        "line": 31,
        "column": 0
      },
      "context": "window = SDL_CreateWindow(\"ClanBomber Modern\", 800, 600,"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/Game.cpp",
        "line": 34,
        "column": 0
      },
      "context": "SDL_Log(\"Unable to create window: %s\", SDL_GetError());"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_GetError",
      "location": {
        "file": "src/Game.cpp",
        "line": 34,
        "column": 0
      },
      "context": "SDL_Log(\"Unable to create window: %s\", SDL_GetError());"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Quit",
      "location": {
        "file": "src/Game.cpp",
        "line": 35,
        "column": 0
      },
      "context": "SDL_Quit();"
    },
    {
      "caller_function": "f",
      "called_function": "exit",
      "location": {
        "file": "src/Game.cpp",
        "line": 36,
        "column": 0
      },
      "context": "exit(1);"
    },
    {
      "caller_function": "f",
      "called_function": "Timer::init",
      "location": {
        "file": "src/Game.cpp",
        "line": 42,
        "column": 0
      },
      "context": "Timer::init();"
    },
    {
      "caller_function": "f",
      "called_function": "init",
      "location": {
        "file": "src/Game.cpp",
        "line": 42,
        "column": 0
      },
      "context": "Timer::init();"
    },
    {
      "caller_function": "f",
      "called_function": "Controller_Joystick::initialize_joystick_system",
      "location": {
        "file": "src/Game.cpp",
        "line": 45,
        "column": 0
      },
      "context": "Controller_Joystick::initialize_joystick_system();"
    },
    {
      "caller_function": "f",
      "called_function": "initialize_joystick_system",
      "location": {
        "file": "src/Game.cpp",
        "line": 45,
        "column": 0
      },
      "context": "Controller_Joystick::initialize_joystick_system();"
    },
    {
      "caller_function": "f",
      "called_function": "TextRenderer",
      "location": {
        "file": "src/Game.cpp",
        "line": 48,
        "column": 0
      },
      "context": "app.text_renderer = new TextRenderer();"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/Game.cpp",
        "line": 50,
        "column": 0
      },
      "context": "SDL_Log(\"Failed to initialize TextRenderer, text will not be available\");"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/Game.cpp",
        "line": 54,
        "column": 0
      },
      "context": "SDL_Log(\"TextRenderer initialized successfully\");"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/Game.cpp",
        "line": 58,
        "column": 0
      },
      "context": "SDL_Log(\"Legacy GPU renderer removed - RenderingFacade will handle all rendering\");"
    },
    {
      "caller_function": "f",
      "called_function": "initialize_game_context",
      "location": {
        "file": "src/Game.cpp",
        "line": 61,
        "column": 0
      },
      "context": "app.initialize_game_context();"
    },
    {
      "caller_function": "f",
      "called_function": "get_rendering_facade",
      "location": {
        "file": "src/Game.cpp",
        "line": 65,
        "column": 0
      },
      "context": "RenderingFacade* facade = app.game_context->get_rendering_facade();"
    },
    {
      "caller_function": "f",
      "called_function": "initialize",
      "location": {
        "file": "src/Game.cpp",
        "line": 66,
        "column": 0
      },
      "context": "auto init_result = facade->initialize(window, 800, 600);"
    },
    {
      "caller_function": "f",
      "called_function": "Game::Game",
      "location": {
        "file": "src/Game.cpp",
        "line": 68,
        "column": 0
      },
      "context": "SDL_Log(\"Game::Game() - RenderingFacade initialized successfully\");"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/Game.cpp",
        "line": 68,
        "column": 0
      },
      "context": "SDL_Log(\"Game::Game() - RenderingFacade initialized successfully\");"
    },
    {
      "caller_function": "f",
      "called_function": "Game",
      "location": {
        "file": "src/Game.cpp",
        "line": 68,
        "column": 0
      },
      "context": "SDL_Log(\"Game::Game() - RenderingFacade initialized successfully\");"
    },
    {
      "caller_function": "f",
      "called_function": "Game::Game",
      "location": {
        "file": "src/Game.cpp",
        "line": 70,
        "column": 0
      },
      "context": "SDL_Log(\"Game::Game() - Failed to initialize RenderingFacade: %s (%s)\","
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/Game.cpp",
        "line": 70,
        "column": 0
      },
      "context": "SDL_Log(\"Game::Game() - Failed to initialize RenderingFacade: %s (%s)\","
    },
    {
      "caller_function": "f",
      "called_function": "Game",
      "location": {
        "file": "src/Game.cpp",
        "line": 70,
        "column": 0
      },
      "context": "SDL_Log(\"Game::Game() - Failed to initialize RenderingFacade: %s (%s)\","
    },
    {
      "caller_function": "f",
      "called_function": "get_error_message",
      "location": {
        "file": "src/Game.cpp",
        "line": 71,
        "column": 0
      },
      "context": "init_result.get_error_message().c_str(),"
    },
    {
      "caller_function": "f",
      "called_function": "c_str",
      "location": {
        "file": "src/Game.cpp",
        "line": 71,
        "column": 0
      },
      "context": "init_result.get_error_message().c_str(),"
    },
    {
      "caller_function": "f",
      "called_function": "get_error_context",
      "location": {
        "file": "src/Game.cpp",
        "line": 72,
        "column": 0
      },
      "context": "init_result.get_error_context().c_str());"
    },
    {
      "caller_function": "f",
      "called_function": "c_str",
      "location": {
        "file": "src/Game.cpp",
        "line": 72,
        "column": 0
      },
      "context": "init_result.get_error_context().c_str());"
    },
    {
      "caller_function": "f",
      "called_function": "Resources::init",
      "location": {
        "file": "src/Game.cpp",
        "line": 77,
        "column": 0
      },
      "context": "Resources::init();  // Now OpenGL context exists"
    },
    {
      "caller_function": "f",
      "called_function": "init",
      "location": {
        "file": "src/Game.cpp",
        "line": 77,
        "column": 0
      },
      "context": "Resources::init();  // Now OpenGL context exists"
    },
    {
      "caller_function": "f",
      "called_function": "get_rendering_facade",
      "location": {
        "file": "src/Game.cpp",
        "line": 81,
        "column": 0
      },
      "context": "RenderingFacade* facade = app.game_context->get_rendering_facade();"
    },
    {
      "caller_function": "f",
      "called_function": "get_gpu_renderer",
      "location": {
        "file": "src/Game.cpp",
        "line": 82,
        "column": 0
      },
      "context": "GPUAcceleratedRenderer* gpu_renderer = facade->get_gpu_renderer();"
    },
    {
      "caller_function": "f",
      "called_function": "Resources::register_gl_texture_metadata",
      "location": {
        "file": "src/Game.cpp",
        "line": 84,
        "column": 0
      },
      "context": "Resources::register_gl_texture_metadata(\"maptiles\", gpu_renderer);"
    },
    {
      "caller_function": "f",
      "called_function": "register_gl_texture_metadata",
      "location": {
        "file": "src/Game.cpp",
        "line": 84,
        "column": 0
      },
      "context": "Resources::register_gl_texture_metadata(\"maptiles\", gpu_renderer);"
    },
    {
      "caller_function": "f",
      "called_function": "Resources::register_gl_texture_metadata",
      "location": {
        "file": "src/Game.cpp",
        "line": 85,
        "column": 0
      },
      "context": "Resources::register_gl_texture_metadata(\"bomber_dull_red\", gpu_renderer);"
    },
    {
      "caller_function": "f",
      "called_function": "register_gl_texture_metadata",
      "location": {
        "file": "src/Game.cpp",
        "line": 85,
        "column": 0
      },
      "context": "Resources::register_gl_texture_metadata(\"bomber_dull_red\", gpu_renderer);"
    },
    {
      "caller_function": "f",
      "called_function": "Resources::register_gl_texture_metadata",
      "location": {
        "file": "src/Game.cpp",
        "line": 86,
        "column": 0
      },
      "context": "Resources::register_gl_texture_metadata(\"bomber_dull_blue\", gpu_renderer);"
    },
    {
      "caller_function": "f",
      "called_function": "register_gl_texture_metadata",
      "location": {
        "file": "src/Game.cpp",
        "line": 86,
        "column": 0
      },
      "context": "Resources::register_gl_texture_metadata(\"bomber_dull_blue\", gpu_renderer);"
    },
    {
      "caller_function": "f",
      "called_function": "Resources::register_gl_texture_metadata",
      "location": {
        "file": "src/Game.cpp",
        "line": 87,
        "column": 0
      },
      "context": "Resources::register_gl_texture_metadata(\"bomber_dull_yellow\", gpu_renderer);"
    },
    {
      "caller_function": "f",
      "called_function": "register_gl_texture_metadata",
      "location": {
        "file": "src/Game.cpp",
        "line": 87,
        "column": 0
      },
      "context": "Resources::register_gl_texture_metadata(\"bomber_dull_yellow\", gpu_renderer);"
    },
    {
      "caller_function": "f",
      "called_function": "Resources::register_gl_texture_metadata",
      "location": {
        "file": "src/Game.cpp",
        "line": 88,
        "column": 0
      },
      "context": "Resources::register_gl_texture_metadata(\"bomber_dull_green\", gpu_renderer);"
    },
    {
      "caller_function": "f",
      "called_function": "register_gl_texture_metadata",
      "location": {
        "file": "src/Game.cpp",
        "line": 88,
        "column": 0
      },
      "context": "Resources::register_gl_texture_metadata(\"bomber_dull_green\", gpu_renderer);"
    },
    {
      "caller_function": "f",
      "called_function": "Resources::register_gl_texture_metadata",
      "location": {
        "file": "src/Game.cpp",
        "line": 89,
        "column": 0
      },
      "context": "Resources::register_gl_texture_metadata(\"bomber_snake\", gpu_renderer);"
    },
    {
      "caller_function": "f",
      "called_function": "register_gl_texture_metadata",
      "location": {
        "file": "src/Game.cpp",
        "line": 89,
        "column": 0
      },
      "context": "Resources::register_gl_texture_metadata(\"bomber_snake\", gpu_renderer);"
    },
    {
      "caller_function": "f",
      "called_function": "Resources::register_gl_texture_metadata",
      "location": {
        "file": "src/Game.cpp",
        "line": 90,
        "column": 0
      },
      "context": "Resources::register_gl_texture_metadata(\"bomber_tux\", gpu_renderer);"
    },
    {
      "caller_function": "f",
      "called_function": "register_gl_texture_metadata",
      "location": {
        "file": "src/Game.cpp",
        "line": 90,
        "column": 0
      },
      "context": "Resources::register_gl_texture_metadata(\"bomber_tux\", gpu_renderer);"
    },
    {
      "caller_function": "f",
      "called_function": "Resources::register_gl_texture_metadata",
      "location": {
        "file": "src/Game.cpp",
        "line": 91,
        "column": 0
      },
      "context": "Resources::register_gl_texture_metadata(\"bomber_spider\", gpu_renderer);"
    },
    {
      "caller_function": "f",
      "called_function": "register_gl_texture_metadata",
      "location": {
        "file": "src/Game.cpp",
        "line": 91,
        "column": 0
      },
      "context": "Resources::register_gl_texture_metadata(\"bomber_spider\", gpu_renderer);"
    },
    {
      "caller_function": "f",
      "called_function": "Resources::register_gl_texture_metadata",
      "location": {
        "file": "src/Game.cpp",
        "line": 92,
        "column": 0
      },
      "context": "Resources::register_gl_texture_metadata(\"bomber_bsd\", gpu_renderer);"
    },
    {
      "caller_function": "f",
      "called_function": "register_gl_texture_metadata",
      "location": {
        "file": "src/Game.cpp",
        "line": 92,
        "column": 0
      },
      "context": "Resources::register_gl_texture_metadata(\"bomber_bsd\", gpu_renderer);"
    },
    {
      "caller_function": "f",
      "called_function": "Resources::register_gl_texture_metadata",
      "location": {
        "file": "src/Game.cpp",
        "line": 93,
        "column": 0
      },
      "context": "Resources::register_gl_texture_metadata(\"bombs\", gpu_renderer);"
    },
    {
      "caller_function": "f",
      "called_function": "register_gl_texture_metadata",
      "location": {
        "file": "src/Game.cpp",
        "line": 93,
        "column": 0
      },
      "context": "Resources::register_gl_texture_metadata(\"bombs\", gpu_renderer);"
    },
    {
      "caller_function": "f",
      "called_function": "Resources::register_gl_texture_metadata",
      "location": {
        "file": "src/Game.cpp",
        "line": 94,
        "column": 0
      },
      "context": "Resources::register_gl_texture_metadata(\"explosion\", gpu_renderer);"
    },
    {
      "caller_function": "f",
      "called_function": "register_gl_texture_metadata",
      "location": {
        "file": "src/Game.cpp",
        "line": 94,
        "column": 0
      },
      "context": "Resources::register_gl_texture_metadata(\"explosion\", gpu_renderer);"
    },
    {
      "caller_function": "f",
      "called_function": "Resources::register_gl_texture_metadata",
      "location": {
        "file": "src/Game.cpp",
        "line": 95,
        "column": 0
      },
      "context": "Resources::register_gl_texture_metadata(\"extras\", gpu_renderer);"
    },
    {
      "caller_function": "f",
      "called_function": "register_gl_texture_metadata",
      "location": {
        "file": "src/Game.cpp",
        "line": 95,
        "column": 0
      },
      "context": "Resources::register_gl_texture_metadata(\"extras\", gpu_renderer);"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/Game.cpp",
        "line": 96,
        "column": 0
      },
      "context": "SDL_Log(\"Texture metadata registered for sprite atlases\");"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/Game.cpp",
        "line": 98,
        "column": 0
      },
      "context": "SDL_Log(\"WARNING: No GPU renderer available for texture metadata registration\");"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/Game.cpp",
        "line": 102,
        "column": 0
      },
      "context": "SDL_Log(\"All rendering systems operational!\");"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_GetBasePath",
      "location": {
        "file": "src/Game.cpp",
        "line": 106,
        "column": 0
      },
      "context": "const char* sdl_base_path = SDL_GetBasePath();"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/Game.cpp",
        "line": 111,
        "column": 0
      },
      "context": "SDL_Log(\"Loaded big font successfully\");"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/Game.cpp",
        "line": 113,
        "column": 0
      },
      "context": "SDL_Log(\"Failed to load big font, trying fallback...\");"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/Game.cpp",
        "line": 116,
        "column": 0
      },
      "context": "SDL_Log(\"Loaded big font from system path\");"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/Game.cpp",
        "line": 118,
        "column": 0
      },
      "context": "SDL_Log(\"WARNING: No fonts available - text rendering will not work\");"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/Game.cpp",
        "line": 123,
        "column": 0
      },
      "context": "SDL_Log(\"Loaded small font successfully\");"
    },
    {
      "caller_function": "f",
      "called_function": "MainMenuScreen",
      "location": {
        "file": "src/Game.cpp",
        "line": 135,
        "column": 0
      },
      "context": "current_screen = new MainMenuScreen(app.text_renderer, app.game_context);"
    },
    {
      "caller_function": "f",
      "called_function": "Game",
      "location": {
        "file": "src/Game.cpp",
        "line": 138,
        "column": 0
      },
      "context": "Game::~Game() {"
    },
    {
      "caller_function": "f",
      "called_function": "Resources::shutdown",
      "location": {
        "file": "src/Game.cpp",
        "line": 147,
        "column": 0
      },
      "context": "Resources::shutdown();"
    },
    {
      "caller_function": "f",
      "called_function": "shutdown",
      "location": {
        "file": "src/Game.cpp",
        "line": 147,
        "column": 0
      },
      "context": "Resources::shutdown();"
    },
    {
      "caller_function": "f",
      "called_function": "Controller_Joystick::shutdown_joystick_system",
      "location": {
        "file": "src/Game.cpp",
        "line": 148,
        "column": 0
      },
      "context": "Controller_Joystick::shutdown_joystick_system();"
    },
    {
      "caller_function": "f",
      "called_function": "shutdown_joystick_system",
      "location": {
        "file": "src/Game.cpp",
        "line": 148,
        "column": 0
      },
      "context": "Controller_Joystick::shutdown_joystick_system();"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_DestroyRenderer",
      "location": {
        "file": "src/Game.cpp",
        "line": 149,
        "column": 0
      },
      "context": "SDL_DestroyRenderer(renderer);"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_DestroyWindow",
      "location": {
        "file": "src/Game.cpp",
        "line": 150,
        "column": 0
      },
      "context": "SDL_DestroyWindow(window);"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Quit",
      "location": {
        "file": "src/Game.cpp",
        "line": 151,
        "column": 0
      },
      "context": "SDL_Quit();"
    },
    {
      "caller_function": "e",
      "called_function": "Timer::tick",
      "location": {
        "file": "src/Game.cpp",
        "line": 156,
        "column": 0
      },
      "context": "Timer::tick();"
    },
    {
      "caller_function": "e",
      "called_function": "tick",
      "location": {
        "file": "src/Game.cpp",
        "line": 156,
        "column": 0
      },
      "context": "Timer::tick();"
    },
    {
      "caller_function": "e",
      "called_function": "handle_events",
      "location": {
        "file": "src/Game.cpp",
        "line": 157,
        "column": 0
      },
      "context": "handle_events();"
    },
    {
      "caller_function": "e",
      "called_function": "Timer::time_elapsed",
      "location": {
        "file": "src/Game.cpp",
        "line": 158,
        "column": 0
      },
      "context": "update(Timer::time_elapsed());"
    },
    {
      "caller_function": "e",
      "called_function": "update",
      "location": {
        "file": "src/Game.cpp",
        "line": 158,
        "column": 0
      },
      "context": "update(Timer::time_elapsed());"
    },
    {
      "caller_function": "e",
      "called_function": "time_elapsed",
      "location": {
        "file": "src/Game.cpp",
        "line": 158,
        "column": 0
      },
      "context": "update(Timer::time_elapsed());"
    },
    {
      "caller_function": "e",
      "called_function": "render",
      "location": {
        "file": "src/Game.cpp",
        "line": 159,
        "column": 0
      },
      "context": "render();"
    },
    {
      "caller_function": "f",
      "called_function": "handle_events",
      "location": {
        "file": "src/Game.cpp",
        "line": 169,
        "column": 0
      },
      "context": "current_screen->handle_events(event);"
    },
    {
      "caller_function": "f",
      "called_function": "Controller_Keyboard::update_keyboard_state",
      "location": {
        "file": "src/Game.cpp",
        "line": 171,
        "column": 0
      },
      "context": "Controller_Keyboard::update_keyboard_state();"
    },
    {
      "caller_function": "f",
      "called_function": "update_keyboard_state",
      "location": {
        "file": "src/Game.cpp",
        "line": 171,
        "column": 0
      },
      "context": "Controller_Keyboard::update_keyboard_state();"
    },
    {
      "caller_function": "e",
      "called_function": "update",
      "location": {
        "file": "src/Game.cpp",
        "line": 175,
        "column": 0
      },
      "context": "current_screen->update(deltaTime);"
    },
    {
      "caller_function": "f",
      "called_function": "change_screen",
      "location": {
        "file": "src/Game.cpp",
        "line": 180,
        "column": 0
      },
      "context": "change_screen(menu->get_next_state());"
    },
    {
      "caller_function": "f",
      "called_function": "get_next_state",
      "location": {
        "file": "src/Game.cpp",
        "line": 180,
        "column": 0
      },
      "context": "change_screen(menu->get_next_state());"
    },
    {
      "caller_function": "f",
      "called_function": "change_screen",
      "location": {
        "file": "src/Game.cpp",
        "line": 186,
        "column": 0
      },
      "context": "change_screen(settings->get_next_state());"
    },
    {
      "caller_function": "f",
      "called_function": "get_next_state",
      "location": {
        "file": "src/Game.cpp",
        "line": 186,
        "column": 0
      },
      "context": "change_screen(settings->get_next_state());"
    },
    {
      "caller_function": "f",
      "called_function": "change_screen",
      "location": {
        "file": "src/Game.cpp",
        "line": 192,
        "column": 0
      },
      "context": "change_screen(gameplay->get_next_state());"
    },
    {
      "caller_function": "f",
      "called_function": "get_next_state",
      "location": {
        "file": "src/Game.cpp",
        "line": 192,
        "column": 0
      },
      "context": "change_screen(gameplay->get_next_state());"
    },
    {
      "caller_function": "f",
      "called_function": "get_rendering_facade",
      "location": {
        "file": "src/Game.cpp",
        "line": 202,
        "column": 0
      },
      "context": "RenderingFacade* facade = app.game_context->get_rendering_facade();"
    },
    {
      "caller_function": "f",
      "called_function": "begin_frame",
      "location": {
        "file": "src/Game.cpp",
        "line": 206,
        "column": 0
      },
      "context": "facade->begin_frame();"
    },
    {
      "caller_function": "f",
      "called_function": "render",
      "location": {
        "file": "src/Game.cpp",
        "line": 209,
        "column": 0
      },
      "context": "current_screen->render(nullptr);  // All rendering goes through RenderingFacade"
    },
    {
      "caller_function": "f",
      "called_function": "end_frame",
      "location": {
        "file": "src/Game.cpp",
        "line": 213,
        "column": 0
      },
      "context": "facade->end_frame();"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_GL_SwapWindow",
      "location": {
        "file": "src/Game.cpp",
        "line": 216,
        "column": 0
      },
      "context": "SDL_GL_SwapWindow(window);"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/Game.cpp",
        "line": 218,
        "column": 0
      },
      "context": "SDL_Log(\"WARNING: No RenderingFacade available - cannot render\");"
    },
    {
      "caller_function": "f",
      "called_function": "Game::change_screen",
      "location": {
        "file": "src/Game.cpp",
        "line": 230,
        "column": 0
      },
      "context": "SDL_Log(\"Game::change_screen() - OpenGL context managed by RenderingFacade\");"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/Game.cpp",
        "line": 230,
        "column": 0
      },
      "context": "SDL_Log(\"Game::change_screen() - OpenGL context managed by RenderingFacade\");"
    },
    {
      "caller_function": "f",
      "called_function": "change_screen",
      "location": {
        "file": "src/Game.cpp",
        "line": 230,
        "column": 0
      },
      "context": "SDL_Log(\"Game::change_screen() - OpenGL context managed by RenderingFacade\");"
    },
    {
      "caller_function": "f",
      "called_function": "GameplayScreen",
      "location": {
        "file": "src/Game.cpp",
        "line": 233,
        "column": 0
      },
      "context": "current_screen = new GameplayScreen(&app);"
    },
    {
      "caller_function": "f",
      "called_function": "SettingsScreen",
      "location": {
        "file": "src/Game.cpp",
        "line": 236,
        "column": 0
      },
      "context": "current_screen = new SettingsScreen(renderer);"
    },
    {
      "caller_function": "f",
      "called_function": "MainMenuScreen",
      "location": {
        "file": "src/Game.cpp",
        "line": 239,
        "column": 0
      },
      "context": "current_screen = new MainMenuScreen(app.text_renderer, app.game_context);"
    },
    {
      "caller_function": null,
      "called_function": "MainMenuScreen::MainMenuScreen",
      "location": {
        "file": "src/MainMenuScreen.cpp",
        "line": 9,
        "column": 0
      },
      "context": "MainMenuScreen::MainMenuScreen(TextRenderer* text_renderer, GameContext* game_context)"
    },
    {
      "caller_function": null,
      "called_function": "MainMenuScreen",
      "location": {
        "file": "src/MainMenuScreen.cpp",
        "line": 9,
        "column": 0
      },
      "context": "MainMenuScreen::MainMenuScreen(TextRenderer* text_renderer, GameContext* game_context)"
    },
    {
      "caller_function": null,
      "called_function": "selected_item",
      "location": {
        "file": "src/MainMenuScreen.cpp",
        "line": 10,
        "column": 0
      },
      "context": ": selected_item(0), next_state(GameState::MAIN_MENU), text_renderer(text_renderer), game_context(gam"
    },
    {
      "caller_function": null,
      "called_function": "next_state",
      "location": {
        "file": "src/MainMenuScreen.cpp",
        "line": 10,
        "column": 0
      },
      "context": ": selected_item(0), next_state(GameState::MAIN_MENU), text_renderer(text_renderer), game_context(gam"
    },
    {
      "caller_function": null,
      "called_function": "text_renderer",
      "location": {
        "file": "src/MainMenuScreen.cpp",
        "line": 10,
        "column": 0
      },
      "context": ": selected_item(0), next_state(GameState::MAIN_MENU), text_renderer(text_renderer), game_context(gam"
    },
    {
      "caller_function": null,
      "called_function": "game_context",
      "location": {
        "file": "src/MainMenuScreen.cpp",
        "line": 10,
        "column": 0
      },
      "context": ": selected_item(0), next_state(GameState::MAIN_MENU), text_renderer(text_renderer), game_context(gam"
    },
    {
      "caller_function": null,
      "called_function": "menu_joystick",
      "location": {
        "file": "src/MainMenuScreen.cpp",
        "line": 10,
        "column": 0
      },
      "context": ": selected_item(0), next_state(GameState::MAIN_MENU), text_renderer(text_renderer), game_context(gam"
    },
    {
      "caller_function": null,
      "called_function": "push_back",
      "location": {
        "file": "src/MainMenuScreen.cpp",
        "line": 11,
        "column": 0
      },
      "context": "menu_items.push_back(\"Local Game\");"
    },
    {
      "caller_function": null,
      "called_function": "push_back",
      "location": {
        "file": "src/MainMenuScreen.cpp",
        "line": 12,
        "column": 0
      },
      "context": "menu_items.push_back(\"Player Setup\");"
    },
    {
      "caller_function": null,
      "called_function": "push_back",
      "location": {
        "file": "src/MainMenuScreen.cpp",
        "line": 13,
        "column": 0
      },
      "context": "menu_items.push_back(\"Game Options\");"
    },
    {
      "caller_function": null,
      "called_function": "push_back",
      "location": {
        "file": "src/MainMenuScreen.cpp",
        "line": 14,
        "column": 0
      },
      "context": "menu_items.push_back(\"Graphics Options\");"
    },
    {
      "caller_function": null,
      "called_function": "push_back",
      "location": {
        "file": "src/MainMenuScreen.cpp",
        "line": 15,
        "column": 0
      },
      "context": "menu_items.push_back(\"Help\");"
    },
    {
      "caller_function": null,
      "called_function": "push_back",
      "location": {
        "file": "src/MainMenuScreen.cpp",
        "line": 16,
        "column": 0
      },
      "context": "menu_items.push_back(\"Credits\");"
    },
    {
      "caller_function": null,
      "called_function": "push_back",
      "location": {
        "file": "src/MainMenuScreen.cpp",
        "line": 17,
        "column": 0
      },
      "context": "menu_items.push_back(\"Quit\");"
    },
    {
      "caller_function": "f",
      "called_function": "Controller_Joystick",
      "location": {
        "file": "src/MainMenuScreen.cpp",
        "line": 21,
        "column": 0
      },
      "context": "menu_joystick = new Controller_Joystick(0);"
    },
    {
      "caller_function": "f",
      "called_function": "activate",
      "location": {
        "file": "src/MainMenuScreen.cpp",
        "line": 22,
        "column": 0
      },
      "context": "menu_joystick->activate();"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/MainMenuScreen.cpp",
        "line": 23,
        "column": 0
      },
      "context": "SDL_Log(\"MainMenuScreen: Created joystick controller for menu navigation\");"
    },
    {
      "caller_function": "f",
      "called_function": "MainMenuScreen",
      "location": {
        "file": "src/MainMenuScreen.cpp",
        "line": 27,
        "column": 0
      },
      "context": "MainMenuScreen::~MainMenuScreen() {"
    },
    {
      "caller_function": "h",
      "called_function": "size",
      "location": {
        "file": "src/MainMenuScreen.cpp",
        "line": 39,
        "column": 0
      },
      "context": "selected_item = (selected_item > 0) ? selected_item - 1 : menu_items.size() - 1;"
    },
    {
      "caller_function": "h",
      "called_function": "size",
      "location": {
        "file": "src/MainMenuScreen.cpp",
        "line": 42,
        "column": 0
      },
      "context": "selected_item = (selected_item < menu_items.size() - 1) ? selected_item + 1 : 0;"
    },
    {
      "caller_function": "f",
      "called_function": "update",
      "location": {
        "file": "src/MainMenuScreen.cpp",
        "line": 76,
        "column": 0
      },
      "context": "menu_joystick->update();"
    },
    {
      "caller_function": "f",
      "called_function": "size",
      "location": {
        "file": "src/MainMenuScreen.cpp",
        "line": 88,
        "column": 0
      },
      "context": "selected_item = (selected_item > 0) ? selected_item - 1 : menu_items.size() - 1;"
    },
    {
      "caller_function": "f",
      "called_function": "is_down",
      "location": {
        "file": "src/MainMenuScreen.cpp",
        "line": 90,
        "column": 0
      },
      "context": "} else if (menu_joystick->is_down()) {"
    },
    {
      "caller_function": "f",
      "called_function": "size",
      "location": {
        "file": "src/MainMenuScreen.cpp",
        "line": 91,
        "column": 0
      },
      "context": "selected_item = (selected_item < menu_items.size() - 1) ? selected_item + 1 : 0;"
    },
    {
      "caller_function": "f",
      "called_function": "get_rendering_facade",
      "location": {
        "file": "src/MainMenuScreen.cpp",
        "line": 142,
        "column": 0
      },
      "context": "RenderingFacade* facade = game_context ? game_context->get_rendering_facade() : nullptr;"
    },
    {
      "caller_function": "f",
      "called_function": "draw_text_centered",
      "location": {
        "file": "src/MainMenuScreen.cpp",
        "line": 145,
        "column": 0
      },
      "context": "text_renderer->draw_text_centered(facade, \"CLANBOMBER\", \"big\", 400, 100, title_color);"
    },
    {
      "caller_function": "f",
      "called_function": "draw_text_centered",
      "location": {
        "file": "src/MainMenuScreen.cpp",
        "line": 148,
        "column": 0
      },
      "context": "text_renderer->draw_text_centered(facade, \"SDL3 Modern Edition\", \"small\", 400, 140, normal_color);"
    },
    {
      "caller_function": "r",
      "called_function": "draw_text_centered",
      "location": {
        "file": "src/MainMenuScreen.cpp",
        "line": 158,
        "column": 0
      },
      "context": "text_renderer->draw_text_centered(facade, item_text, \"big\", 400, y, color);"
    },
    {
      "caller_function": "r",
      "called_function": "draw_text_centered",
      "location": {
        "file": "src/MainMenuScreen.cpp",
        "line": 165,
        "column": 0
      },
      "context": "text_renderer->draw_text_centered(facade, instructions, \"small\", 400, 550, instructions_color);"
    },
    {
      "caller_function": "r",
      "called_function": "MainMenuScreen::get_next_state",
      "location": {
        "file": "src/MainMenuScreen.cpp",
        "line": 168,
        "column": 0
      },
      "context": "GameState MainMenuScreen::get_next_state() const {"
    },
    {
      "caller_function": "r",
      "called_function": "get_next_state",
      "location": {
        "file": "src/MainMenuScreen.cpp",
        "line": 168,
        "column": 0
      },
      "context": "GameState MainMenuScreen::get_next_state() const {"
    },
    {
      "caller_function": null,
      "called_function": "BomberConfig::BomberConfig",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 81,
        "column": 0
      },
      "context": "BomberConfig::BomberConfig()"
    },
    {
      "caller_function": null,
      "called_function": "BomberConfig",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 81,
        "column": 0
      },
      "context": "BomberConfig::BomberConfig()"
    },
    {
      "caller_function": null,
      "called_function": "BomberConfig",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 96,
        "column": 0
      },
      "context": "BomberConfig::~BomberConfig()"
    },
    {
      "caller_function": null,
      "called_function": "BomberConfig::set_name",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 100,
        "column": 0
      },
      "context": "void BomberConfig::set_name(std::string _name)"
    },
    {
      "caller_function": null,
      "called_function": "set_name",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 100,
        "column": 0
      },
      "context": "void BomberConfig::set_name(std::string _name)"
    },
    {
      "caller_function": "f",
      "called_function": "BomberConfig::get_name",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 107,
        "column": 0
      },
      "context": "std::string BomberConfig::get_name()"
    },
    {
      "caller_function": "f",
      "called_function": "get_name",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 107,
        "column": 0
      },
      "context": "std::string BomberConfig::get_name()"
    },
    {
      "caller_function": "f",
      "called_function": "BomberConfig::set_skin",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 112,
        "column": 0
      },
      "context": "void BomberConfig::set_skin(int _skin)"
    },
    {
      "caller_function": "f",
      "called_function": "set_skin",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 112,
        "column": 0
      },
      "context": "void BomberConfig::set_skin(int _skin)"
    },
    {
      "caller_function": "f",
      "called_function": "BomberConfig::get_skin",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 117,
        "column": 0
      },
      "context": "int BomberConfig::get_skin()"
    },
    {
      "caller_function": "f",
      "called_function": "get_skin",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 117,
        "column": 0
      },
      "context": "int BomberConfig::get_skin()"
    },
    {
      "caller_function": "f",
      "called_function": "BomberConfig::set_team",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 122,
        "column": 0
      },
      "context": "void BomberConfig::set_team(int _team)"
    },
    {
      "caller_function": "f",
      "called_function": "set_team",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 122,
        "column": 0
      },
      "context": "void BomberConfig::set_team(int _team)"
    },
    {
      "caller_function": "f",
      "called_function": "BomberConfig::get_team",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 127,
        "column": 0
      },
      "context": "int BomberConfig::get_team()"
    },
    {
      "caller_function": "f",
      "called_function": "get_team",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 127,
        "column": 0
      },
      "context": "int BomberConfig::get_team()"
    },
    {
      "caller_function": "f",
      "called_function": "BomberConfig::set_controller",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 132,
        "column": 0
      },
      "context": "void BomberConfig::set_controller(int _controller)"
    },
    {
      "caller_function": "f",
      "called_function": "set_controller",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 132,
        "column": 0
      },
      "context": "void BomberConfig::set_controller(int _controller)"
    },
    {
      "caller_function": "f",
      "called_function": "BomberConfig::get_controller",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 137,
        "column": 0
      },
      "context": "int BomberConfig::get_controller()"
    },
    {
      "caller_function": "f",
      "called_function": "get_controller",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 137,
        "column": 0
      },
      "context": "int BomberConfig::get_controller()"
    },
    {
      "caller_function": "f",
      "called_function": "BomberConfig::enable",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 142,
        "column": 0
      },
      "context": "void BomberConfig::enable()"
    },
    {
      "caller_function": "f",
      "called_function": "enable",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 142,
        "column": 0
      },
      "context": "void BomberConfig::enable()"
    },
    {
      "caller_function": "f",
      "called_function": "BomberConfig::disable",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 147,
        "column": 0
      },
      "context": "void BomberConfig::disable()"
    },
    {
      "caller_function": "f",
      "called_function": "disable",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 147,
        "column": 0
      },
      "context": "void BomberConfig::disable()"
    },
    {
      "caller_function": "f",
      "called_function": "BomberConfig::set_highlight_maptile",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 152,
        "column": 0
      },
      "context": "void BomberConfig::set_highlight_maptile(bool _highlight_maptile)"
    },
    {
      "caller_function": "f",
      "called_function": "set_highlight_maptile",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 152,
        "column": 0
      },
      "context": "void BomberConfig::set_highlight_maptile(bool _highlight_maptile)"
    },
    {
      "caller_function": "f",
      "called_function": "BomberConfig::get_highlight_maptile",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 157,
        "column": 0
      },
      "context": "int BomberConfig::get_highlight_maptile()"
    },
    {
      "caller_function": "f",
      "called_function": "get_highlight_maptile",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 157,
        "column": 0
      },
      "context": "int BomberConfig::get_highlight_maptile()"
    },
    {
      "caller_function": "f",
      "called_function": "BomberConfig::is_enabled",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 162,
        "column": 0
      },
      "context": "int BomberConfig::is_enabled()"
    },
    {
      "caller_function": "f",
      "called_function": "is_enabled",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 162,
        "column": 0
      },
      "context": "int BomberConfig::is_enabled()"
    },
    {
      "caller_function": "f",
      "called_function": "BomberConfig::set_enabled",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 167,
        "column": 0
      },
      "context": "void BomberConfig::set_enabled(bool _enabled)"
    },
    {
      "caller_function": "f",
      "called_function": "set_enabled",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 167,
        "column": 0
      },
      "context": "void BomberConfig::set_enabled(bool _enabled)"
    },
    {
      "caller_function": "f",
      "called_function": "BomberConfig::set_client_index",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 172,
        "column": 0
      },
      "context": "void BomberConfig::set_client_index(int index)"
    },
    {
      "caller_function": "f",
      "called_function": "set_client_index",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 172,
        "column": 0
      },
      "context": "void BomberConfig::set_client_index(int index)"
    },
    {
      "caller_function": "f",
      "called_function": "BomberConfig::get_client_index",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 177,
        "column": 0
      },
      "context": "int BomberConfig::get_client_index()"
    },
    {
      "caller_function": "f",
      "called_function": "get_client_index",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 177,
        "column": 0
      },
      "context": "int BomberConfig::get_client_index()"
    },
    {
      "caller_function": "f",
      "called_function": "BomberConfig::get_config_index",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 182,
        "column": 0
      },
      "context": "int BomberConfig::get_config_index()"
    },
    {
      "caller_function": "f",
      "called_function": "get_config_index",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 182,
        "column": 0
      },
      "context": "int BomberConfig::get_config_index()"
    },
    {
      "caller_function": "f",
      "called_function": "BomberConfig::set_config_index",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 187,
        "column": 0
      },
      "context": "void BomberConfig::set_config_index(int index)"
    },
    {
      "caller_function": "f",
      "called_function": "set_config_index",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 187,
        "column": 0
      },
      "context": "void BomberConfig::set_config_index(int index)"
    },
    {
      "caller_function": "f",
      "called_function": "BomberConfig::get_client_ip",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 192,
        "column": 0
      },
      "context": "char* BomberConfig::get_client_ip()"
    },
    {
      "caller_function": "f",
      "called_function": "get_client_ip",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 192,
        "column": 0
      },
      "context": "char* BomberConfig::get_client_ip()"
    },
    {
      "caller_function": "f",
      "called_function": "BomberConfig::set_client_ip",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 197,
        "column": 0
      },
      "context": "void BomberConfig::set_client_ip(char* ip_string)"
    },
    {
      "caller_function": "f",
      "called_function": "set_client_ip",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 197,
        "column": 0
      },
      "context": "void BomberConfig::set_client_ip(char* ip_string)"
    },
    {
      "caller_function": "f",
      "called_function": "GameConfig::get_number_of_players",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 202,
        "column": 0
      },
      "context": "int GameConfig::get_number_of_players()"
    },
    {
      "caller_function": "f",
      "called_function": "get_number_of_players",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 202,
        "column": 0
      },
      "context": "int GameConfig::get_number_of_players()"
    },
    {
      "caller_function": "f",
      "called_function": "GameConfig::get_number_of_opponents",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 215,
        "column": 0
      },
      "context": "int GameConfig::get_number_of_opponents()"
    },
    {
      "caller_function": "f",
      "called_function": "get_number_of_opponents",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 215,
        "column": 0
      },
      "context": "int GameConfig::get_number_of_opponents()"
    },
    {
      "caller_function": "f",
      "called_function": "get_team",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 229,
        "column": 0
      },
      "context": "team_cunt[bomber[i].get_team()-1]++;"
    },
    {
      "caller_function": "f",
      "called_function": "GameConfig::set_round_time",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 237,
        "column": 0
      },
      "context": "void GameConfig::set_round_time( int _round_time)"
    },
    {
      "caller_function": "f",
      "called_function": "set_round_time",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 237,
        "column": 0
      },
      "context": "void GameConfig::set_round_time( int _round_time)"
    },
    {
      "caller_function": "f",
      "called_function": "GameConfig::set_random_map_order",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 242,
        "column": 0
      },
      "context": "void GameConfig::set_random_map_order( int _random_map_order)"
    },
    {
      "caller_function": "f",
      "called_function": "set_random_map_order",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 242,
        "column": 0
      },
      "context": "void GameConfig::set_random_map_order( int _random_map_order)"
    },
    {
      "caller_function": "f",
      "called_function": "GameConfig::set_max_skateboards",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 247,
        "column": 0
      },
      "context": "void GameConfig::set_max_skateboards(int _max_skateboards)"
    },
    {
      "caller_function": "f",
      "called_function": "set_max_skateboards",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 247,
        "column": 0
      },
      "context": "void GameConfig::set_max_skateboards(int _max_skateboards)"
    },
    {
      "caller_function": "f",
      "called_function": "GameConfig::set_max_power",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 252,
        "column": 0
      },
      "context": "void GameConfig::set_max_power(int _max_power)"
    },
    {
      "caller_function": "f",
      "called_function": "set_max_power",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 252,
        "column": 0
      },
      "context": "void GameConfig::set_max_power(int _max_power)"
    },
    {
      "caller_function": "f",
      "called_function": "GameConfig::set_max_bombs",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 257,
        "column": 0
      },
      "context": "void GameConfig::set_max_bombs(int _max_bombs)"
    },
    {
      "caller_function": "f",
      "called_function": "set_max_bombs",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 257,
        "column": 0
      },
      "context": "void GameConfig::set_max_bombs(int _max_bombs)"
    },
    {
      "caller_function": "f",
      "called_function": "GameConfig::set_start_skateboards",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 262,
        "column": 0
      },
      "context": "void GameConfig::set_start_skateboards(int _start_skateboards)"
    },
    {
      "caller_function": "f",
      "called_function": "set_start_skateboards",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 262,
        "column": 0
      },
      "context": "void GameConfig::set_start_skateboards(int _start_skateboards)"
    },
    {
      "caller_function": "f",
      "called_function": "GameConfig::set_start_power",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 267,
        "column": 0
      },
      "context": "void GameConfig::set_start_power(int _start_power)"
    },
    {
      "caller_function": "f",
      "called_function": "set_start_power",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 267,
        "column": 0
      },
      "context": "void GameConfig::set_start_power(int _start_power)"
    },
    {
      "caller_function": "f",
      "called_function": "GameConfig::set_start_bombs",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 272,
        "column": 0
      },
      "context": "void GameConfig::set_start_bombs(int _start_bombs)"
    },
    {
      "caller_function": "f",
      "called_function": "set_start_bombs",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 272,
        "column": 0
      },
      "context": "void GameConfig::set_start_bombs(int _start_bombs)"
    },
    {
      "caller_function": "f",
      "called_function": "GameConfig::set_start_kick",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 277,
        "column": 0
      },
      "context": "void GameConfig::set_start_kick( int _start_kick)"
    },
    {
      "caller_function": "f",
      "called_function": "set_start_kick",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 277,
        "column": 0
      },
      "context": "void GameConfig::set_start_kick( int _start_kick)"
    },
    {
      "caller_function": "f",
      "called_function": "GameConfig::set_start_glove",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 282,
        "column": 0
      },
      "context": "void GameConfig::set_start_glove( int _start_glove)"
    },
    {
      "caller_function": "f",
      "called_function": "set_start_glove",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 282,
        "column": 0
      },
      "context": "void GameConfig::set_start_glove( int _start_glove)"
    },
    {
      "caller_function": "f",
      "called_function": "GameConfig::set_skateboards",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 287,
        "column": 0
      },
      "context": "void GameConfig::set_skateboards(int _skateboards)"
    },
    {
      "caller_function": "f",
      "called_function": "set_skateboards",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 287,
        "column": 0
      },
      "context": "void GameConfig::set_skateboards(int _skateboards)"
    },
    {
      "caller_function": "f",
      "called_function": "GameConfig::set_power",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 292,
        "column": 0
      },
      "context": "void GameConfig::set_power(int _power)"
    },
    {
      "caller_function": "f",
      "called_function": "set_power",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 292,
        "column": 0
      },
      "context": "void GameConfig::set_power(int _power)"
    },
    {
      "caller_function": "f",
      "called_function": "GameConfig::set_bombs",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 297,
        "column": 0
      },
      "context": "void GameConfig::set_bombs(int _bombs)"
    },
    {
      "caller_function": "f",
      "called_function": "set_bombs",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 297,
        "column": 0
      },
      "context": "void GameConfig::set_bombs(int _bombs)"
    },
    {
      "caller_function": "f",
      "called_function": "GameConfig::set_kick",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 302,
        "column": 0
      },
      "context": "void GameConfig::set_kick( int _kick)"
    },
    {
      "caller_function": "f",
      "called_function": "set_kick",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 302,
        "column": 0
      },
      "context": "void GameConfig::set_kick( int _kick)"
    },
    {
      "caller_function": "f",
      "called_function": "GameConfig::set_glove",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 307,
        "column": 0
      },
      "context": "void GameConfig::set_glove( int _glove)"
    },
    {
      "caller_function": "f",
      "called_function": "set_glove",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 307,
        "column": 0
      },
      "context": "void GameConfig::set_glove( int _glove)"
    },
    {
      "caller_function": "f",
      "called_function": "GameConfig::set_joint",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 312,
        "column": 0
      },
      "context": "void GameConfig::set_joint( int _joint)"
    },
    {
      "caller_function": "f",
      "called_function": "set_joint",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 312,
        "column": 0
      },
      "context": "void GameConfig::set_joint( int _joint)"
    },
    {
      "caller_function": "f",
      "called_function": "GameConfig::set_viagra",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 317,
        "column": 0
      },
      "context": "void GameConfig::set_viagra( int _viagra)"
    },
    {
      "caller_function": "f",
      "called_function": "set_viagra",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 317,
        "column": 0
      },
      "context": "void GameConfig::set_viagra( int _viagra)"
    },
    {
      "caller_function": "f",
      "called_function": "GameConfig::set_koks",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 322,
        "column": 0
      },
      "context": "void GameConfig::set_koks( int _koks)"
    },
    {
      "caller_function": "f",
      "called_function": "set_koks",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 322,
        "column": 0
      },
      "context": "void GameConfig::set_koks( int _koks)"
    },
    {
      "caller_function": "f",
      "called_function": "GameConfig::set_start_map",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 327,
        "column": 0
      },
      "context": "void GameConfig::set_start_map(int _start_map)"
    },
    {
      "caller_function": "f",
      "called_function": "set_start_map",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 327,
        "column": 0
      },
      "context": "void GameConfig::set_start_map(int _start_map)"
    },
    {
      "caller_function": "f",
      "called_function": "GameConfig::set_points_to_win",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 332,
        "column": 0
      },
      "context": "void GameConfig::set_points_to_win(int _points_to_win)"
    },
    {
      "caller_function": "f",
      "called_function": "set_points_to_win",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 332,
        "column": 0
      },
      "context": "void GameConfig::set_points_to_win(int _points_to_win)"
    },
    {
      "caller_function": "f",
      "called_function": "GameConfig::set_theme",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 337,
        "column": 0
      },
      "context": "void GameConfig::set_theme(int _theme)"
    },
    {
      "caller_function": "f",
      "called_function": "set_theme",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 337,
        "column": 0
      },
      "context": "void GameConfig::set_theme(int _theme)"
    },
    {
      "caller_function": "f",
      "called_function": "GameConfig::set_filename",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 342,
        "column": 0
      },
      "context": "void GameConfig::set_filename(std::filesystem::path _filename)"
    },
    {
      "caller_function": "f",
      "called_function": "set_filename",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 342,
        "column": 0
      },
      "context": "void GameConfig::set_filename(std::filesystem::path _filename)"
    },
    {
      "caller_function": "f",
      "called_function": "GameConfig::set_path",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 347,
        "column": 0
      },
      "context": "void GameConfig::set_path(std::filesystem::path _path)"
    },
    {
      "caller_function": "f",
      "called_function": "set_path",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 347,
        "column": 0
      },
      "context": "void GameConfig::set_path(std::filesystem::path _path)"
    },
    {
      "caller_function": "f",
      "called_function": "GameConfig::set_music",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 352,
        "column": 0
      },
      "context": "void GameConfig::set_music( int _music)"
    },
    {
      "caller_function": "f",
      "called_function": "set_music",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 352,
        "column": 0
      },
      "context": "void GameConfig::set_music( int _music)"
    },
    {
      "caller_function": "f",
      "called_function": "GameConfig::set_kids_mode",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 357,
        "column": 0
      },
      "context": "void GameConfig::set_kids_mode( int _kids_mode)"
    },
    {
      "caller_function": "f",
      "called_function": "set_kids_mode",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 357,
        "column": 0
      },
      "context": "void GameConfig::set_kids_mode( int _kids_mode)"
    },
    {
      "caller_function": "f",
      "called_function": "GameConfig::set_corpse_parts",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 362,
        "column": 0
      },
      "context": "void GameConfig::set_corpse_parts( int _corpse_parts)"
    },
    {
      "caller_function": "f",
      "called_function": "set_corpse_parts",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 362,
        "column": 0
      },
      "context": "void GameConfig::set_corpse_parts( int _corpse_parts)"
    },
    {
      "caller_function": "f",
      "called_function": "GameConfig::set_shaky_explosions",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 367,
        "column": 0
      },
      "context": "void GameConfig::set_shaky_explosions(int _shaky_explosions)"
    },
    {
      "caller_function": "f",
      "called_function": "set_shaky_explosions",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 367,
        "column": 0
      },
      "context": "void GameConfig::set_shaky_explosions(int _shaky_explosions)"
    },
    {
      "caller_function": "f",
      "called_function": "GameConfig::set_highlight_maptiles",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 372,
        "column": 0
      },
      "context": "void GameConfig::set_highlight_maptiles(int _highlight_maptiles)"
    },
    {
      "caller_function": "f",
      "called_function": "set_highlight_maptiles",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 372,
        "column": 0
      },
      "context": "void GameConfig::set_highlight_maptiles(int _highlight_maptiles)"
    },
    {
      "caller_function": "f",
      "called_function": "GameConfig::set_random_positions",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 377,
        "column": 0
      },
      "context": "void GameConfig::set_random_positions(int _random_positions)"
    },
    {
      "caller_function": "f",
      "called_function": "set_random_positions",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 377,
        "column": 0
      },
      "context": "void GameConfig::set_random_positions(int _random_positions)"
    },
    {
      "caller_function": "f",
      "called_function": "GameConfig::set_bomb_countdown",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 383,
        "column": 0
      },
      "context": "void GameConfig::set_bomb_countdown(int _bomb_countdown)"
    },
    {
      "caller_function": "f",
      "called_function": "set_bomb_countdown",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 383,
        "column": 0
      },
      "context": "void GameConfig::set_bomb_countdown(int _bomb_countdown)"
    },
    {
      "caller_function": "f",
      "called_function": "GameConfig::set_bomb_delay",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 388,
        "column": 0
      },
      "context": "void GameConfig::set_bomb_delay(int _bomb_delay)"
    },
    {
      "caller_function": "f",
      "called_function": "set_bomb_delay",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 388,
        "column": 0
      },
      "context": "void GameConfig::set_bomb_delay(int _bomb_delay)"
    },
    {
      "caller_function": "f",
      "called_function": "GameConfig::set_bomb_speed",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 393,
        "column": 0
      },
      "context": "void GameConfig::set_bomb_speed(int _bomb_speed)"
    },
    {
      "caller_function": "f",
      "called_function": "set_bomb_speed",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 393,
        "column": 0
      },
      "context": "void GameConfig::set_bomb_speed(int _bomb_speed)"
    },
    {
      "caller_function": "f",
      "called_function": "GameConfig::get_max_skateboards",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 398,
        "column": 0
      },
      "context": "int GameConfig::get_max_skateboards()"
    },
    {
      "caller_function": "f",
      "called_function": "get_max_skateboards",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 398,
        "column": 0
      },
      "context": "int GameConfig::get_max_skateboards()"
    },
    {
      "caller_function": "f",
      "called_function": "GameConfig::get_max_power",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 403,
        "column": 0
      },
      "context": "int GameConfig::get_max_power()"
    },
    {
      "caller_function": "f",
      "called_function": "get_max_power",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 403,
        "column": 0
      },
      "context": "int GameConfig::get_max_power()"
    },
    {
      "caller_function": "f",
      "called_function": "GameConfig::get_max_bombs",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 408,
        "column": 0
      },
      "context": "int GameConfig::get_max_bombs()"
    },
    {
      "caller_function": "f",
      "called_function": "get_max_bombs",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 408,
        "column": 0
      },
      "context": "int GameConfig::get_max_bombs()"
    },
    {
      "caller_function": "f",
      "called_function": "GameConfig::get_start_skateboards",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 413,
        "column": 0
      },
      "context": "int GameConfig::get_start_skateboards()"
    },
    {
      "caller_function": "f",
      "called_function": "get_start_skateboards",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 413,
        "column": 0
      },
      "context": "int GameConfig::get_start_skateboards()"
    },
    {
      "caller_function": "f",
      "called_function": "GameConfig::get_start_power",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 418,
        "column": 0
      },
      "context": "int GameConfig::get_start_power()"
    },
    {
      "caller_function": "f",
      "called_function": "get_start_power",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 418,
        "column": 0
      },
      "context": "int GameConfig::get_start_power()"
    },
    {
      "caller_function": "f",
      "called_function": "GameConfig::get_start_bombs",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 423,
        "column": 0
      },
      "context": "int GameConfig::get_start_bombs()"
    },
    {
      "caller_function": "f",
      "called_function": "get_start_bombs",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 423,
        "column": 0
      },
      "context": "int GameConfig::get_start_bombs()"
    },
    {
      "caller_function": "f",
      "called_function": "GameConfig::get_start_kick",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 428,
        "column": 0
      },
      "context": "int GameConfig::get_start_kick()"
    },
    {
      "caller_function": "f",
      "called_function": "get_start_kick",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 428,
        "column": 0
      },
      "context": "int GameConfig::get_start_kick()"
    },
    {
      "caller_function": "f",
      "called_function": "GameConfig::get_start_glove",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 433,
        "column": 0
      },
      "context": "int GameConfig::get_start_glove()"
    },
    {
      "caller_function": "f",
      "called_function": "get_start_glove",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 433,
        "column": 0
      },
      "context": "int GameConfig::get_start_glove()"
    },
    {
      "caller_function": "f",
      "called_function": "GameConfig::get_skateboards",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 438,
        "column": 0
      },
      "context": "int GameConfig::get_skateboards()"
    },
    {
      "caller_function": "f",
      "called_function": "get_skateboards",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 438,
        "column": 0
      },
      "context": "int GameConfig::get_skateboards()"
    },
    {
      "caller_function": "f",
      "called_function": "GameConfig::get_power",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 443,
        "column": 0
      },
      "context": "int GameConfig::get_power()"
    },
    {
      "caller_function": "f",
      "called_function": "get_power",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 443,
        "column": 0
      },
      "context": "int GameConfig::get_power()"
    },
    {
      "caller_function": "f",
      "called_function": "GameConfig::get_bombs",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 448,
        "column": 0
      },
      "context": "int GameConfig::get_bombs()"
    },
    {
      "caller_function": "f",
      "called_function": "get_bombs",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 448,
        "column": 0
      },
      "context": "int GameConfig::get_bombs()"
    },
    {
      "caller_function": "f",
      "called_function": "GameConfig::get_kick",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 453,
        "column": 0
      },
      "context": "int GameConfig::get_kick()"
    },
    {
      "caller_function": "f",
      "called_function": "get_kick",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 453,
        "column": 0
      },
      "context": "int GameConfig::get_kick()"
    },
    {
      "caller_function": "f",
      "called_function": "GameConfig::get_glove",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 458,
        "column": 0
      },
      "context": "int GameConfig::get_glove()"
    },
    {
      "caller_function": "f",
      "called_function": "get_glove",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 458,
        "column": 0
      },
      "context": "int GameConfig::get_glove()"
    },
    {
      "caller_function": "f",
      "called_function": "GameConfig::get_joint",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 463,
        "column": 0
      },
      "context": "int GameConfig::get_joint()"
    },
    {
      "caller_function": "f",
      "called_function": "get_joint",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 463,
        "column": 0
      },
      "context": "int GameConfig::get_joint()"
    },
    {
      "caller_function": "f",
      "called_function": "GameConfig::get_viagra",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 468,
        "column": 0
      },
      "context": "int GameConfig::get_viagra()"
    },
    {
      "caller_function": "f",
      "called_function": "get_viagra",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 468,
        "column": 0
      },
      "context": "int GameConfig::get_viagra()"
    },
    {
      "caller_function": "f",
      "called_function": "GameConfig::get_koks",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 473,
        "column": 0
      },
      "context": "int GameConfig::get_koks()"
    },
    {
      "caller_function": "f",
      "called_function": "get_koks",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 473,
        "column": 0
      },
      "context": "int GameConfig::get_koks()"
    },
    {
      "caller_function": "f",
      "called_function": "GameConfig::get_start_map",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 478,
        "column": 0
      },
      "context": "int GameConfig::get_start_map()"
    },
    {
      "caller_function": "f",
      "called_function": "get_start_map",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 478,
        "column": 0
      },
      "context": "int GameConfig::get_start_map()"
    },
    {
      "caller_function": "f",
      "called_function": "GameConfig::get_random_map_order",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 483,
        "column": 0
      },
      "context": "int GameConfig::get_random_map_order()"
    },
    {
      "caller_function": "f",
      "called_function": "get_random_map_order",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 483,
        "column": 0
      },
      "context": "int GameConfig::get_random_map_order()"
    },
    {
      "caller_function": "f",
      "called_function": "GameConfig::get_round_time",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 488,
        "column": 0
      },
      "context": "int GameConfig::get_round_time()"
    },
    {
      "caller_function": "f",
      "called_function": "get_round_time",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 488,
        "column": 0
      },
      "context": "int GameConfig::get_round_time()"
    },
    {
      "caller_function": "f",
      "called_function": "GameConfig::get_points_to_win",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 493,
        "column": 0
      },
      "context": "int GameConfig::get_points_to_win()"
    },
    {
      "caller_function": "f",
      "called_function": "get_points_to_win",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 493,
        "column": 0
      },
      "context": "int GameConfig::get_points_to_win()"
    },
    {
      "caller_function": "f",
      "called_function": "GameConfig::get_theme",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 498,
        "column": 0
      },
      "context": "int GameConfig::get_theme()"
    },
    {
      "caller_function": "f",
      "called_function": "get_theme",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 498,
        "column": 0
      },
      "context": "int GameConfig::get_theme()"
    },
    {
      "caller_function": "f",
      "called_function": "GameConfig::get_sound_enabled",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 503,
        "column": 0
      },
      "context": "int GameConfig::get_sound_enabled()"
    },
    {
      "caller_function": "f",
      "called_function": "get_sound_enabled",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 503,
        "column": 0
      },
      "context": "int GameConfig::get_sound_enabled()"
    },
    {
      "caller_function": "f",
      "called_function": "GameConfig::get_music",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 508,
        "column": 0
      },
      "context": "int GameConfig::get_music()"
    },
    {
      "caller_function": "f",
      "called_function": "get_music",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 508,
        "column": 0
      },
      "context": "int GameConfig::get_music()"
    },
    {
      "caller_function": "f",
      "called_function": "GameConfig::get_kids_mode",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 513,
        "column": 0
      },
      "context": "int GameConfig::get_kids_mode()"
    },
    {
      "caller_function": "f",
      "called_function": "get_kids_mode",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 513,
        "column": 0
      },
      "context": "int GameConfig::get_kids_mode()"
    },
    {
      "caller_function": "f",
      "called_function": "GameConfig::get_corpse_parts",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 518,
        "column": 0
      },
      "context": "int GameConfig::get_corpse_parts()"
    },
    {
      "caller_function": "f",
      "called_function": "get_corpse_parts",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 518,
        "column": 0
      },
      "context": "int GameConfig::get_corpse_parts()"
    },
    {
      "caller_function": "f",
      "called_function": "GameConfig::get_shaky_explosions",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 523,
        "column": 0
      },
      "context": "int GameConfig::get_shaky_explosions()"
    },
    {
      "caller_function": "f",
      "called_function": "get_shaky_explosions",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 523,
        "column": 0
      },
      "context": "int GameConfig::get_shaky_explosions()"
    },
    {
      "caller_function": "f",
      "called_function": "GameConfig::get_highlight_maptiles",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 528,
        "column": 0
      },
      "context": "int GameConfig::get_highlight_maptiles()"
    },
    {
      "caller_function": "f",
      "called_function": "get_highlight_maptiles",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 528,
        "column": 0
      },
      "context": "int GameConfig::get_highlight_maptiles()"
    },
    {
      "caller_function": "f",
      "called_function": "GameConfig::get_random_positions",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 534,
        "column": 0
      },
      "context": "int GameConfig::get_random_positions()"
    },
    {
      "caller_function": "f",
      "called_function": "get_random_positions",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 534,
        "column": 0
      },
      "context": "int GameConfig::get_random_positions()"
    },
    {
      "caller_function": "f",
      "called_function": "GameConfig::get_bomb_countdown",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 539,
        "column": 0
      },
      "context": "int GameConfig::get_bomb_countdown()"
    },
    {
      "caller_function": "f",
      "called_function": "get_bomb_countdown",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 539,
        "column": 0
      },
      "context": "int GameConfig::get_bomb_countdown()"
    },
    {
      "caller_function": "f",
      "called_function": "GameConfig::get_bomb_delay",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 544,
        "column": 0
      },
      "context": "int GameConfig::get_bomb_delay()"
    },
    {
      "caller_function": "f",
      "called_function": "get_bomb_delay",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 544,
        "column": 0
      },
      "context": "int GameConfig::get_bomb_delay()"
    },
    {
      "caller_function": "f",
      "called_function": "GameConfig::get_bomb_speed",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 549,
        "column": 0
      },
      "context": "int GameConfig::get_bomb_speed()"
    },
    {
      "caller_function": "f",
      "called_function": "get_bomb_speed",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 549,
        "column": 0
      },
      "context": "int GameConfig::get_bomb_speed()"
    },
    {
      "caller_function": "f",
      "called_function": "GameConfig::get_fullscreen",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 554,
        "column": 0
      },
      "context": "bool GameConfig::get_fullscreen()"
    },
    {
      "caller_function": "f",
      "called_function": "get_fullscreen",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 554,
        "column": 0
      },
      "context": "bool GameConfig::get_fullscreen()"
    },
    {
      "caller_function": "f",
      "called_function": "GameConfig::set_fullscreen",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 559,
        "column": 0
      },
      "context": "void GameConfig::set_fullscreen(bool val)"
    },
    {
      "caller_function": "f",
      "called_function": "set_fullscreen",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 559,
        "column": 0
      },
      "context": "void GameConfig::set_fullscreen(bool val)"
    },
    {
      "caller_function": "f",
      "called_function": "GameConfig::save",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 564,
        "column": 0
      },
      "context": "bool GameConfig::save(bool init)"
    },
    {
      "caller_function": "f",
      "called_function": "save",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 564,
        "column": 0
      },
      "context": "bool GameConfig::save(bool init)"
    },
    {
      "caller_function": "f",
      "called_function": "GameConfig::save",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 566,
        "column": 0
      },
      "context": "SDL_Log(\"GameConfig::save(init=%s)\", init ? \"true\" : \"false\");"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 566,
        "column": 0
      },
      "context": "SDL_Log(\"GameConfig::save(init=%s)\", init ? \"true\" : \"false\");"
    },
    {
      "caller_function": "f",
      "called_function": "save",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 566,
        "column": 0
      },
      "context": "SDL_Log(\"GameConfig::save(init=%s)\", init ? \"true\" : \"false\");"
    },
    {
      "caller_function": "f",
      "called_function": "GameConfig::save",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 568,
        "column": 0
      },
      "context": "SDL_Log(\"GameConfig::save() - Initializing default bomber configuration\");"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 568,
        "column": 0
      },
      "context": "SDL_Log(\"GameConfig::save() - Initializing default bomber configuration\");"
    },
    {
      "caller_function": "f",
      "called_function": "save",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 568,
        "column": 0
      },
      "context": "SDL_Log(\"GameConfig::save() - Initializing default bomber configuration\");"
    },
    {
      "caller_function": "r",
      "called_function": "set_skin",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 570,
        "column": 0
      },
      "context": "bomber[i].set_skin(i);"
    },
    {
      "caller_function": "r",
      "called_function": "set_name",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 572,
        "column": 0
      },
      "context": "bomber[0].set_name( \"Player1\" );"
    },
    {
      "caller_function": "r",
      "called_function": "set_name",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 573,
        "column": 0
      },
      "context": "bomber[1].set_name( \"Player2\" );"
    },
    {
      "caller_function": "r",
      "called_function": "set_name",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 574,
        "column": 0
      },
      "context": "bomber[2].set_name( \"Player3\" );"
    },
    {
      "caller_function": "r",
      "called_function": "set_name",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 575,
        "column": 0
      },
      "context": "bomber[3].set_name( \"Player4\" );"
    },
    {
      "caller_function": "r",
      "called_function": "set_name",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 576,
        "column": 0
      },
      "context": "bomber[4].set_name( \"AIs\" );"
    },
    {
      "caller_function": "r",
      "called_function": "set_name",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 577,
        "column": 0
      },
      "context": "bomber[5].set_name( \"Playing\" );"
    },
    {
      "caller_function": "r",
      "called_function": "set_name",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 578,
        "column": 0
      },
      "context": "bomber[6].set_name( \"For\" );"
    },
    {
      "caller_function": "r",
      "called_function": "set_name",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 579,
        "column": 0
      },
      "context": "bomber[7].set_name( \"You\" );"
    },
    {
      "caller_function": "r",
      "called_function": "enable",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 582,
        "column": 0
      },
      "context": "bomber[0].enable();"
    },
    {
      "caller_function": "r",
      "called_function": "set_controller",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 583,
        "column": 0
      },
      "context": "bomber[0].set_controller(2); // KEYMAP_1 (value 2 in enum)"
    },
    {
      "caller_function": "r",
      "called_function": "KEYMAP_1",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 583,
        "column": 0
      },
      "context": "bomber[0].set_controller(2); // KEYMAP_1 (value 2 in enum)"
    },
    {
      "caller_function": "r",
      "called_function": "enable",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 585,
        "column": 0
      },
      "context": "bomber[1].enable();"
    },
    {
      "caller_function": "r",
      "called_function": "set_controller",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 586,
        "column": 0
      },
      "context": "bomber[1].set_controller(6); // JOYSTICK_1 (value 6 in enum)"
    },
    {
      "caller_function": "r",
      "called_function": "JOYSTICK_1",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 586,
        "column": 0
      },
      "context": "bomber[1].set_controller(6); // JOYSTICK_1 (value 6 in enum)"
    },
    {
      "caller_function": "r",
      "called_function": "disable",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 590,
        "column": 0
      },
      "context": "bomber[i].disable();"
    },
    {
      "caller_function": "r",
      "called_function": "configfile",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 594,
        "column": 0
      },
      "context": "std::ofstream configfile(path / filename);"
    },
    {
      "caller_function": "r",
      "called_function": "get_skin",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 635,
        "column": 0
      },
      "context": "configfile << bomber[i].get_skin()\t\t<< std::endl;"
    },
    {
      "caller_function": "r",
      "called_function": "get_name",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 636,
        "column": 0
      },
      "context": "configfile << bomber[i].get_name()              << std::endl;"
    },
    {
      "caller_function": "r",
      "called_function": "get_team",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 637,
        "column": 0
      },
      "context": "configfile << bomber[i].get_team()\t\t<< std::endl;"
    },
    {
      "caller_function": "r",
      "called_function": "get_controller",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 638,
        "column": 0
      },
      "context": "configfile << bomber[i].get_controller()\t<< std::endl;"
    },
    {
      "caller_function": "r",
      "called_function": "is_enabled",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 639,
        "column": 0
      },
      "context": "configfile << bomber[i].is_enabled()\t\t<< std::endl;"
    },
    {
      "caller_function": "r",
      "called_function": "get_highlight_maptile",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 640,
        "column": 0
      },
      "context": "configfile << bomber[i].get_highlight_maptile()\t<< std::endl;"
    },
    {
      "caller_function": "r",
      "called_function": "GameConfig::load",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 648,
        "column": 0
      },
      "context": "bool GameConfig::load()"
    },
    {
      "caller_function": "r",
      "called_function": "load",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 648,
        "column": 0
      },
      "context": "bool GameConfig::load()"
    },
    {
      "caller_function": "r",
      "called_function": "configfile",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 650,
        "column": 0
      },
      "context": "std::ifstream configfile(path / filename);"
    },
    {
      "caller_function": "r",
      "called_function": "GameConfig::load",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 651,
        "column": 0
      },
      "context": "SDL_Log(\"GameConfig::load() - Attempting to load config from: %s\", (path / filename).c_str());"
    },
    {
      "caller_function": "r",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 651,
        "column": 0
      },
      "context": "SDL_Log(\"GameConfig::load() - Attempting to load config from: %s\", (path / filename).c_str());"
    },
    {
      "caller_function": "r",
      "called_function": "load",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 651,
        "column": 0
      },
      "context": "SDL_Log(\"GameConfig::load() - Attempting to load config from: %s\", (path / filename).c_str());"
    },
    {
      "caller_function": "r",
      "called_function": "c_str",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 651,
        "column": 0
      },
      "context": "SDL_Log(\"GameConfig::load() - Attempting to load config from: %s\", (path / filename).c_str());"
    },
    {
      "caller_function": "f",
      "called_function": "GameConfig::load",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 654,
        "column": 0
      },
      "context": "SDL_Log(\"GameConfig::load() - Config file not found, creating new config with default settings\");"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 654,
        "column": 0
      },
      "context": "SDL_Log(\"GameConfig::load() - Config file not found, creating new config with default settings\");"
    },
    {
      "caller_function": "f",
      "called_function": "load",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 654,
        "column": 0
      },
      "context": "SDL_Log(\"GameConfig::load() - Config file not found, creating new config with default settings\");"
    },
    {
      "caller_function": "f",
      "called_function": "close",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 655,
        "column": 0
      },
      "context": "configfile.close();"
    },
    {
      "caller_function": "f",
      "called_function": "save",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 656,
        "column": 0
      },
      "context": "save(true);"
    },
    {
      "caller_function": "f",
      "called_function": "close",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 664,
        "column": 0
      },
      "context": "configfile.close();"
    },
    {
      "caller_function": "f",
      "called_function": "save",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 665,
        "column": 0
      },
      "context": "save(true);"
    },
    {
      "caller_function": "r",
      "called_function": "set_skin",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 708,
        "column": 0
      },
      "context": "bomber[i].set_skin(version);"
    },
    {
      "caller_function": "r",
      "called_function": "ignore",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 711,
        "column": 0
      },
      "context": "configfile.ignore(1, '\\n');"
    },
    {
      "caller_function": "r",
      "called_function": "getline",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 712,
        "column": 0
      },
      "context": "getline(configfile, player_name);"
    },
    {
      "caller_function": "r",
      "called_function": "set_name",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 713,
        "column": 0
      },
      "context": "bomber[i].set_name(player_name);"
    },
    {
      "caller_function": "r",
      "called_function": "set_team",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 716,
        "column": 0
      },
      "context": "bomber[i].set_team(version);"
    },
    {
      "caller_function": "r",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 719,
        "column": 0
      },
      "context": "SDL_Log(\"Bomber %d: setting controller=%d\", i, version);"
    },
    {
      "caller_function": "r",
      "called_function": "set_controller",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 720,
        "column": 0
      },
      "context": "bomber[i].set_controller(version);"
    },
    {
      "caller_function": "r",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 723,
        "column": 0
      },
      "context": "SDL_Log(\"Bomber %d: setting enabled=%d\", i, version);"
    },
    {
      "caller_function": "r",
      "called_function": "set_enabled",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 724,
        "column": 0
      },
      "context": "bomber[i].set_enabled(version != 0);"
    },
    {
      "caller_function": "r",
      "called_function": "set_highlight_maptile",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 727,
        "column": 0
      },
      "context": "bomber[i].set_highlight_maptile(version != 0);"
    },
    {
      "caller_function": "r",
      "called_function": "set_last_server",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 732,
        "column": 0
      },
      "context": "set_last_server(server_name);"
    },
    {
      "caller_function": "r",
      "called_function": "GameConfig::set_last_server",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 737,
        "column": 0
      },
      "context": "void GameConfig::set_last_server(std::string server_name)"
    },
    {
      "caller_function": "r",
      "called_function": "set_last_server",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 737,
        "column": 0
      },
      "context": "void GameConfig::set_last_server(std::string server_name)"
    },
    {
      "caller_function": "r",
      "called_function": "GameConfig::get_last_server",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 742,
        "column": 0
      },
      "context": "std::string GameConfig::get_last_server()"
    },
    {
      "caller_function": "r",
      "called_function": "get_last_server",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 742,
        "column": 0
      },
      "context": "std::string GameConfig::get_last_server()"
    },
    {
      "caller_function": "r",
      "called_function": "BomberConfig::set_local",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 748,
        "column": 0
      },
      "context": "void BomberConfig::set_local(bool _local)"
    },
    {
      "caller_function": "r",
      "called_function": "set_local",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 748,
        "column": 0
      },
      "context": "void BomberConfig::set_local(bool _local)"
    },
    {
      "caller_function": "r",
      "called_function": "BomberConfig::is_local",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 754,
        "column": 0
      },
      "context": "bool BomberConfig::is_local()"
    },
    {
      "caller_function": "r",
      "called_function": "is_local",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 754,
        "column": 0
      },
      "context": "bool BomberConfig::is_local()"
    },
    {
      "caller_function": "r",
      "called_function": "BomberConfig::is_server_bomber",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 759,
        "column": 0
      },
      "context": "bool BomberConfig::is_server_bomber()"
    },
    {
      "caller_function": "r",
      "called_function": "is_server_bomber",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 759,
        "column": 0
      },
      "context": "bool BomberConfig::is_server_bomber()"
    },
    {
      "caller_function": "r",
      "called_function": "BomberConfig::set_server_bomber",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 764,
        "column": 0
      },
      "context": "void BomberConfig::set_server_bomber(bool from_server)"
    },
    {
      "caller_function": "r",
      "called_function": "set_server_bomber",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 764,
        "column": 0
      },
      "context": "void BomberConfig::set_server_bomber(bool from_server)"
    },
    {
      "caller_function": null,
      "called_function": "Controller_Joystick::Controller_Joystick",
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 10,
        "column": 0
      },
      "context": "Controller_Joystick::Controller_Joystick(int joystick_index)"
    },
    {
      "caller_function": null,
      "called_function": "Controller_Joystick",
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 10,
        "column": 0
      },
      "context": "Controller_Joystick::Controller_Joystick(int joystick_index)"
    },
    {
      "caller_function": null,
      "called_function": "Controller",
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 11,
        "column": 0
      },
      "context": ": Controller(), joystick_index(joystick_index), gamepad(nullptr), joystick(nullptr), instance_id(-1)"
    },
    {
      "caller_function": null,
      "called_function": "joystick_index",
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 11,
        "column": 0
      },
      "context": ": Controller(), joystick_index(joystick_index), gamepad(nullptr), joystick(nullptr), instance_id(-1)"
    },
    {
      "caller_function": null,
      "called_function": "gamepad",
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 11,
        "column": 0
      },
      "context": ": Controller(), joystick_index(joystick_index), gamepad(nullptr), joystick(nullptr), instance_id(-1)"
    },
    {
      "caller_function": null,
      "called_function": "joystick",
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 11,
        "column": 0
      },
      "context": ": Controller(), joystick_index(joystick_index), gamepad(nullptr), joystick(nullptr), instance_id(-1)"
    },
    {
      "caller_function": null,
      "called_function": "instance_id",
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 11,
        "column": 0
      },
      "context": ": Controller(), joystick_index(joystick_index), gamepad(nullptr), joystick(nullptr), instance_id(-1)"
    },
    {
      "caller_function": "e",
      "called_function": "reset",
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 17,
        "column": 0
      },
      "context": "reset();"
    },
    {
      "caller_function": "f",
      "called_function": "initialize_joystick_system",
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 21,
        "column": 0
      },
      "context": "initialize_joystick_system();"
    },
    {
      "caller_function": "f",
      "called_function": "initialize_joystick",
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 25,
        "column": 0
      },
      "context": "initialize_joystick();"
    },
    {
      "caller_function": "f",
      "called_function": "initialize_haptic",
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 28,
        "column": 0
      },
      "context": "initialize_haptic();"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 30,
        "column": 0
      },
      "context": "SDL_Log(\"Controller_Joystick: Created joystick controller %d\", joystick_index);"
    },
    {
      "caller_function": "f",
      "called_function": "Controller_Joystick",
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 33,
        "column": 0
      },
      "context": "Controller_Joystick::~Controller_Joystick() {"
    },
    {
      "caller_function": "f",
      "called_function": "cleanup_haptic",
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 34,
        "column": 0
      },
      "context": "cleanup_haptic();"
    },
    {
      "caller_function": "f",
      "called_function": "cleanup_joystick",
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 35,
        "column": 0
      },
      "context": "cleanup_joystick();"
    },
    {
      "caller_function": "f",
      "called_function": "update_input_state",
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 45,
        "column": 0
      },
      "context": "update_input_state();"
    },
    {
      "caller_function": "t",
      "called_function": "is_joystick_connected",
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 59,
        "column": 0
      },
      "context": "if (!active || !is_joystick_connected()) return false;"
    },
    {
      "caller_function": "t",
      "called_function": "is_joystick_connected",
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 64,
        "column": 0
      },
      "context": "if (!active || !is_joystick_connected()) return false;"
    },
    {
      "caller_function": "p",
      "called_function": "is_joystick_connected",
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 69,
        "column": 0
      },
      "context": "if (!active || !is_joystick_connected()) return false;"
    },
    {
      "caller_function": "n",
      "called_function": "is_joystick_connected",
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 74,
        "column": 0
      },
      "context": "if (!active || !is_joystick_connected()) return false;"
    },
    {
      "caller_function": "b",
      "called_function": "is_joystick_connected",
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 79,
        "column": 0
      },
      "context": "if (!active || !is_joystick_connected()) return false;"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 101,
        "column": 0
      },
      "context": "SDL_Log(\"Controller_Joystick: Failed to initialize SDL gamepad/joystick/haptic subsystems: %s\", SDL_"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_GetError",
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 101,
        "column": 0
      },
      "context": "SDL_Log(\"Controller_Joystick: Failed to initialize SDL gamepad/joystick/haptic subsystems: %s\", SDL_"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_SetJoystickEventsEnabled",
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 106,
        "column": 0
      },
      "context": "SDL_SetJoystickEventsEnabled(true);"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 110,
        "column": 0
      },
      "context": "SDL_Log(\"Controller_Joystick: Joystick system initialized\");"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_GetJoysticks",
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 114,
        "column": 0
      },
      "context": "SDL_JoystickID* joystick_ids = SDL_GetJoysticks(&num_joysticks);"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 115,
        "column": 0
      },
      "context": "SDL_Log(\"Controller_Joystick: Found %d joysticks\", num_joysticks);"
    },
    {
      "caller_function": "r",
      "called_function": "SDL_GetJoystickNameForID",
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 120,
        "column": 0
      },
      "context": "const char* name = SDL_GetJoystickNameForID(joystick_ids[i]);"
    },
    {
      "caller_function": "r",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 121,
        "column": 0
      },
      "context": "SDL_Log(\"Controller_Joystick: Joystick %d (ID %d): %s\", i, joystick_ids[i], name ? name : \"Unknown\")"
    },
    {
      "caller_function": "r",
      "called_function": "SDL_free",
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 123,
        "column": 0
      },
      "context": "SDL_free(joystick_ids);"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_CloseJoystick",
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 135,
        "column": 0
      },
      "context": "SDL_CloseJoystick(connected_joysticks[i]);"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_QuitSubSystem",
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 140,
        "column": 0
      },
      "context": "SDL_QuitSubSystem(SDL_INIT_GAMEPAD | SDL_INIT_JOYSTICK | SDL_INIT_HAPTIC);"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 143,
        "column": 0
      },
      "context": "SDL_Log(\"Controller_Joystick: Joystick system shutdown\");"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_GetJoysticks",
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 161,
        "column": 0
      },
      "context": "SDL_JoystickID* joystick_ids = SDL_GetJoysticks(&num_joysticks);"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_free",
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 163,
        "column": 0
      },
      "context": "SDL_free(joystick_ids);"
    },
    {
      "caller_function": "k",
      "called_function": "SDL_GetJoysticks",
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 176,
        "column": 0
      },
      "context": "SDL_JoystickID* joystick_ids = SDL_GetJoysticks(&num_joysticks);"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 178,
        "column": 0
      },
      "context": "SDL_Log(\"Controller_Joystick: Failed to get joystick IDs: %s\", SDL_GetError());"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_GetError",
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 178,
        "column": 0
      },
      "context": "SDL_Log(\"Controller_Joystick: Failed to get joystick IDs: %s\", SDL_GetError());"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 182,
        "column": 0
      },
      "context": "SDL_Log(\"Controller_Joystick: Found %d total joysticks\", num_joysticks);"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_OpenGamepad",
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 190,
        "column": 0
      },
      "context": "gamepad = SDL_OpenGamepad(joystick_ids[i]);"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_GetGamepadName",
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 192,
        "column": 0
      },
      "context": "const char* name = SDL_GetGamepadName(gamepad);"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 193,
        "column": 0
      },
      "context": "SDL_Log(\"Controller_Joystick: Opened Gamepad %d: %s\", joystick_index, name ? name : \"Unknown\");"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_GetGamepadJoystick",
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 196,
        "column": 0
      },
      "context": "joystick = SDL_GetGamepadJoystick(gamepad);"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_GetJoystickID",
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 198,
        "column": 0
      },
      "context": "instance_id = SDL_GetJoystickID(joystick);"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_GetNumJoystickButtons",
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 201,
        "column": 0
      },
      "context": "int num_buttons = SDL_GetNumJoystickButtons(joystick);"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_GetNumJoystickAxes",
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 202,
        "column": 0
      },
      "context": "int num_axes = SDL_GetNumJoystickAxes(joystick);"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_GetNumJoystickHats",
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 203,
        "column": 0
      },
      "context": "int num_hats = SDL_GetNumJoystickHats(joystick);"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 204,
        "column": 0
      },
      "context": "SDL_Log(\"Controller_Joystick: Underlying joystick - Buttons: %d, Axes: %d, Hats: %d\", num_buttons, n"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_free",
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 206,
        "column": 0
      },
      "context": "SDL_free(joystick_ids);"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 209,
        "column": 0
      },
      "context": "SDL_Log(\"Controller_Joystick: Failed to get underlying joystick from Gamepad\");"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_CloseGamepad",
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 210,
        "column": 0
      },
      "context": "SDL_CloseGamepad(gamepad);"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_free",
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 212,
        "column": 0
      },
      "context": "SDL_free(joystick_ids);"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 216,
        "column": 0
      },
      "context": "SDL_Log(\"Controller_Joystick: Failed to open Gamepad for ID %d: %s\", joystick_ids[i], SDL_GetError()"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_GetError",
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 216,
        "column": 0
      },
      "context": "SDL_Log(\"Controller_Joystick: Failed to open Gamepad for ID %d: %s\", joystick_ids[i], SDL_GetError()"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_free",
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 217,
        "column": 0
      },
      "context": "SDL_free(joystick_ids);"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 225,
        "column": 0
      },
      "context": "SDL_Log(\"Controller_Joystick: Gamepad index %d not found (found %d gamepads total)\","
    },
    {
      "caller_function": "f",
      "called_function": "found",
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 225,
        "column": 0
      },
      "context": "SDL_Log(\"Controller_Joystick: Gamepad index %d not found (found %d gamepads total)\","
    },
    {
      "caller_function": "f",
      "called_function": "SDL_free",
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 227,
        "column": 0
      },
      "context": "SDL_free(joystick_ids);"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_CloseGamepad",
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 233,
        "column": 0
      },
      "context": "SDL_CloseGamepad(gamepad);"
    },
    {
      "caller_function": "f",
      "called_function": "Controller_Joystick::is_joystick_connected",
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 245,
        "column": 0
      },
      "context": "bool Controller_Joystick::is_joystick_connected() const {"
    },
    {
      "caller_function": "f",
      "called_function": "is_joystick_connected",
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 245,
        "column": 0
      },
      "context": "bool Controller_Joystick::is_joystick_connected() const {"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_JoystickConnected",
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 246,
        "column": 0
      },
      "context": "return joystick && SDL_JoystickConnected(joystick);"
    },
    {
      "caller_function": "f",
      "called_function": "get_analog_left",
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 255,
        "column": 0
      },
      "context": "left_pressed = get_analog_left() || get_dpad_left();"
    },
    {
      "caller_function": "f",
      "called_function": "get_dpad_left",
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 255,
        "column": 0
      },
      "context": "left_pressed = get_analog_left() || get_dpad_left();"
    },
    {
      "caller_function": "f",
      "called_function": "get_analog_right",
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 256,
        "column": 0
      },
      "context": "right_pressed = get_analog_right() || get_dpad_right();"
    },
    {
      "caller_function": "f",
      "called_function": "get_dpad_right",
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 256,
        "column": 0
      },
      "context": "right_pressed = get_analog_right() || get_dpad_right();"
    },
    {
      "caller_function": "f",
      "called_function": "get_analog_up",
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 257,
        "column": 0
      },
      "context": "up_pressed = get_analog_up() || get_dpad_up();"
    },
    {
      "caller_function": "f",
      "called_function": "get_dpad_up",
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 257,
        "column": 0
      },
      "context": "up_pressed = get_analog_up() || get_dpad_up();"
    },
    {
      "caller_function": "f",
      "called_function": "get_analog_down",
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 258,
        "column": 0
      },
      "context": "down_pressed = get_analog_down() || get_dpad_down();"
    },
    {
      "caller_function": "f",
      "called_function": "get_dpad_down",
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 258,
        "column": 0
      },
      "context": "down_pressed = get_analog_down() || get_dpad_down();"
    },
    {
      "caller_function": "f",
      "called_function": "get_button_bomb",
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 261,
        "column": 0
      },
      "context": "bomb_pressed = get_button_bomb();"
    },
    {
      "caller_function": "f",
      "called_function": "Controller_Joystick::get_analog_left",
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 266,
        "column": 0
      },
      "context": "bool Controller_Joystick::get_analog_left() const {"
    },
    {
      "caller_function": "f",
      "called_function": "get_analog_left",
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 266,
        "column": 0
      },
      "context": "bool Controller_Joystick::get_analog_left() const {"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_GetJoystickAxis",
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 271,
        "column": 0
      },
      "context": "Sint16 axis_value = SDL_GetJoystickAxis(joystick, button_map.axis_horizontal);"
    },
    {
      "caller_function": "f",
      "called_function": "Controller_Joystick::get_analog_right",
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 275,
        "column": 0
      },
      "context": "bool Controller_Joystick::get_analog_right() const {"
    },
    {
      "caller_function": "f",
      "called_function": "get_analog_right",
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 275,
        "column": 0
      },
      "context": "bool Controller_Joystick::get_analog_right() const {"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_GetJoystickAxis",
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 280,
        "column": 0
      },
      "context": "Sint16 axis_value = SDL_GetJoystickAxis(joystick, button_map.axis_horizontal);"
    },
    {
      "caller_function": "f",
      "called_function": "Controller_Joystick::get_analog_up",
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 284,
        "column": 0
      },
      "context": "bool Controller_Joystick::get_analog_up() const {"
    },
    {
      "caller_function": "f",
      "called_function": "get_analog_up",
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 284,
        "column": 0
      },
      "context": "bool Controller_Joystick::get_analog_up() const {"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_GetJoystickAxis",
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 289,
        "column": 0
      },
      "context": "Sint16 axis_value = SDL_GetJoystickAxis(joystick, button_map.axis_vertical);"
    },
    {
      "caller_function": "f",
      "called_function": "Controller_Joystick::get_analog_down",
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 293,
        "column": 0
      },
      "context": "bool Controller_Joystick::get_analog_down() const {"
    },
    {
      "caller_function": "f",
      "called_function": "get_analog_down",
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 293,
        "column": 0
      },
      "context": "bool Controller_Joystick::get_analog_down() const {"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_GetJoystickAxis",
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 298,
        "column": 0
      },
      "context": "Sint16 axis_value = SDL_GetJoystickAxis(joystick, button_map.axis_vertical);"
    },
    {
      "caller_function": "f",
      "called_function": "Controller_Joystick::get_dpad_left",
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 304,
        "column": 0
      },
      "context": "bool Controller_Joystick::get_dpad_left() const {"
    },
    {
      "caller_function": "f",
      "called_function": "get_dpad_left",
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 304,
        "column": 0
      },
      "context": "bool Controller_Joystick::get_dpad_left() const {"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_GetJoystickHat",
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 309,
        "column": 0
      },
      "context": "Uint8 hat_value = SDL_GetJoystickHat(joystick, button_map.hat_index);"
    },
    {
      "caller_function": "f",
      "called_function": "Controller_Joystick::get_dpad_right",
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 313,
        "column": 0
      },
      "context": "bool Controller_Joystick::get_dpad_right() const {"
    },
    {
      "caller_function": "f",
      "called_function": "get_dpad_right",
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 313,
        "column": 0
      },
      "context": "bool Controller_Joystick::get_dpad_right() const {"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_GetJoystickHat",
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 318,
        "column": 0
      },
      "context": "Uint8 hat_value = SDL_GetJoystickHat(joystick, button_map.hat_index);"
    },
    {
      "caller_function": "f",
      "called_function": "Controller_Joystick::get_dpad_up",
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 322,
        "column": 0
      },
      "context": "bool Controller_Joystick::get_dpad_up() const {"
    },
    {
      "caller_function": "f",
      "called_function": "get_dpad_up",
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 322,
        "column": 0
      },
      "context": "bool Controller_Joystick::get_dpad_up() const {"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_GetJoystickHat",
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 327,
        "column": 0
      },
      "context": "Uint8 hat_value = SDL_GetJoystickHat(joystick, button_map.hat_index);"
    },
    {
      "caller_function": "f",
      "called_function": "Controller_Joystick::get_dpad_down",
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 331,
        "column": 0
      },
      "context": "bool Controller_Joystick::get_dpad_down() const {"
    },
    {
      "caller_function": "f",
      "called_function": "get_dpad_down",
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 331,
        "column": 0
      },
      "context": "bool Controller_Joystick::get_dpad_down() const {"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_GetJoystickHat",
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 336,
        "column": 0
      },
      "context": "Uint8 hat_value = SDL_GetJoystickHat(joystick, button_map.hat_index);"
    },
    {
      "caller_function": "f",
      "called_function": "Controller_Joystick::get_button_bomb",
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 342,
        "column": 0
      },
      "context": "bool Controller_Joystick::get_button_bomb() const {"
    },
    {
      "caller_function": "f",
      "called_function": "get_button_bomb",
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 342,
        "column": 0
      },
      "context": "bool Controller_Joystick::get_button_bomb() const {"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 368,
        "column": 0
      },
      "context": "SDL_Log(\"Controller_Joystick: No gamepad available for rumble initialization\");"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_GetGamepadName",
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 372,
        "column": 0
      },
      "context": "const char* name = SDL_GetGamepadName(gamepad);"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 373,
        "column": 0
      },
      "context": "SDL_Log(\"Controller_Joystick: Checking rumble support for '%s'\", name ? name : \"Unknown\");"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 377,
        "column": 0
      },
      "context": "SDL_Log(\"Controller_Joystick: Testing SDL_RumbleGamepad (SDL3 native approach)...\");"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_RumbleGamepad",
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 377,
        "column": 0
      },
      "context": "SDL_Log(\"Controller_Joystick: Testing SDL_RumbleGamepad (SDL3 native approach)...\");"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 381,
        "column": 0
      },
      "context": "SDL_Log(\"Controller_Joystick: \u2705 SDL_RumbleGamepad test successful!\");"
    },
    {
      "caller_function": "f",
      "called_function": "flag",
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 383,
        "column": 0
      },
      "context": "haptic_device = (SDL_Haptic*)1; // Use as boolean flag (non-null = working)"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 385,
        "column": 0
      },
      "context": "SDL_Log(\"Controller_Joystick: \u274c SDL_RumbleGamepad test failed: %s\", SDL_GetError());"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_GetError",
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 385,
        "column": 0
      },
      "context": "SDL_Log(\"Controller_Joystick: \u274c SDL_RumbleGamepad test failed: %s\", SDL_GetError());"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_RumbleGamepad",
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 393,
        "column": 0
      },
      "context": "SDL_RumbleGamepad(gamepad, 0, 0, 0); // Stop rumble"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 395,
        "column": 0
      },
      "context": "SDL_Log(\"Controller_Joystick: Gamepad rumble stopped for joystick %d\", joystick_index);"
    },
    {
      "caller_function": "f",
      "called_function": "std::fmax",
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 405,
        "column": 0
      },
      "context": "intensity = std::fmax(0.0f, std::fmin(1.0f, intensity));"
    },
    {
      "caller_function": "f",
      "called_function": "std::fmin",
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 405,
        "column": 0
      },
      "context": "intensity = std::fmax(0.0f, std::fmin(1.0f, intensity));"
    },
    {
      "caller_function": "f",
      "called_function": "fmax",
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 405,
        "column": 0
      },
      "context": "intensity = std::fmax(0.0f, std::fmin(1.0f, intensity));"
    },
    {
      "caller_function": "f",
      "called_function": "fmin",
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 405,
        "column": 0
      },
      "context": "intensity = std::fmax(0.0f, std::fmin(1.0f, intensity));"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 434,
        "column": 0
      },
      "context": "SDL_Log(\"Controller_Joystick: Failed to rumble gamepad: %s\", SDL_GetError());"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_GetError",
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 434,
        "column": 0
      },
      "context": "SDL_Log(\"Controller_Joystick: Failed to rumble gamepad: %s\", SDL_GetError());"
    },
    {
      "caller_function": "f",
      "called_function": "Controller_Joystick::calculate_explosion_intensity",
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 438,
        "column": 0
      },
      "context": "float Controller_Joystick::calculate_explosion_intensity(float explosion_x, float explosion_y, float"
    },
    {
      "caller_function": "f",
      "called_function": "calculate_explosion_intensity",
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 438,
        "column": 0
      },
      "context": "float Controller_Joystick::calculate_explosion_intensity(float explosion_x, float explosion_y, float"
    },
    {
      "caller_function": "f",
      "called_function": "std::sqrt",
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 445,
        "column": 0
      },
      "context": "float distance = std::sqrt(dx * dx + dy * dy);"
    },
    {
      "caller_function": "f",
      "called_function": "sqrt",
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 445,
        "column": 0
      },
      "context": "float distance = std::sqrt(dx * dx + dy * dy);"
    },
    {
      "caller_function": "f",
      "called_function": "std::fmax",
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 449,
        "column": 0
      },
      "context": "distance = std::fmax(distance, MIN_DISTANCE);"
    },
    {
      "caller_function": "f",
      "called_function": "fmax",
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 449,
        "column": 0
      },
      "context": "distance = std::fmax(distance, MIN_DISTANCE);"
    },
    {
      "caller_function": "f",
      "called_function": "std::fmax",
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 458,
        "column": 0
      },
      "context": "intensity = std::fmax(0.8f, intensity);"
    },
    {
      "caller_function": "f",
      "called_function": "fmax",
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 458,
        "column": 0
      },
      "context": "intensity = std::fmax(0.8f, intensity);"
    },
    {
      "caller_function": "f",
      "called_function": "std::fmax",
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 481,
        "column": 0
      },
      "context": "intensity = 0.01f * std::fmax(0.0f, (800.0f - distance) / 200.0f);"
    },
    {
      "caller_function": "f",
      "called_function": "fmax",
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 481,
        "column": 0
      },
      "context": "intensity = 0.01f * std::fmax(0.0f, (800.0f - distance) / 200.0f);"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 490,
        "column": 0
      },
      "context": "SDL_Log(\"HAPTIC: Bomber died! Maximum vibration intensity = %.3f\", intensity);"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 492,
        "column": 0
      },
      "context": "SDL_Log(\"HAPTIC: Explosion at (%.1f,%.1f) power=%.1f, bomber at (%.1f,%.1f), distance=%.1f px, inten"
    },
    {
      "caller_function": "f",
      "called_function": "std::fmax",
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 497,
        "column": 0
      },
      "context": "return std::fmax(0.0f, std::fmin(1.0f, intensity));"
    },
    {
      "caller_function": "f",
      "called_function": "std::fmin",
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 497,
        "column": 0
      },
      "context": "return std::fmax(0.0f, std::fmin(1.0f, intensity));"
    },
    {
      "caller_function": "f",
      "called_function": "fmax",
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 497,
        "column": 0
      },
      "context": "return std::fmax(0.0f, std::fmin(1.0f, intensity));"
    },
    {
      "caller_function": "f",
      "called_function": "fmin",
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 497,
        "column": 0
      },
      "context": "return std::fmax(0.0f, std::fmin(1.0f, intensity));"
    },
    {
      "caller_function": "f",
      "called_function": "Controller_Joystick::trigger_explosion_vibration",
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 500,
        "column": 0
      },
      "context": "void Controller_Joystick::trigger_explosion_vibration(float explosion_x, float explosion_y, float ex"
    },
    {
      "caller_function": "f",
      "called_function": "trigger_explosion_vibration",
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 500,
        "column": 0
      },
      "context": "void Controller_Joystick::trigger_explosion_vibration(float explosion_x, float explosion_y, float ex"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 503,
        "column": 0
      },
      "context": "SDL_Log(\"HAPTIC: No gamepad rumble available (explosion at %.1f,%.1f power=%.1f)\","
    },
    {
      "caller_function": "f",
      "called_function": "available",
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 503,
        "column": 0
      },
      "context": "SDL_Log(\"HAPTIC: No gamepad rumble available (explosion at %.1f,%.1f power=%.1f)\","
    },
    {
      "caller_function": "f",
      "called_function": "calculate_explosion_intensity",
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 509,
        "column": 0
      },
      "context": "float intensity = calculate_explosion_intensity(explosion_x, explosion_y, explosion_power,"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 515,
        "column": 0
      },
      "context": "SDL_Log(\"HAPTIC: Explosion too weak (%.3f), skipping vibration\", intensity);"
    },
    {
      "caller_function": "f",
      "called_function": "weak",
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 515,
        "column": 0
      },
      "context": "SDL_Log(\"HAPTIC: Explosion too weak (%.3f), skipping vibration\", intensity);"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_RumbleGamepad",
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 528,
        "column": 0
      },
      "context": "SDL_RumbleGamepad(gamepad, 65535, 65535, 150); // MAX intensity for 150ms"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 530,
        "column": 0
      },
      "context": "SDL_Log(\"HAPTIC: \u2620\ufe0f DEATH vibration triggered - intensity=%.3f, duration=%.1fs\","
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 559,
        "column": 0
      },
      "context": "SDL_Log(\"HAPTIC: \ud83d\udca5 Explosion rumble - intensity=%.3f, low=%d, high=%d, duration=%dms\","
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 564,
        "column": 0
      },
      "context": "SDL_Log(\"HAPTIC: Failed to rumble gamepad: %s\", SDL_GetError());"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_GetError",
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 564,
        "column": 0
      },
      "context": "SDL_Log(\"HAPTIC: Failed to rumble gamepad: %s\", SDL_GetError());"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 566,
        "column": 0
      },
      "context": "SDL_Log(\"HAPTIC: \u2705 Explosion rumble successful!\");"
    },
    {
      "caller_function": "f",
      "called_function": "apply_vibration",
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 577,
        "column": 0
      },
      "context": "apply_vibration(vibration_state.intensity);"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 589,
        "column": 0
      },
      "context": "SDL_Log(\"HAPTIC: Vibration stopped\");"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_RumbleGamepad",
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 599,
        "column": 0
      },
      "context": "SDL_RumbleGamepad(gamepad, 0, 0, 0); // Stop both motors"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 602,
        "column": 0
      },
      "context": "SDL_Log(\"HAPTIC: Dual-motor vibration stopped manually\");"
    },
    {
      "caller_function": "r",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/LifecycleManager.cpp",
        "line": 11,
        "column": 0
      },
      "context": "SDL_Log(\"LifecycleManager: Initialized unified object lifecycle system\");"
    },
    {
      "caller_function": "r",
      "called_function": "LifecycleManager",
      "location": {
        "file": "src/LifecycleManager.cpp",
        "line": 14,
        "column": 0
      },
      "context": "LifecycleManager::~LifecycleManager() {"
    },
    {
      "caller_function": "r",
      "called_function": "clear_all",
      "location": {
        "file": "src/LifecycleManager.cpp",
        "line": 15,
        "column": 0
      },
      "context": "clear_all();"
    },
    {
      "caller_function": "r",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/LifecycleManager.cpp",
        "line": 16,
        "column": 0
      },
      "context": "SDL_Log(\"LifecycleManager: Shutdown complete\");"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/LifecycleManager.cpp",
        "line": 24,
        "column": 0
      },
      "context": "SDL_Log(\"LifecycleManager: Object %p already registered\", obj);"
    },
    {
      "caller_function": "f",
      "called_function": "emplace_back",
      "location": {
        "file": "src/LifecycleManager.cpp",
        "line": 28,
        "column": 0
      },
      "context": "managed_objects.emplace_back(obj);"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/LifecycleManager.cpp",
        "line": 29,
        "column": 0
      },
      "context": "SDL_Log(\"LifecycleManager: Registered object %p (total: %zu)\", obj, managed_objects.size());"
    },
    {
      "caller_function": "f",
      "called_function": "size",
      "location": {
        "file": "src/LifecycleManager.cpp",
        "line": 29,
        "column": 0
      },
      "context": "SDL_Log(\"LifecycleManager: Registered object %p (total: %zu)\", obj, managed_objects.size());"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/LifecycleManager.cpp",
        "line": 37,
        "column": 0
      },
      "context": "SDL_Log(\"LifecycleManager: Tile %p already registered\", tile);"
    },
    {
      "caller_function": "f",
      "called_function": "emplace_back",
      "location": {
        "file": "src/LifecycleManager.cpp",
        "line": 41,
        "column": 0
      },
      "context": "managed_tiles.emplace_back(tile, map_x, map_y);"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/LifecycleManager.cpp",
        "line": 42,
        "column": 0
      },
      "context": "SDL_Log(\"LifecycleManager: Registered tile %p at (%d,%d) (total: %zu)\", tile, map_x, map_y, managed_"
    },
    {
      "caller_function": "f",
      "called_function": "size",
      "location": {
        "file": "src/LifecycleManager.cpp",
        "line": 42,
        "column": 0
      },
      "context": "SDL_Log(\"LifecycleManager: Registered tile %p at (%d,%d) (total: %zu)\", tile, map_x, map_y, managed_"
    },
    {
      "caller_function": "y",
      "called_function": "register_object",
      "location": {
        "file": "src/LifecycleManager.cpp",
        "line": 49,
        "column": 0
      },
      "context": "register_object(tile_entity);"
    },
    {
      "caller_function": "y",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/LifecycleManager.cpp",
        "line": 50,
        "column": 0
      },
      "context": "SDL_Log(\"LifecycleManager: Registered TileEntity %p as GameObject\", tile_entity);"
    },
    {
      "caller_function": "n",
      "called_function": "find_managed_object",
      "location": {
        "file": "src/LifecycleManager.cpp",
        "line": 56,
        "column": 0
      },
      "context": "ManagedObject* managed = find_managed_object(obj);"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/LifecycleManager.cpp",
        "line": 58,
        "column": 0
      },
      "context": "SDL_Log(\"LifecycleManager: Cannot mark unregistered object %p for destruction\", obj);"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/LifecycleManager.cpp",
        "line": 65,
        "column": 0
      },
      "context": "SDL_Log(\"LifecycleManager: Object %p marked for destruction (ACTIVE \u2192 DYING)\", obj);"
    },
    {
      "caller_function": "f",
      "called_function": "destruction",
      "location": {
        "file": "src/LifecycleManager.cpp",
        "line": 65,
        "column": 0
      },
      "context": "SDL_Log(\"LifecycleManager: Object %p marked for destruction (ACTIVE \u2192 DYING)\", obj);"
    },
    {
      "caller_function": "f",
      "called_function": "on_state_change",
      "location": {
        "file": "src/LifecycleManager.cpp",
        "line": 68,
        "column": 0
      },
      "context": "managed->on_state_change();"
    },
    {
      "caller_function": "n",
      "called_function": "find_managed_tile",
      "location": {
        "file": "src/LifecycleManager.cpp",
        "line": 76,
        "column": 0
      },
      "context": "ManagedTile* managed = find_managed_tile(tile);"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/LifecycleManager.cpp",
        "line": 78,
        "column": 0
      },
      "context": "SDL_Log(\"LifecycleManager: Cannot mark unregistered tile %p for destruction\", tile);"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/LifecycleManager.cpp",
        "line": 86,
        "column": 0
      },
      "context": "SDL_Log(\"LifecycleManager: Tile %p at (%d,%d) marked for destruction (ACTIVE \u2192 DYING)\","
    },
    {
      "caller_function": "f",
      "called_function": "destruction",
      "location": {
        "file": "src/LifecycleManager.cpp",
        "line": 86,
        "column": 0
      },
      "context": "SDL_Log(\"LifecycleManager: Tile %p at (%d,%d) marked for destruction (ACTIVE \u2192 DYING)\","
    },
    {
      "caller_function": "n",
      "called_function": "mark_for_destruction",
      "location": {
        "file": "src/LifecycleManager.cpp",
        "line": 95,
        "column": 0
      },
      "context": "mark_for_destruction(tile_entity);"
    },
    {
      "caller_function": "n",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/LifecycleManager.cpp",
        "line": 96,
        "column": 0
      },
      "context": "SDL_Log(\"LifecycleManager: TileEntity %p marked for destruction\", tile_entity);"
    },
    {
      "caller_function": "f",
      "called_function": "update_object_state",
      "location": {
        "file": "src/LifecycleManager.cpp",
        "line": 103,
        "column": 0
      },
      "context": "update_object_state(managed, deltaTime);"
    },
    {
      "caller_function": "f",
      "called_function": "update_tile_state",
      "location": {
        "file": "src/LifecycleManager.cpp",
        "line": 110,
        "column": 0
      },
      "context": "update_tile_state(managed, deltaTime);"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/LifecycleManager.cpp",
        "line": 124,
        "column": 0
      },
      "context": "SDL_Log(\"LifecycleManager: Object %p self-marked for destruction\", managed.object);"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/LifecycleManager.cpp",
        "line": 134,
        "column": 0
      },
      "context": "SDL_Log(\"LifecycleManager: Object %p death animation complete (DYING \u2192 DEAD)\", managed.object);"
    },
    {
      "caller_function": "f",
      "called_function": "complete",
      "location": {
        "file": "src/LifecycleManager.cpp",
        "line": 134,
        "column": 0
      },
      "context": "SDL_Log(\"LifecycleManager: Object %p death animation complete (DYING \u2192 DEAD)\", managed.object);"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/LifecycleManager.cpp",
        "line": 141,
        "column": 0
      },
      "context": "SDL_Log(\"LifecycleManager: Object %p ready for deletion (DEAD \u2192 DELETED)\", managed.object);"
    },
    {
      "caller_function": "f",
      "called_function": "deletion",
      "location": {
        "file": "src/LifecycleManager.cpp",
        "line": 141,
        "column": 0
      },
      "context": "SDL_Log(\"LifecycleManager: Object %p ready for deletion (DEAD \u2192 DELETED)\", managed.object);"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/LifecycleManager.cpp",
        "line": 159,
        "column": 0
      },
      "context": "SDL_Log(\"LifecycleManager: Tile %p at (%d,%d) self-marked for destruction\","
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/LifecycleManager.cpp",
        "line": 178,
        "column": 0
      },
      "context": "SDL_Log(\"LifecycleManager: Tile %p destruction animation complete (DYING \u2192 DEAD)\", managed.tile);"
    },
    {
      "caller_function": "f",
      "called_function": "complete",
      "location": {
        "file": "src/LifecycleManager.cpp",
        "line": 178,
        "column": 0
      },
      "context": "SDL_Log(\"LifecycleManager: Tile %p destruction animation complete (DYING \u2192 DEAD)\", managed.tile);"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/LifecycleManager.cpp",
        "line": 186,
        "column": 0
      },
      "context": "SDL_Log(\"LifecycleManager: Tile %p ready for replacement (DEAD \u2192 DELETED)\", managed.tile);"
    },
    {
      "caller_function": "f",
      "called_function": "replacement",
      "location": {
        "file": "src/LifecycleManager.cpp",
        "line": 186,
        "column": 0
      },
      "context": "SDL_Log(\"LifecycleManager: Tile %p ready for replacement (DEAD \u2192 DELETED)\", managed.tile);"
    },
    {
      "caller_function": "s",
      "called_function": "std::remove_if",
      "location": {
        "file": "src/LifecycleManager.cpp",
        "line": 197,
        "column": 0
      },
      "context": "auto it = std::remove_if(managed_objects.begin(), managed_objects.end(),"
    },
    {
      "caller_function": "s",
      "called_function": "remove_if",
      "location": {
        "file": "src/LifecycleManager.cpp",
        "line": 197,
        "column": 0
      },
      "context": "auto it = std::remove_if(managed_objects.begin(), managed_objects.end(),"
    },
    {
      "caller_function": "s",
      "called_function": "begin",
      "location": {
        "file": "src/LifecycleManager.cpp",
        "line": 197,
        "column": 0
      },
      "context": "auto it = std::remove_if(managed_objects.begin(), managed_objects.end(),"
    },
    {
      "caller_function": "s",
      "called_function": "end",
      "location": {
        "file": "src/LifecycleManager.cpp",
        "line": 197,
        "column": 0
      },
      "context": "auto it = std::remove_if(managed_objects.begin(), managed_objects.end(),"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/LifecycleManager.cpp",
        "line": 201,
        "column": 0
      },
      "context": "SDL_Log(\"LifecycleManager: Deleting object %p during cleanup\", managed.object);"
    },
    {
      "caller_function": "f",
      "called_function": "remove_from_spatial_systems",
      "location": {
        "file": "src/LifecycleManager.cpp",
        "line": 205,
        "column": 0
      },
      "context": "game_context->remove_from_spatial_systems(managed.object);"
    },
    {
      "caller_function": "f",
      "called_function": "catch",
      "location": {
        "file": "src/LifecycleManager.cpp",
        "line": 209,
        "column": 0
      },
      "context": "} catch (...) {"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/LifecycleManager.cpp",
        "line": 210,
        "column": 0
      },
      "context": "SDL_Log(\"ERROR: Exception during object cleanup %p - continuing\", managed.object);"
    },
    {
      "caller_function": "f",
      "called_function": "std::distance",
      "location": {
        "file": "src/LifecycleManager.cpp",
        "line": 217,
        "column": 0
      },
      "context": "size_t objects_removed = std::distance(it, managed_objects.end());"
    },
    {
      "caller_function": "f",
      "called_function": "distance",
      "location": {
        "file": "src/LifecycleManager.cpp",
        "line": 217,
        "column": 0
      },
      "context": "size_t objects_removed = std::distance(it, managed_objects.end());"
    },
    {
      "caller_function": "f",
      "called_function": "end",
      "location": {
        "file": "src/LifecycleManager.cpp",
        "line": 217,
        "column": 0
      },
      "context": "size_t objects_removed = std::distance(it, managed_objects.end());"
    },
    {
      "caller_function": "f",
      "called_function": "erase",
      "location": {
        "file": "src/LifecycleManager.cpp",
        "line": 218,
        "column": 0
      },
      "context": "managed_objects.erase(it, managed_objects.end());"
    },
    {
      "caller_function": "f",
      "called_function": "end",
      "location": {
        "file": "src/LifecycleManager.cpp",
        "line": 218,
        "column": 0
      },
      "context": "managed_objects.erase(it, managed_objects.end());"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/LifecycleManager.cpp",
        "line": 221,
        "column": 0
      },
      "context": "SDL_Log(\"LifecycleManager: Cleaned up %zu objects\", objects_removed);"
    },
    {
      "caller_function": "f",
      "called_function": "std::remove_if",
      "location": {
        "file": "src/LifecycleManager.cpp",
        "line": 225,
        "column": 0
      },
      "context": "auto tile_it = std::remove_if(managed_tiles.begin(), managed_tiles.end(),"
    },
    {
      "caller_function": "f",
      "called_function": "remove_if",
      "location": {
        "file": "src/LifecycleManager.cpp",
        "line": 225,
        "column": 0
      },
      "context": "auto tile_it = std::remove_if(managed_tiles.begin(), managed_tiles.end(),"
    },
    {
      "caller_function": "f",
      "called_function": "begin",
      "location": {
        "file": "src/LifecycleManager.cpp",
        "line": 225,
        "column": 0
      },
      "context": "auto tile_it = std::remove_if(managed_tiles.begin(), managed_tiles.end(),"
    },
    {
      "caller_function": "f",
      "called_function": "end",
      "location": {
        "file": "src/LifecycleManager.cpp",
        "line": 225,
        "column": 0
      },
      "context": "auto tile_it = std::remove_if(managed_tiles.begin(), managed_tiles.end(),"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/LifecycleManager.cpp",
        "line": 228,
        "column": 0
      },
      "context": "SDL_Log(\"LifecycleManager: Removing tile %p at (%d,%d) from tracking\","
    },
    {
      "caller_function": "f",
      "called_function": "std::distance",
      "location": {
        "file": "src/LifecycleManager.cpp",
        "line": 235,
        "column": 0
      },
      "context": "size_t tiles_removed = std::distance(tile_it, managed_tiles.end());"
    },
    {
      "caller_function": "f",
      "called_function": "distance",
      "location": {
        "file": "src/LifecycleManager.cpp",
        "line": 235,
        "column": 0
      },
      "context": "size_t tiles_removed = std::distance(tile_it, managed_tiles.end());"
    },
    {
      "caller_function": "f",
      "called_function": "end",
      "location": {
        "file": "src/LifecycleManager.cpp",
        "line": 235,
        "column": 0
      },
      "context": "size_t tiles_removed = std::distance(tile_it, managed_tiles.end());"
    },
    {
      "caller_function": "f",
      "called_function": "erase",
      "location": {
        "file": "src/LifecycleManager.cpp",
        "line": 236,
        "column": 0
      },
      "context": "managed_tiles.erase(tile_it, managed_tiles.end());"
    },
    {
      "caller_function": "f",
      "called_function": "end",
      "location": {
        "file": "src/LifecycleManager.cpp",
        "line": 236,
        "column": 0
      },
      "context": "managed_tiles.erase(tile_it, managed_tiles.end());"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/LifecycleManager.cpp",
        "line": 239,
        "column": 0
      },
      "context": "SDL_Log(\"LifecycleManager: Removed %zu tiles from tracking\", tiles_removed);"
    },
    {
      "caller_function": "f",
      "called_function": "LifecycleManager::get_object_state",
      "location": {
        "file": "src/LifecycleManager.cpp",
        "line": 243,
        "column": 0
      },
      "context": "LifecycleManager::ObjectState LifecycleManager::get_object_state(GameObject* obj) const {"
    },
    {
      "caller_function": "f",
      "called_function": "get_object_state",
      "location": {
        "file": "src/LifecycleManager.cpp",
        "line": 243,
        "column": 0
      },
      "context": "LifecycleManager::ObjectState LifecycleManager::get_object_state(GameObject* obj) const {"
    },
    {
      "caller_function": "f",
      "called_function": "find_managed_object",
      "location": {
        "file": "src/LifecycleManager.cpp",
        "line": 244,
        "column": 0
      },
      "context": "const ManagedObject* managed = find_managed_object(obj);"
    },
    {
      "caller_function": "f",
      "called_function": "LifecycleManager::get_tile_state",
      "location": {
        "file": "src/LifecycleManager.cpp",
        "line": 248,
        "column": 0
      },
      "context": "LifecycleManager::ObjectState LifecycleManager::get_tile_state(MapTile* tile) const {"
    },
    {
      "caller_function": "f",
      "called_function": "get_tile_state",
      "location": {
        "file": "src/LifecycleManager.cpp",
        "line": 248,
        "column": 0
      },
      "context": "LifecycleManager::ObjectState LifecycleManager::get_tile_state(MapTile* tile) const {"
    },
    {
      "caller_function": "f",
      "called_function": "find_managed_tile",
      "location": {
        "file": "src/LifecycleManager.cpp",
        "line": 249,
        "column": 0
      },
      "context": "const ManagedTile* managed = find_managed_tile(tile);"
    },
    {
      "caller_function": "f",
      "called_function": "LifecycleManager::get_tile_entity_state",
      "location": {
        "file": "src/LifecycleManager.cpp",
        "line": 253,
        "column": 0
      },
      "context": "LifecycleManager::ObjectState LifecycleManager::get_tile_entity_state(TileEntity* tile_entity) const"
    },
    {
      "caller_function": "f",
      "called_function": "get_tile_entity_state",
      "location": {
        "file": "src/LifecycleManager.cpp",
        "line": 253,
        "column": 0
      },
      "context": "LifecycleManager::ObjectState LifecycleManager::get_tile_entity_state(TileEntity* tile_entity) const"
    },
    {
      "caller_function": "f",
      "called_function": "get_object_state",
      "location": {
        "file": "src/LifecycleManager.cpp",
        "line": 255,
        "column": 0
      },
      "context": "return get_object_state(tile_entity);"
    },
    {
      "caller_function": "f",
      "called_function": "LifecycleManager::is_dying_or_dead",
      "location": {
        "file": "src/LifecycleManager.cpp",
        "line": 258,
        "column": 0
      },
      "context": "bool LifecycleManager::is_dying_or_dead(GameObject* obj) const {"
    },
    {
      "caller_function": "f",
      "called_function": "is_dying_or_dead",
      "location": {
        "file": "src/LifecycleManager.cpp",
        "line": 258,
        "column": 0
      },
      "context": "bool LifecycleManager::is_dying_or_dead(GameObject* obj) const {"
    },
    {
      "caller_function": "f",
      "called_function": "get_object_state",
      "location": {
        "file": "src/LifecycleManager.cpp",
        "line": 259,
        "column": 0
      },
      "context": "ObjectState state = get_object_state(obj);"
    },
    {
      "caller_function": "f",
      "called_function": "LifecycleManager::is_dying_or_dead",
      "location": {
        "file": "src/LifecycleManager.cpp",
        "line": 263,
        "column": 0
      },
      "context": "bool LifecycleManager::is_dying_or_dead(MapTile* tile) const {"
    },
    {
      "caller_function": "f",
      "called_function": "is_dying_or_dead",
      "location": {
        "file": "src/LifecycleManager.cpp",
        "line": 263,
        "column": 0
      },
      "context": "bool LifecycleManager::is_dying_or_dead(MapTile* tile) const {"
    },
    {
      "caller_function": "f",
      "called_function": "get_tile_state",
      "location": {
        "file": "src/LifecycleManager.cpp",
        "line": 264,
        "column": 0
      },
      "context": "ObjectState state = get_tile_state(tile);"
    },
    {
      "caller_function": "f",
      "called_function": "LifecycleManager::is_dying_or_dead",
      "location": {
        "file": "src/LifecycleManager.cpp",
        "line": 268,
        "column": 0
      },
      "context": "bool LifecycleManager::is_dying_or_dead(TileEntity* tile_entity) const {"
    },
    {
      "caller_function": "f",
      "called_function": "is_dying_or_dead",
      "location": {
        "file": "src/LifecycleManager.cpp",
        "line": 268,
        "column": 0
      },
      "context": "bool LifecycleManager::is_dying_or_dead(TileEntity* tile_entity) const {"
    },
    {
      "caller_function": "f",
      "called_function": "is_dying_or_dead",
      "location": {
        "file": "src/LifecycleManager.cpp",
        "line": 270,
        "column": 0
      },
      "context": "return is_dying_or_dead(static_cast<GameObject*>(tile_entity));"
    },
    {
      "caller_function": "l",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/LifecycleManager.cpp",
        "line": 274,
        "column": 0
      },
      "context": "SDL_Log(\"LifecycleManager: Clearing all managed objects and tiles\");"
    },
    {
      "caller_function": "l",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/LifecycleManager.cpp",
        "line": 277,
        "column": 0
      },
      "context": "SDL_Log(\"LifecycleManager: Deleting %zu managed objects\", managed_objects.size());"
    },
    {
      "caller_function": "l",
      "called_function": "size",
      "location": {
        "file": "src/LifecycleManager.cpp",
        "line": 277,
        "column": 0
      },
      "context": "SDL_Log(\"LifecycleManager: Deleting %zu managed objects\", managed_objects.size());"
    },
    {
      "caller_function": "f",
      "called_function": "catch",
      "location": {
        "file": "src/LifecycleManager.cpp",
        "line": 283,
        "column": 0
      },
      "context": "} catch (...) {"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/LifecycleManager.cpp",
        "line": 284,
        "column": 0
      },
      "context": "SDL_Log(\"ERROR: Exception during object deletion %p - continuing\", managed.object);"
    },
    {
      "caller_function": "f",
      "called_function": "clear",
      "location": {
        "file": "src/LifecycleManager.cpp",
        "line": 288,
        "column": 0
      },
      "context": "managed_objects.clear();"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/LifecycleManager.cpp",
        "line": 291,
        "column": 0
      },
      "context": "SDL_Log(\"LifecycleManager: Clearing %zu tile references (tiles owned by Map)\", managed_tiles.size())"
    },
    {
      "caller_function": "f",
      "called_function": "references",
      "location": {
        "file": "src/LifecycleManager.cpp",
        "line": 291,
        "column": 0
      },
      "context": "SDL_Log(\"LifecycleManager: Clearing %zu tile references (tiles owned by Map)\", managed_tiles.size())"
    },
    {
      "caller_function": "f",
      "called_function": "size",
      "location": {
        "file": "src/LifecycleManager.cpp",
        "line": 291,
        "column": 0
      },
      "context": "SDL_Log(\"LifecycleManager: Clearing %zu tile references (tiles owned by Map)\", managed_tiles.size())"
    },
    {
      "caller_function": "f",
      "called_function": "clear",
      "location": {
        "file": "src/LifecycleManager.cpp",
        "line": 292,
        "column": 0
      },
      "context": "managed_tiles.clear();"
    },
    {
      "caller_function": "f",
      "called_function": "LifecycleManager::get_active_object_count",
      "location": {
        "file": "src/LifecycleManager.cpp",
        "line": 295,
        "column": 0
      },
      "context": "size_t LifecycleManager::get_active_object_count() const {"
    },
    {
      "caller_function": "f",
      "called_function": "get_active_object_count",
      "location": {
        "file": "src/LifecycleManager.cpp",
        "line": 295,
        "column": 0
      },
      "context": "size_t LifecycleManager::get_active_object_count() const {"
    },
    {
      "caller_function": "f",
      "called_function": "std::count_if",
      "location": {
        "file": "src/LifecycleManager.cpp",
        "line": 296,
        "column": 0
      },
      "context": "return std::count_if(managed_objects.begin(), managed_objects.end(),"
    },
    {
      "caller_function": "f",
      "called_function": "count_if",
      "location": {
        "file": "src/LifecycleManager.cpp",
        "line": 296,
        "column": 0
      },
      "context": "return std::count_if(managed_objects.begin(), managed_objects.end(),"
    },
    {
      "caller_function": "f",
      "called_function": "begin",
      "location": {
        "file": "src/LifecycleManager.cpp",
        "line": 296,
        "column": 0
      },
      "context": "return std::count_if(managed_objects.begin(), managed_objects.end(),"
    },
    {
      "caller_function": "f",
      "called_function": "end",
      "location": {
        "file": "src/LifecycleManager.cpp",
        "line": 296,
        "column": 0
      },
      "context": "return std::count_if(managed_objects.begin(), managed_objects.end(),"
    },
    {
      "caller_function": "f",
      "called_function": "LifecycleManager::get_active_tile_count",
      "location": {
        "file": "src/LifecycleManager.cpp",
        "line": 302,
        "column": 0
      },
      "context": "size_t LifecycleManager::get_active_tile_count() const {"
    },
    {
      "caller_function": "f",
      "called_function": "get_active_tile_count",
      "location": {
        "file": "src/LifecycleManager.cpp",
        "line": 302,
        "column": 0
      },
      "context": "size_t LifecycleManager::get_active_tile_count() const {"
    },
    {
      "caller_function": "f",
      "called_function": "std::count_if",
      "location": {
        "file": "src/LifecycleManager.cpp",
        "line": 303,
        "column": 0
      },
      "context": "return std::count_if(managed_tiles.begin(), managed_tiles.end(),"
    },
    {
      "caller_function": "f",
      "called_function": "count_if",
      "location": {
        "file": "src/LifecycleManager.cpp",
        "line": 303,
        "column": 0
      },
      "context": "return std::count_if(managed_tiles.begin(), managed_tiles.end(),"
    },
    {
      "caller_function": "f",
      "called_function": "begin",
      "location": {
        "file": "src/LifecycleManager.cpp",
        "line": 303,
        "column": 0
      },
      "context": "return std::count_if(managed_tiles.begin(), managed_tiles.end(),"
    },
    {
      "caller_function": "f",
      "called_function": "end",
      "location": {
        "file": "src/LifecycleManager.cpp",
        "line": 303,
        "column": 0
      },
      "context": "return std::count_if(managed_tiles.begin(), managed_tiles.end(),"
    },
    {
      "caller_function": "t",
      "called_function": "std::find_if",
      "location": {
        "file": "src/LifecycleManager.cpp",
        "line": 311,
        "column": 0
      },
      "context": "auto it = std::find_if(managed_objects.begin(), managed_objects.end(),"
    },
    {
      "caller_function": "t",
      "called_function": "find_if",
      "location": {
        "file": "src/LifecycleManager.cpp",
        "line": 311,
        "column": 0
      },
      "context": "auto it = std::find_if(managed_objects.begin(), managed_objects.end(),"
    },
    {
      "caller_function": "t",
      "called_function": "begin",
      "location": {
        "file": "src/LifecycleManager.cpp",
        "line": 311,
        "column": 0
      },
      "context": "auto it = std::find_if(managed_objects.begin(), managed_objects.end(),"
    },
    {
      "caller_function": "t",
      "called_function": "end",
      "location": {
        "file": "src/LifecycleManager.cpp",
        "line": 311,
        "column": 0
      },
      "context": "auto it = std::find_if(managed_objects.begin(), managed_objects.end(),"
    },
    {
      "caller_function": "t",
      "called_function": "end",
      "location": {
        "file": "src/LifecycleManager.cpp",
        "line": 315,
        "column": 0
      },
      "context": "return it != managed_objects.end() ? &(*it) : nullptr;"
    },
    {
      "caller_function": "e",
      "called_function": "std::find_if",
      "location": {
        "file": "src/LifecycleManager.cpp",
        "line": 319,
        "column": 0
      },
      "context": "auto it = std::find_if(managed_tiles.begin(), managed_tiles.end(),"
    },
    {
      "caller_function": "e",
      "called_function": "find_if",
      "location": {
        "file": "src/LifecycleManager.cpp",
        "line": 319,
        "column": 0
      },
      "context": "auto it = std::find_if(managed_tiles.begin(), managed_tiles.end(),"
    },
    {
      "caller_function": "e",
      "called_function": "begin",
      "location": {
        "file": "src/LifecycleManager.cpp",
        "line": 319,
        "column": 0
      },
      "context": "auto it = std::find_if(managed_tiles.begin(), managed_tiles.end(),"
    },
    {
      "caller_function": "e",
      "called_function": "end",
      "location": {
        "file": "src/LifecycleManager.cpp",
        "line": 319,
        "column": 0
      },
      "context": "auto it = std::find_if(managed_tiles.begin(), managed_tiles.end(),"
    },
    {
      "caller_function": "e",
      "called_function": "end",
      "location": {
        "file": "src/LifecycleManager.cpp",
        "line": 323,
        "column": 0
      },
      "context": "return it != managed_tiles.end() ? &(*it) : nullptr;"
    },
    {
      "caller_function": "e",
      "called_function": "LifecycleManager::find_managed_object",
      "location": {
        "file": "src/LifecycleManager.cpp",
        "line": 326,
        "column": 0
      },
      "context": "const LifecycleManager::ManagedObject* LifecycleManager::find_managed_object(GameObject* obj) const "
    },
    {
      "caller_function": "e",
      "called_function": "find_managed_object",
      "location": {
        "file": "src/LifecycleManager.cpp",
        "line": 326,
        "column": 0
      },
      "context": "const LifecycleManager::ManagedObject* LifecycleManager::find_managed_object(GameObject* obj) const "
    },
    {
      "caller_function": "e",
      "called_function": "std::find_if",
      "location": {
        "file": "src/LifecycleManager.cpp",
        "line": 327,
        "column": 0
      },
      "context": "auto it = std::find_if(managed_objects.begin(), managed_objects.end(),"
    },
    {
      "caller_function": "e",
      "called_function": "find_if",
      "location": {
        "file": "src/LifecycleManager.cpp",
        "line": 327,
        "column": 0
      },
      "context": "auto it = std::find_if(managed_objects.begin(), managed_objects.end(),"
    },
    {
      "caller_function": "e",
      "called_function": "begin",
      "location": {
        "file": "src/LifecycleManager.cpp",
        "line": 327,
        "column": 0
      },
      "context": "auto it = std::find_if(managed_objects.begin(), managed_objects.end(),"
    },
    {
      "caller_function": "e",
      "called_function": "end",
      "location": {
        "file": "src/LifecycleManager.cpp",
        "line": 327,
        "column": 0
      },
      "context": "auto it = std::find_if(managed_objects.begin(), managed_objects.end(),"
    },
    {
      "caller_function": "e",
      "called_function": "end",
      "location": {
        "file": "src/LifecycleManager.cpp",
        "line": 331,
        "column": 0
      },
      "context": "return it != managed_objects.end() ? &(*it) : nullptr;"
    },
    {
      "caller_function": "e",
      "called_function": "LifecycleManager::find_managed_tile",
      "location": {
        "file": "src/LifecycleManager.cpp",
        "line": 334,
        "column": 0
      },
      "context": "const LifecycleManager::ManagedTile* LifecycleManager::find_managed_tile(MapTile* tile) const {"
    },
    {
      "caller_function": "e",
      "called_function": "find_managed_tile",
      "location": {
        "file": "src/LifecycleManager.cpp",
        "line": 334,
        "column": 0
      },
      "context": "const LifecycleManager::ManagedTile* LifecycleManager::find_managed_tile(MapTile* tile) const {"
    },
    {
      "caller_function": "e",
      "called_function": "std::find_if",
      "location": {
        "file": "src/LifecycleManager.cpp",
        "line": 335,
        "column": 0
      },
      "context": "auto it = std::find_if(managed_tiles.begin(), managed_tiles.end(),"
    },
    {
      "caller_function": "e",
      "called_function": "find_if",
      "location": {
        "file": "src/LifecycleManager.cpp",
        "line": 335,
        "column": 0
      },
      "context": "auto it = std::find_if(managed_tiles.begin(), managed_tiles.end(),"
    },
    {
      "caller_function": "e",
      "called_function": "begin",
      "location": {
        "file": "src/LifecycleManager.cpp",
        "line": 335,
        "column": 0
      },
      "context": "auto it = std::find_if(managed_tiles.begin(), managed_tiles.end(),"
    },
    {
      "caller_function": "e",
      "called_function": "end",
      "location": {
        "file": "src/LifecycleManager.cpp",
        "line": 335,
        "column": 0
      },
      "context": "auto it = std::find_if(managed_tiles.begin(), managed_tiles.end(),"
    },
    {
      "caller_function": "e",
      "called_function": "end",
      "location": {
        "file": "src/LifecycleManager.cpp",
        "line": 339,
        "column": 0
      },
      "context": "return it != managed_tiles.end() ? &(*it) : nullptr;"
    },
    {
      "caller_function": "b",
      "called_function": "GameConfig::get_bomb_countdown",
      "location": {
        "file": "src/Bomb.cpp",
        "line": 16,
        "column": 0
      },
      "context": "countdown = GameConfig::get_bomb_countdown() / 1000.0f;"
    },
    {
      "caller_function": "b",
      "called_function": "get_bomb_countdown",
      "location": {
        "file": "src/Bomb.cpp",
        "line": 16,
        "column": 0
      },
      "context": "countdown = GameConfig::get_bomb_countdown() / 1000.0f;"
    },
    {
      "caller_function": "b",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/Bomb.cpp",
        "line": 20,
        "column": 0
      },
      "context": "SDL_Log(\"\ud83d\udca3 BOMB: Using GameObject global centering at (%.1f,%.1f)\", x, y);"
    },
    {
      "caller_function": "b",
      "called_function": "tiles",
      "location": {
        "file": "src/Bomb.cpp",
        "line": 23,
        "column": 0
      },
      "context": "z = Z_BOMB;  // Bombs should be above tiles (3000 > 0)"
    },
    {
      "caller_function": "b",
      "called_function": "get_color",
      "location": {
        "file": "src/Bomb.cpp",
        "line": 27,
        "column": 0
      },
      "context": "base_sprite = owner->get_color() * 4; // 4 frames per color"
    },
    {
      "caller_function": "b",
      "called_function": "set_bomb_on_tile",
      "location": {
        "file": "src/Bomb.cpp",
        "line": 31,
        "column": 0
      },
      "context": "set_bomb_on_tile(this);"
    },
    {
      "caller_function": "b",
      "called_function": "Bomb",
      "location": {
        "file": "src/Bomb.cpp",
        "line": 34,
        "column": 0
      },
      "context": "Bomb::~Bomb() {"
    },
    {
      "caller_function": "b",
      "called_function": "remove_bomb_from_tile",
      "location": {
        "file": "src/Bomb.cpp",
        "line": 36,
        "column": 0
      },
      "context": "remove_bomb_from_tile(this);"
    },
    {
      "caller_function": "f",
      "called_function": "stop",
      "location": {
        "file": "src/Bomb.cpp",
        "line": 50,
        "column": 0
      },
      "context": "stop();"
    },
    {
      "caller_function": "f",
      "called_function": "explode",
      "location": {
        "file": "src/Bomb.cpp",
        "line": 57,
        "column": 0
      },
      "context": "explode();"
    },
    {
      "caller_function": "f",
      "called_function": "dec_current_bombs",
      "location": {
        "file": "src/Bomb.cpp",
        "line": 68,
        "column": 0
      },
      "context": "owner->dec_current_bombs();"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/Bomb.cpp",
        "line": 69,
        "column": 0
      },
      "context": "SDL_Log(\"Bomb exploded, bomber now has %d/%d bombs\", owner->get_current_bombs(), owner->get_max_bomb"
    },
    {
      "caller_function": "f",
      "called_function": "get_current_bombs",
      "location": {
        "file": "src/Bomb.cpp",
        "line": 69,
        "column": 0
      },
      "context": "SDL_Log(\"Bomb exploded, bomber now has %d/%d bombs\", owner->get_current_bombs(), owner->get_max_bomb"
    },
    {
      "caller_function": "f",
      "called_function": "get_max_bombs",
      "location": {
        "file": "src/Bomb.cpp",
        "line": 69,
        "column": 0
      },
      "context": "SDL_Log(\"Bomb exploded, bomber now has %d/%d bombs\", owner->get_current_bombs(), owner->get_max_bomb"
    },
    {
      "caller_function": "f",
      "called_function": "bomb_pos",
      "location": {
        "file": "src/Bomb.cpp",
        "line": 73,
        "column": 0
      },
      "context": "AudioPosition bomb_pos(x, y, 0.0f);"
    },
    {
      "caller_function": "f",
      "called_function": "AudioMixer::play_sound_3d",
      "location": {
        "file": "src/Bomb.cpp",
        "line": 74,
        "column": 0
      },
      "context": "AudioMixer::play_sound_3d(\"explode\", bomb_pos, 600.0f);"
    },
    {
      "caller_function": "f",
      "called_function": "play_sound_3d",
      "location": {
        "file": "src/Bomb.cpp",
        "line": 74,
        "column": 0
      },
      "context": "AudioMixer::play_sound_3d(\"explode\", bomb_pos, 600.0f);"
    },
    {
      "caller_function": "f",
      "called_function": "Explosion",
      "location": {
        "file": "src/Bomb.cpp",
        "line": 77,
        "column": 0
      },
      "context": "Explosion* explosion = new Explosion(x, y, power, owner, get_context());"
    },
    {
      "caller_function": "f",
      "called_function": "get_context",
      "location": {
        "file": "src/Bomb.cpp",
        "line": 77,
        "column": 0
      },
      "context": "Explosion* explosion = new Explosion(x, y, power, owner, get_context());"
    },
    {
      "caller_function": "f",
      "called_function": "get_context",
      "location": {
        "file": "src/Bomb.cpp",
        "line": 78,
        "column": 0
      },
      "context": "get_context()->register_object(explosion);"
    },
    {
      "caller_function": "f",
      "called_function": "register_object",
      "location": {
        "file": "src/Bomb.cpp",
        "line": 78,
        "column": 0
      },
      "context": "get_context()->register_object(explosion);"
    },
    {
      "caller_function": "d",
      "called_function": "GameConfig::get_bomb_delay",
      "location": {
        "file": "src/Bomb.cpp",
        "line": 82,
        "column": 0
      },
      "context": "float delay = GameConfig::get_bomb_delay() / 100.0f;"
    },
    {
      "caller_function": "d",
      "called_function": "get_bomb_delay",
      "location": {
        "file": "src/Bomb.cpp",
        "line": 82,
        "column": 0
      },
      "context": "float delay = GameConfig::get_bomb_delay() / 100.0f;"
    },
    {
      "caller_function": "f",
      "called_function": "remove_bomb_from_tile",
      "location": {
        "file": "src/Bomb.cpp",
        "line": 92,
        "column": 0
      },
      "context": "remove_bomb_from_tile(this);"
    },
    {
      "caller_function": "p",
      "called_function": "snap",
      "location": {
        "file": "src/Bomb.cpp",
        "line": 100,
        "column": 0
      },
      "context": "snap(); // Align to grid"
    },
    {
      "caller_function": "p",
      "called_function": "set_bomb_on_tile",
      "location": {
        "file": "src/Bomb.cpp",
        "line": 102,
        "column": 0
      },
      "context": "set_bomb_on_tile(this);"
    },
    {
      "caller_function": null,
      "called_function": "RenderingFacade::RenderingFacade",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 10,
        "column": 0
      },
      "context": "RenderingFacade::RenderingFacade(RenderingConfig config)"
    },
    {
      "caller_function": null,
      "called_function": "RenderingFacade",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 10,
        "column": 0
      },
      "context": "RenderingFacade::RenderingFacade(RenderingConfig config)"
    },
    {
      "caller_function": null,
      "called_function": "config",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 11,
        "column": 0
      },
      "context": ": config(config), initialized(false), frame_started(false) {"
    },
    {
      "caller_function": null,
      "called_function": "initialized",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 11,
        "column": 0
      },
      "context": ": config(config), initialized(false), frame_started(false) {"
    },
    {
      "caller_function": null,
      "called_function": "frame_started",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 11,
        "column": 0
      },
      "context": ": config(config), initialized(false), frame_started(false) {"
    },
    {
      "caller_function": null,
      "called_function": "SDL_Log",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 12,
        "column": 0
      },
      "context": "SDL_Log(\"RenderingFacade: Initialized with config - GPU acceleration: %s, Particle effects: %s\","
    },
    {
      "caller_function": null,
      "called_function": "RenderingFacade",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 17,
        "column": 0
      },
      "context": "RenderingFacade::~RenderingFacade() {"
    },
    {
      "caller_function": null,
      "called_function": "shutdown",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 18,
        "column": 0
      },
      "context": "shutdown();"
    },
    {
      "caller_function": "f",
      "called_function": "success",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 25,
        "column": 0
      },
      "context": "return GameResult<void>::success();"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 31,
        "column": 0
      },
      "context": "SDL_Log(\"RenderingFacade: Initializing subsystems for %dx%d display\", width, height);"
    },
    {
      "caller_function": "f",
      "called_function": "initialize_gpu_renderer",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 34,
        "column": 0
      },
      "context": "auto gpu_result = initialize_gpu_renderer(window);"
    },
    {
      "caller_function": "f",
      "called_function": "initialize_text_renderer",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 39,
        "column": 0
      },
      "context": "auto text_result = initialize_text_renderer();"
    },
    {
      "caller_function": "f",
      "called_function": "initialize_particle_manager",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 44,
        "column": 0
      },
      "context": "auto particle_result = initialize_particle_manager();"
    },
    {
      "caller_function": "f",
      "called_function": "reset_statistics",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 50,
        "column": 0
      },
      "context": "reset_statistics();"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 52,
        "column": 0
      },
      "context": "SDL_Log(\"RenderingFacade: All subsystems initialized successfully\");"
    },
    {
      "caller_function": "f",
      "called_function": "success",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 53,
        "column": 0
      },
      "context": "return GameResult<void>::success();"
    },
    {
      "caller_function": "n",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 59,
        "column": 0
      },
      "context": "SDL_Log(\"RenderingFacade: Shutting down all rendering subsystems\");"
    },
    {
      "caller_function": "n",
      "called_function": "reset",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 62,
        "column": 0
      },
      "context": "particle_manager.reset();"
    },
    {
      "caller_function": "n",
      "called_function": "reset",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 63,
        "column": 0
      },
      "context": "text_renderer.reset();"
    },
    {
      "caller_function": "n",
      "called_function": "reset",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 64,
        "column": 0
      },
      "context": "gpu_renderer.reset();"
    },
    {
      "caller_function": "f",
      "called_function": "error",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 74,
        "column": 0
      },
      "context": "return GameResult<void>::error(GameErrorType::RENDER_ERROR, ErrorSeverity::CRITICAL,"
    },
    {
      "caller_function": "f",
      "called_function": "error",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 79,
        "column": 0
      },
      "context": "return GameResult<void>::error(GameErrorType::RENDER_ERROR, ErrorSeverity::WARNING,"
    },
    {
      "caller_function": "f",
      "called_function": "validate_rendering_state",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 83,
        "column": 0
      },
      "context": "validate_rendering_state();"
    },
    {
      "caller_function": "f",
      "called_function": "clear_screen",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 86,
        "column": 0
      },
      "context": "clear_screen(0, 0, 0, 255); // Black background"
    },
    {
      "caller_function": "f",
      "called_function": "begin_frame",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 91,
        "column": 0
      },
      "context": "gpu_renderer->begin_frame();"
    },
    {
      "caller_function": "f",
      "called_function": "success",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 100,
        "column": 0
      },
      "context": "return GameResult<void>::success();"
    },
    {
      "caller_function": "f",
      "called_function": "error",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 105,
        "column": 0
      },
      "context": "return GameResult<void>::error(GameErrorType::RENDER_ERROR, ErrorSeverity::WARNING,"
    },
    {
      "caller_function": "f",
      "called_function": "end_frame",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 112,
        "column": 0
      },
      "context": "gpu_renderer->end_frame();"
    },
    {
      "caller_function": "f",
      "called_function": "render_debug_info",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 117,
        "column": 0
      },
      "context": "render_debug_info();"
    },
    {
      "caller_function": "f",
      "called_function": "update_statistics",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 120,
        "column": 0
      },
      "context": "update_statistics();"
    },
    {
      "caller_function": "f",
      "called_function": "success",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 123,
        "column": 0
      },
      "context": "return GameResult<void>::success();"
    },
    {
      "caller_function": "n",
      "called_function": "glClearColor",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 130,
        "column": 0
      },
      "context": "glClearColor("
    },
    {
      "caller_function": "n",
      "called_function": "glClear",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 136,
        "column": 0
      },
      "context": "glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);"
    },
    {
      "caller_function": "n",
      "called_function": "RenderingFacade::render_sprite",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 141,
        "column": 0
      },
      "context": "GameResult<void> RenderingFacade::render_sprite(const std::string& texture_name,"
    },
    {
      "caller_function": "n",
      "called_function": "render_sprite",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 141,
        "column": 0
      },
      "context": "GameResult<void> RenderingFacade::render_sprite(const std::string& texture_name,"
    },
    {
      "caller_function": "f",
      "called_function": "error",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 147,
        "column": 0
      },
      "context": "return GameResult<void>::error(GameErrorType::RENDER_ERROR, ErrorSeverity::WARNING,"
    },
    {
      "caller_function": "f",
      "called_function": "error",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 152,
        "column": 0
      },
      "context": "return GameResult<void>::error(GameErrorType::RENDER_ERROR, ErrorSeverity::CRITICAL,"
    },
    {
      "caller_function": "f",
      "called_function": "success",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 158,
        "column": 0
      },
      "context": "return GameResult<void>::success(); // Not an error, just optimization"
    },
    {
      "caller_function": "f",
      "called_function": "Resources::get_texture",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 167,
        "column": 0
      },
      "context": "::TextureInfo* tex_info = Resources::get_texture(texture_name);  // Use global TextureInfo"
    },
    {
      "caller_function": "f",
      "called_function": "get_texture",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 167,
        "column": 0
      },
      "context": "::TextureInfo* tex_info = Resources::get_texture(texture_name);  // Use global TextureInfo"
    },
    {
      "caller_function": "f",
      "called_function": "error",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 169,
        "column": 0
      },
      "context": "return GameResult<void>::error(GameErrorType::TEXTURE_LOAD_FAILED, ErrorSeverity::WARNING,"
    },
    {
      "caller_function": "f",
      "called_function": "Resources::get_gl_texture",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 173,
        "column": 0
      },
      "context": "GLuint gl_texture = Resources::get_gl_texture(texture_name);"
    },
    {
      "caller_function": "f",
      "called_function": "get_gl_texture",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 173,
        "column": 0
      },
      "context": "GLuint gl_texture = Resources::get_gl_texture(texture_name);"
    },
    {
      "caller_function": "f",
      "called_function": "error",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 175,
        "column": 0
      },
      "context": "return GameResult<void>::error(GameErrorType::TEXTURE_LOAD_FAILED, ErrorSeverity::WARNING,"
    },
    {
      "caller_function": "f",
      "called_function": "begin_batch",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 180,
        "column": 0
      },
      "context": "gpu_renderer->begin_batch();"
    },
    {
      "caller_function": "f",
      "called_function": "add_sprite",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 181,
        "column": 0
      },
      "context": "gpu_renderer->add_sprite("
    },
    {
      "caller_function": "f",
      "called_function": "end_batch",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 186,
        "column": 0
      },
      "context": "gpu_renderer->end_batch();"
    },
    {
      "caller_function": "f",
      "called_function": "success",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 191,
        "column": 0
      },
      "context": "return GameResult<void>::success();"
    },
    {
      "caller_function": "f",
      "called_function": "catch",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 193,
        "column": 0
      },
      "context": "} catch (const std::exception& e) {"
    },
    {
      "caller_function": "f",
      "called_function": "error",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 194,
        "column": 0
      },
      "context": "return GameResult<void>::error(GameErrorType::RENDER_ERROR, ErrorSeverity::WARNING,"
    },
    {
      "caller_function": "f",
      "called_function": "std::string",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 195,
        "column": 0
      },
      "context": "\"Failed to render sprite: \" + std::string(e.what()));"
    },
    {
      "caller_function": "f",
      "called_function": "string",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 195,
        "column": 0
      },
      "context": "\"Failed to render sprite: \" + std::string(e.what()));"
    },
    {
      "caller_function": "f",
      "called_function": "what",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 195,
        "column": 0
      },
      "context": "\"Failed to render sprite: \" + std::string(e.what()));"
    },
    {
      "caller_function": "f",
      "called_function": "RenderingFacade::render_sprite_at_grid",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 199,
        "column": 0
      },
      "context": "GameResult<void> RenderingFacade::render_sprite_at_grid(const std::string& texture_name,"
    },
    {
      "caller_function": "f",
      "called_function": "render_sprite_at_grid",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 199,
        "column": 0
      },
      "context": "GameResult<void> RenderingFacade::render_sprite_at_grid(const std::string& texture_name,"
    },
    {
      "caller_function": "f",
      "called_function": "CoordinateSystem::grid_to_pixel",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 204,
        "column": 0
      },
      "context": "PixelCoord pixel_position = CoordinateSystem::grid_to_pixel(grid_position);"
    },
    {
      "caller_function": "f",
      "called_function": "grid_to_pixel",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 204,
        "column": 0
      },
      "context": "PixelCoord pixel_position = CoordinateSystem::grid_to_pixel(grid_position);"
    },
    {
      "caller_function": "f",
      "called_function": "render_sprite",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 205,
        "column": 0
      },
      "context": "return render_sprite(texture_name, pixel_position, sprite_nr, rotation, opacity);"
    },
    {
      "caller_function": "f",
      "called_function": "RenderingFacade::render_sprite_batch",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 208,
        "column": 0
      },
      "context": "GameResult<void> RenderingFacade::render_sprite_batch(const std::string& texture_name,"
    },
    {
      "caller_function": "f",
      "called_function": "render_sprite_batch",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 208,
        "column": 0
      },
      "context": "GameResult<void> RenderingFacade::render_sprite_batch(const std::string& texture_name,"
    },
    {
      "caller_function": "f",
      "called_function": "render_sprite",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 214,
        "column": 0
      },
      "context": "auto result = render_sprite(cmd.texture_name, cmd.position, cmd.sprite_nr, cmd.rotation, cmd.opacity"
    },
    {
      "caller_function": "f",
      "called_function": "success",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 220,
        "column": 0
      },
      "context": "return GameResult<void>::success();"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 224,
        "column": 0
      },
      "context": "SDL_Log(\"RenderingFacade: Batch rendering %zu sprites for texture '%s'\","
    },
    {
      "caller_function": "f",
      "called_function": "size",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 225,
        "column": 0
      },
      "context": "commands.size(), texture_name.c_str());"
    },
    {
      "caller_function": "f",
      "called_function": "c_str",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 225,
        "column": 0
      },
      "context": "commands.size(), texture_name.c_str());"
    },
    {
      "caller_function": "f",
      "called_function": "size",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 227,
        "column": 0
      },
      "context": "stats.sprites_rendered += commands.size();"
    },
    {
      "caller_function": "f",
      "called_function": "success",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 230,
        "column": 0
      },
      "context": "return GameResult<void>::success();"
    },
    {
      "caller_function": "f",
      "called_function": "RenderingFacade::render_text",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 235,
        "column": 0
      },
      "context": "GameResult<void> RenderingFacade::render_text(const std::string& text,"
    },
    {
      "caller_function": "f",
      "called_function": "render_text",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 235,
        "column": 0
      },
      "context": "GameResult<void> RenderingFacade::render_text(const std::string& text,"
    },
    {
      "caller_function": "f",
      "called_function": "error",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 240,
        "column": 0
      },
      "context": "return GameResult<void>::error(GameErrorType::RENDER_ERROR, ErrorSeverity::WARNING,"
    },
    {
      "caller_function": "f",
      "called_function": "error",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 245,
        "column": 0
      },
      "context": "return GameResult<void>::error(GameErrorType::RENDER_ERROR, ErrorSeverity::WARNING,"
    },
    {
      "caller_function": "f",
      "called_function": "render_text",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 256,
        "column": 0
      },
      "context": "auto text_texture = text_renderer->render_text(text, font_name, color);"
    },
    {
      "caller_function": "f",
      "called_function": "error",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 259,
        "column": 0
      },
      "context": "return GameResult<void>::error(GameErrorType::RENDER_ERROR, ErrorSeverity::WARNING,"
    },
    {
      "caller_function": "f",
      "called_function": "begin_batch",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 274,
        "column": 0
      },
      "context": "gpu_renderer->begin_batch();"
    },
    {
      "caller_function": "f",
      "called_function": "add_sprite",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 275,
        "column": 0
      },
      "context": "gpu_renderer->add_sprite("
    },
    {
      "caller_function": "f",
      "called_function": "end_batch",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 280,
        "column": 0
      },
      "context": "gpu_renderer->end_batch();"
    },
    {
      "caller_function": "f",
      "called_function": "success",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 286,
        "column": 0
      },
      "context": "return GameResult<void>::success();"
    },
    {
      "caller_function": "f",
      "called_function": "catch",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 288,
        "column": 0
      },
      "context": "} catch (const std::exception& e) {"
    },
    {
      "caller_function": "f",
      "called_function": "std::string",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 289,
        "column": 0
      },
      "context": "return handle_text_error(\"render_text: \" + std::string(e.what()));"
    },
    {
      "caller_function": "f",
      "called_function": "handle_text_error",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 289,
        "column": 0
      },
      "context": "return handle_text_error(\"render_text: \" + std::string(e.what()));"
    },
    {
      "caller_function": "f",
      "called_function": "string",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 289,
        "column": 0
      },
      "context": "return handle_text_error(\"render_text: \" + std::string(e.what()));"
    },
    {
      "caller_function": "f",
      "called_function": "what",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 289,
        "column": 0
      },
      "context": "return handle_text_error(\"render_text: \" + std::string(e.what()));"
    },
    {
      "caller_function": "f",
      "called_function": "RenderingFacade::render_particle_effect",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 295,
        "column": 0
      },
      "context": "GameResult<void> RenderingFacade::render_particle_effect(const std::string& effect_type,"
    },
    {
      "caller_function": "f",
      "called_function": "render_particle_effect",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 295,
        "column": 0
      },
      "context": "GameResult<void> RenderingFacade::render_particle_effect(const std::string& effect_type,"
    },
    {
      "caller_function": "f",
      "called_function": "success",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 299,
        "column": 0
      },
      "context": "return GameResult<void>::success(); // Effects disabled, not an error"
    },
    {
      "caller_function": "f",
      "called_function": "error",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 303,
        "column": 0
      },
      "context": "return GameResult<void>::error(GameErrorType::RENDER_ERROR, ErrorSeverity::WARNING,"
    },
    {
      "caller_function": "f",
      "called_function": "error",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 308,
        "column": 0
      },
      "context": "return GameResult<void>::error(GameErrorType::RENDER_ERROR, ErrorSeverity::WARNING,"
    },
    {
      "caller_function": "f",
      "called_function": "std::clamp",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 314,
        "column": 0
      },
      "context": "intensity = std::clamp(intensity, 0.0f, 1.0f);"
    },
    {
      "caller_function": "f",
      "called_function": "clamp",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 314,
        "column": 0
      },
      "context": "intensity = std::clamp(intensity, 0.0f, 1.0f);"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 318,
        "column": 0
      },
      "context": "SDL_Log(\"RenderingFacade: Creating particle effect '%s' at (%.1f, %.1f) intensity=%.2f\","
    },
    {
      "caller_function": "f",
      "called_function": "c_str",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 319,
        "column": 0
      },
      "context": "effect_type.c_str(), position.pixel_x, position.pixel_y, intensity);"
    },
    {
      "caller_function": "f",
      "called_function": "success",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 326,
        "column": 0
      },
      "context": "return GameResult<void>::success();"
    },
    {
      "caller_function": "f",
      "called_function": "catch",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 328,
        "column": 0
      },
      "context": "} catch (const std::exception& e) {"
    },
    {
      "caller_function": "f",
      "called_function": "std::string",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 329,
        "column": 0
      },
      "context": "return handle_particle_error(\"render_particle_effect: \" + std::string(e.what()));"
    },
    {
      "caller_function": "f",
      "called_function": "handle_particle_error",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 329,
        "column": 0
      },
      "context": "return handle_particle_error(\"render_particle_effect: \" + std::string(e.what()));"
    },
    {
      "caller_function": "f",
      "called_function": "string",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 329,
        "column": 0
      },
      "context": "return handle_particle_error(\"render_particle_effect: \" + std::string(e.what()));"
    },
    {
      "caller_function": "f",
      "called_function": "what",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 329,
        "column": 0
      },
      "context": "return handle_particle_error(\"render_particle_effect: \" + std::string(e.what()));"
    },
    {
      "caller_function": "f",
      "called_function": "RenderingFacade::screen_to_world",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 335,
        "column": 0
      },
      "context": "PixelCoord RenderingFacade::screen_to_world(const PixelCoord& screen_coord) const {"
    },
    {
      "caller_function": "f",
      "called_function": "screen_to_world",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 335,
        "column": 0
      },
      "context": "PixelCoord RenderingFacade::screen_to_world(const PixelCoord& screen_coord) const {"
    },
    {
      "caller_function": "f",
      "called_function": "RenderingFacade::world_to_screen",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 341,
        "column": 0
      },
      "context": "PixelCoord RenderingFacade::world_to_screen(const PixelCoord& world_coord) const {"
    },
    {
      "caller_function": "f",
      "called_function": "world_to_screen",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 341,
        "column": 0
      },
      "context": "PixelCoord RenderingFacade::world_to_screen(const PixelCoord& world_coord) const {"
    },
    {
      "caller_function": "f",
      "called_function": "RenderingFacade::is_position_visible",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 346,
        "column": 0
      },
      "context": "bool RenderingFacade::is_position_visible(const PixelCoord& position) const {"
    },
    {
      "caller_function": "f",
      "called_function": "is_position_visible",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 346,
        "column": 0
      },
      "context": "bool RenderingFacade::is_position_visible(const PixelCoord& position) const {"
    },
    {
      "caller_function": "f",
      "called_function": "RenderingFacade::get_viewport_bounds",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 351,
        "column": 0
      },
      "context": "RenderingFacade::ViewportBounds RenderingFacade::get_viewport_bounds() const {"
    },
    {
      "caller_function": "f",
      "called_function": "get_viewport_bounds",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 351,
        "column": 0
      },
      "context": "RenderingFacade::ViewportBounds RenderingFacade::get_viewport_bounds() const {"
    },
    {
      "caller_function": "g",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 359,
        "column": 0
      },
      "context": "SDL_Log(\"RenderingFacade: Configuration updated\");"
    },
    {
      "caller_function": "e",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 369,
        "column": 0
      },
      "context": "SDL_Log(\"RenderingFacade: Debug mode %s\", enabled ? \"enabled\" : \"disabled\");"
    },
    {
      "caller_function": "o",
      "called_function": "std::to_string",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 382,
        "column": 0
      },
      "context": "std::string debug_text = \"FPS: \" + std::to_string(1000.0f / std::max(stats.frame_time_ms, 0.001f)) +"
    },
    {
      "caller_function": "o",
      "called_function": "std::max",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 382,
        "column": 0
      },
      "context": "std::string debug_text = \"FPS: \" + std::to_string(1000.0f / std::max(stats.frame_time_ms, 0.001f)) +"
    },
    {
      "caller_function": "o",
      "called_function": "to_string",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 382,
        "column": 0
      },
      "context": "std::string debug_text = \"FPS: \" + std::to_string(1000.0f / std::max(stats.frame_time_ms, 0.001f)) +"
    },
    {
      "caller_function": "o",
      "called_function": "max",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 382,
        "column": 0
      },
      "context": "std::string debug_text = \"FPS: \" + std::to_string(1000.0f / std::max(stats.frame_time_ms, 0.001f)) +"
    },
    {
      "caller_function": "o",
      "called_function": "std::to_string",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 383,
        "column": 0
      },
      "context": "\" | Sprites: \" + std::to_string(stats.sprites_rendered) +"
    },
    {
      "caller_function": "o",
      "called_function": "to_string",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 383,
        "column": 0
      },
      "context": "\" | Sprites: \" + std::to_string(stats.sprites_rendered) +"
    },
    {
      "caller_function": "o",
      "called_function": "std::to_string",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 384,
        "column": 0
      },
      "context": "\" | Draw calls: \" + std::to_string(stats.draw_calls);"
    },
    {
      "caller_function": "o",
      "called_function": "to_string",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 384,
        "column": 0
      },
      "context": "\" | Draw calls: \" + std::to_string(stats.draw_calls);"
    },
    {
      "caller_function": "o",
      "called_function": "debug_position",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 386,
        "column": 0
      },
      "context": "PixelCoord debug_position(10.0f, 10.0f);"
    },
    {
      "caller_function": "o",
      "called_function": "render_text",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 387,
        "column": 0
      },
      "context": "render_text(debug_text, debug_position, \"small\", 255, 255, 255);"
    },
    {
      "caller_function": "f",
      "called_function": "error",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 394,
        "column": 0
      },
      "context": "return GameResult<void>::error(GameErrorType::RENDER_ERROR, ErrorSeverity::WARNING,"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 401,
        "column": 0
      },
      "context": "SDL_Log(\"RenderingFacade: Preloading texture '%s'\", texture_name.c_str());"
    },
    {
      "caller_function": "f",
      "called_function": "c_str",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 401,
        "column": 0
      },
      "context": "SDL_Log(\"RenderingFacade: Preloading texture '%s'\", texture_name.c_str());"
    },
    {
      "caller_function": "f",
      "called_function": "success",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 403,
        "column": 0
      },
      "context": "return GameResult<void>::success();"
    },
    {
      "caller_function": "f",
      "called_function": "catch",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 405,
        "column": 0
      },
      "context": "} catch (const std::exception& e) {"
    },
    {
      "caller_function": "f",
      "called_function": "std::string",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 406,
        "column": 0
      },
      "context": "return handle_gpu_error(\"preload_texture: \" + std::string(e.what()));"
    },
    {
      "caller_function": "f",
      "called_function": "handle_gpu_error",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 406,
        "column": 0
      },
      "context": "return handle_gpu_error(\"preload_texture: \" + std::string(e.what()));"
    },
    {
      "caller_function": "f",
      "called_function": "string",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 406,
        "column": 0
      },
      "context": "return handle_gpu_error(\"preload_texture: \" + std::string(e.what()));"
    },
    {
      "caller_function": "f",
      "called_function": "what",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 406,
        "column": 0
      },
      "context": "return handle_gpu_error(\"preload_texture: \" + std::string(e.what()));"
    },
    {
      "caller_function": "e",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 415,
        "column": 0
      },
      "context": "SDL_Log(\"RenderingFacade: Unloading texture '%s'\", texture_name.c_str());"
    },
    {
      "caller_function": "e",
      "called_function": "c_str",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 415,
        "column": 0
      },
      "context": "SDL_Log(\"RenderingFacade: Unloading texture '%s'\", texture_name.c_str());"
    },
    {
      "caller_function": "e",
      "called_function": "RenderingFacade::get_texture_info",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 418,
        "column": 0
      },
      "context": "RenderingFacade::TextureInfo RenderingFacade::get_texture_info(const std::string& texture_name) cons"
    },
    {
      "caller_function": "e",
      "called_function": "get_texture_info",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 418,
        "column": 0
      },
      "context": "RenderingFacade::TextureInfo RenderingFacade::get_texture_info(const std::string& texture_name) cons"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 440,
        "column": 0
      },
      "context": "SDL_Log(\"RenderingFacade: GPU acceleration disabled, skipping GPU renderer initialization\");"
    },
    {
      "caller_function": "f",
      "called_function": "success",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 441,
        "column": 0
      },
      "context": "return GameResult<void>::success();"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 445,
        "column": 0
      },
      "context": "SDL_Log(\"RenderingFacade: Creating dedicated GPUAcceleratedRenderer\");"
    },
    {
      "caller_function": "f",
      "called_function": "initialize",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 448,
        "column": 0
      },
      "context": "auto init_result = gpu_renderer->initialize(window, screen_width, screen_height);"
    },
    {
      "caller_function": "f",
      "called_function": "reset",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 450,
        "column": 0
      },
      "context": "gpu_renderer.reset();"
    },
    {
      "caller_function": "f",
      "called_function": "error",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 451,
        "column": 0
      },
      "context": "return GameResult<void>::error(GameErrorType::RENDER_ERROR, ErrorSeverity::CRITICAL,"
    },
    {
      "caller_function": "f",
      "called_function": "get_error_message",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 452,
        "column": 0
      },
      "context": "\"Failed to initialize RenderingFacade's GPU renderer: \" + init_result.get_error_message(),"
    },
    {
      "caller_function": "f",
      "called_function": "get_error_context",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 453,
        "column": 0
      },
      "context": "init_result.get_error_context());"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 456,
        "column": 0
      },
      "context": "SDL_Log(\"RenderingFacade: GPU renderer created and initialized successfully\");"
    },
    {
      "caller_function": "f",
      "called_function": "success",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 457,
        "column": 0
      },
      "context": "return GameResult<void>::success();"
    },
    {
      "caller_function": "f",
      "called_function": "catch",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 459,
        "column": 0
      },
      "context": "} catch (const std::exception& e) {"
    },
    {
      "caller_function": "f",
      "called_function": "error",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 460,
        "column": 0
      },
      "context": "return GameResult<void>::error(GameErrorType::RENDER_ERROR, ErrorSeverity::CRITICAL,"
    },
    {
      "caller_function": "f",
      "called_function": "std::string",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 461,
        "column": 0
      },
      "context": "\"Failed to create GPU renderer: \" + std::string(e.what()));"
    },
    {
      "caller_function": "f",
      "called_function": "string",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 461,
        "column": 0
      },
      "context": "\"Failed to create GPU renderer: \" + std::string(e.what()));"
    },
    {
      "caller_function": "f",
      "called_function": "what",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 461,
        "column": 0
      },
      "context": "\"Failed to create GPU renderer: \" + std::string(e.what()));"
    },
    {
      "caller_function": "r",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 467,
        "column": 0
      },
      "context": "SDL_Log(\"RenderingFacade: Creating and initializing real TextRenderer\");"
    },
    {
      "caller_function": "f",
      "called_function": "reset",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 471,
        "column": 0
      },
      "context": "text_renderer.reset();"
    },
    {
      "caller_function": "f",
      "called_function": "error",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 472,
        "column": 0
      },
      "context": "return GameResult<void>::error(GameErrorType::RENDER_ERROR, ErrorSeverity::CRITICAL,"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_GetBasePath",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 477,
        "column": 0
      },
      "context": "const char* sdl_base_path = SDL_GetBasePath();"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 482,
        "column": 0
      },
      "context": "SDL_Log(\"RenderingFacade: Loaded big font successfully\");"
    },
    {
      "caller_function": "f",
      "called_function": "load_font",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 483,
        "column": 0
      },
      "context": "} else if (text_renderer->load_font(\"big\", \"/usr/share/fonts/truetype/dejavu/DejaVuSans-Bold.ttf\", 2"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 484,
        "column": 0
      },
      "context": "SDL_Log(\"RenderingFacade: Loaded big font from system path\");"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 486,
        "column": 0
      },
      "context": "SDL_Log(\"RenderingFacade: WARNING - Failed to load big font\");"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 491,
        "column": 0
      },
      "context": "SDL_Log(\"RenderingFacade: Loaded small font successfully\");"
    },
    {
      "caller_function": "f",
      "called_function": "load_font",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 492,
        "column": 0
      },
      "context": "} else if (text_renderer->load_font(\"small\", \"/usr/share/fonts/truetype/dejavu/DejaVuSans-Bold.ttf\","
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 493,
        "column": 0
      },
      "context": "SDL_Log(\"RenderingFacade: Loaded small font from system path\");"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 495,
        "column": 0
      },
      "context": "SDL_Log(\"RenderingFacade: WARNING - Failed to load small font\");"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 498,
        "column": 0
      },
      "context": "SDL_Log(\"RenderingFacade: TextRenderer initialized successfully\");"
    },
    {
      "caller_function": "f",
      "called_function": "success",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 499,
        "column": 0
      },
      "context": "return GameResult<void>::success();"
    },
    {
      "caller_function": "f",
      "called_function": "catch",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 501,
        "column": 0
      },
      "context": "} catch (const std::exception& e) {"
    },
    {
      "caller_function": "f",
      "called_function": "error",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 502,
        "column": 0
      },
      "context": "return GameResult<void>::error(GameErrorType::RENDER_ERROR, ErrorSeverity::CRITICAL,"
    },
    {
      "caller_function": "f",
      "called_function": "std::string",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 503,
        "column": 0
      },
      "context": "\"Failed to initialize text renderer: \" + std::string(e.what()));"
    },
    {
      "caller_function": "f",
      "called_function": "string",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 503,
        "column": 0
      },
      "context": "\"Failed to initialize text renderer: \" + std::string(e.what()));"
    },
    {
      "caller_function": "f",
      "called_function": "what",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 503,
        "column": 0
      },
      "context": "\"Failed to initialize text renderer: \" + std::string(e.what()));"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 509,
        "column": 0
      },
      "context": "SDL_Log(\"RenderingFacade: Particle effects disabled, skipping particle manager initialization\");"
    },
    {
      "caller_function": "f",
      "called_function": "success",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 510,
        "column": 0
      },
      "context": "return GameResult<void>::success();"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 519,
        "column": 0
      },
      "context": "SDL_Log(\"RenderingFacade: Particle manager initialized (mock) with max %d particles\", config.max_par"
    },
    {
      "caller_function": "f",
      "called_function": "initialized",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 519,
        "column": 0
      },
      "context": "SDL_Log(\"RenderingFacade: Particle manager initialized (mock) with max %d particles\", config.max_par"
    },
    {
      "caller_function": "f",
      "called_function": "success",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 520,
        "column": 0
      },
      "context": "return GameResult<void>::success();"
    },
    {
      "caller_function": "f",
      "called_function": "catch",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 522,
        "column": 0
      },
      "context": "} catch (const std::exception& e) {"
    },
    {
      "caller_function": "f",
      "called_function": "error",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 523,
        "column": 0
      },
      "context": "return GameResult<void>::error(GameErrorType::RENDER_ERROR, ErrorSeverity::WARNING,"
    },
    {
      "caller_function": "f",
      "called_function": "std::string",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 524,
        "column": 0
      },
      "context": "\"Failed to initialize particle manager: \" + std::string(e.what()));"
    },
    {
      "caller_function": "f",
      "called_function": "string",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 524,
        "column": 0
      },
      "context": "\"Failed to initialize particle manager: \" + std::string(e.what()));"
    },
    {
      "caller_function": "f",
      "called_function": "what",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 524,
        "column": 0
      },
      "context": "\"Failed to initialize particle manager: \" + std::string(e.what()));"
    },
    {
      "caller_function": "s",
      "called_function": "SDL_GetTicks",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 530,
        "column": 0
      },
      "context": "static Uint64 last_time = SDL_GetTicks();"
    },
    {
      "caller_function": "s",
      "called_function": "SDL_GetTicks",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 531,
        "column": 0
      },
      "context": "Uint64 current_time = SDL_GetTicks();"
    },
    {
      "caller_function": "s",
      "called_function": "RenderingFacade::validate_rendering_state",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 539,
        "column": 0
      },
      "context": "void RenderingFacade::validate_rendering_state() const {"
    },
    {
      "caller_function": "s",
      "called_function": "validate_rendering_state",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 539,
        "column": 0
      },
      "context": "void RenderingFacade::validate_rendering_state() const {"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 541,
        "column": 0
      },
      "context": "SDL_Log(\"WARNING: RenderingFacade used before initialization\");"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 545,
        "column": 0
      },
      "context": "SDL_Log(\"WARNING: Frame started but no GPU renderer available\");"
    },
    {
      "caller_function": "f",
      "called_function": "RenderingFacade::handle_gpu_error",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 551,
        "column": 0
      },
      "context": "GameResult<void> RenderingFacade::handle_gpu_error(const std::string& operation) const {"
    },
    {
      "caller_function": "f",
      "called_function": "handle_gpu_error",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 551,
        "column": 0
      },
      "context": "GameResult<void> RenderingFacade::handle_gpu_error(const std::string& operation) const {"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 553,
        "column": 0
      },
      "context": "SDL_Log(\"RenderingFacade: GPU operation '%s' completed\", operation.c_str());"
    },
    {
      "caller_function": "f",
      "called_function": "c_str",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 553,
        "column": 0
      },
      "context": "SDL_Log(\"RenderingFacade: GPU operation '%s' completed\", operation.c_str());"
    },
    {
      "caller_function": "f",
      "called_function": "success",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 554,
        "column": 0
      },
      "context": "return GameResult<void>::success();"
    },
    {
      "caller_function": "f",
      "called_function": "RenderingFacade::handle_text_error",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 557,
        "column": 0
      },
      "context": "GameResult<void> RenderingFacade::handle_text_error(const std::string& operation) const {"
    },
    {
      "caller_function": "f",
      "called_function": "handle_text_error",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 557,
        "column": 0
      },
      "context": "GameResult<void> RenderingFacade::handle_text_error(const std::string& operation) const {"
    },
    {
      "caller_function": "f",
      "called_function": "error",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 558,
        "column": 0
      },
      "context": "return GameResult<void>::error(GameErrorType::RENDER_ERROR, ErrorSeverity::WARNING,"
    },
    {
      "caller_function": "f",
      "called_function": "RenderingFacade::handle_particle_error",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 562,
        "column": 0
      },
      "context": "GameResult<void> RenderingFacade::handle_particle_error(const std::string& operation) const {"
    },
    {
      "caller_function": "f",
      "called_function": "handle_particle_error",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 562,
        "column": 0
      },
      "context": "GameResult<void> RenderingFacade::handle_particle_error(const std::string& operation) const {"
    },
    {
      "caller_function": "f",
      "called_function": "error",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 563,
        "column": 0
      },
      "context": "return GameResult<void>::error(GameErrorType::RENDER_ERROR, ErrorSeverity::WARNING,"
    },
    {
      "caller_function": null,
      "called_function": "Bomber::Bomber",
      "location": {
        "file": "src/Bomber.cpp",
        "line": 10,
        "column": 0
      },
      "context": "Bomber::Bomber(int _x, int _y, COLOR _color, Controller* _controller, GameContext& context)"
    },
    {
      "caller_function": null,
      "called_function": "Bomber",
      "location": {
        "file": "src/Bomber.cpp",
        "line": 10,
        "column": 0
      },
      "context": "Bomber::Bomber(int _x, int _y, COLOR _color, Controller* _controller, GameContext& context)"
    },
    {
      "caller_function": null,
      "called_function": "GameObject",
      "location": {
        "file": "src/Bomber.cpp",
        "line": 11,
        "column": 0
      },
      "context": ": GameObject(_x, _y, &context), color(_color), controller(_controller) {"
    },
    {
      "caller_function": null,
      "called_function": "color",
      "location": {
        "file": "src/Bomber.cpp",
        "line": 11,
        "column": 0
      },
      "context": ": GameObject(_x, _y, &context), color(_color), controller(_controller) {"
    },
    {
      "caller_function": null,
      "called_function": "controller",
      "location": {
        "file": "src/Bomber.cpp",
        "line": 11,
        "column": 0
      },
      "context": ": GameObject(_x, _y, &context), color(_color), controller(_controller) {"
    },
    {
      "caller_function": "f",
      "called_function": "attach",
      "location": {
        "file": "src/Bomber.cpp",
        "line": 15,
        "column": 0
      },
      "context": "controller->attach(this);"
    },
    {
      "caller_function": "f",
      "called_function": "set_texture_from_color",
      "location": {
        "file": "src/Bomber.cpp",
        "line": 28,
        "column": 0
      },
      "context": "animation_component->set_texture_from_color(static_cast<int>(color));"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/Bomber.cpp",
        "line": 30,
        "column": 0
      },
      "context": "SDL_Log(\"Bomber: Created modern component-based bomber at (%d,%d) with color %d\", _x, _y, static_cas"
    },
    {
      "caller_function": "f",
      "called_function": "Bomber",
      "location": {
        "file": "src/Bomber.cpp",
        "line": 33,
        "column": 0
      },
      "context": "Bomber::~Bomber() {"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/Bomber.cpp",
        "line": 35,
        "column": 0
      },
      "context": "SDL_Log(\"Bomber: Destroyed bomber with modern component cleanup\");"
    },
    {
      "caller_function": "f",
      "called_function": "update",
      "location": {
        "file": "src/Bomber.cpp",
        "line": 46,
        "column": 0
      },
      "context": "controller->update();"
    },
    {
      "caller_function": "f",
      "called_function": "update",
      "location": {
        "file": "src/Bomber.cpp",
        "line": 51,
        "column": 0
      },
      "context": "lifecycle_component->update(deltaTime);"
    },
    {
      "caller_function": "f",
      "called_function": "update",
      "location": {
        "file": "src/Bomber.cpp",
        "line": 55,
        "column": 0
      },
      "context": "movement_component->update(deltaTime);"
    },
    {
      "caller_function": "f",
      "called_function": "handle_controller_input",
      "location": {
        "file": "src/Bomber.cpp",
        "line": 56,
        "column": 0
      },
      "context": "movement_component->handle_controller_input(controller, deltaTime);"
    },
    {
      "caller_function": "f",
      "called_function": "update",
      "location": {
        "file": "src/Bomber.cpp",
        "line": 60,
        "column": 0
      },
      "context": "combat_component->update(deltaTime);"
    },
    {
      "caller_function": "f",
      "called_function": "handle_controller_input",
      "location": {
        "file": "src/Bomber.cpp",
        "line": 61,
        "column": 0
      },
      "context": "combat_component->handle_controller_input(controller, deltaTime);"
    },
    {
      "caller_function": "f",
      "called_function": "update",
      "location": {
        "file": "src/Bomber.cpp",
        "line": 65,
        "column": 0
      },
      "context": "animation_component->update(deltaTime);"
    },
    {
      "caller_function": "f",
      "called_function": "GameObject::show",
      "location": {
        "file": "src/Bomber.cpp",
        "line": 77,
        "column": 0
      },
      "context": "GameObject::show(); // Only show every other frame"
    },
    {
      "caller_function": "f",
      "called_function": "show",
      "location": {
        "file": "src/Bomber.cpp",
        "line": 77,
        "column": 0
      },
      "context": "GameObject::show(); // Only show every other frame"
    },
    {
      "caller_function": "f",
      "called_function": "GameObject::show",
      "location": {
        "file": "src/Bomber.cpp",
        "line": 80,
        "column": 0
      },
      "context": "GameObject::show(); // Normal rendering"
    },
    {
      "caller_function": "f",
      "called_function": "show",
      "location": {
        "file": "src/Bomber.cpp",
        "line": 80,
        "column": 0
      },
      "context": "GameObject::show(); // Normal rendering"
    },
    {
      "caller_function": "e",
      "called_function": "die",
      "location": {
        "file": "src/Bomber.cpp",
        "line": 88,
        "column": 0
      },
      "context": "if (combat_component) combat_component->die();"
    },
    {
      "caller_function": "e",
      "called_function": "Bomber::is_dead",
      "location": {
        "file": "src/Bomber.cpp",
        "line": 91,
        "column": 0
      },
      "context": "bool Bomber::is_dead() const {"
    },
    {
      "caller_function": "e",
      "called_function": "is_dead",
      "location": {
        "file": "src/Bomber.cpp",
        "line": 91,
        "column": 0
      },
      "context": "bool Bomber::is_dead() const {"
    },
    {
      "caller_function": "e",
      "called_function": "is_dead",
      "location": {
        "file": "src/Bomber.cpp",
        "line": 92,
        "column": 0
      },
      "context": "return combat_component ? combat_component->is_dead() : false;"
    },
    {
      "caller_function": "s",
      "called_function": "set_lives",
      "location": {
        "file": "src/Bomber.cpp",
        "line": 97,
        "column": 0
      },
      "context": "if (lifecycle_component) lifecycle_component->set_lives(lives);"
    },
    {
      "caller_function": "s",
      "called_function": "Bomber::get_lives",
      "location": {
        "file": "src/Bomber.cpp",
        "line": 100,
        "column": 0
      },
      "context": "int Bomber::get_lives() const {"
    },
    {
      "caller_function": "s",
      "called_function": "get_lives",
      "location": {
        "file": "src/Bomber.cpp",
        "line": 100,
        "column": 0
      },
      "context": "int Bomber::get_lives() const {"
    },
    {
      "caller_function": "s",
      "called_function": "get_lives",
      "location": {
        "file": "src/Bomber.cpp",
        "line": 101,
        "column": 0
      },
      "context": "return lifecycle_component ? lifecycle_component->get_lives() : 0;"
    },
    {
      "caller_function": "e",
      "called_function": "lose_life",
      "location": {
        "file": "src/Bomber.cpp",
        "line": 105,
        "column": 0
      },
      "context": "if (lifecycle_component) lifecycle_component->lose_life();"
    },
    {
      "caller_function": "e",
      "called_function": "Bomber::has_lives",
      "location": {
        "file": "src/Bomber.cpp",
        "line": 108,
        "column": 0
      },
      "context": "bool Bomber::has_lives() const {"
    },
    {
      "caller_function": "e",
      "called_function": "has_lives",
      "location": {
        "file": "src/Bomber.cpp",
        "line": 108,
        "column": 0
      },
      "context": "bool Bomber::has_lives() const {"
    },
    {
      "caller_function": "e",
      "called_function": "has_lives",
      "location": {
        "file": "src/Bomber.cpp",
        "line": 109,
        "column": 0
      },
      "context": "return lifecycle_component ? lifecycle_component->has_lives() : false;"
    },
    {
      "caller_function": "n",
      "called_function": "respawn",
      "location": {
        "file": "src/Bomber.cpp",
        "line": 114,
        "column": 0
      },
      "context": "if (lifecycle_component) lifecycle_component->respawn();"
    },
    {
      "caller_function": "n",
      "called_function": "Bomber::is_respawning",
      "location": {
        "file": "src/Bomber.cpp",
        "line": 117,
        "column": 0
      },
      "context": "bool Bomber::is_respawning() const {"
    },
    {
      "caller_function": "n",
      "called_function": "is_respawning",
      "location": {
        "file": "src/Bomber.cpp",
        "line": 117,
        "column": 0
      },
      "context": "bool Bomber::is_respawning() const {"
    },
    {
      "caller_function": "n",
      "called_function": "is_respawning",
      "location": {
        "file": "src/Bomber.cpp",
        "line": 118,
        "column": 0
      },
      "context": "return lifecycle_component ? lifecycle_component->is_respawning() : false;"
    },
    {
      "caller_function": "e",
      "called_function": "set_invincible",
      "location": {
        "file": "src/Bomber.cpp",
        "line": 122,
        "column": 0
      },
      "context": "if (animation_component) animation_component->set_invincible(inv);"
    },
    {
      "caller_function": "e",
      "called_function": "Bomber::is_invincible",
      "location": {
        "file": "src/Bomber.cpp",
        "line": 125,
        "column": 0
      },
      "context": "bool Bomber::is_invincible() const {"
    },
    {
      "caller_function": "e",
      "called_function": "is_invincible",
      "location": {
        "file": "src/Bomber.cpp",
        "line": 125,
        "column": 0
      },
      "context": "bool Bomber::is_invincible() const {"
    },
    {
      "caller_function": "e",
      "called_function": "is_invincible",
      "location": {
        "file": "src/Bomber.cpp",
        "line": 126,
        "column": 0
      },
      "context": "return animation_component ? animation_component->is_invincible() : false;"
    },
    {
      "caller_function": "m",
      "called_function": "set_team",
      "location": {
        "file": "src/Bomber.cpp",
        "line": 131,
        "column": 0
      },
      "context": "if (lifecycle_component) lifecycle_component->set_team(team);"
    },
    {
      "caller_function": "m",
      "called_function": "Bomber::get_team",
      "location": {
        "file": "src/Bomber.cpp",
        "line": 134,
        "column": 0
      },
      "context": "int Bomber::get_team() const {"
    },
    {
      "caller_function": "m",
      "called_function": "get_team",
      "location": {
        "file": "src/Bomber.cpp",
        "line": 134,
        "column": 0
      },
      "context": "int Bomber::get_team() const {"
    },
    {
      "caller_function": "m",
      "called_function": "get_team",
      "location": {
        "file": "src/Bomber.cpp",
        "line": 135,
        "column": 0
      },
      "context": "return lifecycle_component ? lifecycle_component->get_team() : 0;"
    },
    {
      "caller_function": "e",
      "called_function": "set_name",
      "location": {
        "file": "src/Bomber.cpp",
        "line": 140,
        "column": 0
      },
      "context": "if (lifecycle_component) lifecycle_component->set_name(name);"
    },
    {
      "caller_function": "e",
      "called_function": "Bomber::get_name",
      "location": {
        "file": "src/Bomber.cpp",
        "line": 143,
        "column": 0
      },
      "context": "std::string Bomber::get_name() const {"
    },
    {
      "caller_function": "e",
      "called_function": "get_name",
      "location": {
        "file": "src/Bomber.cpp",
        "line": 143,
        "column": 0
      },
      "context": "std::string Bomber::get_name() const {"
    },
    {
      "caller_function": "e",
      "called_function": "get_name",
      "location": {
        "file": "src/Bomber.cpp",
        "line": 144,
        "column": 0
      },
      "context": "return lifecycle_component ? lifecycle_component->get_name() : \"Unknown\";"
    },
    {
      "caller_function": "r",
      "called_function": "set_number",
      "location": {
        "file": "src/Bomber.cpp",
        "line": 149,
        "column": 0
      },
      "context": "if (lifecycle_component) lifecycle_component->set_number(number);"
    },
    {
      "caller_function": "r",
      "called_function": "Bomber::get_number",
      "location": {
        "file": "src/Bomber.cpp",
        "line": 152,
        "column": 0
      },
      "context": "int Bomber::get_number() const {"
    },
    {
      "caller_function": "r",
      "called_function": "get_number",
      "location": {
        "file": "src/Bomber.cpp",
        "line": 152,
        "column": 0
      },
      "context": "int Bomber::get_number() const {"
    },
    {
      "caller_function": "r",
      "called_function": "get_number",
      "location": {
        "file": "src/Bomber.cpp",
        "line": 153,
        "column": 0
      },
      "context": "return lifecycle_component ? lifecycle_component->get_number() : 0;"
    },
    {
      "caller_function": "f",
      "called_function": "fly_to",
      "location": {
        "file": "src/Bomber.cpp",
        "line": 160,
        "column": 0
      },
      "context": "movement_component->fly_to(target_x, target_y, duration_ms);"
    },
    {
      "caller_function": "f",
      "called_function": "Bomber::can_move",
      "location": {
        "file": "src/Bomber.cpp",
        "line": 167,
        "column": 0
      },
      "context": "bool Bomber::can_move() const {"
    },
    {
      "caller_function": "f",
      "called_function": "can_move",
      "location": {
        "file": "src/Bomber.cpp",
        "line": 167,
        "column": 0
      },
      "context": "bool Bomber::can_move() const {"
    },
    {
      "caller_function": "f",
      "called_function": "can_move",
      "location": {
        "file": "src/Bomber.cpp",
        "line": 168,
        "column": 0
      },
      "context": "return movement_component ? movement_component->can_move() : false;"
    },
    {
      "caller_function": "b",
      "called_function": "place_bomb",
      "location": {
        "file": "src/Bomber.cpp",
        "line": 173,
        "column": 0
      },
      "context": "if (combat_component) combat_component->place_bomb();"
    },
    {
      "caller_function": "b",
      "called_function": "throw_bomb",
      "location": {
        "file": "src/Bomber.cpp",
        "line": 177,
        "column": 0
      },
      "context": "if (combat_component) combat_component->throw_bomb();"
    },
    {
      "caller_function": "b",
      "called_function": "Bomber::can_place_bomb",
      "location": {
        "file": "src/Bomber.cpp",
        "line": 180,
        "column": 0
      },
      "context": "bool Bomber::can_place_bomb() const {"
    },
    {
      "caller_function": "b",
      "called_function": "can_place_bomb",
      "location": {
        "file": "src/Bomber.cpp",
        "line": 180,
        "column": 0
      },
      "context": "bool Bomber::can_place_bomb() const {"
    },
    {
      "caller_function": "b",
      "called_function": "can_place_bomb",
      "location": {
        "file": "src/Bomber.cpp",
        "line": 181,
        "column": 0
      },
      "context": "return combat_component ? combat_component->can_place_bomb() : false;"
    },
    {
      "caller_function": "f",
      "called_function": "get_speed",
      "location": {
        "file": "src/Bomber.cpp",
        "line": 187,
        "column": 0
      },
      "context": "int current_speed = movement_component->get_speed();"
    },
    {
      "caller_function": "f",
      "called_function": "set_speed",
      "location": {
        "file": "src/Bomber.cpp",
        "line": 188,
        "column": 0
      },
      "context": "movement_component->set_speed(current_speed + amount);"
    },
    {
      "caller_function": "f",
      "called_function": "get_speed",
      "location": {
        "file": "src/Bomber.cpp",
        "line": 194,
        "column": 0
      },
      "context": "int current_speed = movement_component->get_speed();"
    },
    {
      "caller_function": "f",
      "called_function": "std::max",
      "location": {
        "file": "src/Bomber.cpp",
        "line": 195,
        "column": 0
      },
      "context": "movement_component->set_speed(std::max(30, current_speed - amount));"
    },
    {
      "caller_function": "f",
      "called_function": "set_speed",
      "location": {
        "file": "src/Bomber.cpp",
        "line": 195,
        "column": 0
      },
      "context": "movement_component->set_speed(std::max(30, current_speed - amount));"
    },
    {
      "caller_function": "f",
      "called_function": "max",
      "location": {
        "file": "src/Bomber.cpp",
        "line": 195,
        "column": 0
      },
      "context": "movement_component->set_speed(std::max(30, current_speed - amount));"
    },
    {
      "caller_function": "f",
      "called_function": "Bomber::get_power",
      "location": {
        "file": "src/Bomber.cpp",
        "line": 199,
        "column": 0
      },
      "context": "int Bomber::get_power() const {"
    },
    {
      "caller_function": "f",
      "called_function": "get_power",
      "location": {
        "file": "src/Bomber.cpp",
        "line": 199,
        "column": 0
      },
      "context": "int Bomber::get_power() const {"
    },
    {
      "caller_function": "f",
      "called_function": "get_power",
      "location": {
        "file": "src/Bomber.cpp",
        "line": 200,
        "column": 0
      },
      "context": "return combat_component ? combat_component->get_power() : 1;"
    },
    {
      "caller_function": "r",
      "called_function": "inc_power",
      "location": {
        "file": "src/Bomber.cpp",
        "line": 204,
        "column": 0
      },
      "context": "if (combat_component) combat_component->inc_power(amount);"
    },
    {
      "caller_function": "r",
      "called_function": "Bomber::get_max_bombs",
      "location": {
        "file": "src/Bomber.cpp",
        "line": 208,
        "column": 0
      },
      "context": "int Bomber::get_max_bombs() const {"
    },
    {
      "caller_function": "r",
      "called_function": "get_max_bombs",
      "location": {
        "file": "src/Bomber.cpp",
        "line": 208,
        "column": 0
      },
      "context": "int Bomber::get_max_bombs() const {"
    },
    {
      "caller_function": "r",
      "called_function": "get_max_bombs",
      "location": {
        "file": "src/Bomber.cpp",
        "line": 209,
        "column": 0
      },
      "context": "return combat_component ? combat_component->get_max_bombs() : 1;"
    },
    {
      "caller_function": "s",
      "called_function": "inc_max_bombs",
      "location": {
        "file": "src/Bomber.cpp",
        "line": 213,
        "column": 0
      },
      "context": "if (combat_component) combat_component->inc_max_bombs(amount);"
    },
    {
      "caller_function": "s",
      "called_function": "Bomber::get_current_bombs",
      "location": {
        "file": "src/Bomber.cpp",
        "line": 216,
        "column": 0
      },
      "context": "int Bomber::get_current_bombs() const {"
    },
    {
      "caller_function": "s",
      "called_function": "get_current_bombs",
      "location": {
        "file": "src/Bomber.cpp",
        "line": 216,
        "column": 0
      },
      "context": "int Bomber::get_current_bombs() const {"
    },
    {
      "caller_function": "s",
      "called_function": "get_current_bombs",
      "location": {
        "file": "src/Bomber.cpp",
        "line": 217,
        "column": 0
      },
      "context": "return combat_component ? combat_component->get_current_bombs() : 0;"
    },
    {
      "caller_function": "s",
      "called_function": "inc_current_bombs",
      "location": {
        "file": "src/Bomber.cpp",
        "line": 221,
        "column": 0
      },
      "context": "if (combat_component) combat_component->inc_current_bombs();"
    },
    {
      "caller_function": "s",
      "called_function": "dec_current_bombs",
      "location": {
        "file": "src/Bomber.cpp",
        "line": 225,
        "column": 0
      },
      "context": "if (combat_component) combat_component->dec_current_bombs();"
    },
    {
      "caller_function": "s",
      "called_function": "Bomber::can_kick",
      "location": {
        "file": "src/Bomber.cpp",
        "line": 229,
        "column": 0
      },
      "context": "bool Bomber::can_kick() const {"
    },
    {
      "caller_function": "s",
      "called_function": "can_kick",
      "location": {
        "file": "src/Bomber.cpp",
        "line": 229,
        "column": 0
      },
      "context": "bool Bomber::can_kick() const {"
    },
    {
      "caller_function": "s",
      "called_function": "Bomber::can_throw",
      "location": {
        "file": "src/Bomber.cpp",
        "line": 233,
        "column": 0
      },
      "context": "bool Bomber::can_throw() const {"
    },
    {
      "caller_function": "s",
      "called_function": "can_throw",
      "location": {
        "file": "src/Bomber.cpp",
        "line": 233,
        "column": 0
      },
      "context": "bool Bomber::can_throw() const {"
    },
    {
      "caller_function": "s",
      "called_function": "Bomber::can_ignore_bomb_collision",
      "location": {
        "file": "src/Bomber.cpp",
        "line": 237,
        "column": 0
      },
      "context": "bool Bomber::can_ignore_bomb_collision(Bomb* bomb) const {"
    },
    {
      "caller_function": "s",
      "called_function": "can_ignore_bomb_collision",
      "location": {
        "file": "src/Bomber.cpp",
        "line": 237,
        "column": 0
      },
      "context": "bool Bomber::can_ignore_bomb_collision(Bomb* bomb) const {"
    },
    {
      "caller_function": "s",
      "called_function": "can_ignore_bomb_collision",
      "location": {
        "file": "src/Bomber.cpp",
        "line": 238,
        "column": 0
      },
      "context": "return combat_component ? combat_component->can_ignore_bomb_collision(bomb) : false;"
    },
    {
      "caller_function": "n",
      "called_function": "GameplayScreen::GameplayScreen",
      "location": {
        "file": "src/GameplayScreen.cpp",
        "line": 22,
        "column": 0
      },
      "context": "SDL_Log(\"GameplayScreen::GameplayScreen() - Loading game configuration...\");"
    },
    {
      "caller_function": "n",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/GameplayScreen.cpp",
        "line": 22,
        "column": 0
      },
      "context": "SDL_Log(\"GameplayScreen::GameplayScreen() - Loading game configuration...\");"
    },
    {
      "caller_function": "n",
      "called_function": "GameplayScreen",
      "location": {
        "file": "src/GameplayScreen.cpp",
        "line": 22,
        "column": 0
      },
      "context": "SDL_Log(\"GameplayScreen::GameplayScreen() - Loading game configuration...\");"
    },
    {
      "caller_function": "n",
      "called_function": "GameConfig::load",
      "location": {
        "file": "src/GameplayScreen.cpp",
        "line": 23,
        "column": 0
      },
      "context": "GameConfig::load(); // Load game configuration before initializing"
    },
    {
      "caller_function": "n",
      "called_function": "load",
      "location": {
        "file": "src/GameplayScreen.cpp",
        "line": 23,
        "column": 0
      },
      "context": "GameConfig::load(); // Load game configuration before initializing"
    },
    {
      "caller_function": "n",
      "called_function": "SDL_PumpEvents",
      "location": {
        "file": "src/GameplayScreen.cpp",
        "line": 26,
        "column": 0
      },
      "context": "SDL_PumpEvents();"
    },
    {
      "caller_function": "n",
      "called_function": "SDL_FlushEvents",
      "location": {
        "file": "src/GameplayScreen.cpp",
        "line": 27,
        "column": 0
      },
      "context": "SDL_FlushEvents(SDL_EVENT_KEY_DOWN, SDL_EVENT_KEY_UP);"
    },
    {
      "caller_function": "n",
      "called_function": "init_game",
      "location": {
        "file": "src/GameplayScreen.cpp",
        "line": 29,
        "column": 0
      },
      "context": "init_game();"
    },
    {
      "caller_function": "n",
      "called_function": "GameplayScreen",
      "location": {
        "file": "src/GameplayScreen.cpp",
        "line": 33,
        "column": 0
      },
      "context": "GameplayScreen::~GameplayScreen() {"
    },
    {
      "caller_function": "f",
      "called_function": "deinit_game",
      "location": {
        "file": "src/GameplayScreen.cpp",
        "line": 42,
        "column": 0
      },
      "context": "deinit_game();"
    },
    {
      "caller_function": "f",
      "called_function": "initialize_game_context",
      "location": {
        "file": "src/GameplayScreen.cpp",
        "line": 73,
        "column": 0
      },
      "context": "app->initialize_game_context();"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/GameplayScreen.cpp",
        "line": 75,
        "column": 0
      },
      "context": "SDL_Log(\"GameplayScreen: Using existing GameContext with initialized RenderingFacade\");"
    },
    {
      "caller_function": "f",
      "called_function": "set_object_lists",
      "location": {
        "file": "src/GameplayScreen.cpp",
        "line": 80,
        "column": 0
      },
      "context": "app->game_context->set_object_lists(&app->objects);"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/GameplayScreen.cpp",
        "line": 81,
        "column": 0
      },
      "context": "SDL_Log(\"GameplayScreen: Connected GameContext to rendering lists\");"
    },
    {
      "caller_function": "f",
      "called_function": "Map",
      "location": {
        "file": "src/GameplayScreen.cpp",
        "line": 84,
        "column": 0
      },
      "context": "app->map = new Map(app->game_context);"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/GameplayScreen.cpp",
        "line": 86,
        "column": 0
      },
      "context": "SDL_Log(\"No valid maps found.\");"
    },
    {
      "caller_function": "f",
      "called_function": "load_random_valid",
      "location": {
        "file": "src/GameplayScreen.cpp",
        "line": 90,
        "column": 0
      },
      "context": "app->map->load_random_valid();"
    },
    {
      "caller_function": "f",
      "called_function": "GameConfig::set_start_map",
      "location": {
        "file": "src/GameplayScreen.cpp",
        "line": 93,
        "column": 0
      },
      "context": "GameConfig::set_start_map(app->map->get_map_count() - 1);"
    },
    {
      "caller_function": "f",
      "called_function": "set_start_map",
      "location": {
        "file": "src/GameplayScreen.cpp",
        "line": 93,
        "column": 0
      },
      "context": "GameConfig::set_start_map(app->map->get_map_count() - 1);"
    },
    {
      "caller_function": "f",
      "called_function": "get_map_count",
      "location": {
        "file": "src/GameplayScreen.cpp",
        "line": 93,
        "column": 0
      },
      "context": "GameConfig::set_start_map(app->map->get_map_count() - 1);"
    },
    {
      "caller_function": "f",
      "called_function": "GameConfig::get_start_map",
      "location": {
        "file": "src/GameplayScreen.cpp",
        "line": 95,
        "column": 0
      },
      "context": "app->map->load_next_valid(GameConfig::get_start_map());"
    },
    {
      "caller_function": "f",
      "called_function": "load_next_valid",
      "location": {
        "file": "src/GameplayScreen.cpp",
        "line": 95,
        "column": 0
      },
      "context": "app->map->load_next_valid(GameConfig::get_start_map());"
    },
    {
      "caller_function": "f",
      "called_function": "get_start_map",
      "location": {
        "file": "src/GameplayScreen.cpp",
        "line": 95,
        "column": 0
      },
      "context": "app->map->load_next_valid(GameConfig::get_start_map());"
    },
    {
      "caller_function": "f",
      "called_function": "randomize_bomber_positions",
      "location": {
        "file": "src/GameplayScreen.cpp",
        "line": 99,
        "column": 0
      },
      "context": "app->map->randomize_bomber_positions();"
    },
    {
      "caller_function": "f",
      "called_function": "set_map",
      "location": {
        "file": "src/GameplayScreen.cpp",
        "line": 104,
        "column": 0
      },
      "context": "app->game_context->set_map(app->map);"
    },
    {
      "caller_function": "r",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/GameplayScreen.cpp",
        "line": 109,
        "column": 0
      },
      "context": "SDL_Log(\"Bomber %d: enabled=%d, controller=%d\", i, GameConfig::bomber[i].is_enabled(), GameConfig::b"
    },
    {
      "caller_function": "r",
      "called_function": "is_enabled",
      "location": {
        "file": "src/GameplayScreen.cpp",
        "line": 109,
        "column": 0
      },
      "context": "SDL_Log(\"Bomber %d: enabled=%d, controller=%d\", i, GameConfig::bomber[i].is_enabled(), GameConfig::b"
    },
    {
      "caller_function": "r",
      "called_function": "get_controller",
      "location": {
        "file": "src/GameplayScreen.cpp",
        "line": 109,
        "column": 0
      },
      "context": "SDL_Log(\"Bomber %d: enabled=%d, controller=%d\", i, GameConfig::bomber[i].is_enabled(), GameConfig::b"
    },
    {
      "caller_function": "f",
      "called_function": "get_bomber_pos",
      "location": {
        "file": "src/GameplayScreen.cpp",
        "line": 111,
        "column": 0
      },
      "context": "CL_Vector pos = app->map->get_bomber_pos(j++);"
    },
    {
      "caller_function": "f",
      "called_function": "get_controller",
      "location": {
        "file": "src/GameplayScreen.cpp",
        "line": 112,
        "column": 0
      },
      "context": "int controller_type = GameConfig::bomber[i].get_controller();"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/GameplayScreen.cpp",
        "line": 113,
        "column": 0
      },
      "context": "SDL_Log(\"Creating controller type %d for bomber %d\", controller_type, i);"
    },
    {
      "caller_function": "f",
      "called_function": "Controller::create",
      "location": {
        "file": "src/GameplayScreen.cpp",
        "line": 114,
        "column": 0
      },
      "context": "Controller* controller = Controller::create(static_cast<Controller::CONTROLLER_TYPE>(controller_type"
    },
    {
      "caller_function": "f",
      "called_function": "create",
      "location": {
        "file": "src/GameplayScreen.cpp",
        "line": 114,
        "column": 0
      },
      "context": "Controller* controller = Controller::create(static_cast<Controller::CONTROLLER_TYPE>(controller_type"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/GameplayScreen.cpp",
        "line": 116,
        "column": 0
      },
      "context": "SDL_Log(\"Failed to create controller for bomber %d, skipping\", i);"
    },
    {
      "caller_function": "f",
      "called_function": "grid",
      "location": {
        "file": "src/GameplayScreen.cpp",
        "line": 121,
        "column": 0
      },
      "context": "GridCoord grid(static_cast<int>(pos.x), static_cast<int>(pos.y));"
    },
    {
      "caller_function": "f",
      "called_function": "CoordinateSystem::grid_to_pixel",
      "location": {
        "file": "src/GameplayScreen.cpp",
        "line": 122,
        "column": 0
      },
      "context": "PixelCoord center = CoordinateSystem::grid_to_pixel(grid);"
    },
    {
      "caller_function": "f",
      "called_function": "grid_to_pixel",
      "location": {
        "file": "src/GameplayScreen.cpp",
        "line": 122,
        "column": 0
      },
      "context": "PixelCoord center = CoordinateSystem::grid_to_pixel(grid);"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/GameplayScreen.cpp",
        "line": 125,
        "column": 0
      },
      "context": "SDL_Log(\"Creating bomber %d: controller=%d, pos=(%f,%f) -> direct spawn at (%d,%d)\","
    },
    {
      "caller_function": "f",
      "called_function": "get_controller",
      "location": {
        "file": "src/GameplayScreen.cpp",
        "line": 126,
        "column": 0
      },
      "context": "i, GameConfig::bomber[i].get_controller(), pos.x, pos.y, final_x, final_y);"
    },
    {
      "caller_function": "f",
      "called_function": "Bomber",
      "location": {
        "file": "src/GameplayScreen.cpp",
        "line": 128,
        "column": 0
      },
      "context": "Bomber* bomber = new Bomber(final_x, final_y, static_cast<Bomber::COLOR>(GameConfig::bomber[i].get_s"
    },
    {
      "caller_function": "f",
      "called_function": "get_skin",
      "location": {
        "file": "src/GameplayScreen.cpp",
        "line": 128,
        "column": 0
      },
      "context": "Bomber* bomber = new Bomber(final_x, final_y, static_cast<Bomber::COLOR>(GameConfig::bomber[i].get_s"
    },
    {
      "caller_function": "f",
      "called_function": "set_name",
      "location": {
        "file": "src/GameplayScreen.cpp",
        "line": 129,
        "column": 0
      },
      "context": "bomber->set_name(GameConfig::bomber[i].get_name());"
    },
    {
      "caller_function": "f",
      "called_function": "get_name",
      "location": {
        "file": "src/GameplayScreen.cpp",
        "line": 129,
        "column": 0
      },
      "context": "bomber->set_name(GameConfig::bomber[i].get_name());"
    },
    {
      "caller_function": "f",
      "called_function": "set_team",
      "location": {
        "file": "src/GameplayScreen.cpp",
        "line": 130,
        "column": 0
      },
      "context": "bomber->set_team(GameConfig::bomber[i].get_team());"
    },
    {
      "caller_function": "f",
      "called_function": "get_team",
      "location": {
        "file": "src/GameplayScreen.cpp",
        "line": 130,
        "column": 0
      },
      "context": "bomber->set_team(GameConfig::bomber[i].get_team());"
    },
    {
      "caller_function": "f",
      "called_function": "set_number",
      "location": {
        "file": "src/GameplayScreen.cpp",
        "line": 131,
        "column": 0
      },
      "context": "bomber->set_number(i);"
    },
    {
      "caller_function": "f",
      "called_function": "set_lives",
      "location": {
        "file": "src/GameplayScreen.cpp",
        "line": 132,
        "column": 0
      },
      "context": "bomber->set_lives(3); // Start with 3 lives"
    },
    {
      "caller_function": "f",
      "called_function": "push_back",
      "location": {
        "file": "src/GameplayScreen.cpp",
        "line": 133,
        "column": 0
      },
      "context": "app->bomber_objects.push_back(bomber);"
    },
    {
      "caller_function": "f",
      "called_function": "register_object",
      "location": {
        "file": "src/GameplayScreen.cpp",
        "line": 137,
        "column": 0
      },
      "context": "app->game_context->register_object(bomber);"
    },
    {
      "caller_function": "f",
      "called_function": "get_controller",
      "location": {
        "file": "src/GameplayScreen.cpp",
        "line": 144,
        "column": 0
      },
      "context": "bomber->get_controller()->deactivate(); // Start deactivated"
    },
    {
      "caller_function": "f",
      "called_function": "deactivate",
      "location": {
        "file": "src/GameplayScreen.cpp",
        "line": 144,
        "column": 0
      },
      "context": "bomber->get_controller()->deactivate(); // Start deactivated"
    },
    {
      "caller_function": "f",
      "called_function": "set_team",
      "location": {
        "file": "src/GameplayScreen.cpp",
        "line": 169,
        "column": 0
      },
      "context": "bomber->set_team(0);"
    },
    {
      "caller_function": "f",
      "called_function": "GameSystems",
      "location": {
        "file": "src/GameplayScreen.cpp",
        "line": 176,
        "column": 0
      },
      "context": "game_systems = new GameSystems(app->game_context);"
    },
    {
      "caller_function": "f",
      "called_function": "set_object_references",
      "location": {
        "file": "src/GameplayScreen.cpp",
        "line": 177,
        "column": 0
      },
      "context": "game_systems->set_object_references(&app->objects, &app->bomber_objects);"
    },
    {
      "caller_function": "f",
      "called_function": "init_all_systems",
      "location": {
        "file": "src/GameplayScreen.cpp",
        "line": 178,
        "column": 0
      },
      "context": "game_systems->init_all_systems();"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/GameplayScreen.cpp",
        "line": 179,
        "column": 0
      },
      "context": "SDL_Log(\"GameSystems initialized in GameplayScreen\");"
    },
    {
      "caller_function": "f",
      "called_function": "GameLogic",
      "location": {
        "file": "src/GameplayScreen.cpp",
        "line": 182,
        "column": 0
      },
      "context": "game_logic = new GameLogic(app->game_context);"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/GameplayScreen.cpp",
        "line": 183,
        "column": 0
      },
      "context": "SDL_Log(\"GameLogic facade initialized in GameplayScreen\");"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/GameplayScreen.cpp",
        "line": 185,
        "column": 0
      },
      "context": "SDL_Log(\"WARNING: GameContext not available, using legacy act_all()\");"
    },
    {
      "caller_function": "f",
      "called_function": "act_all",
      "location": {
        "file": "src/GameplayScreen.cpp",
        "line": 185,
        "column": 0
      },
      "context": "SDL_Log(\"WARNING: GameContext not available, using legacy act_all()\");"
    },
    {
      "caller_function": "e",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/GameplayScreen.cpp",
        "line": 197,
        "column": 0
      },
      "context": "SDL_Log(\"GameplayScreen: deinit_game() - clearing references (LifecycleManager will handle deletion)"
    },
    {
      "caller_function": "e",
      "called_function": "deinit_game",
      "location": {
        "file": "src/GameplayScreen.cpp",
        "line": 197,
        "column": 0
      },
      "context": "SDL_Log(\"GameplayScreen: deinit_game() - clearing references (LifecycleManager will handle deletion)"
    },
    {
      "caller_function": "e",
      "called_function": "references",
      "location": {
        "file": "src/GameplayScreen.cpp",
        "line": 197,
        "column": 0
      },
      "context": "SDL_Log(\"GameplayScreen: deinit_game() - clearing references (LifecycleManager will handle deletion)"
    },
    {
      "caller_function": "e",
      "called_function": "clear",
      "location": {
        "file": "src/GameplayScreen.cpp",
        "line": 200,
        "column": 0
      },
      "context": "app->objects.clear();"
    },
    {
      "caller_function": "e",
      "called_function": "clear",
      "location": {
        "file": "src/GameplayScreen.cpp",
        "line": 201,
        "column": 0
      },
      "context": "app->bomber_objects.clear();"
    },
    {
      "caller_function": "f",
      "called_function": "set_paused",
      "location": {
        "file": "src/GameplayScreen.cpp",
        "line": 229,
        "column": 0
      },
      "context": "game_logic->set_paused(pause_game);"
    },
    {
      "caller_function": "f",
      "called_function": "get_controller",
      "location": {
        "file": "src/GameplayScreen.cpp",
        "line": 244,
        "column": 0
      },
      "context": "bomber->get_controller()->activate();"
    },
    {
      "caller_function": "f",
      "called_function": "activate",
      "location": {
        "file": "src/GameplayScreen.cpp",
        "line": 244,
        "column": 0
      },
      "context": "bomber->get_controller()->activate();"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/GameplayScreen.cpp",
        "line": 247,
        "column": 0
      },
      "context": "SDL_Log(\"Controllers activated after delay\");"
    },
    {
      "caller_function": "f",
      "called_function": "update_audio_listener",
      "location": {
        "file": "src/GameplayScreen.cpp",
        "line": 252,
        "column": 0
      },
      "context": "update_audio_listener();"
    },
    {
      "caller_function": "f",
      "called_function": "update_tiles",
      "location": {
        "file": "src/GameplayScreen.cpp",
        "line": 263,
        "column": 0
      },
      "context": "app->tile_manager->update_tiles(deltaTime);"
    },
    {
      "caller_function": "f",
      "called_function": "delete_some",
      "location": {
        "file": "src/GameplayScreen.cpp",
        "line": 266,
        "column": 0
      },
      "context": "delete_some();  // Clean up objects marked as DELETED by LifecycleManager"
    },
    {
      "caller_function": "f",
      "called_function": "update_all_objects",
      "location": {
        "file": "src/GameplayScreen.cpp",
        "line": 270,
        "column": 0
      },
      "context": "game_logic->update_all_objects(deltaTime);"
    },
    {
      "caller_function": "f",
      "called_function": "update_all_systems",
      "location": {
        "file": "src/GameplayScreen.cpp",
        "line": 273,
        "column": 0
      },
      "context": "game_systems->update_all_systems(deltaTime);"
    },
    {
      "caller_function": "f",
      "called_function": "update_all_systems",
      "location": {
        "file": "src/GameplayScreen.cpp",
        "line": 276,
        "column": 0
      },
      "context": "game_systems->update_all_systems(deltaTime);"
    },
    {
      "caller_function": "f",
      "called_function": "act_all",
      "location": {
        "file": "src/GameplayScreen.cpp",
        "line": 278,
        "column": 0
      },
      "context": "act_all();  // Legacy fallback"
    },
    {
      "caller_function": "f",
      "called_function": "cleanup_dead_objects",
      "location": {
        "file": "src/GameplayScreen.cpp",
        "line": 283,
        "column": 0
      },
      "context": "app->lifecycle_manager->cleanup_dead_objects();"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/GameplayScreen.cpp",
        "line": 301,
        "column": 0
      },
      "context": "SDL_Log(\"Starting gore delay...\");"
    },
    {
      "caller_function": "f",
      "called_function": "check_victory_conditions",
      "location": {
        "file": "src/GameplayScreen.cpp",
        "line": 308,
        "column": 0
      },
      "context": "check_victory_conditions();"
    },
    {
      "caller_function": "f",
      "called_function": "check_victory_conditions",
      "location": {
        "file": "src/GameplayScreen.cpp",
        "line": 312,
        "column": 0
      },
      "context": "check_victory_conditions();"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/GameplayScreen.cpp",
        "line": 318,
        "column": 0
      },
      "context": "SDL_Log(\"Game over timer expired, should return to menu\");"
    },
    {
      "caller_function": "f",
      "called_function": "Timer::time_elapsed",
      "location": {
        "file": "src/GameplayScreen.cpp",
        "line": 323,
        "column": 0
      },
      "context": "frame_time += Timer::time_elapsed();"
    },
    {
      "caller_function": "f",
      "called_function": "time_elapsed",
      "location": {
        "file": "src/GameplayScreen.cpp",
        "line": 323,
        "column": 0
      },
      "context": "frame_time += Timer::time_elapsed();"
    },
    {
      "caller_function": "r",
      "called_function": "empty",
      "location": {
        "file": "src/GameplayScreen.cpp",
        "line": 333,
        "column": 0
      },
      "context": "if (app->bomber_objects.empty()) return;"
    },
    {
      "caller_function": "f",
      "called_function": "get_x",
      "location": {
        "file": "src/GameplayScreen.cpp",
        "line": 341,
        "column": 0
      },
      "context": "total_x += bomber->get_x();"
    },
    {
      "caller_function": "f",
      "called_function": "get_y",
      "location": {
        "file": "src/GameplayScreen.cpp",
        "line": 342,
        "column": 0
      },
      "context": "total_y += bomber->get_y();"
    },
    {
      "caller_function": "f",
      "called_function": "listener_pos",
      "location": {
        "file": "src/GameplayScreen.cpp",
        "line": 348,
        "column": 0
      },
      "context": "AudioPosition listener_pos(total_x / active_count, total_y / active_count, 0.0f);"
    },
    {
      "caller_function": "f",
      "called_function": "AudioMixer::set_listener_position",
      "location": {
        "file": "src/GameplayScreen.cpp",
        "line": 349,
        "column": 0
      },
      "context": "AudioMixer::set_listener_position(listener_pos);"
    },
    {
      "caller_function": "f",
      "called_function": "set_listener_position",
      "location": {
        "file": "src/GameplayScreen.cpp",
        "line": 349,
        "column": 0
      },
      "context": "AudioMixer::set_listener_position(listener_pos);"
    },
    {
      "caller_function": "f",
      "called_function": "refresh_holes",
      "location": {
        "file": "src/GameplayScreen.cpp",
        "line": 358,
        "column": 0
      },
      "context": "app->map->refresh_holes();"
    },
    {
      "caller_function": "f",
      "called_function": "show",
      "location": {
        "file": "src/GameplayScreen.cpp",
        "line": 359,
        "column": 0
      },
      "context": "app->map->show(); // Always draw map first as background"
    },
    {
      "caller_function": "f",
      "called_function": "render_all_objects",
      "location": {
        "file": "src/GameplayScreen.cpp",
        "line": 362,
        "column": 0
      },
      "context": "game_logic->render_all_objects(); // Renders all game objects in proper order"
    },
    {
      "caller_function": "f",
      "called_function": "render_victory_screen",
      "location": {
        "file": "src/GameplayScreen.cpp",
        "line": 366,
        "column": 0
      },
      "context": "render_victory_screen();"
    },
    {
      "caller_function": "f",
      "called_function": "show_all",
      "location": {
        "file": "src/GameplayScreen.cpp",
        "line": 369,
        "column": 0
      },
      "context": "show_all(); // Legacy fallback"
    },
    {
      "caller_function": "l",
      "called_function": "Timer::time_elapsed",
      "location": {
        "file": "src/GameplayScreen.cpp",
        "line": 382,
        "column": 0
      },
      "context": "float deltaTime = Timer::time_elapsed();"
    },
    {
      "caller_function": "l",
      "called_function": "time_elapsed",
      "location": {
        "file": "src/GameplayScreen.cpp",
        "line": 382,
        "column": 0
      },
      "context": "float deltaTime = Timer::time_elapsed();"
    },
    {
      "caller_function": "f",
      "called_function": "act",
      "location": {
        "file": "src/GameplayScreen.cpp",
        "line": 401,
        "column": 0
      },
      "context": "obj->act(deltaTime);"
    },
    {
      "caller_function": "f",
      "called_function": "act",
      "location": {
        "file": "src/GameplayScreen.cpp",
        "line": 407,
        "column": 0
      },
      "context": "bomber->act(deltaTime);"
    },
    {
      "caller_function": "e",
      "called_function": "remove_if",
      "location": {
        "file": "src/GameplayScreen.cpp",
        "line": 415,
        "column": 0
      },
      "context": "app->objects.remove_if([this](GameObject* obj) {"
    },
    {
      "caller_function": "e",
      "called_function": "get_object_state",
      "location": {
        "file": "src/GameplayScreen.cpp",
        "line": 416,
        "column": 0
      },
      "context": "LifecycleManager::ObjectState state = app->lifecycle_manager->get_object_state(obj);"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/GameplayScreen.cpp",
        "line": 418,
        "column": 0
      },
      "context": "SDL_Log(\"GameplayScreen: Removing object %p from render list (LifecycleManager will delete)\", obj);"
    },
    {
      "caller_function": "f",
      "called_function": "list",
      "location": {
        "file": "src/GameplayScreen.cpp",
        "line": 418,
        "column": 0
      },
      "context": "SDL_Log(\"GameplayScreen: Removing object %p from render list (LifecycleManager will delete)\", obj);"
    },
    {
      "caller_function": "f",
      "called_function": "get_map_x",
      "location": {
        "file": "src/GameplayScreen.cpp",
        "line": 423,
        "column": 0
      },
      "context": "int map_x = tile_entity->get_map_x();"
    },
    {
      "caller_function": "f",
      "called_function": "get_map_y",
      "location": {
        "file": "src/GameplayScreen.cpp",
        "line": 424,
        "column": 0
      },
      "context": "int map_y = tile_entity->get_map_y();"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/GameplayScreen.cpp",
        "line": 425,
        "column": 0
      },
      "context": "SDL_Log(\"GameplayScreen: Clearing Map grid pointer for TileEntity at (%d,%d)\", map_x, map_y);"
    },
    {
      "caller_function": "f",
      "called_function": "clear_tile_entity_at",
      "location": {
        "file": "src/GameplayScreen.cpp",
        "line": 426,
        "column": 0
      },
      "context": "app->map->clear_tile_entity_at(map_x, map_y);"
    },
    {
      "caller_function": "f",
      "called_function": "remove_if",
      "location": {
        "file": "src/GameplayScreen.cpp",
        "line": 435,
        "column": 0
      },
      "context": "app->bomber_objects.remove_if([this](Bomber* bomber) {"
    },
    {
      "caller_function": "f",
      "called_function": "get_object_state",
      "location": {
        "file": "src/GameplayScreen.cpp",
        "line": 436,
        "column": 0
      },
      "context": "LifecycleManager::ObjectState state = app->lifecycle_manager->get_object_state(bomber);"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/GameplayScreen.cpp",
        "line": 438,
        "column": 0
      },
      "context": "SDL_Log(\"GameplayScreen: Removing bomber %p from render list (LifecycleManager will delete)\", bomber"
    },
    {
      "caller_function": "f",
      "called_function": "list",
      "location": {
        "file": "src/GameplayScreen.cpp",
        "line": 438,
        "column": 0
      },
      "context": "SDL_Log(\"GameplayScreen: Removing bomber %p from render list (LifecycleManager will delete)\", bomber"
    },
    {
      "caller_function": "r",
      "called_function": "push_back",
      "location": {
        "file": "src/GameplayScreen.cpp",
        "line": 451,
        "column": 0
      },
      "context": "draw_list.push_back(value);"
    },
    {
      "caller_function": "r",
      "called_function": "push_back",
      "location": {
        "file": "src/GameplayScreen.cpp",
        "line": 454,
        "column": 0
      },
      "context": "draw_list.push_back(value);"
    },
    {
      "caller_function": "t",
      "called_function": "get_z",
      "location": {
        "file": "src/GameplayScreen.cpp",
        "line": 458,
        "column": 0
      },
      "context": "return go1->get_z() < go2->get_z();"
    },
    {
      "caller_function": "t",
      "called_function": "get_z",
      "location": {
        "file": "src/GameplayScreen.cpp",
        "line": 458,
        "column": 0
      },
      "context": "return go1->get_z() < go2->get_z();"
    },
    {
      "caller_function": "f",
      "called_function": "refresh_holes",
      "location": {
        "file": "src/GameplayScreen.cpp",
        "line": 462,
        "column": 0
      },
      "context": "app->map->refresh_holes();"
    },
    {
      "caller_function": "f",
      "called_function": "show",
      "location": {
        "file": "src/GameplayScreen.cpp",
        "line": 467,
        "column": 0
      },
      "context": "app->map->show();"
    },
    {
      "caller_function": "f",
      "called_function": "show",
      "location": {
        "file": "src/GameplayScreen.cpp",
        "line": 473,
        "column": 0
      },
      "context": "obj->show();"
    },
    {
      "caller_function": "f",
      "called_function": "render_victory_screen",
      "location": {
        "file": "src/GameplayScreen.cpp",
        "line": 479,
        "column": 0
      },
      "context": "render_victory_screen();"
    },
    {
      "caller_function": "f",
      "called_function": "push_back",
      "location": {
        "file": "src/GameplayScreen.cpp",
        "line": 492,
        "column": 0
      },
      "context": "alive_bombers.push_back(bomber);"
    },
    {
      "caller_function": "f",
      "called_function": "insert",
      "location": {
        "file": "src/GameplayScreen.cpp",
        "line": 494,
        "column": 0
      },
      "context": "alive_teams.insert(bomber->get_team());"
    },
    {
      "caller_function": "f",
      "called_function": "get_team",
      "location": {
        "file": "src/GameplayScreen.cpp",
        "line": 494,
        "column": 0
      },
      "context": "alive_teams.insert(bomber->get_team());"
    },
    {
      "caller_function": "f",
      "called_function": "center_pos",
      "location": {
        "file": "src/GameplayScreen.cpp",
        "line": 508,
        "column": 0
      },
      "context": "AudioPosition center_pos(400, 300, 0.0f);"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/GameplayScreen.cpp",
        "line": 510,
        "column": 0
      },
      "context": "SDL_Log(\"Failed to play time_over sound - continuing without audio\");"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/GameplayScreen.cpp",
        "line": 512,
        "column": 0
      },
      "context": "SDL_Log(\"Game Over: Draw!\");"
    },
    {
      "caller_function": "f",
      "called_function": "size",
      "location": {
        "file": "src/GameplayScreen.cpp",
        "line": 515,
        "column": 0
      },
      "context": "} else if (alive_bombers.size() == 1 && alive_teams.size() <= 1) {"
    },
    {
      "caller_function": "f",
      "called_function": "size",
      "location": {
        "file": "src/GameplayScreen.cpp",
        "line": 515,
        "column": 0
      },
      "context": "} else if (alive_bombers.size() == 1 && alive_teams.size() <= 1) {"
    },
    {
      "caller_function": "f",
      "called_function": "get_team",
      "location": {
        "file": "src/GameplayScreen.cpp",
        "line": 523,
        "column": 0
      },
      "context": "winning_team = winner->get_team();"
    },
    {
      "caller_function": "f",
      "called_function": "std::to_string",
      "location": {
        "file": "src/GameplayScreen.cpp",
        "line": 524,
        "column": 0
      },
      "context": "winning_player = \"Team \" + std::to_string(winning_team) + \" Wins!\";"
    },
    {
      "caller_function": "f",
      "called_function": "to_string",
      "location": {
        "file": "src/GameplayScreen.cpp",
        "line": 524,
        "column": 0
      },
      "context": "winning_player = \"Team \" + std::to_string(winning_team) + \" Wins!\";"
    },
    {
      "caller_function": "f",
      "called_function": "get_name",
      "location": {
        "file": "src/GameplayScreen.cpp",
        "line": 526,
        "column": 0
      },
      "context": "winning_player = winner->get_name() + \" Wins!\";"
    },
    {
      "caller_function": "f",
      "called_function": "winner_pos",
      "location": {
        "file": "src/GameplayScreen.cpp",
        "line": 530,
        "column": 0
      },
      "context": "AudioPosition winner_pos(winner->get_x(), winner->get_y(), 0.0f);"
    },
    {
      "caller_function": "f",
      "called_function": "get_x",
      "location": {
        "file": "src/GameplayScreen.cpp",
        "line": 530,
        "column": 0
      },
      "context": "AudioPosition winner_pos(winner->get_x(), winner->get_y(), 0.0f);"
    },
    {
      "caller_function": "f",
      "called_function": "get_y",
      "location": {
        "file": "src/GameplayScreen.cpp",
        "line": 530,
        "column": 0
      },
      "context": "AudioPosition winner_pos(winner->get_x(), winner->get_y(), 0.0f);"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/GameplayScreen.cpp",
        "line": 532,
        "column": 0
      },
      "context": "SDL_Log(\"Failed to play winlevel sound - continuing without audio\");"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/GameplayScreen.cpp",
        "line": 534,
        "column": 0
      },
      "context": "SDL_Log(\"Game Over: %s\", winning_player.c_str());"
    },
    {
      "caller_function": "f",
      "called_function": "c_str",
      "location": {
        "file": "src/GameplayScreen.cpp",
        "line": 534,
        "column": 0
      },
      "context": "SDL_Log(\"Game Over: %s\", winning_player.c_str());"
    },
    {
      "caller_function": null,
      "called_function": "ThrownBomb::ThrownBomb",
      "location": {
        "file": "src/ThrownBomb.cpp",
        "line": 9,
        "column": 0
      },
      "context": "ThrownBomb::ThrownBomb(int _x, int _y, int _power, Bomber* _owner,"
    },
    {
      "caller_function": null,
      "called_function": "ThrownBomb",
      "location": {
        "file": "src/ThrownBomb.cpp",
        "line": 9,
        "column": 0
      },
      "context": "ThrownBomb::ThrownBomb(int _x, int _y, int _power, Bomber* _owner,"
    },
    {
      "caller_function": null,
      "called_function": "Bomb",
      "location": {
        "file": "src/ThrownBomb.cpp",
        "line": 11,
        "column": 0
      },
      "context": ": Bomb(_x, _y, _power, _owner, context) {"
    },
    {
      "caller_function": null,
      "called_function": "calculate_flight_path",
      "location": {
        "file": "src/ThrownBomb.cpp",
        "line": 22,
        "column": 0
      },
      "context": "calculate_flight_path();"
    },
    {
      "caller_function": null,
      "called_function": "SDL_Log",
      "location": {
        "file": "src/ThrownBomb.cpp",
        "line": 24,
        "column": 0
      },
      "context": "SDL_Log(\"ThrownBomb created: from (%.1f,%.1f) to (%.1f,%.1f), duration=%.2fs\","
    },
    {
      "caller_function": null,
      "called_function": "from",
      "location": {
        "file": "src/ThrownBomb.cpp",
        "line": 24,
        "column": 0
      },
      "context": "SDL_Log(\"ThrownBomb created: from (%.1f,%.1f) to (%.1f,%.1f), duration=%.2fs\","
    },
    {
      "caller_function": "h",
      "called_function": "sqrt",
      "location": {
        "file": "src/ThrownBomb.cpp",
        "line": 30,
        "column": 0
      },
      "context": "float distance = sqrt((target_x - start_x) * (target_x - start_x) +"
    },
    {
      "caller_function": "h",
      "called_function": "std::max",
      "location": {
        "file": "src/ThrownBomb.cpp",
        "line": 34,
        "column": 0
      },
      "context": "flight_duration = std::max(0.5f, distance / 200.0f);"
    },
    {
      "caller_function": "h",
      "called_function": "max",
      "location": {
        "file": "src/ThrownBomb.cpp",
        "line": 34,
        "column": 0
      },
      "context": "flight_duration = std::max(0.5f, distance / 200.0f);"
    },
    {
      "caller_function": "h",
      "called_function": "std::min",
      "location": {
        "file": "src/ThrownBomb.cpp",
        "line": 35,
        "column": 0
      },
      "context": "flight_duration = std::min(2.0f, flight_duration); // Cap at 2 seconds"
    },
    {
      "caller_function": "h",
      "called_function": "min",
      "location": {
        "file": "src/ThrownBomb.cpp",
        "line": 35,
        "column": 0
      },
      "context": "flight_duration = std::min(2.0f, flight_duration); // Cap at 2 seconds"
    },
    {
      "caller_function": "f",
      "called_function": "CoordinateSystem::pixel_to_grid",
      "location": {
        "file": "src/ThrownBomb.cpp",
        "line": 50,
        "column": 0
      },
      "context": "GridCoord grid = CoordinateSystem::pixel_to_grid(PixelCoord(x, y));"
    },
    {
      "caller_function": "f",
      "called_function": "pixel_to_grid",
      "location": {
        "file": "src/ThrownBomb.cpp",
        "line": 50,
        "column": 0
      },
      "context": "GridCoord grid = CoordinateSystem::pixel_to_grid(PixelCoord(x, y));"
    },
    {
      "caller_function": "f",
      "called_function": "PixelCoord",
      "location": {
        "file": "src/ThrownBomb.cpp",
        "line": 50,
        "column": 0
      },
      "context": "GridCoord grid = CoordinateSystem::pixel_to_grid(PixelCoord(x, y));"
    },
    {
      "caller_function": "f",
      "called_function": "CoordinateSystem::grid_to_pixel",
      "location": {
        "file": "src/ThrownBomb.cpp",
        "line": 51,
        "column": 0
      },
      "context": "PixelCoord center = CoordinateSystem::grid_to_pixel(grid);"
    },
    {
      "caller_function": "f",
      "called_function": "grid_to_pixel",
      "location": {
        "file": "src/ThrownBomb.cpp",
        "line": 51,
        "column": 0
      },
      "context": "PixelCoord center = CoordinateSystem::grid_to_pixel(grid);"
    },
    {
      "caller_function": "f",
      "called_function": "remove_bomb_from_tile",
      "location": {
        "file": "src/ThrownBomb.cpp",
        "line": 56,
        "column": 0
      },
      "context": "remove_bomb_from_tile(this);  // Remove from old position"
    },
    {
      "caller_function": "f",
      "called_function": "set_bomb_on_tile",
      "location": {
        "file": "src/ThrownBomb.cpp",
        "line": 57,
        "column": 0
      },
      "context": "set_bomb_on_tile(this);       // Set at new position"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/ThrownBomb.cpp",
        "line": 59,
        "column": 0
      },
      "context": "SDL_Log(\"ThrownBomb landed at grid (%d,%d)\", get_map_x(), get_map_y());"
    },
    {
      "caller_function": "f",
      "called_function": "grid",
      "location": {
        "file": "src/ThrownBomb.cpp",
        "line": 59,
        "column": 0
      },
      "context": "SDL_Log(\"ThrownBomb landed at grid (%d,%d)\", get_map_x(), get_map_y());"
    },
    {
      "caller_function": "f",
      "called_function": "get_map_x",
      "location": {
        "file": "src/ThrownBomb.cpp",
        "line": 59,
        "column": 0
      },
      "context": "SDL_Log(\"ThrownBomb landed at grid (%d,%d)\", get_map_x(), get_map_y());"
    },
    {
      "caller_function": "f",
      "called_function": "get_map_y",
      "location": {
        "file": "src/ThrownBomb.cpp",
        "line": 59,
        "column": 0
      },
      "context": "SDL_Log(\"ThrownBomb landed at grid (%d,%d)\", get_map_x(), get_map_y());"
    },
    {
      "caller_function": "f",
      "called_function": "Bomb::act",
      "location": {
        "file": "src/ThrownBomb.cpp",
        "line": 77,
        "column": 0
      },
      "context": "Bomb::act(deltaTime);"
    },
    {
      "caller_function": "f",
      "called_function": "act",
      "location": {
        "file": "src/ThrownBomb.cpp",
        "line": 77,
        "column": 0
      },
      "context": "Bomb::act(deltaTime);"
    },
    {
      "caller_function": "f",
      "called_function": "Bomb::show",
      "location": {
        "file": "src/ThrownBomb.cpp",
        "line": 96,
        "column": 0
      },
      "context": "Bomb::show();"
    },
    {
      "caller_function": "f",
      "called_function": "show",
      "location": {
        "file": "src/ThrownBomb.cpp",
        "line": 96,
        "column": 0
      },
      "context": "Bomb::show();"
    },
    {
      "caller_function": "f",
      "called_function": "Bomb::show",
      "location": {
        "file": "src/ThrownBomb.cpp",
        "line": 104,
        "column": 0
      },
      "context": "Bomb::show();"
    },
    {
      "caller_function": "f",
      "called_function": "show",
      "location": {
        "file": "src/ThrownBomb.cpp",
        "line": 104,
        "column": 0
      },
      "context": "Bomb::show();"
    },
    {
      "caller_function": "e",
      "called_function": "MapTile",
      "location": {
        "file": "src/MapTile.cpp",
        "line": 20,
        "column": 0
      },
      "context": "MapTile::~MapTile() {"
    },
    {
      "caller_function": "h",
      "called_function": "MapTile_Ground",
      "location": {
        "file": "src/MapTile.cpp",
        "line": 27,
        "column": 0
      },
      "context": "tile = new MapTile_Ground(x, y, context);"
    },
    {
      "caller_function": "h",
      "called_function": "MapTile_Wall",
      "location": {
        "file": "src/MapTile.cpp",
        "line": 30,
        "column": 0
      },
      "context": "tile = new MapTile_Wall(x, y, context);"
    },
    {
      "caller_function": "h",
      "called_function": "MapTile_Box",
      "location": {
        "file": "src/MapTile.cpp",
        "line": 33,
        "column": 0
      },
      "context": "tile = new MapTile_Box(x, y, context);"
    },
    {
      "caller_function": "h",
      "called_function": "MapTile_Ground",
      "location": {
        "file": "src/MapTile.cpp",
        "line": 37,
        "column": 0
      },
      "context": "tile = new MapTile_Ground(x, y, context); // Default to ground"
    },
    {
      "caller_function": "f",
      "called_function": "get_lifecycle_manager",
      "location": {
        "file": "src/MapTile.cpp",
        "line": 43,
        "column": 0
      },
      "context": "context->get_lifecycle_manager()->register_tile(tile, x/TILE_SIZE, y/TILE_SIZE);"
    },
    {
      "caller_function": "f",
      "called_function": "register_tile",
      "location": {
        "file": "src/MapTile.cpp",
        "line": 43,
        "column": 0
      },
      "context": "context->get_lifecycle_manager()->register_tile(tile, x/TILE_SIZE, y/TILE_SIZE);"
    },
    {
      "caller_function": "w",
      "called_function": "GameObject::show",
      "location": {
        "file": "src/MapTile.cpp",
        "line": 54,
        "column": 0
      },
      "context": "GameObject::show();"
    },
    {
      "caller_function": "w",
      "called_function": "show",
      "location": {
        "file": "src/MapTile.cpp",
        "line": 54,
        "column": 0
      },
      "context": "GameObject::show();"
    },
    {
      "caller_function": "a",
      "called_function": "gen",
      "location": {
        "file": "src/MapTile.cpp",
        "line": 64,
        "column": 0
      },
      "context": "std::mt19937 gen(rd());"
    },
    {
      "caller_function": "a",
      "called_function": "main_dist",
      "location": {
        "file": "src/MapTile.cpp",
        "line": 65,
        "column": 0
      },
      "context": "std::uniform_int_distribution<> main_dist(0, 7); // 8 main categories (0-7)"
    },
    {
      "caller_function": "a",
      "called_function": "categories",
      "location": {
        "file": "src/MapTile.cpp",
        "line": 65,
        "column": 0
      },
      "context": "std::uniform_int_distribution<> main_dist(0, 7); // 8 main categories (0-7)"
    },
    {
      "caller_function": "a",
      "called_function": "main_dist",
      "location": {
        "file": "src/MapTile.cpp",
        "line": 67,
        "column": 0
      },
      "context": "int roll = main_dist(gen);"
    },
    {
      "caller_function": "h",
      "called_function": "ups",
      "location": {
        "file": "src/MapTile.cpp",
        "line": 71,
        "column": 0
      },
      "context": "case 0: // Power-ups (25% chance total)"
    },
    {
      "caller_function": "h",
      "called_function": "capacity",
      "location": {
        "file": "src/MapTile.cpp",
        "line": 74,
        "column": 0
      },
      "context": "case 1: // Bomb capacity (12.5% chance)"
    },
    {
      "caller_function": "h",
      "called_function": "Speed",
      "location": {
        "file": "src/MapTile.cpp",
        "line": 77,
        "column": 0
      },
      "context": "case 2: // Speed (12.5% chance)"
    },
    {
      "caller_function": "h",
      "called_function": "abilities",
      "location": {
        "file": "src/MapTile.cpp",
        "line": 80,
        "column": 0
      },
      "context": "case 3: { // Special abilities (12.5% chance - kick or glove)"
    },
    {
      "caller_function": "h",
      "called_function": "special_dist",
      "location": {
        "file": "src/MapTile.cpp",
        "line": 81,
        "column": 0
      },
      "context": "std::uniform_int_distribution<> special_dist(0, 1);"
    },
    {
      "caller_function": "h",
      "called_function": "special_dist",
      "location": {
        "file": "src/MapTile.cpp",
        "line": 82,
        "column": 0
      },
      "context": "extra_type = (special_dist(gen) == 0) ? Extra::KICK : Extra::GLOVE;"
    },
    {
      "caller_function": "h",
      "called_function": "effects",
      "location": {
        "file": "src/MapTile.cpp",
        "line": 85,
        "column": 0
      },
      "context": "case 4: { // Negative effects (12.5% chance)"
    },
    {
      "caller_function": "h",
      "called_function": "negative_dist",
      "location": {
        "file": "src/MapTile.cpp",
        "line": 86,
        "column": 0
      },
      "context": "std::uniform_int_distribution<> negative_dist(0, 7); // Increased chance of negative effects"
    },
    {
      "caller_function": "h",
      "called_function": "negative_dist",
      "location": {
        "file": "src/MapTile.cpp",
        "line": 87,
        "column": 0
      },
      "context": "int neg_roll = negative_dist(gen);"
    },
    {
      "caller_function": "f",
      "called_function": "Constipation",
      "location": {
        "file": "src/MapTile.cpp",
        "line": 89,
        "column": 0
      },
      "context": "extra_type = Extra::DISEASE; // Constipation (25% of this case)"
    },
    {
      "caller_function": "f",
      "called_function": "bombs",
      "location": {
        "file": "src/MapTile.cpp",
        "line": 91,
        "column": 0
      },
      "context": "extra_type = Extra::VIAGRA; // Sticky bombs (25% of this case)"
    },
    {
      "caller_function": "f",
      "called_function": "speed",
      "location": {
        "file": "src/MapTile.cpp",
        "line": 93,
        "column": 0
      },
      "context": "extra_type = Extra::KOKS; // Uncontrollable speed (25% of this case)"
    },
    {
      "caller_function": "f",
      "called_function": "spawned",
      "location": {
        "file": "src/MapTile.cpp",
        "line": 95,
        "column": 0
      },
      "context": "return; // No extra spawned (25% of this case)"
    },
    {
      "caller_function": "f",
      "called_function": "Skate",
      "location": {
        "file": "src/MapTile.cpp",
        "line": 99,
        "column": 0
      },
      "context": "case 5: // Skate (rare, 6.25% chance)"
    },
    {
      "caller_function": "f",
      "called_function": "grid",
      "location": {
        "file": "src/MapTile.cpp",
        "line": 114,
        "column": 0
      },
      "context": "GridCoord grid(get_map_x(), get_map_y());"
    },
    {
      "caller_function": "f",
      "called_function": "get_map_x",
      "location": {
        "file": "src/MapTile.cpp",
        "line": 114,
        "column": 0
      },
      "context": "GridCoord grid(get_map_x(), get_map_y());"
    },
    {
      "caller_function": "f",
      "called_function": "get_map_y",
      "location": {
        "file": "src/MapTile.cpp",
        "line": 114,
        "column": 0
      },
      "context": "GridCoord grid(get_map_x(), get_map_y());"
    },
    {
      "caller_function": "f",
      "called_function": "CoordinateSystem::grid_to_pixel",
      "location": {
        "file": "src/MapTile.cpp",
        "line": 115,
        "column": 0
      },
      "context": "PixelCoord center = CoordinateSystem::grid_to_pixel(grid);"
    },
    {
      "caller_function": "f",
      "called_function": "grid_to_pixel",
      "location": {
        "file": "src/MapTile.cpp",
        "line": 115,
        "column": 0
      },
      "context": "PixelCoord center = CoordinateSystem::grid_to_pixel(grid);"
    },
    {
      "caller_function": "f",
      "called_function": "Extra",
      "location": {
        "file": "src/MapTile.cpp",
        "line": 116,
        "column": 0
      },
      "context": "Extra* extra = new Extra(static_cast<int>(center.pixel_x), static_cast<int>(center.pixel_y), extra_t"
    },
    {
      "caller_function": "f",
      "called_function": "get_context",
      "location": {
        "file": "src/MapTile.cpp",
        "line": 116,
        "column": 0
      },
      "context": "Extra* extra = new Extra(static_cast<int>(center.pixel_x), static_cast<int>(center.pixel_y), extra_t"
    },
    {
      "caller_function": "f",
      "called_function": "get_context",
      "location": {
        "file": "src/MapTile.cpp",
        "line": 117,
        "column": 0
      },
      "context": "get_context()->register_object(extra);"
    },
    {
      "caller_function": "f",
      "called_function": "register_object",
      "location": {
        "file": "src/MapTile.cpp",
        "line": 117,
        "column": 0
      },
      "context": "get_context()->register_object(extra);"
    },
    {
      "caller_function": null,
      "called_function": "GameContext::GameContext",
      "location": {
        "file": "src/GameContext.cpp",
        "line": 17,
        "column": 0
      },
      "context": "GameContext::GameContext(LifecycleManager* lifecycle,"
    },
    {
      "caller_function": null,
      "called_function": "GameContext",
      "location": {
        "file": "src/GameContext.cpp",
        "line": 17,
        "column": 0
      },
      "context": "GameContext::GameContext(LifecycleManager* lifecycle,"
    },
    {
      "caller_function": null,
      "called_function": "lifecycle_manager",
      "location": {
        "file": "src/GameContext.cpp",
        "line": 24,
        "column": 0
      },
      "context": ": lifecycle_manager(lifecycle)"
    },
    {
      "caller_function": null,
      "called_function": "tile_manager",
      "location": {
        "file": "src/GameContext.cpp",
        "line": 25,
        "column": 0
      },
      "context": ", tile_manager(tiles)"
    },
    {
      "caller_function": null,
      "called_function": "particle_effects",
      "location": {
        "file": "src/GameContext.cpp",
        "line": 26,
        "column": 0
      },
      "context": ", particle_effects(effects)"
    },
    {
      "caller_function": null,
      "called_function": "map",
      "location": {
        "file": "src/GameContext.cpp",
        "line": 27,
        "column": 0
      },
      "context": ", map(map)"
    },
    {
      "caller_function": null,
      "called_function": "gpu_renderer",
      "location": {
        "file": "src/GameContext.cpp",
        "line": 28,
        "column": 0
      },
      "context": ", gpu_renderer(nullptr) // REMOVED: Legacy renderer - handled by RenderingFacade"
    },
    {
      "caller_function": null,
      "called_function": "text_renderer",
      "location": {
        "file": "src/GameContext.cpp",
        "line": 29,
        "column": 0
      },
      "context": ", text_renderer(text)"
    },
    {
      "caller_function": null,
      "called_function": "spatial_grid",
      "location": {
        "file": "src/GameContext.cpp",
        "line": 30,
        "column": 0
      },
      "context": ", spatial_grid(nullptr)"
    },
    {
      "caller_function": null,
      "called_function": "rendering_facade",
      "location": {
        "file": "src/GameContext.cpp",
        "line": 31,
        "column": 0
      },
      "context": ", rendering_facade(facade)"
    },
    {
      "caller_function": null,
      "called_function": "render_objects",
      "location": {
        "file": "src/GameContext.cpp",
        "line": 32,
        "column": 0
      },
      "context": ", render_objects(nullptr) {"
    },
    {
      "caller_function": null,
      "called_function": "SpatialGrid",
      "location": {
        "file": "src/GameContext.cpp",
        "line": 35,
        "column": 0
      },
      "context": "spatial_grid = new SpatialGrid(TILE_SIZE); // TILE_SIZE pixels = tile size"
    },
    {
      "caller_function": null,
      "called_function": "SDL_Log",
      "location": {
        "file": "src/GameContext.cpp",
        "line": 36,
        "column": 0
      },
      "context": "SDL_Log(\"GameContext: Created SpatialGrid with %d-pixel cells\", TILE_SIZE);"
    },
    {
      "caller_function": "f",
      "called_function": "set_game_context",
      "location": {
        "file": "src/GameContext.cpp",
        "line": 40,
        "column": 0
      },
      "context": "lifecycle_manager->set_game_context(this);"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/GameContext.cpp",
        "line": 41,
        "column": 0
      },
      "context": "SDL_Log(\"GameContext: Coordinated with LifecycleManager for proper cleanup\");"
    },
    {
      "caller_function": "f",
      "called_function": "RenderingFacade",
      "location": {
        "file": "src/GameContext.cpp",
        "line": 46,
        "column": 0
      },
      "context": "rendering_facade = new RenderingFacade();"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/GameContext.cpp",
        "line": 47,
        "column": 0
      },
      "context": "SDL_Log(\"GameContext: Created default RenderingFacade\");"
    },
    {
      "caller_function": "f",
      "called_function": "GameContext",
      "location": {
        "file": "src/GameContext.cpp",
        "line": 54,
        "column": 0
      },
      "context": "GameContext::~GameContext() {"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/GameContext.cpp",
        "line": 57,
        "column": 0
      },
      "context": "SDL_Log(\"GameContext: Cleaned up SpatialGrid\");"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/GameContext.cpp",
        "line": 61,
        "column": 0
      },
      "context": "SDL_Log(\"GameContext: Cleaned up RenderingFacade\");"
    },
    {
      "caller_function": "f",
      "called_function": "GameContext::is_position_blocked",
      "location": {
        "file": "src/GameContext.cpp",
        "line": 64,
        "column": 0
      },
      "context": "bool GameContext::is_position_blocked(int map_x, int map_y) const {"
    },
    {
      "caller_function": "f",
      "called_function": "is_position_blocked",
      "location": {
        "file": "src/GameContext.cpp",
        "line": 64,
        "column": 0
      },
      "context": "bool GameContext::is_position_blocked(int map_x, int map_y) const {"
    },
    {
      "caller_function": "f",
      "called_function": "is_tile_blocking_at",
      "location": {
        "file": "src/GameContext.cpp",
        "line": 65,
        "column": 0
      },
      "context": "return tile_manager ? tile_manager->is_tile_blocking_at(map_x, map_y) : false;"
    },
    {
      "caller_function": "f",
      "called_function": "GameContext::has_bomb_at",
      "location": {
        "file": "src/GameContext.cpp",
        "line": 68,
        "column": 0
      },
      "context": "bool GameContext::has_bomb_at(int map_x, int map_y) const {"
    },
    {
      "caller_function": "f",
      "called_function": "has_bomb_at",
      "location": {
        "file": "src/GameContext.cpp",
        "line": 68,
        "column": 0
      },
      "context": "bool GameContext::has_bomb_at(int map_x, int map_y) const {"
    },
    {
      "caller_function": "f",
      "called_function": "has_bomb_at",
      "location": {
        "file": "src/GameContext.cpp",
        "line": 69,
        "column": 0
      },
      "context": "return tile_manager ? tile_manager->has_bomb_at(map_x, map_y) : false;"
    },
    {
      "caller_function": "f",
      "called_function": "GameContext::is_position_walkable",
      "location": {
        "file": "src/GameContext.cpp",
        "line": 72,
        "column": 0
      },
      "context": "bool GameContext::is_position_walkable(int map_x, int map_y) const {"
    },
    {
      "caller_function": "f",
      "called_function": "is_position_walkable",
      "location": {
        "file": "src/GameContext.cpp",
        "line": 72,
        "column": 0
      },
      "context": "bool GameContext::is_position_walkable(int map_x, int map_y) const {"
    },
    {
      "caller_function": "f",
      "called_function": "is_position_walkable",
      "location": {
        "file": "src/GameContext.cpp",
        "line": 73,
        "column": 0
      },
      "context": "return tile_manager ? tile_manager->is_position_walkable(map_x, map_y) : false;"
    },
    {
      "caller_function": "f",
      "called_function": "GameContext::request_destruction_effect",
      "location": {
        "file": "src/GameContext.cpp",
        "line": 76,
        "column": 0
      },
      "context": "void GameContext::request_destruction_effect(float x, float y, float intensity) const {"
    },
    {
      "caller_function": "f",
      "called_function": "request_destruction_effect",
      "location": {
        "file": "src/GameContext.cpp",
        "line": 76,
        "column": 0
      },
      "context": "void GameContext::request_destruction_effect(float x, float y, float intensity) const {"
    },
    {
      "caller_function": "f",
      "called_function": "create_box_destruction_effect",
      "location": {
        "file": "src/GameContext.cpp",
        "line": 78,
        "column": 0
      },
      "context": "particle_effects->create_box_destruction_effect(x, y, intensity);"
    },
    {
      "caller_function": "f",
      "called_function": "GameContext::mark_for_destruction",
      "location": {
        "file": "src/GameContext.cpp",
        "line": 82,
        "column": 0
      },
      "context": "void GameContext::mark_for_destruction(GameObject* obj) const {"
    },
    {
      "caller_function": "f",
      "called_function": "mark_for_destruction",
      "location": {
        "file": "src/GameContext.cpp",
        "line": 82,
        "column": 0
      },
      "context": "void GameContext::mark_for_destruction(GameObject* obj) const {"
    },
    {
      "caller_function": "f",
      "called_function": "mark_for_destruction",
      "location": {
        "file": "src/GameContext.cpp",
        "line": 84,
        "column": 0
      },
      "context": "lifecycle_manager->mark_for_destruction(obj);"
    },
    {
      "caller_function": "f",
      "called_function": "remove_from_spatial_systems",
      "location": {
        "file": "src/GameContext.cpp",
        "line": 88,
        "column": 0
      },
      "context": "remove_from_spatial_systems(obj);"
    },
    {
      "caller_function": "f",
      "called_function": "GameContext::remove_from_spatial_systems",
      "location": {
        "file": "src/GameContext.cpp",
        "line": 91,
        "column": 0
      },
      "context": "void GameContext::remove_from_spatial_systems(GameObject* obj) const {"
    },
    {
      "caller_function": "f",
      "called_function": "remove_from_spatial_systems",
      "location": {
        "file": "src/GameContext.cpp",
        "line": 91,
        "column": 0
      },
      "context": "void GameContext::remove_from_spatial_systems(GameObject* obj) const {"
    },
    {
      "caller_function": "f",
      "called_function": "remove_object",
      "location": {
        "file": "src/GameContext.cpp",
        "line": 94,
        "column": 0
      },
      "context": "spatial_grid->remove_object(obj);"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/GameContext.cpp",
        "line": 95,
        "column": 0
      },
      "context": "SDL_Log(\"GameContext: Removed object %p (type=%d) from SpatialGrid\", obj, obj->get_type());"
    },
    {
      "caller_function": "f",
      "called_function": "get_type",
      "location": {
        "file": "src/GameContext.cpp",
        "line": 95,
        "column": 0
      },
      "context": "SDL_Log(\"GameContext: Removed object %p (type=%d) from SpatialGrid\", obj, obj->get_type());"
    },
    {
      "caller_function": "f",
      "called_function": "GameContext::register_object",
      "location": {
        "file": "src/GameContext.cpp",
        "line": 99,
        "column": 0
      },
      "context": "void GameContext::register_object(GameObject* obj) const {"
    },
    {
      "caller_function": "f",
      "called_function": "register_object",
      "location": {
        "file": "src/GameContext.cpp",
        "line": 99,
        "column": 0
      },
      "context": "void GameContext::register_object(GameObject* obj) const {"
    },
    {
      "caller_function": "f",
      "called_function": "register_object",
      "location": {
        "file": "src/GameContext.cpp",
        "line": 101,
        "column": 0
      },
      "context": "lifecycle_manager->register_object(obj);"
    },
    {
      "caller_function": "f",
      "called_function": "push_back",
      "location": {
        "file": "src/GameContext.cpp",
        "line": 106,
        "column": 0
      },
      "context": "render_objects->push_back(obj);"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/GameContext.cpp",
        "line": 107,
        "column": 0
      },
      "context": "SDL_Log(\"GameContext: Added object %p to render list (total: %zu)\", obj, render_objects->size());"
    },
    {
      "caller_function": "f",
      "called_function": "list",
      "location": {
        "file": "src/GameContext.cpp",
        "line": 107,
        "column": 0
      },
      "context": "SDL_Log(\"GameContext: Added object %p to render list (total: %zu)\", obj, render_objects->size());"
    },
    {
      "caller_function": "f",
      "called_function": "size",
      "location": {
        "file": "src/GameContext.cpp",
        "line": 107,
        "column": 0
      },
      "context": "SDL_Log(\"GameContext: Added object %p to render list (total: %zu)\", obj, render_objects->size());"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/GameContext.cpp",
        "line": 109,
        "column": 0
      },
      "context": "SDL_Log(\"GameContext: WARNING - No render_objects list set, object %p won't be rendered\", obj);"
    },
    {
      "caller_function": "f",
      "called_function": "add_object",
      "location": {
        "file": "src/GameContext.cpp",
        "line": 114,
        "column": 0
      },
      "context": "spatial_grid->add_object(obj);"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/GameContext.cpp",
        "line": 115,
        "column": 0
      },
      "context": "SDL_Log(\"GameContext: Added object %p (type=%d) to SpatialGrid at (%d,%d)\","
    },
    {
      "caller_function": "f",
      "called_function": "get_type",
      "location": {
        "file": "src/GameContext.cpp",
        "line": 116,
        "column": 0
      },
      "context": "obj, obj->get_type(), obj->get_x(), obj->get_y());"
    },
    {
      "caller_function": "f",
      "called_function": "get_x",
      "location": {
        "file": "src/GameContext.cpp",
        "line": 116,
        "column": 0
      },
      "context": "obj, obj->get_type(), obj->get_x(), obj->get_y());"
    },
    {
      "caller_function": "f",
      "called_function": "get_y",
      "location": {
        "file": "src/GameContext.cpp",
        "line": 116,
        "column": 0
      },
      "context": "obj, obj->get_type(), obj->get_x(), obj->get_y());"
    },
    {
      "caller_function": "s",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/GameContext.cpp",
        "line": 122,
        "column": 0
      },
      "context": "SDL_Log(\"GameContext: Render objects list set to %p\", render_objects);"
    },
    {
      "caller_function": "p",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/GameContext.cpp",
        "line": 127,
        "column": 0
      },
      "context": "SDL_Log(\"GameContext: Map set to %p\", map);"
    },
    {
      "caller_function": "p",
      "called_function": "GameContext::update_object_position_in_spatial_grid",
      "location": {
        "file": "src/GameContext.cpp",
        "line": 130,
        "column": 0
      },
      "context": "void GameContext::update_object_position_in_spatial_grid(GameObject* obj, float old_x, float old_y) "
    },
    {
      "caller_function": "p",
      "called_function": "update_object_position_in_spatial_grid",
      "location": {
        "file": "src/GameContext.cpp",
        "line": 130,
        "column": 0
      },
      "context": "void GameContext::update_object_position_in_spatial_grid(GameObject* obj, float old_x, float old_y) "
    },
    {
      "caller_function": "f",
      "called_function": "old_position",
      "location": {
        "file": "src/GameContext.cpp",
        "line": 132,
        "column": 0
      },
      "context": "PixelCoord old_position(old_x, old_y);"
    },
    {
      "caller_function": "f",
      "called_function": "update_object_position",
      "location": {
        "file": "src/GameContext.cpp",
        "line": 133,
        "column": 0
      },
      "context": "spatial_grid->update_object_position(obj, old_position);"
    },
    {
      "caller_function": "r",
      "called_function": "enumerate_maps",
      "location": {
        "file": "src/Map.cpp",
        "line": 29,
        "column": 0
      },
      "context": "enumerate_maps();"
    },
    {
      "caller_function": "r",
      "called_function": "Map",
      "location": {
        "file": "src/Map.cpp",
        "line": 32,
        "column": 0
      },
      "context": "Map::~Map() {"
    },
    {
      "caller_function": "r",
      "called_function": "clear",
      "location": {
        "file": "src/Map.cpp",
        "line": 33,
        "column": 0
      },
      "context": "clear();"
    },
    {
      "caller_function": "r",
      "called_function": "clear",
      "location": {
        "file": "src/Map.cpp",
        "line": 39,
        "column": 0
      },
      "context": "map_list.clear();"
    },
    {
      "caller_function": "s",
      "called_function": "clear",
      "location": {
        "file": "src/Map.cpp",
        "line": 43,
        "column": 0
      },
      "context": "map_list.clear();"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/Map.cpp",
        "line": 47,
        "column": 0
      },
      "context": "SDL_Log(\"Maps directory not found: %s\", maps_dir.string().c_str());"
    },
    {
      "caller_function": "f",
      "called_function": "string",
      "location": {
        "file": "src/Map.cpp",
        "line": 47,
        "column": 0
      },
      "context": "SDL_Log(\"Maps directory not found: %s\", maps_dir.string().c_str());"
    },
    {
      "caller_function": "f",
      "called_function": "c_str",
      "location": {
        "file": "src/Map.cpp",
        "line": 47,
        "column": 0
      },
      "context": "SDL_Log(\"Maps directory not found: %s\", maps_dir.string().c_str());"
    },
    {
      "caller_function": "f",
      "called_function": "MapEntry",
      "location": {
        "file": "src/Map.cpp",
        "line": 53,
        "column": 0
      },
      "context": "MapEntry* map_entry = new MapEntry(entry.path().string());"
    },
    {
      "caller_function": "f",
      "called_function": "path",
      "location": {
        "file": "src/Map.cpp",
        "line": 53,
        "column": 0
      },
      "context": "MapEntry* map_entry = new MapEntry(entry.path().string());"
    },
    {
      "caller_function": "f",
      "called_function": "string",
      "location": {
        "file": "src/Map.cpp",
        "line": 53,
        "column": 0
      },
      "context": "MapEntry* map_entry = new MapEntry(entry.path().string());"
    },
    {
      "caller_function": "f",
      "called_function": "push_back",
      "location": {
        "file": "src/Map.cpp",
        "line": 55,
        "column": 0
      },
      "context": "map_list.push_back(map_entry);"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/Map.cpp",
        "line": 63,
        "column": 0
      },
      "context": "SDL_Log(\"No valid maps found\");"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/Map.cpp",
        "line": 65,
        "column": 0
      },
      "context": "SDL_Log(\"Found %zu maps\", map_list.size());"
    },
    {
      "caller_function": "f",
      "called_function": "size",
      "location": {
        "file": "src/Map.cpp",
        "line": 65,
        "column": 0
      },
      "context": "SDL_Log(\"Found %zu maps\", map_list.size());"
    },
    {
      "caller_function": "f",
      "called_function": "reload",
      "location": {
        "file": "src/Map.cpp",
        "line": 72,
        "column": 0
      },
      "context": "reload();"
    },
    {
      "caller_function": "f",
      "called_function": "empty",
      "location": {
        "file": "src/Map.cpp",
        "line": 73,
        "column": 0
      },
      "context": "} else if (!map_list.empty()) {"
    },
    {
      "caller_function": "f",
      "called_function": "reload",
      "location": {
        "file": "src/Map.cpp",
        "line": 75,
        "column": 0
      },
      "context": "reload();"
    },
    {
      "caller_function": "d",
      "called_function": "clear",
      "location": {
        "file": "src/Map.cpp",
        "line": 100,
        "column": 0
      },
      "context": "clear();"
    },
    {
      "caller_function": "d",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/Map.cpp",
        "line": 102,
        "column": 0
      },
      "context": "SDL_Log(\"Map: Loading with NEW TileEntity architecture\");"
    },
    {
      "caller_function": "r",
      "called_function": "get_data",
      "location": {
        "file": "src/Map.cpp",
        "line": 106,
        "column": 0
      },
      "context": "char tile_char = current_map->get_data(x, y);"
    },
    {
      "caller_function": "h",
      "called_function": "rand",
      "location": {
        "file": "src/Map.cpp",
        "line": 125,
        "column": 0
      },
      "context": "tile_type = (rand() % 3) ? MapTile_Pure::BOX : MapTile_Pure::GROUND;"
    },
    {
      "caller_function": "h",
      "called_function": "MapTile_Pure::create",
      "location": {
        "file": "src/Map.cpp",
        "line": 133,
        "column": 0
      },
      "context": "MapTile_Pure* tile_data = MapTile_Pure::create(tile_type, x, y);"
    },
    {
      "caller_function": "h",
      "called_function": "create",
      "location": {
        "file": "src/Map.cpp",
        "line": 133,
        "column": 0
      },
      "context": "MapTile_Pure* tile_data = MapTile_Pure::create(tile_type, x, y);"
    },
    {
      "caller_function": "f",
      "called_function": "TileEntity_Box",
      "location": {
        "file": "src/Map.cpp",
        "line": 137,
        "column": 0
      },
      "context": "tile_entities[x][y] = new TileEntity_Box(tile_data, context);"
    },
    {
      "caller_function": "f",
      "called_function": "TileEntity",
      "location": {
        "file": "src/Map.cpp",
        "line": 140,
        "column": 0
      },
      "context": "tile_entities[x][y] = new TileEntity(tile_data, context);"
    },
    {
      "caller_function": "f",
      "called_function": "register_object",
      "location": {
        "file": "src/Map.cpp",
        "line": 145,
        "column": 0
      },
      "context": "context->register_object(tile_entities[x][y]);"
    },
    {
      "caller_function": "f",
      "called_function": "MapTile::create",
      "location": {
        "file": "src/Map.cpp",
        "line": 149,
        "column": 0
      },
      "context": "maptiles[x][y] = MapTile::create("
    },
    {
      "caller_function": "f",
      "called_function": "create",
      "location": {
        "file": "src/Map.cpp",
        "line": 149,
        "column": 0
      },
      "context": "maptiles[x][y] = MapTile::create("
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/Map.cpp",
        "line": 157,
        "column": 0
      },
      "context": "SDL_Log(\"Map: Created %d TileEntities with new architecture\", MAP_WIDTH * MAP_HEIGHT);"
    },
    {
      "caller_function": "f",
      "called_function": "show",
      "location": {
        "file": "src/Map.cpp",
        "line": 169,
        "column": 0
      },
      "context": "maptiles[x][y]->show();"
    },
    {
      "caller_function": "f",
      "called_function": "Map::set_tile",
      "location": {
        "file": "src/Map.cpp",
        "line": 193,
        "column": 0
      },
      "context": "SDL_Log(\"Map::set_tile() - Invalid position (%d,%d)\", tx, ty);"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/Map.cpp",
        "line": 193,
        "column": 0
      },
      "context": "SDL_Log(\"Map::set_tile() - Invalid position (%d,%d)\", tx, ty);"
    },
    {
      "caller_function": "f",
      "called_function": "set_tile",
      "location": {
        "file": "src/Map.cpp",
        "line": 193,
        "column": 0
      },
      "context": "SDL_Log(\"Map::set_tile() - Invalid position (%d,%d)\", tx, ty);"
    },
    {
      "caller_function": "f",
      "called_function": "position",
      "location": {
        "file": "src/Map.cpp",
        "line": 193,
        "column": 0
      },
      "context": "SDL_Log(\"Map::set_tile() - Invalid position (%d,%d)\", tx, ty);"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/Map.cpp",
        "line": 197,
        "column": 0
      },
      "context": "SDL_Log(\"Map: Setting legacy tile at (%d,%d) to %p\", tx, ty, tile);"
    },
    {
      "caller_function": "f",
      "called_function": "Map::set_tile_entity",
      "location": {
        "file": "src/Map.cpp",
        "line": 203,
        "column": 0
      },
      "context": "SDL_Log(\"Map::set_tile_entity() - Invalid position (%d,%d)\", tx, ty);"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/Map.cpp",
        "line": 203,
        "column": 0
      },
      "context": "SDL_Log(\"Map::set_tile_entity() - Invalid position (%d,%d)\", tx, ty);"
    },
    {
      "caller_function": "f",
      "called_function": "set_tile_entity",
      "location": {
        "file": "src/Map.cpp",
        "line": 203,
        "column": 0
      },
      "context": "SDL_Log(\"Map::set_tile_entity() - Invalid position (%d,%d)\", tx, ty);"
    },
    {
      "caller_function": "f",
      "called_function": "position",
      "location": {
        "file": "src/Map.cpp",
        "line": 203,
        "column": 0
      },
      "context": "SDL_Log(\"Map::set_tile_entity() - Invalid position (%d,%d)\", tx, ty);"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/Map.cpp",
        "line": 207,
        "column": 0
      },
      "context": "SDL_Log(\"Map: Setting TileEntity at (%d,%d) to %p\", tx, ty, tile_entity);"
    },
    {
      "caller_function": "f",
      "called_function": "Map::clear_tile_entity_at",
      "location": {
        "file": "src/Map.cpp",
        "line": 213,
        "column": 0
      },
      "context": "SDL_Log(\"Map::clear_tile_entity_at() - Invalid position (%d,%d)\", tx, ty);"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/Map.cpp",
        "line": 213,
        "column": 0
      },
      "context": "SDL_Log(\"Map::clear_tile_entity_at() - Invalid position (%d,%d)\", tx, ty);"
    },
    {
      "caller_function": "f",
      "called_function": "clear_tile_entity_at",
      "location": {
        "file": "src/Map.cpp",
        "line": 213,
        "column": 0
      },
      "context": "SDL_Log(\"Map::clear_tile_entity_at() - Invalid position (%d,%d)\", tx, ty);"
    },
    {
      "caller_function": "f",
      "called_function": "position",
      "location": {
        "file": "src/Map.cpp",
        "line": 213,
        "column": 0
      },
      "context": "SDL_Log(\"Map::clear_tile_entity_at() - Invalid position (%d,%d)\", tx, ty);"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/Map.cpp",
        "line": 218,
        "column": 0
      },
      "context": "SDL_Log(\"Map: Clearing TileEntity pointer at (%d,%d) - was %p\", tx, ty, tile_entities[tx][ty]);"
    },
    {
      "caller_function": "d",
      "called_function": "empty",
      "location": {
        "file": "src/Map.cpp",
        "line": 224,
        "column": 0
      },
      "context": "if (map_list.empty()) return;"
    },
    {
      "caller_function": "d",
      "called_function": "rand",
      "location": {
        "file": "src/Map.cpp",
        "line": 226,
        "column": 0
      },
      "context": "current_map_index = rand() % map_list.size();"
    },
    {
      "caller_function": "d",
      "called_function": "size",
      "location": {
        "file": "src/Map.cpp",
        "line": 226,
        "column": 0
      },
      "context": "current_map_index = rand() % map_list.size();"
    },
    {
      "caller_function": "d",
      "called_function": "reload",
      "location": {
        "file": "src/Map.cpp",
        "line": 228,
        "column": 0
      },
      "context": "reload();"
    },
    {
      "caller_function": "d",
      "called_function": "empty",
      "location": {
        "file": "src/Map.cpp",
        "line": 232,
        "column": 0
      },
      "context": "if (map_list.empty()) return;"
    },
    {
      "caller_function": "f",
      "called_function": "size",
      "location": {
        "file": "src/Map.cpp",
        "line": 237,
        "column": 0
      },
      "context": "current_map_index = (current_map_index + 1) % map_list.size();"
    },
    {
      "caller_function": "f",
      "called_function": "reload",
      "location": {
        "file": "src/Map.cpp",
        "line": 241,
        "column": 0
      },
      "context": "reload();"
    },
    {
      "caller_function": "p",
      "called_function": "empty",
      "location": {
        "file": "src/Map.cpp",
        "line": 257,
        "column": 0
      },
      "context": "return !map_list.empty();"
    },
    {
      "caller_function": "t",
      "called_function": "size",
      "location": {
        "file": "src/Map.cpp",
        "line": 261,
        "column": 0
      },
      "context": "return (int)map_list.size();"
    },
    {
      "caller_function": "f",
      "called_function": "get_name",
      "location": {
        "file": "src/Map.cpp",
        "line": 266,
        "column": 0
      },
      "context": "return current_map->get_name();"
    },
    {
      "caller_function": "f",
      "called_function": "get_author",
      "location": {
        "file": "src/Map.cpp",
        "line": 273,
        "column": 0
      },
      "context": "return current_map->get_author();"
    },
    {
      "caller_function": "f",
      "called_function": "get_bomber_pos",
      "location": {
        "file": "src/Map.cpp",
        "line": 280,
        "column": 0
      },
      "context": "return current_map->get_bomber_pos(nr);"
    },
    {
      "caller_function": "h",
      "called_function": "CL_Vector",
      "location": {
        "file": "src/Map.cpp",
        "line": 284,
        "column": 0
      },
      "context": "case 0: return CL_Vector(2, 2);"
    },
    {
      "caller_function": "h",
      "called_function": "CL_Vector",
      "location": {
        "file": "src/Map.cpp",
        "line": 285,
        "column": 0
      },
      "context": "case 1: return CL_Vector(17, 2);"
    },
    {
      "caller_function": "h",
      "called_function": "CL_Vector",
      "location": {
        "file": "src/Map.cpp",
        "line": 286,
        "column": 0
      },
      "context": "case 2: return CL_Vector(2, 12);"
    },
    {
      "caller_function": "h",
      "called_function": "CL_Vector",
      "location": {
        "file": "src/Map.cpp",
        "line": 287,
        "column": 0
      },
      "context": "case 3: return CL_Vector(17, 12);"
    },
    {
      "caller_function": "h",
      "called_function": "CL_Vector",
      "location": {
        "file": "src/Map.cpp",
        "line": 288,
        "column": 0
      },
      "context": "case 4: return CL_Vector(9, 2);"
    },
    {
      "caller_function": "h",
      "called_function": "CL_Vector",
      "location": {
        "file": "src/Map.cpp",
        "line": 289,
        "column": 0
      },
      "context": "case 5: return CL_Vector(9, 12);"
    },
    {
      "caller_function": "h",
      "called_function": "CL_Vector",
      "location": {
        "file": "src/Map.cpp",
        "line": 290,
        "column": 0
      },
      "context": "case 6: return CL_Vector(2, 7);"
    },
    {
      "caller_function": "h",
      "called_function": "CL_Vector",
      "location": {
        "file": "src/Map.cpp",
        "line": 291,
        "column": 0
      },
      "context": "case 7: return CL_Vector(17, 7);"
    },
    {
      "caller_function": "h",
      "called_function": "CL_Vector",
      "location": {
        "file": "src/Map.cpp",
        "line": 292,
        "column": 0
      },
      "context": "default: return CL_Vector(2, 2);"
    },
    {
      "caller_function": null,
      "called_function": "can_move",
      "location": {
        "file": "src/BomberComponents.cpp",
        "line": 14,
        "column": 0
      },
      "context": "#include \"Bomber.h\"  // Need for cast in can_move()"
    },
    {
      "caller_function": null,
      "called_function": "BomberMovementComponent::BomberMovementComponent",
      "location": {
        "file": "src/BomberComponents.cpp",
        "line": 21,
        "column": 0
      },
      "context": "BomberMovementComponent::BomberMovementComponent(GameObject* owner, GameContext* context)"
    },
    {
      "caller_function": null,
      "called_function": "BomberMovementComponent",
      "location": {
        "file": "src/BomberComponents.cpp",
        "line": 21,
        "column": 0
      },
      "context": "BomberMovementComponent::BomberMovementComponent(GameObject* owner, GameContext* context)"
    },
    {
      "caller_function": null,
      "called_function": "owner",
      "location": {
        "file": "src/BomberComponents.cpp",
        "line": 22,
        "column": 0
      },
      "context": ": owner(owner), context(context) {"
    },
    {
      "caller_function": null,
      "called_function": "context",
      "location": {
        "file": "src/BomberComponents.cpp",
        "line": 22,
        "column": 0
      },
      "context": ": owner(owner), context(context) {"
    },
    {
      "caller_function": "f",
      "called_function": "update_flight_animation",
      "location": {
        "file": "src/BomberComponents.cpp",
        "line": 27,
        "column": 0
      },
      "context": "update_flight_animation(deltaTime);"
    },
    {
      "caller_function": "t",
      "called_function": "can_move",
      "location": {
        "file": "src/BomberComponents.cpp",
        "line": 32,
        "column": 0
      },
      "context": "if (!controller || !can_move()) return;"
    },
    {
      "caller_function": "t",
      "called_function": "set_speed",
      "location": {
        "file": "src/BomberComponents.cpp",
        "line": 36,
        "column": 0
      },
      "context": "owner->set_speed(speed);"
    },
    {
      "caller_function": "f",
      "called_function": "set_dir",
      "location": {
        "file": "src/BomberComponents.cpp",
        "line": 45,
        "column": 0
      },
      "context": "owner->set_dir(DIR_LEFT);"
    },
    {
      "caller_function": "f",
      "called_function": "move_dist",
      "location": {
        "file": "src/BomberComponents.cpp",
        "line": 46,
        "column": 0
      },
      "context": "owner->move_dist(move_distance, DIR_LEFT);"
    },
    {
      "caller_function": "f",
      "called_function": "is_right",
      "location": {
        "file": "src/BomberComponents.cpp",
        "line": 47,
        "column": 0
      },
      "context": "} else if (controller->is_right()) {"
    },
    {
      "caller_function": "f",
      "called_function": "set_dir",
      "location": {
        "file": "src/BomberComponents.cpp",
        "line": 49,
        "column": 0
      },
      "context": "owner->set_dir(DIR_RIGHT);"
    },
    {
      "caller_function": "f",
      "called_function": "move_dist",
      "location": {
        "file": "src/BomberComponents.cpp",
        "line": 50,
        "column": 0
      },
      "context": "owner->move_dist(move_distance, DIR_RIGHT);"
    },
    {
      "caller_function": "f",
      "called_function": "is_up",
      "location": {
        "file": "src/BomberComponents.cpp",
        "line": 51,
        "column": 0
      },
      "context": "} else if (controller->is_up()) {"
    },
    {
      "caller_function": "f",
      "called_function": "set_dir",
      "location": {
        "file": "src/BomberComponents.cpp",
        "line": 53,
        "column": 0
      },
      "context": "owner->set_dir(DIR_UP);"
    },
    {
      "caller_function": "f",
      "called_function": "move_dist",
      "location": {
        "file": "src/BomberComponents.cpp",
        "line": 54,
        "column": 0
      },
      "context": "owner->move_dist(move_distance, DIR_UP);"
    },
    {
      "caller_function": "f",
      "called_function": "is_down",
      "location": {
        "file": "src/BomberComponents.cpp",
        "line": 55,
        "column": 0
      },
      "context": "} else if (controller->is_down()) {"
    },
    {
      "caller_function": "f",
      "called_function": "set_dir",
      "location": {
        "file": "src/BomberComponents.cpp",
        "line": 57,
        "column": 0
      },
      "context": "owner->set_dir(DIR_DOWN);"
    },
    {
      "caller_function": "f",
      "called_function": "move_dist",
      "location": {
        "file": "src/BomberComponents.cpp",
        "line": 58,
        "column": 0
      },
      "context": "owner->move_dist(move_distance, DIR_DOWN);"
    },
    {
      "caller_function": "f",
      "called_function": "is_left",
      "location": {
        "file": "src/BomberComponents.cpp",
        "line": 64,
        "column": 0
      },
      "context": "bool has_input = controller->is_left() || controller->is_right() ||"
    },
    {
      "caller_function": "f",
      "called_function": "is_right",
      "location": {
        "file": "src/BomberComponents.cpp",
        "line": 64,
        "column": 0
      },
      "context": "bool has_input = controller->is_left() || controller->is_right() ||"
    },
    {
      "caller_function": "f",
      "called_function": "is_up",
      "location": {
        "file": "src/BomberComponents.cpp",
        "line": 65,
        "column": 0
      },
      "context": "controller->is_up() || controller->is_down();"
    },
    {
      "caller_function": "f",
      "called_function": "is_down",
      "location": {
        "file": "src/BomberComponents.cpp",
        "line": 65,
        "column": 0
      },
      "context": "controller->is_up() || controller->is_down();"
    },
    {
      "caller_function": "f",
      "called_function": "update_animation_frame",
      "location": {
        "file": "src/BomberComponents.cpp",
        "line": 69,
        "column": 0
      },
      "context": "bomber->animation_component->update_animation_frame(deltaTime, last_direction);"
    },
    {
      "caller_function": "f",
      "called_function": "set_standing_sprite",
      "location": {
        "file": "src/BomberComponents.cpp",
        "line": 72,
        "column": 0
      },
      "context": "bomber->animation_component->set_standing_sprite(last_direction);"
    },
    {
      "caller_function": "o",
      "called_function": "get_x",
      "location": {
        "file": "src/BomberComponents.cpp",
        "line": 81,
        "column": 0
      },
      "context": "start_x = owner->get_x();"
    },
    {
      "caller_function": "o",
      "called_function": "get_y",
      "location": {
        "file": "src/BomberComponents.cpp",
        "line": 82,
        "column": 0
      },
      "context": "start_y = owner->get_y();"
    },
    {
      "caller_function": "o",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/BomberComponents.cpp",
        "line": 86,
        "column": 0
      },
      "context": "SDL_Log(\"BomberMovementComponent: Starting flight from (%d,%d) to (%d,%d) over %.2fs\","
    },
    {
      "caller_function": "o",
      "called_function": "from",
      "location": {
        "file": "src/BomberComponents.cpp",
        "line": 86,
        "column": 0
      },
      "context": "SDL_Log(\"BomberMovementComponent: Starting flight from (%d,%d) to (%d,%d) over %.2fs\","
    },
    {
      "caller_function": "o",
      "called_function": "BomberMovementComponent::can_move",
      "location": {
        "file": "src/BomberComponents.cpp",
        "line": 90,
        "column": 0
      },
      "context": "bool BomberMovementComponent::can_move() const {"
    },
    {
      "caller_function": "o",
      "called_function": "can_move",
      "location": {
        "file": "src/BomberComponents.cpp",
        "line": 90,
        "column": 0
      },
      "context": "bool BomberMovementComponent::can_move() const {"
    },
    {
      "caller_function": "f",
      "called_function": "set_pos",
      "location": {
        "file": "src/BomberComponents.cpp",
        "line": 111,
        "column": 0
      },
      "context": "owner->set_pos(target_x, target_y);"
    },
    {
      "caller_function": "f",
      "called_function": "stop",
      "location": {
        "file": "src/BomberComponents.cpp",
        "line": 114,
        "column": 0
      },
      "context": "owner->stop(); // Ensure GameObject is in proper stopped state"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/BomberComponents.cpp",
        "line": 116,
        "column": 0
      },
      "context": "SDL_Log(\"BomberMovementComponent: Flight animation complete at (%d,%d) - controls restored\", target_"
    },
    {
      "caller_function": "f",
      "called_function": "set_pos",
      "location": {
        "file": "src/BomberComponents.cpp",
        "line": 121,
        "column": 0
      },
      "context": "owner->set_pos(current_x, current_y);"
    },
    {
      "caller_function": "f",
      "called_function": "BomberCombatComponent::BomberCombatComponent",
      "location": {
        "file": "src/BomberComponents.cpp",
        "line": 129,
        "column": 0
      },
      "context": "BomberCombatComponent::BomberCombatComponent(GameObject* owner, GameContext* context)"
    },
    {
      "caller_function": "f",
      "called_function": "BomberCombatComponent",
      "location": {
        "file": "src/BomberComponents.cpp",
        "line": 129,
        "column": 0
      },
      "context": "BomberCombatComponent::BomberCombatComponent(GameObject* owner, GameContext* context)"
    },
    {
      "caller_function": "f",
      "called_function": "owner",
      "location": {
        "file": "src/BomberComponents.cpp",
        "line": 130,
        "column": 0
      },
      "context": ": owner(owner), context(context) {"
    },
    {
      "caller_function": "f",
      "called_function": "context",
      "location": {
        "file": "src/BomberComponents.cpp",
        "line": 130,
        "column": 0
      },
      "context": ": owner(owner), context(context) {"
    },
    {
      "caller_function": "f",
      "called_function": "GameConfig::get_start_power",
      "location": {
        "file": "src/BomberComponents.cpp",
        "line": 131,
        "column": 0
      },
      "context": "power = GameConfig::get_start_power();"
    },
    {
      "caller_function": "f",
      "called_function": "get_start_power",
      "location": {
        "file": "src/BomberComponents.cpp",
        "line": 131,
        "column": 0
      },
      "context": "power = GameConfig::get_start_power();"
    },
    {
      "caller_function": "e",
      "called_function": "update_bomb_cooldown",
      "location": {
        "file": "src/BomberComponents.cpp",
        "line": 135,
        "column": 0
      },
      "context": "update_bomb_cooldown(deltaTime);"
    },
    {
      "caller_function": "e",
      "called_function": "update_bomb_throwing",
      "location": {
        "file": "src/BomberComponents.cpp",
        "line": 136,
        "column": 0
      },
      "context": "update_bomb_throwing(deltaTime);"
    },
    {
      "caller_function": "e",
      "called_function": "update_bomb_escape_status",
      "location": {
        "file": "src/BomberComponents.cpp",
        "line": 137,
        "column": 0
      },
      "context": "update_bomb_escape_status(); // New position-based system"
    },
    {
      "caller_function": "f",
      "called_function": "throw_bomb",
      "location": {
        "file": "src/BomberComponents.cpp",
        "line": 161,
        "column": 0
      },
      "context": "throw_bomb();"
    },
    {
      "caller_function": "f",
      "called_function": "place_bomb",
      "location": {
        "file": "src/BomberComponents.cpp",
        "line": 163,
        "column": 0
      },
      "context": "place_bomb();"
    },
    {
      "caller_function": "b",
      "called_function": "can_place_bomb",
      "location": {
        "file": "src/BomberComponents.cpp",
        "line": 172,
        "column": 0
      },
      "context": "if (!can_place_bomb() || bomb_cooldown > 0.0f) return;"
    },
    {
      "caller_function": "b",
      "called_function": "get_x",
      "location": {
        "file": "src/BomberComponents.cpp",
        "line": 174,
        "column": 0
      },
      "context": "int bomber_x = owner->get_x();"
    },
    {
      "caller_function": "b",
      "called_function": "get_y",
      "location": {
        "file": "src/BomberComponents.cpp",
        "line": 175,
        "column": 0
      },
      "context": "int bomber_y = owner->get_y();"
    },
    {
      "caller_function": "b",
      "called_function": "get_map_x",
      "location": {
        "file": "src/BomberComponents.cpp",
        "line": 176,
        "column": 0
      },
      "context": "int map_x = owner->get_map_x();"
    },
    {
      "caller_function": "b",
      "called_function": "get_map_y",
      "location": {
        "file": "src/BomberComponents.cpp",
        "line": 177,
        "column": 0
      },
      "context": "int map_y = owner->get_map_y();"
    },
    {
      "caller_function": "b",
      "called_function": "CoordinateSystem::pixel_to_grid",
      "location": {
        "file": "src/BomberComponents.cpp",
        "line": 180,
        "column": 0
      },
      "context": "GridCoord expected_grid = CoordinateSystem::pixel_to_grid(PixelCoord(bomber_x, bomber_y));"
    },
    {
      "caller_function": "b",
      "called_function": "pixel_to_grid",
      "location": {
        "file": "src/BomberComponents.cpp",
        "line": 180,
        "column": 0
      },
      "context": "GridCoord expected_grid = CoordinateSystem::pixel_to_grid(PixelCoord(bomber_x, bomber_y));"
    },
    {
      "caller_function": "b",
      "called_function": "PixelCoord",
      "location": {
        "file": "src/BomberComponents.cpp",
        "line": 180,
        "column": 0
      },
      "context": "GridCoord expected_grid = CoordinateSystem::pixel_to_grid(PixelCoord(bomber_x, bomber_y));"
    },
    {
      "caller_function": "b",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/BomberComponents.cpp",
        "line": 184,
        "column": 0
      },
      "context": "SDL_Log(\"\ud83d\udd0d DEBUG: Bomber at (%d,%d) -> get_map_x()=%d, get_map_y()=%d\", bomber_x, bomber_y, map_x, m"
    },
    {
      "caller_function": "b",
      "called_function": "get_map_x",
      "location": {
        "file": "src/BomberComponents.cpp",
        "line": 184,
        "column": 0
      },
      "context": "SDL_Log(\"\ud83d\udd0d DEBUG: Bomber at (%d,%d) -> get_map_x()=%d, get_map_y()=%d\", bomber_x, bomber_y, map_x, m"
    },
    {
      "caller_function": "b",
      "called_function": "get_map_y",
      "location": {
        "file": "src/BomberComponents.cpp",
        "line": 184,
        "column": 0
      },
      "context": "SDL_Log(\"\ud83d\udd0d DEBUG: Bomber at (%d,%d) -> get_map_x()=%d, get_map_y()=%d\", bomber_x, bomber_y, map_x, m"
    },
    {
      "caller_function": "b",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/BomberComponents.cpp",
        "line": 185,
        "column": 0
      },
      "context": "SDL_Log(\"\ud83d\udd0d DEBUG: Expected tile calculation: (%d+%d)/%d=%d, (%d+%d)/%d=%d\", bomber_x, TILE_SIZE/2, T"
    },
    {
      "caller_function": "f",
      "called_function": "grid",
      "location": {
        "file": "src/BomberComponents.cpp",
        "line": 193,
        "column": 0
      },
      "context": "GridCoord grid(map_x, map_y);"
    },
    {
      "caller_function": "f",
      "called_function": "CoordinateSystem::grid_to_pixel",
      "location": {
        "file": "src/BomberComponents.cpp",
        "line": 194,
        "column": 0
      },
      "context": "PixelCoord center = CoordinateSystem::grid_to_pixel(grid);"
    },
    {
      "caller_function": "f",
      "called_function": "grid_to_pixel",
      "location": {
        "file": "src/BomberComponents.cpp",
        "line": 194,
        "column": 0
      },
      "context": "PixelCoord center = CoordinateSystem::grid_to_pixel(grid);"
    },
    {
      "caller_function": "f",
      "called_function": "Bomb",
      "location": {
        "file": "src/BomberComponents.cpp",
        "line": 198,
        "column": 0
      },
      "context": "Bomb* bomb = new Bomb(bomb_x, bomb_y, power, static_cast<Bomber*>(owner), context);"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/BomberComponents.cpp",
        "line": 200,
        "column": 0
      },
      "context": "SDL_Log(\"\ud83d\udca3 PLACE BOMB: Bomber at (%d,%d) -> tile (%d,%d) -> Bomb created at center (%d,%d)\","
    },
    {
      "caller_function": "f",
      "called_function": "tile",
      "location": {
        "file": "src/BomberComponents.cpp",
        "line": 200,
        "column": 0
      },
      "context": "SDL_Log(\"\ud83d\udca3 PLACE BOMB: Bomber at (%d,%d) -> tile (%d,%d) -> Bomb created at center (%d,%d)\","
    },
    {
      "caller_function": "f",
      "called_function": "center",
      "location": {
        "file": "src/BomberComponents.cpp",
        "line": 200,
        "column": 0
      },
      "context": "SDL_Log(\"\ud83d\udca3 PLACE BOMB: Bomber at (%d,%d) -> tile (%d,%d) -> Bomb created at center (%d,%d)\","
    },
    {
      "caller_function": "f",
      "called_function": "register_object",
      "location": {
        "file": "src/BomberComponents.cpp",
        "line": 202,
        "column": 0
      },
      "context": "context->register_object(bomb); // MODERN: Use GameContext for object registration"
    },
    {
      "caller_function": "f",
      "called_function": "get_tile_manager",
      "location": {
        "file": "src/BomberComponents.cpp",
        "line": 206,
        "column": 0
      },
      "context": "context->get_tile_manager()->register_bomb_at(map_x, map_y, bomb);"
    },
    {
      "caller_function": "f",
      "called_function": "register_bomb_at",
      "location": {
        "file": "src/BomberComponents.cpp",
        "line": 206,
        "column": 0
      },
      "context": "context->get_tile_manager()->register_bomb_at(map_x, map_y, bomb);"
    },
    {
      "caller_function": "f",
      "called_function": "inc_current_bombs",
      "location": {
        "file": "src/BomberComponents.cpp",
        "line": 210,
        "column": 0
      },
      "context": "inc_current_bombs();"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/BomberComponents.cpp",
        "line": 217,
        "column": 0
      },
      "context": "SDL_Log(\"\ud83c\udfaf BOMB ESCAPE: Bomber can move freely while on bomb at tile (%d,%d)\","
    },
    {
      "caller_function": "f",
      "called_function": "tile",
      "location": {
        "file": "src/BomberComponents.cpp",
        "line": 217,
        "column": 0
      },
      "context": "SDL_Log(\"\ud83c\udfaf BOMB ESCAPE: Bomber can move freely while on bomb at tile (%d,%d)\","
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/BomberComponents.cpp",
        "line": 219,
        "column": 0
      },
      "context": "SDL_Log(\"BomberCombatComponent: Placed bomb at (%d,%d) with power %d\", map_x, map_y, power);"
    },
    {
      "caller_function": "b",
      "called_function": "can_place_bomb",
      "location": {
        "file": "src/BomberComponents.cpp",
        "line": 223,
        "column": 0
      },
      "context": "if (!can_place_bomb() || bomb_cooldown > 0.0f) return;"
    },
    {
      "caller_function": "b",
      "called_function": "get_x",
      "location": {
        "file": "src/BomberComponents.cpp",
        "line": 227,
        "column": 0
      },
      "context": "int target_x = owner->get_x();"
    },
    {
      "caller_function": "b",
      "called_function": "get_y",
      "location": {
        "file": "src/BomberComponents.cpp",
        "line": 228,
        "column": 0
      },
      "context": "int target_y = owner->get_y();"
    },
    {
      "caller_function": "h",
      "called_function": "ThrownBomb",
      "location": {
        "file": "src/BomberComponents.cpp",
        "line": 239,
        "column": 0
      },
      "context": "ThrownBomb* thrown_bomb = new ThrownBomb("
    },
    {
      "caller_function": "h",
      "called_function": "get_x",
      "location": {
        "file": "src/BomberComponents.cpp",
        "line": 240,
        "column": 0
      },
      "context": "owner->get_x(), owner->get_y(), power,"
    },
    {
      "caller_function": "h",
      "called_function": "get_y",
      "location": {
        "file": "src/BomberComponents.cpp",
        "line": 240,
        "column": 0
      },
      "context": "owner->get_x(), owner->get_y(), power,"
    },
    {
      "caller_function": "h",
      "called_function": "register_object",
      "location": {
        "file": "src/BomberComponents.cpp",
        "line": 244,
        "column": 0
      },
      "context": "context->register_object(thrown_bomb); // MODERN: Use GameContext for object registration"
    },
    {
      "caller_function": "h",
      "called_function": "inc_current_bombs",
      "location": {
        "file": "src/BomberComponents.cpp",
        "line": 247,
        "column": 0
      },
      "context": "inc_current_bombs();"
    },
    {
      "caller_function": "h",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/BomberComponents.cpp",
        "line": 250,
        "column": 0
      },
      "context": "SDL_Log(\"BomberCombatComponent: Threw bomb from (%d,%d) with power %d\","
    },
    {
      "caller_function": "h",
      "called_function": "from",
      "location": {
        "file": "src/BomberComponents.cpp",
        "line": 250,
        "column": 0
      },
      "context": "SDL_Log(\"BomberCombatComponent: Threw bomb from (%d,%d) with power %d\","
    },
    {
      "caller_function": "h",
      "called_function": "get_x",
      "location": {
        "file": "src/BomberComponents.cpp",
        "line": 251,
        "column": 0
      },
      "context": "owner->get_x(), owner->get_y(), power);"
    },
    {
      "caller_function": "h",
      "called_function": "get_y",
      "location": {
        "file": "src/BomberComponents.cpp",
        "line": 251,
        "column": 0
      },
      "context": "owner->get_x(), owner->get_y(), power);"
    },
    {
      "caller_function": "h",
      "called_function": "BomberCombatComponent::can_place_bomb",
      "location": {
        "file": "src/BomberComponents.cpp",
        "line": 254,
        "column": 0
      },
      "context": "bool BomberCombatComponent::can_place_bomb() const {"
    },
    {
      "caller_function": "h",
      "called_function": "can_place_bomb",
      "location": {
        "file": "src/BomberComponents.cpp",
        "line": 254,
        "column": 0
      },
      "context": "bool BomberCombatComponent::can_place_bomb() const {"
    },
    {
      "caller_function": "e",
      "called_function": "BomberCorpse",
      "location": {
        "file": "src/BomberComponents.cpp",
        "line": 265,
        "column": 0
      },
      "context": "BomberCorpse* corpse = new BomberCorpse(owner->get_x(), owner->get_y(), bomber->get_color(), context"
    },
    {
      "caller_function": "e",
      "called_function": "get_x",
      "location": {
        "file": "src/BomberComponents.cpp",
        "line": 265,
        "column": 0
      },
      "context": "BomberCorpse* corpse = new BomberCorpse(owner->get_x(), owner->get_y(), bomber->get_color(), context"
    },
    {
      "caller_function": "e",
      "called_function": "get_y",
      "location": {
        "file": "src/BomberComponents.cpp",
        "line": 265,
        "column": 0
      },
      "context": "BomberCorpse* corpse = new BomberCorpse(owner->get_x(), owner->get_y(), bomber->get_color(), context"
    },
    {
      "caller_function": "e",
      "called_function": "get_color",
      "location": {
        "file": "src/BomberComponents.cpp",
        "line": 265,
        "column": 0
      },
      "context": "BomberCorpse* corpse = new BomberCorpse(owner->get_x(), owner->get_y(), bomber->get_color(), context"
    },
    {
      "caller_function": "e",
      "called_function": "register_object",
      "location": {
        "file": "src/BomberComponents.cpp",
        "line": 266,
        "column": 0
      },
      "context": "context->register_object(corpse); // MODERN: Use GameContext for object registration"
    },
    {
      "caller_function": "e",
      "called_function": "death_pos",
      "location": {
        "file": "src/BomberComponents.cpp",
        "line": 269,
        "column": 0
      },
      "context": "AudioPosition death_pos(owner->get_x(), owner->get_y(), 0.0f);"
    },
    {
      "caller_function": "e",
      "called_function": "get_x",
      "location": {
        "file": "src/BomberComponents.cpp",
        "line": 269,
        "column": 0
      },
      "context": "AudioPosition death_pos(owner->get_x(), owner->get_y(), 0.0f);"
    },
    {
      "caller_function": "e",
      "called_function": "get_y",
      "location": {
        "file": "src/BomberComponents.cpp",
        "line": 269,
        "column": 0
      },
      "context": "AudioPosition death_pos(owner->get_x(), owner->get_y(), 0.0f);"
    },
    {
      "caller_function": "e",
      "called_function": "AudioMixer::play_sound_3d",
      "location": {
        "file": "src/BomberComponents.cpp",
        "line": 270,
        "column": 0
      },
      "context": "AudioMixer::play_sound_3d(\"die\", death_pos, 600.0f);"
    },
    {
      "caller_function": "e",
      "called_function": "play_sound_3d",
      "location": {
        "file": "src/BomberComponents.cpp",
        "line": 270,
        "column": 0
      },
      "context": "AudioMixer::play_sound_3d(\"die\", death_pos, 600.0f);"
    },
    {
      "caller_function": "e",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/BomberComponents.cpp",
        "line": 272,
        "column": 0
      },
      "context": "SDL_Log(\"BomberCombatComponent: Bomber died at (%d,%d)\", owner->get_x(), owner->get_y());"
    },
    {
      "caller_function": "e",
      "called_function": "get_x",
      "location": {
        "file": "src/BomberComponents.cpp",
        "line": 272,
        "column": 0
      },
      "context": "SDL_Log(\"BomberCombatComponent: Bomber died at (%d,%d)\", owner->get_x(), owner->get_y());"
    },
    {
      "caller_function": "e",
      "called_function": "get_y",
      "location": {
        "file": "src/BomberComponents.cpp",
        "line": 272,
        "column": 0
      },
      "context": "SDL_Log(\"BomberCombatComponent: Bomber died at (%d,%d)\", owner->get_x(), owner->get_y());"
    },
    {
      "caller_function": "f",
      "called_function": "BomberCombatComponent::can_ignore_bomb_collision",
      "location": {
        "file": "src/BomberComponents.cpp",
        "line": 291,
        "column": 0
      },
      "context": "bool BomberCombatComponent::can_ignore_bomb_collision(Bomb* bomb) const {"
    },
    {
      "caller_function": "f",
      "called_function": "can_ignore_bomb_collision",
      "location": {
        "file": "src/BomberComponents.cpp",
        "line": 291,
        "column": 0
      },
      "context": "bool BomberCombatComponent::can_ignore_bomb_collision(Bomb* bomb) const {"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/BomberComponents.cpp",
        "line": 294,
        "column": 0
      },
      "context": "SDL_Log(\"\ud83d\udd0d BOMB ESCAPE CHECK: standing_on=%p, checking=%p, has_left=%d, result=%d\","
    },
    {
      "caller_function": "s",
      "called_function": "CoordinateSystem::pixel_to_grid",
      "location": {
        "file": "src/BomberComponents.cpp",
        "line": 303,
        "column": 0
      },
      "context": "GridCoord bomber_grid = CoordinateSystem::pixel_to_grid(PixelCoord(owner->get_x(), owner->get_y()));"
    },
    {
      "caller_function": "s",
      "called_function": "pixel_to_grid",
      "location": {
        "file": "src/BomberComponents.cpp",
        "line": 303,
        "column": 0
      },
      "context": "GridCoord bomber_grid = CoordinateSystem::pixel_to_grid(PixelCoord(owner->get_x(), owner->get_y()));"
    },
    {
      "caller_function": "s",
      "called_function": "PixelCoord",
      "location": {
        "file": "src/BomberComponents.cpp",
        "line": 303,
        "column": 0
      },
      "context": "GridCoord bomber_grid = CoordinateSystem::pixel_to_grid(PixelCoord(owner->get_x(), owner->get_y()));"
    },
    {
      "caller_function": "s",
      "called_function": "get_x",
      "location": {
        "file": "src/BomberComponents.cpp",
        "line": 303,
        "column": 0
      },
      "context": "GridCoord bomber_grid = CoordinateSystem::pixel_to_grid(PixelCoord(owner->get_x(), owner->get_y()));"
    },
    {
      "caller_function": "s",
      "called_function": "get_y",
      "location": {
        "file": "src/BomberComponents.cpp",
        "line": 303,
        "column": 0
      },
      "context": "GridCoord bomber_grid = CoordinateSystem::pixel_to_grid(PixelCoord(owner->get_x(), owner->get_y()));"
    },
    {
      "caller_function": "s",
      "called_function": "CoordinateSystem::pixel_to_grid",
      "location": {
        "file": "src/BomberComponents.cpp",
        "line": 304,
        "column": 0
      },
      "context": "GridCoord bomb_grid = CoordinateSystem::pixel_to_grid(PixelCoord(bomb_standing_on->get_x(), bomb_sta"
    },
    {
      "caller_function": "s",
      "called_function": "pixel_to_grid",
      "location": {
        "file": "src/BomberComponents.cpp",
        "line": 304,
        "column": 0
      },
      "context": "GridCoord bomb_grid = CoordinateSystem::pixel_to_grid(PixelCoord(bomb_standing_on->get_x(), bomb_sta"
    },
    {
      "caller_function": "s",
      "called_function": "PixelCoord",
      "location": {
        "file": "src/BomberComponents.cpp",
        "line": 304,
        "column": 0
      },
      "context": "GridCoord bomb_grid = CoordinateSystem::pixel_to_grid(PixelCoord(bomb_standing_on->get_x(), bomb_sta"
    },
    {
      "caller_function": "s",
      "called_function": "get_x",
      "location": {
        "file": "src/BomberComponents.cpp",
        "line": 304,
        "column": 0
      },
      "context": "GridCoord bomb_grid = CoordinateSystem::pixel_to_grid(PixelCoord(bomb_standing_on->get_x(), bomb_sta"
    },
    {
      "caller_function": "s",
      "called_function": "get_y",
      "location": {
        "file": "src/BomberComponents.cpp",
        "line": 304,
        "column": 0
      },
      "context": "GridCoord bomb_grid = CoordinateSystem::pixel_to_grid(PixelCoord(bomb_standing_on->get_x(), bomb_sta"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/BomberComponents.cpp",
        "line": 314,
        "column": 0
      },
      "context": "SDL_Log(\"\ud83c\udfc3 BOMB ESCAPE: Bomber left bomb tile - collision enabled\");"
    },
    {
      "caller_function": "f",
      "called_function": "BomberAnimationComponent::BomberAnimationComponent",
      "location": {
        "file": "src/BomberComponents.cpp",
        "line": 321,
        "column": 0
      },
      "context": "BomberAnimationComponent::BomberAnimationComponent(GameObject* owner, GameContext* context)"
    },
    {
      "caller_function": "f",
      "called_function": "BomberAnimationComponent",
      "location": {
        "file": "src/BomberComponents.cpp",
        "line": 321,
        "column": 0
      },
      "context": "BomberAnimationComponent::BomberAnimationComponent(GameObject* owner, GameContext* context)"
    },
    {
      "caller_function": "f",
      "called_function": "owner",
      "location": {
        "file": "src/BomberComponents.cpp",
        "line": 322,
        "column": 0
      },
      "context": ": owner(owner), context(context) {"
    },
    {
      "caller_function": "f",
      "called_function": "context",
      "location": {
        "file": "src/BomberComponents.cpp",
        "line": 322,
        "column": 0
      },
      "context": ": owner(owner), context(context) {"
    },
    {
      "caller_function": "f",
      "called_function": "set_sprite_nr",
      "location": {
        "file": "src/BomberComponents.cpp",
        "line": 324,
        "column": 0
      },
      "context": "owner->set_sprite_nr(0); // DIR_DOWN * 10 + 0 = standing facing down"
    },
    {
      "caller_function": "f",
      "called_function": "get_x",
      "location": {
        "file": "src/BomberComponents.cpp",
        "line": 330,
        "column": 0
      },
      "context": "last_x = owner->get_x();"
    },
    {
      "caller_function": "f",
      "called_function": "get_y",
      "location": {
        "file": "src/BomberComponents.cpp",
        "line": 331,
        "column": 0
      },
      "context": "last_y = owner->get_y();"
    },
    {
      "caller_function": "f",
      "called_function": "update_invincibility_effects",
      "location": {
        "file": "src/BomberComponents.cpp",
        "line": 338,
        "column": 0
      },
      "context": "update_invincibility_effects(deltaTime);"
    },
    {
      "caller_function": "r",
      "called_function": "choose_texture_for_color",
      "location": {
        "file": "src/BomberComponents.cpp",
        "line": 343,
        "column": 0
      },
      "context": "choose_texture_for_color(color);"
    },
    {
      "caller_function": "f",
      "called_function": "set_sprite_nr",
      "location": {
        "file": "src/BomberComponents.cpp",
        "line": 377,
        "column": 0
      },
      "context": "owner->set_sprite_nr(final_sprite);"
    },
    {
      "caller_function": "h",
      "called_function": "set_sprite_nr",
      "location": {
        "file": "src/BomberComponents.cpp",
        "line": 393,
        "column": 0
      },
      "context": "owner->set_sprite_nr(standing_sprite);"
    },
    {
      "caller_function": "h",
      "called_function": "set_texture_name",
      "location": {
        "file": "src/BomberComponents.cpp",
        "line": 407,
        "column": 0
      },
      "context": "case 0: owner->set_texture_name(\"bomber_dull_red\"); break;"
    },
    {
      "caller_function": "h",
      "called_function": "set_texture_name",
      "location": {
        "file": "src/BomberComponents.cpp",
        "line": 408,
        "column": 0
      },
      "context": "case 1: owner->set_texture_name(\"bomber_dull_blue\"); break;"
    },
    {
      "caller_function": "h",
      "called_function": "set_texture_name",
      "location": {
        "file": "src/BomberComponents.cpp",
        "line": 409,
        "column": 0
      },
      "context": "case 2: owner->set_texture_name(\"bomber_dull_yellow\"); break;"
    },
    {
      "caller_function": "h",
      "called_function": "set_texture_name",
      "location": {
        "file": "src/BomberComponents.cpp",
        "line": 410,
        "column": 0
      },
      "context": "case 3: owner->set_texture_name(\"bomber_dull_green\"); break;"
    },
    {
      "caller_function": "h",
      "called_function": "set_texture_name",
      "location": {
        "file": "src/BomberComponents.cpp",
        "line": 411,
        "column": 0
      },
      "context": "case 4: owner->set_texture_name(\"bomber_snake\"); break;"
    },
    {
      "caller_function": "h",
      "called_function": "set_texture_name",
      "location": {
        "file": "src/BomberComponents.cpp",
        "line": 412,
        "column": 0
      },
      "context": "case 5: owner->set_texture_name(\"bomber_tux\"); break;"
    },
    {
      "caller_function": "h",
      "called_function": "set_texture_name",
      "location": {
        "file": "src/BomberComponents.cpp",
        "line": 413,
        "column": 0
      },
      "context": "case 6: owner->set_texture_name(\"bomber_spider\"); break;"
    },
    {
      "caller_function": "h",
      "called_function": "set_texture_name",
      "location": {
        "file": "src/BomberComponents.cpp",
        "line": 414,
        "column": 0
      },
      "context": "case 7: owner->set_texture_name(\"bomber_bsd\"); break;"
    },
    {
      "caller_function": "h",
      "called_function": "set_texture_name",
      "location": {
        "file": "src/BomberComponents.cpp",
        "line": 415,
        "column": 0
      },
      "context": "default: owner->set_texture_name(\"bomber_snake\"); break;"
    },
    {
      "caller_function": "h",
      "called_function": "BomberLifecycleComponent::BomberLifecycleComponent",
      "location": {
        "file": "src/BomberComponents.cpp",
        "line": 421,
        "column": 0
      },
      "context": "BomberLifecycleComponent::BomberLifecycleComponent(GameObject* owner, GameContext* context)"
    },
    {
      "caller_function": "h",
      "called_function": "BomberLifecycleComponent",
      "location": {
        "file": "src/BomberComponents.cpp",
        "line": 421,
        "column": 0
      },
      "context": "BomberLifecycleComponent::BomberLifecycleComponent(GameObject* owner, GameContext* context)"
    },
    {
      "caller_function": "h",
      "called_function": "owner",
      "location": {
        "file": "src/BomberComponents.cpp",
        "line": 422,
        "column": 0
      },
      "context": ": owner(owner), context(context) {"
    },
    {
      "caller_function": "h",
      "called_function": "context",
      "location": {
        "file": "src/BomberComponents.cpp",
        "line": 422,
        "column": 0
      },
      "context": ": owner(owner), context(context) {"
    },
    {
      "caller_function": "f",
      "called_function": "update_respawn_timer",
      "location": {
        "file": "src/BomberComponents.cpp",
        "line": 427,
        "column": 0
      },
      "context": "update_respawn_timer(deltaTime);"
    },
    {
      "caller_function": "n",
      "called_function": "has_lives",
      "location": {
        "file": "src/BomberComponents.cpp",
        "line": 432,
        "column": 0
      },
      "context": "if (!has_lives()) return;"
    },
    {
      "caller_function": "n",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/BomberComponents.cpp",
        "line": 437,
        "column": 0
      },
      "context": "SDL_Log(\"BomberLifecycleComponent: Starting respawn for %s (%d lives remaining)\","
    },
    {
      "caller_function": "n",
      "called_function": "c_str",
      "location": {
        "file": "src/BomberComponents.cpp",
        "line": 438,
        "column": 0
      },
      "context": "bomber_name.c_str(), remaining_lives);"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/BomberComponents.cpp",
        "line": 447,
        "column": 0
      },
      "context": "SDL_Log(\"BomberLifecycleComponent: Respawn complete for %s\", bomber_name.c_str());"
    },
    {
      "caller_function": "f",
      "called_function": "c_str",
      "location": {
        "file": "src/BomberComponents.cpp",
        "line": 447,
        "column": 0
      },
      "context": "SDL_Log(\"BomberLifecycleComponent: Respawn complete for %s\", bomber_name.c_str());"
    },
    {
      "caller_function": null,
      "called_function": "SpatialGrid::SpatialGrid",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 16,
        "column": 0
      },
      "context": "SpatialGrid::SpatialGrid(int cell_size_pixels)"
    },
    {
      "caller_function": null,
      "called_function": "SpatialGrid",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 16,
        "column": 0
      },
      "context": "SpatialGrid::SpatialGrid(int cell_size_pixels)"
    },
    {
      "caller_function": null,
      "called_function": "cell_size",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 17,
        "column": 0
      },
      "context": ": cell_size(cell_size_pixels) {"
    },
    {
      "caller_function": null,
      "called_function": "SDL_Log",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 18,
        "column": 0
      },
      "context": "SDL_Log(\"SpatialGrid: Initialized with cell_size=%d pixels\", cell_size);"
    },
    {
      "caller_function": "r",
      "called_function": "clear",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 22,
        "column": 0
      },
      "context": "cells.clear();"
    },
    {
      "caller_function": "r",
      "called_function": "clear",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 23,
        "column": 0
      },
      "context": "object_positions.clear();"
    },
    {
      "caller_function": "r",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 24,
        "column": 0
      },
      "context": "SDL_Log(\"SpatialGrid: Cleared all cells and object positions\");"
    },
    {
      "caller_function": "t",
      "called_function": "position",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 30,
        "column": 0
      },
      "context": "PixelCoord position(static_cast<float>(obj->get_x()), static_cast<float>(obj->get_y()));"
    },
    {
      "caller_function": "t",
      "called_function": "get_x",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 30,
        "column": 0
      },
      "context": "PixelCoord position(static_cast<float>(obj->get_x()), static_cast<float>(obj->get_y()));"
    },
    {
      "caller_function": "t",
      "called_function": "get_y",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 30,
        "column": 0
      },
      "context": "PixelCoord position(static_cast<float>(obj->get_x()), static_cast<float>(obj->get_y()));"
    },
    {
      "caller_function": "t",
      "called_function": "pixel_to_grid_coord",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 31,
        "column": 0
      },
      "context": "GridCoord grid_coord = pixel_to_grid_coord(position);"
    },
    {
      "caller_function": "t",
      "called_function": "add_object_to_cell",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 33,
        "column": 0
      },
      "context": "add_object_to_cell(obj, grid_coord);"
    },
    {
      "caller_function": "t",
      "called_function": "find",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 40,
        "column": 0
      },
      "context": "auto it = object_positions.find(obj);"
    },
    {
      "caller_function": "f",
      "called_function": "remove_object_from_cell",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 42,
        "column": 0
      },
      "context": "remove_object_from_cell(obj, it->second);"
    },
    {
      "caller_function": "f",
      "called_function": "erase",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 43,
        "column": 0
      },
      "context": "object_positions.erase(it);"
    },
    {
      "caller_function": "n",
      "called_function": "new_position",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 50,
        "column": 0
      },
      "context": "PixelCoord new_position(static_cast<float>(obj->get_x()), static_cast<float>(obj->get_y()));"
    },
    {
      "caller_function": "n",
      "called_function": "get_x",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 50,
        "column": 0
      },
      "context": "PixelCoord new_position(static_cast<float>(obj->get_x()), static_cast<float>(obj->get_y()));"
    },
    {
      "caller_function": "n",
      "called_function": "get_y",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 50,
        "column": 0
      },
      "context": "PixelCoord new_position(static_cast<float>(obj->get_x()), static_cast<float>(obj->get_y()));"
    },
    {
      "caller_function": "n",
      "called_function": "pixel_to_grid_coord",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 51,
        "column": 0
      },
      "context": "GridCoord old_grid = pixel_to_grid_coord(old_position);"
    },
    {
      "caller_function": "n",
      "called_function": "pixel_to_grid_coord",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 52,
        "column": 0
      },
      "context": "GridCoord new_grid = pixel_to_grid_coord(new_position);"
    },
    {
      "caller_function": "f",
      "called_function": "remove_object_from_cell",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 56,
        "column": 0
      },
      "context": "remove_object_from_cell(obj, old_grid);"
    },
    {
      "caller_function": "f",
      "called_function": "add_object_to_cell",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 57,
        "column": 0
      },
      "context": "add_object_to_cell(obj, new_grid);"
    },
    {
      "caller_function": "s",
      "called_function": "clear",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 63,
        "column": 0
      },
      "context": "clear();"
    },
    {
      "caller_function": "f",
      "called_function": "add_object",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 67,
        "column": 0
      },
      "context": "add_object(obj);"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 71,
        "column": 0
      },
      "context": "SDL_Log(\"SpatialGrid: Rebuilt with %zu objects\", objects.size());"
    },
    {
      "caller_function": "f",
      "called_function": "size",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 71,
        "column": 0
      },
      "context": "SDL_Log(\"SpatialGrid: Rebuilt with %zu objects\", objects.size());"
    },
    {
      "caller_function": "f",
      "called_function": "SpatialGrid::get_objects_at_position",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 74,
        "column": 0
      },
      "context": "std::vector<GameObject*> SpatialGrid::get_objects_at_position(const PixelCoord& position) const {"
    },
    {
      "caller_function": "f",
      "called_function": "get_objects_at_position",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 74,
        "column": 0
      },
      "context": "std::vector<GameObject*> SpatialGrid::get_objects_at_position(const PixelCoord& position) const {"
    },
    {
      "caller_function": "f",
      "called_function": "pixel_to_grid_coord",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 75,
        "column": 0
      },
      "context": "GridCoord grid_coord = pixel_to_grid_coord(position);"
    },
    {
      "caller_function": "f",
      "called_function": "get_cell",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 76,
        "column": 0
      },
      "context": "const SpatialCell* cell = get_cell(grid_coord);"
    },
    {
      "caller_function": "f",
      "called_function": "SpatialGrid::get_objects_of_type_near",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 85,
        "column": 0
      },
      "context": "std::vector<GameObject*> SpatialGrid::get_objects_of_type_near(const PixelCoord& position,"
    },
    {
      "caller_function": "f",
      "called_function": "get_objects_of_type_near",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 85,
        "column": 0
      },
      "context": "std::vector<GameObject*> SpatialGrid::get_objects_of_type_near(const PixelCoord& position,"
    },
    {
      "caller_function": "f",
      "called_function": "pixel_to_grid_coord",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 89,
        "column": 0
      },
      "context": "GridCoord center = pixel_to_grid_coord(position);"
    },
    {
      "caller_function": "f",
      "called_function": "get_cells_in_radius",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 90,
        "column": 0
      },
      "context": "std::vector<GridCoord> cells_to_check = get_cells_in_radius(center, radius);"
    },
    {
      "caller_function": "r",
      "called_function": "get_cell",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 93,
        "column": 0
      },
      "context": "const SpatialCell* cell = get_cell(cell_coord);"
    },
    {
      "caller_function": "f",
      "called_function": "push_back",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 100,
        "column": 0
      },
      "context": "result.push_back(obj);"
    },
    {
      "caller_function": "f",
      "called_function": "SpatialGrid::get_bombers_near",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 108,
        "column": 0
      },
      "context": "std::vector<GameObject*> SpatialGrid::get_bombers_near(const PixelCoord& position, int radius) const"
    },
    {
      "caller_function": "f",
      "called_function": "get_bombers_near",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 108,
        "column": 0
      },
      "context": "std::vector<GameObject*> SpatialGrid::get_bombers_near(const PixelCoord& position, int radius) const"
    },
    {
      "caller_function": "f",
      "called_function": "get_objects_of_type_near",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 109,
        "column": 0
      },
      "context": "return get_objects_of_type_near(position, GameObject::BOMBER, radius);"
    },
    {
      "caller_function": "f",
      "called_function": "SpatialGrid::get_bombs_near",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 112,
        "column": 0
      },
      "context": "std::vector<GameObject*> SpatialGrid::get_bombs_near(const PixelCoord& position, int radius) const {"
    },
    {
      "caller_function": "f",
      "called_function": "get_bombs_near",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 112,
        "column": 0
      },
      "context": "std::vector<GameObject*> SpatialGrid::get_bombs_near(const PixelCoord& position, int radius) const {"
    },
    {
      "caller_function": "f",
      "called_function": "get_objects_of_type_near",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 113,
        "column": 0
      },
      "context": "return get_objects_of_type_near(position, GameObject::BOMB, radius);"
    },
    {
      "caller_function": "f",
      "called_function": "SpatialGrid::get_extras_near",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 116,
        "column": 0
      },
      "context": "std::vector<GameObject*> SpatialGrid::get_extras_near(const PixelCoord& position, int radius) const "
    },
    {
      "caller_function": "f",
      "called_function": "get_extras_near",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 116,
        "column": 0
      },
      "context": "std::vector<GameObject*> SpatialGrid::get_extras_near(const PixelCoord& position, int radius) const "
    },
    {
      "caller_function": "f",
      "called_function": "get_objects_of_type_near",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 117,
        "column": 0
      },
      "context": "return get_objects_of_type_near(position, GameObject::EXTRA, radius);"
    },
    {
      "caller_function": "f",
      "called_function": "SpatialGrid::get_objects_in_area",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 120,
        "column": 0
      },
      "context": "std::vector<GameObject*> SpatialGrid::get_objects_in_area(const PixelCoord& top_left,"
    },
    {
      "caller_function": "f",
      "called_function": "get_objects_in_area",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 120,
        "column": 0
      },
      "context": "std::vector<GameObject*> SpatialGrid::get_objects_in_area(const PixelCoord& top_left,"
    },
    {
      "caller_function": "f",
      "called_function": "get_cells_in_area",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 124,
        "column": 0
      },
      "context": "std::vector<GridCoord> cells_in_area = get_cells_in_area(top_left, bottom_right);"
    },
    {
      "caller_function": "r",
      "called_function": "get_cell",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 127,
        "column": 0
      },
      "context": "const SpatialCell* cell = get_cell(cell_coord);"
    },
    {
      "caller_function": "f",
      "called_function": "get_x",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 135,
        "column": 0
      },
      "context": "float obj_x = static_cast<float>(obj->get_x());"
    },
    {
      "caller_function": "f",
      "called_function": "get_y",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 136,
        "column": 0
      },
      "context": "float obj_y = static_cast<float>(obj->get_y());"
    },
    {
      "caller_function": "f",
      "called_function": "push_back",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 140,
        "column": 0
      },
      "context": "result.push_back(obj);"
    },
    {
      "caller_function": "f",
      "called_function": "SpatialGrid::find_collisions",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 149,
        "column": 0
      },
      "context": "std::vector<GameObject*> SpatialGrid::find_collisions(GameObject* obj,"
    },
    {
      "caller_function": "f",
      "called_function": "find_collisions",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 149,
        "column": 0
      },
      "context": "std::vector<GameObject*> SpatialGrid::find_collisions(GameObject* obj,"
    },
    {
      "caller_function": "f",
      "called_function": "obj_position",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 155,
        "column": 0
      },
      "context": "PixelCoord obj_position(static_cast<float>(obj->get_x()), static_cast<float>(obj->get_y()));"
    },
    {
      "caller_function": "f",
      "called_function": "get_x",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 155,
        "column": 0
      },
      "context": "PixelCoord obj_position(static_cast<float>(obj->get_x()), static_cast<float>(obj->get_y()));"
    },
    {
      "caller_function": "f",
      "called_function": "get_y",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 155,
        "column": 0
      },
      "context": "PixelCoord obj_position(static_cast<float>(obj->get_x()), static_cast<float>(obj->get_y()));"
    },
    {
      "caller_function": "f",
      "called_function": "std::ceil",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 158,
        "column": 0
      },
      "context": "int grid_radius = static_cast<int>(std::ceil(collision_radius / cell_size));"
    },
    {
      "caller_function": "f",
      "called_function": "ceil",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 158,
        "column": 0
      },
      "context": "int grid_radius = static_cast<int>(std::ceil(collision_radius / cell_size));"
    },
    {
      "caller_function": "f",
      "called_function": "get_objects_of_type_near",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 160,
        "column": 0
      },
      "context": "std::vector<GameObject*> nearby_objects = get_objects_of_type_near(obj_position, object_type, grid_r"
    },
    {
      "caller_function": "r",
      "called_function": "get_x",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 166,
        "column": 0
      },
      "context": "float dx = static_cast<float>(obj->get_x() - other->get_x());"
    },
    {
      "caller_function": "r",
      "called_function": "get_x",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 166,
        "column": 0
      },
      "context": "float dx = static_cast<float>(obj->get_x() - other->get_x());"
    },
    {
      "caller_function": "r",
      "called_function": "get_y",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 167,
        "column": 0
      },
      "context": "float dy = static_cast<float>(obj->get_y() - other->get_y());"
    },
    {
      "caller_function": "r",
      "called_function": "get_y",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 167,
        "column": 0
      },
      "context": "float dy = static_cast<float>(obj->get_y() - other->get_y());"
    },
    {
      "caller_function": "r",
      "called_function": "std::sqrt",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 168,
        "column": 0
      },
      "context": "float distance = std::sqrt(dx * dx + dy * dy);"
    },
    {
      "caller_function": "r",
      "called_function": "sqrt",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 168,
        "column": 0
      },
      "context": "float distance = std::sqrt(dx * dx + dy * dy);"
    },
    {
      "caller_function": "f",
      "called_function": "push_back",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 171,
        "column": 0
      },
      "context": "result.push_back(other);"
    },
    {
      "caller_function": "f",
      "called_function": "SpatialGrid::has_object_at_position",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 178,
        "column": 0
      },
      "context": "bool SpatialGrid::has_object_at_position(const PixelCoord& position,"
    },
    {
      "caller_function": "f",
      "called_function": "has_object_at_position",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 178,
        "column": 0
      },
      "context": "bool SpatialGrid::has_object_at_position(const PixelCoord& position,"
    },
    {
      "caller_function": "f",
      "called_function": "get_objects_at_position",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 180,
        "column": 0
      },
      "context": "std::vector<GameObject*> objects = get_objects_at_position(position);"
    },
    {
      "caller_function": "f",
      "called_function": "SpatialGrid::get_statistics",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 193,
        "column": 0
      },
      "context": "SpatialGrid::GridStats SpatialGrid::get_statistics() const {"
    },
    {
      "caller_function": "f",
      "called_function": "get_statistics",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 193,
        "column": 0
      },
      "context": "SpatialGrid::GridStats SpatialGrid::get_statistics() const {"
    },
    {
      "caller_function": "f",
      "called_function": "size",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 195,
        "column": 0
      },
      "context": "stats.total_cells = cells.size();"
    },
    {
      "caller_function": "f",
      "called_function": "size",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 196,
        "column": 0
      },
      "context": "stats.total_objects = object_positions.size();"
    },
    {
      "caller_function": "f",
      "called_function": "std::max",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 205,
        "column": 0
      },
      "context": "max_objects = std::max(max_objects, cell.object_count());"
    },
    {
      "caller_function": "f",
      "called_function": "max",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 205,
        "column": 0
      },
      "context": "max_objects = std::max(max_objects, cell.object_count());"
    },
    {
      "caller_function": "f",
      "called_function": "object_count",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 205,
        "column": 0
      },
      "context": "max_objects = std::max(max_objects, cell.object_count());"
    },
    {
      "caller_function": "f",
      "called_function": "SpatialGrid::print_debug_info",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 223,
        "column": 0
      },
      "context": "void SpatialGrid::print_debug_info() const {"
    },
    {
      "caller_function": "f",
      "called_function": "print_debug_info",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 223,
        "column": 0
      },
      "context": "void SpatialGrid::print_debug_info() const {"
    },
    {
      "caller_function": "f",
      "called_function": "get_statistics",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 224,
        "column": 0
      },
      "context": "GridStats stats = get_statistics();"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 226,
        "column": 0
      },
      "context": "SDL_Log(\"=== SpatialGrid Debug Info ===\");"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 227,
        "column": 0
      },
      "context": "SDL_Log(\"Cell size: %d pixels\", cell_size);"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 228,
        "column": 0
      },
      "context": "SDL_Log(\"Total cells: %zu\", stats.total_cells);"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 229,
        "column": 0
      },
      "context": "SDL_Log(\"Occupied cells: %zu\", stats.occupied_cells);"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 230,
        "column": 0
      },
      "context": "SDL_Log(\"Total objects: %zu\", stats.total_objects);"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 231,
        "column": 0
      },
      "context": "SDL_Log(\"Load factor: %.2f\", stats.load_factor);"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 232,
        "column": 0
      },
      "context": "SDL_Log(\"Average objects per cell: %.2f\", stats.average_objects_per_cell);"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 233,
        "column": 0
      },
      "context": "SDL_Log(\"Max objects in single cell: %zu\", stats.max_objects_in_cell);"
    },
    {
      "caller_function": "f",
      "called_function": "SpatialGrid::visualize_grid",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 236,
        "column": 0
      },
      "context": "std::string SpatialGrid::visualize_grid(int max_width, int max_height) const {"
    },
    {
      "caller_function": "f",
      "called_function": "visualize_grid",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 236,
        "column": 0
      },
      "context": "std::string SpatialGrid::visualize_grid(int max_width, int max_height) const {"
    },
    {
      "caller_function": "f",
      "called_function": "std::min",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 253,
        "column": 0
      },
      "context": "min_x = std::min(min_x, coord.grid_x);"
    },
    {
      "caller_function": "f",
      "called_function": "min",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 253,
        "column": 0
      },
      "context": "min_x = std::min(min_x, coord.grid_x);"
    },
    {
      "caller_function": "f",
      "called_function": "std::max",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 254,
        "column": 0
      },
      "context": "max_x = std::max(max_x, coord.grid_x);"
    },
    {
      "caller_function": "f",
      "called_function": "max",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 254,
        "column": 0
      },
      "context": "max_x = std::max(max_x, coord.grid_x);"
    },
    {
      "caller_function": "f",
      "called_function": "std::min",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 255,
        "column": 0
      },
      "context": "min_y = std::min(min_y, coord.grid_y);"
    },
    {
      "caller_function": "f",
      "called_function": "min",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 255,
        "column": 0
      },
      "context": "min_y = std::min(min_y, coord.grid_y);"
    },
    {
      "caller_function": "f",
      "called_function": "std::max",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 256,
        "column": 0
      },
      "context": "max_y = std::max(max_y, coord.grid_y);"
    },
    {
      "caller_function": "f",
      "called_function": "max",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 256,
        "column": 0
      },
      "context": "max_y = std::max(max_y, coord.grid_y);"
    },
    {
      "caller_function": "f",
      "called_function": "std::min",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 261,
        "column": 0
      },
      "context": "int width = std::min(max_width, max_x - min_x + 1);"
    },
    {
      "caller_function": "f",
      "called_function": "min",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 261,
        "column": 0
      },
      "context": "int width = std::min(max_width, max_x - min_x + 1);"
    },
    {
      "caller_function": "f",
      "called_function": "std::min",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 262,
        "column": 0
      },
      "context": "int height = std::min(max_height, max_y - min_y + 1);"
    },
    {
      "caller_function": "f",
      "called_function": "min",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 262,
        "column": 0
      },
      "context": "int height = std::min(max_height, max_y - min_y + 1);"
    },
    {
      "caller_function": "r",
      "called_function": "coord",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 266,
        "column": 0
      },
      "context": "GridCoord coord(x, y);"
    },
    {
      "caller_function": "r",
      "called_function": "get_cell",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 267,
        "column": 0
      },
      "context": "const SpatialCell* cell = get_cell(coord);"
    },
    {
      "caller_function": "f",
      "called_function": "object_count",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 271,
        "column": 0
      },
      "context": "} else if (cell->object_count() <= 5) {"
    },
    {
      "caller_function": "f",
      "called_function": "str",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 280,
        "column": 0
      },
      "context": "return output.str();"
    },
    {
      "caller_function": "f",
      "called_function": "SpatialGrid::pixel_to_grid_coord",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 285,
        "column": 0
      },
      "context": "GridCoord SpatialGrid::pixel_to_grid_coord(const PixelCoord& position) const {"
    },
    {
      "caller_function": "f",
      "called_function": "pixel_to_grid_coord",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 285,
        "column": 0
      },
      "context": "GridCoord SpatialGrid::pixel_to_grid_coord(const PixelCoord& position) const {"
    },
    {
      "caller_function": "f",
      "called_function": "std::floor",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 286,
        "column": 0
      },
      "context": "int grid_x = static_cast<int>(std::floor(position.pixel_x / cell_size));"
    },
    {
      "caller_function": "f",
      "called_function": "floor",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 286,
        "column": 0
      },
      "context": "int grid_x = static_cast<int>(std::floor(position.pixel_x / cell_size));"
    },
    {
      "caller_function": "f",
      "called_function": "std::floor",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 287,
        "column": 0
      },
      "context": "int grid_y = static_cast<int>(std::floor(position.pixel_y / cell_size));"
    },
    {
      "caller_function": "f",
      "called_function": "floor",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 287,
        "column": 0
      },
      "context": "int grid_y = static_cast<int>(std::floor(position.pixel_y / cell_size));"
    },
    {
      "caller_function": "f",
      "called_function": "GridCoord",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 288,
        "column": 0
      },
      "context": "return GridCoord(grid_x, grid_y);"
    },
    {
      "caller_function": "f",
      "called_function": "SpatialGrid::get_cells_in_radius",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 291,
        "column": 0
      },
      "context": "std::vector<GridCoord> SpatialGrid::get_cells_in_radius(const GridCoord& center, int radius) const {"
    },
    {
      "caller_function": "f",
      "called_function": "get_cells_in_radius",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 291,
        "column": 0
      },
      "context": "std::vector<GridCoord> SpatialGrid::get_cells_in_radius(const GridCoord& center, int radius) const {"
    },
    {
      "caller_function": "r",
      "called_function": "coord",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 296,
        "column": 0
      },
      "context": "GridCoord coord(center.grid_x + dx, center.grid_y + dy);"
    },
    {
      "caller_function": "r",
      "called_function": "push_back",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 297,
        "column": 0
      },
      "context": "result.push_back(coord);"
    },
    {
      "caller_function": "r",
      "called_function": "SpatialGrid::get_cells_in_area",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 304,
        "column": 0
      },
      "context": "std::vector<GridCoord> SpatialGrid::get_cells_in_area(const PixelCoord& top_left,"
    },
    {
      "caller_function": "r",
      "called_function": "get_cells_in_area",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 304,
        "column": 0
      },
      "context": "std::vector<GridCoord> SpatialGrid::get_cells_in_area(const PixelCoord& top_left,"
    },
    {
      "caller_function": "r",
      "called_function": "pixel_to_grid_coord",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 308,
        "column": 0
      },
      "context": "GridCoord top_left_grid = pixel_to_grid_coord(top_left);"
    },
    {
      "caller_function": "r",
      "called_function": "pixel_to_grid_coord",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 309,
        "column": 0
      },
      "context": "GridCoord bottom_right_grid = pixel_to_grid_coord(bottom_right);"
    },
    {
      "caller_function": "r",
      "called_function": "push_back",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 313,
        "column": 0
      },
      "context": "result.push_back(GridCoord(x, y));"
    },
    {
      "caller_function": "r",
      "called_function": "GridCoord",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 313,
        "column": 0
      },
      "context": "result.push_back(GridCoord(x, y));"
    },
    {
      "caller_function": "l",
      "called_function": "SpatialGrid::get_cell",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 324,
        "column": 0
      },
      "context": "const SpatialCell* SpatialGrid::get_cell(const GridCoord& coord) const {"
    },
    {
      "caller_function": "l",
      "called_function": "get_cell",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 324,
        "column": 0
      },
      "context": "const SpatialCell* SpatialGrid::get_cell(const GridCoord& coord) const {"
    },
    {
      "caller_function": "l",
      "called_function": "find",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 325,
        "column": 0
      },
      "context": "auto it = cells.find(coord);"
    },
    {
      "caller_function": "l",
      "called_function": "get_or_create_cell",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 333,
        "column": 0
      },
      "context": "SpatialCell& cell = get_or_create_cell(coord);"
    },
    {
      "caller_function": "l",
      "called_function": "add_object",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 334,
        "column": 0
      },
      "context": "cell.add_object(obj);"
    },
    {
      "caller_function": "l",
      "called_function": "find",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 338,
        "column": 0
      },
      "context": "auto it = cells.find(coord);"
    },
    {
      "caller_function": "f",
      "called_function": "remove_object",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 340,
        "column": 0
      },
      "context": "it->second.remove_object(obj);"
    },
    {
      "caller_function": "f",
      "called_function": "erase",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 344,
        "column": 0
      },
      "context": "cells.erase(it);"
    },
    {
      "caller_function": "r",
      "called_function": "std::ceil",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 355,
        "column": 0
      },
      "context": "int max_radius = static_cast<int>(std::ceil(max_distance / static_cast<float>(TILE_SIZE)));"
    },
    {
      "caller_function": "r",
      "called_function": "ceil",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 355,
        "column": 0
      },
      "context": "int max_radius = static_cast<int>(std::ceil(max_distance / static_cast<float>(TILE_SIZE)));"
    },
    {
      "caller_function": "r",
      "called_function": "get_bombers_near",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 358,
        "column": 0
      },
      "context": "std::vector<GameObject*> bombers = spatial_grid->get_bombers_near(extra_position, radius);"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 366,
        "column": 0
      },
      "context": "SDL_Log(\"CollisionHelper: WARNING - null bomber pointer in SpatialGrid\");"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 372,
        "column": 0
      },
      "context": "SDL_Log(\"CollisionHelper: WARNING - corrupted bomber pointer: %p\", bomber);"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 377,
        "column": 0
      },
      "context": "SDL_Log(\"CollisionHelper: WARNING - delete_me bomber still in SpatialGrid: %p\", bomber);"
    },
    {
      "caller_function": "f",
      "called_function": "get_x",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 382,
        "column": 0
      },
      "context": "float dx = extra_position.pixel_x - static_cast<float>(bomber->get_x());"
    },
    {
      "caller_function": "f",
      "called_function": "get_y",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 383,
        "column": 0
      },
      "context": "float dy = extra_position.pixel_y - static_cast<float>(bomber->get_y());"
    },
    {
      "caller_function": "f",
      "called_function": "std::sqrt",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 384,
        "column": 0
      },
      "context": "float distance = std::sqrt(dx * dx + dy * dy);"
    },
    {
      "caller_function": "f",
      "called_function": "sqrt",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 384,
        "column": 0
      },
      "context": "float distance = std::sqrt(dx * dx + dy * dy);"
    },
    {
      "caller_function": "f",
      "called_function": "catch",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 390,
        "column": 0
      },
      "context": "} catch (...) {"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 391,
        "column": 0
      },
      "context": "SDL_Log(\"CollisionHelper: CRASH PREVENTED - Exception accessing bomber %p\", bomber);"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 406,
        "column": 0
      },
      "context": "SDL_Log(\"CollisionHelper: WARNING - No spatial_grid available for explosion victims\");"
    },
    {
      "caller_function": "r",
      "called_function": "search_coord",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 431,
        "column": 0
      },
      "context": "GridCoord search_coord(grid_coord.grid_x + dx, grid_coord.grid_y + dy);"
    },
    {
      "caller_function": "r",
      "called_function": "CoordinateSystem::grid_to_pixel",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 432,
        "column": 0
      },
      "context": "PixelCoord search_pixel = CoordinateSystem::grid_to_pixel(search_coord);"
    },
    {
      "caller_function": "r",
      "called_function": "grid_to_pixel",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 432,
        "column": 0
      },
      "context": "PixelCoord search_pixel = CoordinateSystem::grid_to_pixel(search_coord);"
    },
    {
      "caller_function": "r",
      "called_function": "get_objects_at_position",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 434,
        "column": 0
      },
      "context": "std::vector<GameObject*> nearby_objects = spatial_grid->get_objects_at_position(search_pixel);"
    },
    {
      "caller_function": "f",
      "called_function": "get_type",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 443,
        "column": 0
      },
      "context": "GameObject::ObjectType obj_type = obj->get_type();"
    },
    {
      "caller_function": "f",
      "called_function": "get_x",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 448,
        "column": 0
      },
      "context": "float bomber_x = static_cast<float>(obj->get_x());"
    },
    {
      "caller_function": "f",
      "called_function": "get_y",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 449,
        "column": 0
      },
      "context": "float bomber_y = static_cast<float>(obj->get_y());"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 459,
        "column": 0
      },
      "context": "SDL_Log(\"\ud83c\udfaf DISCRETE: Bomber(%.1f,%.1f) in tile(%d,%d) vs ExplosionTile(%d,%d)\","
    },
    {
      "caller_function": "f",
      "called_function": "Bomber",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 459,
        "column": 0
      },
      "context": "SDL_Log(\"\ud83c\udfaf DISCRETE: Bomber(%.1f,%.1f) in tile(%d,%d) vs ExplosionTile(%d,%d)\","
    },
    {
      "caller_function": "f",
      "called_function": "tile",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 459,
        "column": 0
      },
      "context": "SDL_Log(\"\ud83c\udfaf DISCRETE: Bomber(%.1f,%.1f) in tile(%d,%d) vs ExplosionTile(%d,%d)\","
    },
    {
      "caller_function": "f",
      "called_function": "ExplosionTile",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 459,
        "column": 0
      },
      "context": "SDL_Log(\"\ud83c\udfaf DISCRETE: Bomber(%.1f,%.1f) in tile(%d,%d) vs ExplosionTile(%d,%d)\","
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 462,
        "column": 0
      },
      "context": "SDL_Log(\"   SAME_TILE=%s\", in_explosion_tile ? \"YES\" : \"NO\");"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 465,
        "column": 0
      },
      "context": "SDL_Log(\"\ud83d\udca5 DEATH: Bomber in tile(%d,%d) killed by explosion in same tile\","
    },
    {
      "caller_function": "f",
      "called_function": "tile",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 465,
        "column": 0
      },
      "context": "SDL_Log(\"\ud83d\udca5 DEATH: Bomber in tile(%d,%d) killed by explosion in same tile\","
    },
    {
      "caller_function": "f",
      "called_function": "insert",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 467,
        "column": 0
      },
      "context": "found_objects.insert(obj);"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 469,
        "column": 0
      },
      "context": "SDL_Log(\"\u2705 SAFE: Bomber in tile(%d,%d) safe from explosion in tile(%d,%d)\","
    },
    {
      "caller_function": "f",
      "called_function": "tile",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 469,
        "column": 0
      },
      "context": "SDL_Log(\"\u2705 SAFE: Bomber in tile(%d,%d) safe from explosion in tile(%d,%d)\","
    },
    {
      "caller_function": "f",
      "called_function": "tile",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 469,
        "column": 0
      },
      "context": "SDL_Log(\"\u2705 SAFE: Bomber in tile(%d,%d) safe from explosion in tile(%d,%d)\","
    },
    {
      "caller_function": "f",
      "called_function": "catch",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 473,
        "column": 0
      },
      "context": "} catch (...) {"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 474,
        "column": 0
      },
      "context": "SDL_Log(\"CollisionHelper: CRASH PREVENTED - Exception accessing object %p\", obj);"
    },
    {
      "caller_function": "f",
      "called_function": "assign",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 483,
        "column": 0
      },
      "context": "victims.assign(found_objects.begin(), found_objects.end());"
    },
    {
      "caller_function": "f",
      "called_function": "begin",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 483,
        "column": 0
      },
      "context": "victims.assign(found_objects.begin(), found_objects.end());"
    },
    {
      "caller_function": "f",
      "called_function": "end",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 483,
        "column": 0
      },
      "context": "victims.assign(found_objects.begin(), found_objects.end());"
    },
    {
      "caller_function": "s",
      "called_function": "get_objects_of_type_near",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 494,
        "column": 0
      },
      "context": "std::vector<GameObject*> all_objects = spatial_grid->get_objects_of_type_near("
    },
    {
      "caller_function": "h",
      "called_function": "push_back",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 502,
        "column": 0
      },
      "context": "targets.enemy_bombers.push_back(obj);"
    },
    {
      "caller_function": "h",
      "called_function": "push_back",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 505,
        "column": 0
      },
      "context": "targets.bombs.push_back(obj);"
    },
    {
      "caller_function": "h",
      "called_function": "push_back",
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 508,
        "column": 0
      },
      "context": "targets.extras.push_back(obj);"
    },
    {
      "caller_function": null,
      "called_function": "GameObject::objecttype2string",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 48,
        "column": 0
      },
      "context": "const char* GameObject::objecttype2string(ObjectType t)"
    },
    {
      "caller_function": null,
      "called_function": "objecttype2string",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 48,
        "column": 0
      },
      "context": "const char* GameObject::objecttype2string(ObjectType t)"
    },
    {
      "caller_function": "h",
      "called_function": "GameObject::GameObject",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 70,
        "column": 0
      },
      "context": "GameObject::GameObject( int _x, int _y, GameContext* context )"
    },
    {
      "caller_function": "h",
      "called_function": "GameObject",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 70,
        "column": 0
      },
      "context": "GameObject::GameObject( int _x, int _y, GameContext* context )"
    },
    {
      "caller_function": "f",
      "called_function": "ClanBomberApplication::get_next_object_id",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 105,
        "column": 0
      },
      "context": "object_id = ClanBomberApplication::get_next_object_id();"
    },
    {
      "caller_function": "f",
      "called_function": "get_next_object_id",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 105,
        "column": 0
      },
      "context": "object_id = ClanBomberApplication::get_next_object_id();"
    },
    {
      "caller_function": "f",
      "called_function": "reset_next_fly_job",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 115,
        "column": 0
      },
      "context": "reset_next_fly_job();"
    },
    {
      "caller_function": "f",
      "called_function": "GameObject::get_context",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 121,
        "column": 0
      },
      "context": "GameContext* GameObject::get_context() const"
    },
    {
      "caller_function": "f",
      "called_function": "get_context",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 121,
        "column": 0
      },
      "context": "GameContext* GameObject::get_context() const"
    },
    {
      "caller_function": "f",
      "called_function": "GameObject",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 127,
        "column": 0
      },
      "context": "GameObject::~GameObject()"
    },
    {
      "caller_function": "f",
      "called_function": "GameObject::get_object_id",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 131,
        "column": 0
      },
      "context": "int GameObject::get_object_id()"
    },
    {
      "caller_function": "f",
      "called_function": "get_object_id",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 131,
        "column": 0
      },
      "context": "int GameObject::get_object_id()"
    },
    {
      "caller_function": "f",
      "called_function": "GameObject::set_object_id",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 136,
        "column": 0
      },
      "context": "void GameObject::set_object_id(int obj_id)"
    },
    {
      "caller_function": "f",
      "called_function": "set_object_id",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 136,
        "column": 0
      },
      "context": "void GameObject::set_object_id(int obj_id)"
    },
    {
      "caller_function": "f",
      "called_function": "GameObject::get_server_x",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 141,
        "column": 0
      },
      "context": "int GameObject::get_server_x()"
    },
    {
      "caller_function": "f",
      "called_function": "get_server_x",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 141,
        "column": 0
      },
      "context": "int GameObject::get_server_x()"
    },
    {
      "caller_function": "f",
      "called_function": "GameObject::get_server_y",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 146,
        "column": 0
      },
      "context": "int GameObject::get_server_y()"
    },
    {
      "caller_function": "f",
      "called_function": "get_server_y",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 146,
        "column": 0
      },
      "context": "int GameObject::get_server_y()"
    },
    {
      "caller_function": "f",
      "called_function": "GameObject::get_orig_x",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 151,
        "column": 0
      },
      "context": "int GameObject::get_orig_x()"
    },
    {
      "caller_function": "f",
      "called_function": "get_orig_x",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 151,
        "column": 0
      },
      "context": "int GameObject::get_orig_x()"
    },
    {
      "caller_function": "f",
      "called_function": "GameObject::get_orig_y",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 156,
        "column": 0
      },
      "context": "int GameObject::get_orig_y()"
    },
    {
      "caller_function": "f",
      "called_function": "get_orig_y",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 156,
        "column": 0
      },
      "context": "int GameObject::get_orig_y()"
    },
    {
      "caller_function": "f",
      "called_function": "GameObject::get_server_dir",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 161,
        "column": 0
      },
      "context": "Direction GameObject::get_server_dir()"
    },
    {
      "caller_function": "f",
      "called_function": "get_server_dir",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 161,
        "column": 0
      },
      "context": "Direction GameObject::get_server_dir()"
    },
    {
      "caller_function": "f",
      "called_function": "GameObject::get_client_dir",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 166,
        "column": 0
      },
      "context": "Direction GameObject::get_client_dir()"
    },
    {
      "caller_function": "f",
      "called_function": "get_client_dir",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 166,
        "column": 0
      },
      "context": "Direction GameObject::get_client_dir()"
    },
    {
      "caller_function": "f",
      "called_function": "GameObject::set_server_x",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 171,
        "column": 0
      },
      "context": "void GameObject::set_server_x(int sx)"
    },
    {
      "caller_function": "f",
      "called_function": "set_server_x",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 171,
        "column": 0
      },
      "context": "void GameObject::set_server_x(int sx)"
    },
    {
      "caller_function": "f",
      "called_function": "GameObject::set_server_y",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 176,
        "column": 0
      },
      "context": "void GameObject::set_server_y(int sy)"
    },
    {
      "caller_function": "f",
      "called_function": "set_server_y",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 176,
        "column": 0
      },
      "context": "void GameObject::set_server_y(int sy)"
    },
    {
      "caller_function": "f",
      "called_function": "GameObject::set_server_dir",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 181,
        "column": 0
      },
      "context": "void GameObject::set_server_dir(int sd)"
    },
    {
      "caller_function": "f",
      "called_function": "set_server_dir",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 181,
        "column": 0
      },
      "context": "void GameObject::set_server_dir(int sd)"
    },
    {
      "caller_function": "f",
      "called_function": "GameObject::set_client_dir",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 186,
        "column": 0
      },
      "context": "void GameObject::set_client_dir(int cd)"
    },
    {
      "caller_function": "f",
      "called_function": "set_client_dir",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 186,
        "column": 0
      },
      "context": "void GameObject::set_client_dir(int cd)"
    },
    {
      "caller_function": "f",
      "called_function": "GameObject::set_local_dir",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 191,
        "column": 0
      },
      "context": "void GameObject::set_local_dir(int ld)"
    },
    {
      "caller_function": "f",
      "called_function": "set_local_dir",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 191,
        "column": 0
      },
      "context": "void GameObject::set_local_dir(int ld)"
    },
    {
      "caller_function": "f",
      "called_function": "GameObject::set_cur_dir",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 196,
        "column": 0
      },
      "context": "void GameObject::set_cur_dir(int cd)"
    },
    {
      "caller_function": "f",
      "called_function": "set_cur_dir",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 196,
        "column": 0
      },
      "context": "void GameObject::set_cur_dir(int cd)"
    },
    {
      "caller_function": "f",
      "called_function": "GameObject::set_offset",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 201,
        "column": 0
      },
      "context": "void GameObject::set_offset(int _x, int _y)"
    },
    {
      "caller_function": "f",
      "called_function": "set_offset",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 201,
        "column": 0
      },
      "context": "void GameObject::set_offset(int _x, int _y)"
    },
    {
      "caller_function": "d",
      "called_function": "get_context",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 213,
        "column": 0
      },
      "context": "GameContext* context = get_context();"
    },
    {
      "caller_function": "f",
      "called_function": "blocked",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 215,
        "column": 0
      },
      "context": "return false; // If no context, consider not blocked (defensive)"
    },
    {
      "caller_function": "f",
      "called_function": "CoordinateSystem::pixel_to_grid",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 226,
        "column": 0
      },
      "context": "GridCoord grid_top_left = CoordinateSystem::pixel_to_grid(PixelCoord(bbox_left, bbox_top));"
    },
    {
      "caller_function": "f",
      "called_function": "pixel_to_grid",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 226,
        "column": 0
      },
      "context": "GridCoord grid_top_left = CoordinateSystem::pixel_to_grid(PixelCoord(bbox_left, bbox_top));"
    },
    {
      "caller_function": "f",
      "called_function": "PixelCoord",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 226,
        "column": 0
      },
      "context": "GridCoord grid_top_left = CoordinateSystem::pixel_to_grid(PixelCoord(bbox_left, bbox_top));"
    },
    {
      "caller_function": "f",
      "called_function": "CoordinateSystem::pixel_to_grid",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 227,
        "column": 0
      },
      "context": "GridCoord grid_bottom_right = CoordinateSystem::pixel_to_grid(PixelCoord(bbox_right, bbox_bottom));"
    },
    {
      "caller_function": "f",
      "called_function": "pixel_to_grid",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 227,
        "column": 0
      },
      "context": "GridCoord grid_bottom_right = CoordinateSystem::pixel_to_grid(PixelCoord(bbox_right, bbox_bottom));"
    },
    {
      "caller_function": "f",
      "called_function": "PixelCoord",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 227,
        "column": 0
      },
      "context": "GridCoord grid_bottom_right = CoordinateSystem::pixel_to_grid(PixelCoord(bbox_right, bbox_bottom));"
    },
    {
      "caller_function": "f",
      "called_function": "get_map",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 236,
        "column": 0
      },
      "context": "Map* map = context->get_map();"
    },
    {
      "caller_function": "r",
      "called_function": "get_tile",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 240,
        "column": 0
      },
      "context": "MapTile* tile = map->get_tile(mx, my);"
    },
    {
      "caller_function": "f",
      "called_function": "CoordinateSystem::pixel_to_grid",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 263,
        "column": 0
      },
      "context": "GridCoord current_top_left = CoordinateSystem::pixel_to_grid(PixelCoord(current_left, current_top));"
    },
    {
      "caller_function": "f",
      "called_function": "pixel_to_grid",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 263,
        "column": 0
      },
      "context": "GridCoord current_top_left = CoordinateSystem::pixel_to_grid(PixelCoord(current_left, current_top));"
    },
    {
      "caller_function": "f",
      "called_function": "PixelCoord",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 263,
        "column": 0
      },
      "context": "GridCoord current_top_left = CoordinateSystem::pixel_to_grid(PixelCoord(current_left, current_top));"
    },
    {
      "caller_function": "f",
      "called_function": "CoordinateSystem::pixel_to_grid",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 264,
        "column": 0
      },
      "context": "GridCoord current_bottom_right = CoordinateSystem::pixel_to_grid(PixelCoord(current_right, current_b"
    },
    {
      "caller_function": "f",
      "called_function": "pixel_to_grid",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 264,
        "column": 0
      },
      "context": "GridCoord current_bottom_right = CoordinateSystem::pixel_to_grid(PixelCoord(current_right, current_b"
    },
    {
      "caller_function": "f",
      "called_function": "PixelCoord",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 264,
        "column": 0
      },
      "context": "GridCoord current_bottom_right = CoordinateSystem::pixel_to_grid(PixelCoord(current_right, current_b"
    },
    {
      "caller_function": "r",
      "called_function": "insert",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 269,
        "column": 0
      },
      "context": "current_tiles.insert(my * 1000 + mx); // Simple hash for tile coordinates"
    },
    {
      "caller_function": "r",
      "called_function": "position",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 274,
        "column": 0
      },
      "context": "PixelCoord position(check_x, check_y);"
    },
    {
      "caller_function": "r",
      "called_function": "get_spatial_grid",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 275,
        "column": 0
      },
      "context": "auto bombs = context->get_spatial_grid()->get_objects_of_type_near(position, GameObject::BOMB, 1);"
    },
    {
      "caller_function": "r",
      "called_function": "get_objects_of_type_near",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 275,
        "column": 0
      },
      "context": "auto bombs = context->get_spatial_grid()->get_objects_of_type_near(position, GameObject::BOMB, 1);"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 285,
        "column": 0
      },
      "context": "SDL_Log(\"\ud83c\udfaf BOMB ESCAPE: Ignoring collision - bomber on top of placed bomb at (%d,%d)\", bomb_obj->get"
    },
    {
      "caller_function": "f",
      "called_function": "get_x",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 285,
        "column": 0
      },
      "context": "SDL_Log(\"\ud83c\udfaf BOMB ESCAPE: Ignoring collision - bomber on top of placed bomb at (%d,%d)\", bomb_obj->get"
    },
    {
      "caller_function": "f",
      "called_function": "get_y",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 285,
        "column": 0
      },
      "context": "SDL_Log(\"\ud83c\udfaf BOMB ESCAPE: Ignoring collision - bomber on top of placed bomb at (%d,%d)\", bomb_obj->get"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 287,
        "column": 0
      },
      "context": "SDL_Log(\"\u26a0\ufe0f  BOMB COLLISION ENABLED: Bomber at (%d,%d), bomb at (%d,%d)\", (int)check_x, (int)check_y"
    },
    {
      "caller_function": "f",
      "called_function": "get_x",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 287,
        "column": 0
      },
      "context": "SDL_Log(\"\u26a0\ufe0f  BOMB COLLISION ENABLED: Bomber at (%d,%d), bomb at (%d,%d)\", (int)check_x, (int)check_y"
    },
    {
      "caller_function": "f",
      "called_function": "get_y",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 287,
        "column": 0
      },
      "context": "SDL_Log(\"\u26a0\ufe0f  BOMB COLLISION ENABLED: Bomber at (%d,%d), bomb at (%d,%d)\", (int)check_x, (int)check_y"
    },
    {
      "caller_function": "f",
      "called_function": "CoordinateSystem::pixel_to_grid",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 293,
        "column": 0
      },
      "context": "GridCoord bomber_grid = CoordinateSystem::pixel_to_grid(PixelCoord(check_x, check_y));"
    },
    {
      "caller_function": "f",
      "called_function": "pixel_to_grid",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 293,
        "column": 0
      },
      "context": "GridCoord bomber_grid = CoordinateSystem::pixel_to_grid(PixelCoord(check_x, check_y));"
    },
    {
      "caller_function": "f",
      "called_function": "PixelCoord",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 293,
        "column": 0
      },
      "context": "GridCoord bomber_grid = CoordinateSystem::pixel_to_grid(PixelCoord(check_x, check_y));"
    },
    {
      "caller_function": "f",
      "called_function": "CoordinateSystem::pixel_to_grid",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 294,
        "column": 0
      },
      "context": "GridCoord bomb_grid = CoordinateSystem::pixel_to_grid(PixelCoord(bomb_obj->get_x(), bomb_obj->get_y("
    },
    {
      "caller_function": "f",
      "called_function": "pixel_to_grid",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 294,
        "column": 0
      },
      "context": "GridCoord bomb_grid = CoordinateSystem::pixel_to_grid(PixelCoord(bomb_obj->get_x(), bomb_obj->get_y("
    },
    {
      "caller_function": "f",
      "called_function": "PixelCoord",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 294,
        "column": 0
      },
      "context": "GridCoord bomb_grid = CoordinateSystem::pixel_to_grid(PixelCoord(bomb_obj->get_x(), bomb_obj->get_y("
    },
    {
      "caller_function": "f",
      "called_function": "get_x",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 294,
        "column": 0
      },
      "context": "GridCoord bomb_grid = CoordinateSystem::pixel_to_grid(PixelCoord(bomb_obj->get_x(), bomb_obj->get_y("
    },
    {
      "caller_function": "f",
      "called_function": "get_y",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 294,
        "column": 0
      },
      "context": "GridCoord bomb_grid = CoordinateSystem::pixel_to_grid(PixelCoord(bomb_obj->get_x(), bomb_obj->get_y("
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 301,
        "column": 0
      },
      "context": "SDL_Log(\"\ud83d\udeab BOMB COLLISION: Bomber at tile (%d,%d) blocked by bomb at tile (%d,%d)\","
    },
    {
      "caller_function": "f",
      "called_function": "tile",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 301,
        "column": 0
      },
      "context": "SDL_Log(\"\ud83d\udeab BOMB COLLISION: Bomber at tile (%d,%d) blocked by bomb at tile (%d,%d)\","
    },
    {
      "caller_function": "f",
      "called_function": "tile",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 301,
        "column": 0
      },
      "context": "SDL_Log(\"\ud83d\udeab BOMB COLLISION: Bomber at tile (%d,%d) blocked by bomb at tile (%d,%d)\","
    },
    {
      "caller_function": "f",
      "called_function": "get_spatial_grid",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 311,
        "column": 0
      },
      "context": "auto bombers = context->get_spatial_grid()->get_objects_of_type_near(position, GameObject::BOMBER, 1"
    },
    {
      "caller_function": "f",
      "called_function": "get_objects_of_type_near",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 311,
        "column": 0
      },
      "context": "auto bombers = context->get_spatial_grid()->get_objects_of_type_near(position, GameObject::BOMBER, 1"
    },
    {
      "caller_function": "f",
      "called_function": "CoordinateSystem::pixel_to_grid",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 314,
        "column": 0
      },
      "context": "GridCoord bomber_grid = CoordinateSystem::pixel_to_grid(PixelCoord(bomber_obj->get_x(), bomber_obj->"
    },
    {
      "caller_function": "f",
      "called_function": "pixel_to_grid",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 314,
        "column": 0
      },
      "context": "GridCoord bomber_grid = CoordinateSystem::pixel_to_grid(PixelCoord(bomber_obj->get_x(), bomber_obj->"
    },
    {
      "caller_function": "f",
      "called_function": "PixelCoord",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 314,
        "column": 0
      },
      "context": "GridCoord bomber_grid = CoordinateSystem::pixel_to_grid(PixelCoord(bomber_obj->get_x(), bomber_obj->"
    },
    {
      "caller_function": "f",
      "called_function": "get_x",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 314,
        "column": 0
      },
      "context": "GridCoord bomber_grid = CoordinateSystem::pixel_to_grid(PixelCoord(bomber_obj->get_x(), bomber_obj->"
    },
    {
      "caller_function": "f",
      "called_function": "get_y",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 314,
        "column": 0
      },
      "context": "GridCoord bomber_grid = CoordinateSystem::pixel_to_grid(PixelCoord(bomber_obj->get_x(), bomber_obj->"
    },
    {
      "caller_function": "h",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 354,
        "column": 0
      },
      "context": "SDL_Log(\"\ud83d\udeab MOVE: Invalid direction %d\", (int)dir);"
    },
    {
      "caller_function": "h",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 361,
        "column": 0
      },
      "context": "SDL_Log(\"\ud83c\udfaf MOVE: Target position (%.1f,%.1f)\", next_x, next_y);"
    },
    {
      "caller_function": "h",
      "called_function": "position",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 361,
        "column": 0
      },
      "context": "SDL_Log(\"\ud83c\udfaf MOVE: Target position (%.1f,%.1f)\", next_x, next_y);"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 365,
        "column": 0
      },
      "context": "SDL_Log(\"\u2705 MOVE: Direct path clear - moving to (%.1f,%.1f)\", next_x, next_y);"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 370,
        "column": 0
      },
      "context": "SDL_Log(\"\ud83d\udeab MOVE: Direct path blocked - trying partial movement\");"
    },
    {
      "caller_function": "f",
      "called_function": "get_context",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 421,
        "column": 0
      },
      "context": "GameContext* context = get_context();"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 423,
        "column": 0
      },
      "context": "SDL_Log(\"SPATIAL DEBUG: Updating object type=%d position from (%.1f,%.1f) to (%.1f,%.1f)\","
    },
    {
      "caller_function": "f",
      "called_function": "from",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 423,
        "column": 0
      },
      "context": "SDL_Log(\"SPATIAL DEBUG: Updating object type=%d position from (%.1f,%.1f) to (%.1f,%.1f)\","
    },
    {
      "caller_function": "f",
      "called_function": "get_type",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 424,
        "column": 0
      },
      "context": "get_type(), old_x, old_y, x, y);"
    },
    {
      "caller_function": "f",
      "called_function": "update_object_position_in_spatial_grid",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 425,
        "column": 0
      },
      "context": "context->update_object_position_in_spatial_grid(this, old_x, old_y);"
    },
    {
      "caller_function": "f",
      "called_function": "GameObject::move",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 434,
        "column": 0
      },
      "context": "bool GameObject::move(float deltaTime)"
    },
    {
      "caller_function": "f",
      "called_function": "move",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 434,
        "column": 0
      },
      "context": "bool GameObject::move(float deltaTime)"
    },
    {
      "caller_function": "f",
      "called_function": "stop",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 443,
        "column": 0
      },
      "context": "stop();"
    },
    {
      "caller_function": "f",
      "called_function": "GameObject::act",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 450,
        "column": 0
      },
      "context": "void GameObject::act(float deltaTime)"
    },
    {
      "caller_function": "f",
      "called_function": "act",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 450,
        "column": 0
      },
      "context": "void GameObject::act(float deltaTime)"
    },
    {
      "caller_function": "f",
      "called_function": "continue_flying",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 454,
        "column": 0
      },
      "context": "continue_flying(deltaTime);"
    },
    {
      "caller_function": "f",
      "called_function": "fly_to",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 464,
        "column": 0
      },
      "context": "fly_to(next_fly_job[0], next_fly_job[1], next_fly_job[2]);"
    },
    {
      "caller_function": "f",
      "called_function": "reset_next_fly_job",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 465,
        "column": 0
      },
      "context": "reset_next_fly_job();"
    },
    {
      "caller_function": "f",
      "called_function": "continue_falling",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 469,
        "column": 0
      },
      "context": "continue_falling(deltaTime);"
    },
    {
      "caller_function": "f",
      "called_function": "GameObject::fly_to",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 473,
        "column": 0
      },
      "context": "void GameObject::fly_to (int _x, int _y, int _speed)"
    },
    {
      "caller_function": "f",
      "called_function": "fly_to",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 473,
        "column": 0
      },
      "context": "void GameObject::fly_to (int _x, int _y, int _speed)"
    },
    {
      "caller_function": "f",
      "called_function": "sqrt",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 487,
        "column": 0
      },
      "context": "fly_speed /= sqrt( fly_dist_x*fly_dist_x + fly_dist_y*fly_dist_y );"
    },
    {
      "caller_function": "f",
      "called_function": "ClanBomberApplication::get_server",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 491,
        "column": 0
      },
      "context": "ClanBomberApplication::get_server()->send_SERVER_OBSERVER_FLY(_x, _y, send_speed);"
    },
    {
      "caller_function": "f",
      "called_function": "get_server",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 491,
        "column": 0
      },
      "context": "ClanBomberApplication::get_server()->send_SERVER_OBSERVER_FLY(_x, _y, send_speed);"
    },
    {
      "caller_function": "f",
      "called_function": "send_SERVER_OBSERVER_FLY",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 491,
        "column": 0
      },
      "context": "ClanBomberApplication::get_server()->send_SERVER_OBSERVER_FLY(_x, _y, send_speed);"
    },
    {
      "caller_function": "f",
      "called_function": "ClanBomberApplication::get_server",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 494,
        "column": 0
      },
      "context": "ClanBomberApplication::get_server()->send_SERVER_OBJECT_FLY(_x, _y, send_speed, can_fly_over_walls, "
    },
    {
      "caller_function": "f",
      "called_function": "get_server",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 494,
        "column": 0
      },
      "context": "ClanBomberApplication::get_server()->send_SERVER_OBJECT_FLY(_x, _y, send_speed, can_fly_over_walls, "
    },
    {
      "caller_function": "f",
      "called_function": "send_SERVER_OBJECT_FLY",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 494,
        "column": 0
      },
      "context": "ClanBomberApplication::get_server()->send_SERVER_OBJECT_FLY(_x, _y, send_speed, can_fly_over_walls, "
    },
    {
      "caller_function": "f",
      "called_function": "GameObject::fly_to",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 505,
        "column": 0
      },
      "context": "void GameObject::fly_to (MapTile *maptile, int _speed)"
    },
    {
      "caller_function": "f",
      "called_function": "fly_to",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 505,
        "column": 0
      },
      "context": "void GameObject::fly_to (MapTile *maptile, int _speed)"
    },
    {
      "caller_function": "f",
      "called_function": "fly_to",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 508,
        "column": 0
      },
      "context": "fly_to( maptile->get_x(), maptile->get_y(), _speed );"
    },
    {
      "caller_function": "f",
      "called_function": "get_x",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 508,
        "column": 0
      },
      "context": "fly_to( maptile->get_x(), maptile->get_y(), _speed );"
    },
    {
      "caller_function": "f",
      "called_function": "get_y",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 508,
        "column": 0
      },
      "context": "fly_to( maptile->get_x(), maptile->get_y(), _speed );"
    },
    {
      "caller_function": "f",
      "called_function": "GameObject::continue_flying",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 512,
        "column": 0
      },
      "context": "void GameObject::continue_flying(float deltaTime)"
    },
    {
      "caller_function": "f",
      "called_function": "continue_flying",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 512,
        "column": 0
      },
      "context": "void GameObject::continue_flying(float deltaTime)"
    },
    {
      "caller_function": "e",
      "called_function": "get_context",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 530,
        "column": 0
      },
      "context": "GameContext* context = get_context();"
    },
    {
      "caller_function": "e",
      "called_function": "get_map",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 531,
        "column": 0
      },
      "context": "Map* map = context ? context->get_map() : nullptr;"
    },
    {
      "caller_function": "f",
      "called_function": "get_tile_type_at",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 544,
        "column": 0
      },
      "context": "get_tile_type_at(x, y) == MapTile::WALL ||"
    },
    {
      "caller_function": "f",
      "called_function": "get_tile_type_at",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 545,
        "column": 0
      },
      "context": "get_tile_type_at(x+39, y) == MapTile::WALL ||"
    },
    {
      "caller_function": "f",
      "called_function": "get_tile_type_at",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 546,
        "column": 0
      },
      "context": "get_tile_type_at(x, y+39) == MapTile::WALL ||"
    },
    {
      "caller_function": "f",
      "called_function": "get_tile_type_at",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 547,
        "column": 0
      },
      "context": "get_tile_type_at(x+39, y+39) == MapTile::WALL ))"
    },
    {
      "caller_function": "f",
      "called_function": "GameObject::fall",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 572,
        "column": 0
      },
      "context": "void GameObject::fall()"
    },
    {
      "caller_function": "f",
      "called_function": "fall",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 572,
        "column": 0
      },
      "context": "void GameObject::fall()"
    },
    {
      "caller_function": "f",
      "called_function": "ClanBomberApplication::get_server",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 576,
        "column": 0
      },
      "context": "ClanBomberApplication::get_server()->send_SERVER_OBJECT_FALL(get_object_id());"
    },
    {
      "caller_function": "f",
      "called_function": "get_server",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 576,
        "column": 0
      },
      "context": "ClanBomberApplication::get_server()->send_SERVER_OBJECT_FALL(get_object_id());"
    },
    {
      "caller_function": "f",
      "called_function": "send_SERVER_OBJECT_FALL",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 576,
        "column": 0
      },
      "context": "ClanBomberApplication::get_server()->send_SERVER_OBJECT_FALL(get_object_id());"
    },
    {
      "caller_function": "f",
      "called_function": "get_object_id",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 576,
        "column": 0
      },
      "context": "ClanBomberApplication::get_server()->send_SERVER_OBJECT_FALL(get_object_id());"
    },
    {
      "caller_function": "f",
      "called_function": "GameObject::continue_falling",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 587,
        "column": 0
      },
      "context": "void GameObject::continue_falling(float deltaTime)"
    },
    {
      "caller_function": "f",
      "called_function": "continue_falling",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 587,
        "column": 0
      },
      "context": "void GameObject::continue_falling(float deltaTime)"
    },
    {
      "caller_function": "f",
      "called_function": "GameObject::stop",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 598,
        "column": 0
      },
      "context": "void GameObject::stop(bool by_arrow)"
    },
    {
      "caller_function": "f",
      "called_function": "stop",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 598,
        "column": 0
      },
      "context": "void GameObject::stop(bool by_arrow)"
    },
    {
      "caller_function": "f",
      "called_function": "GameObject::snap",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 603,
        "column": 0
      },
      "context": "void GameObject::snap()"
    },
    {
      "caller_function": "f",
      "called_function": "snap",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 603,
        "column": 0
      },
      "context": "void GameObject::snap()"
    },
    {
      "caller_function": "f",
      "called_function": "CoordinateSystem::pixel_to_grid",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 606,
        "column": 0
      },
      "context": "GridCoord current_grid = CoordinateSystem::pixel_to_grid(PixelCoord(get_x(), get_y()));"
    },
    {
      "caller_function": "f",
      "called_function": "pixel_to_grid",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 606,
        "column": 0
      },
      "context": "GridCoord current_grid = CoordinateSystem::pixel_to_grid(PixelCoord(get_x(), get_y()));"
    },
    {
      "caller_function": "f",
      "called_function": "PixelCoord",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 606,
        "column": 0
      },
      "context": "GridCoord current_grid = CoordinateSystem::pixel_to_grid(PixelCoord(get_x(), get_y()));"
    },
    {
      "caller_function": "f",
      "called_function": "get_x",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 606,
        "column": 0
      },
      "context": "GridCoord current_grid = CoordinateSystem::pixel_to_grid(PixelCoord(get_x(), get_y()));"
    },
    {
      "caller_function": "f",
      "called_function": "get_y",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 606,
        "column": 0
      },
      "context": "GridCoord current_grid = CoordinateSystem::pixel_to_grid(PixelCoord(get_x(), get_y()));"
    },
    {
      "caller_function": "f",
      "called_function": "CoordinateSystem::grid_to_pixel",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 607,
        "column": 0
      },
      "context": "PixelCoord snapped_center = CoordinateSystem::grid_to_pixel(current_grid);"
    },
    {
      "caller_function": "f",
      "called_function": "grid_to_pixel",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 607,
        "column": 0
      },
      "context": "PixelCoord snapped_center = CoordinateSystem::grid_to_pixel(current_grid);"
    },
    {
      "caller_function": "f",
      "called_function": "GameObject::set_dir",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 612,
        "column": 0
      },
      "context": "void GameObject::set_dir ( Direction _dir)"
    },
    {
      "caller_function": "f",
      "called_function": "set_dir",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 612,
        "column": 0
      },
      "context": "void GameObject::set_dir ( Direction _dir)"
    },
    {
      "caller_function": "f",
      "called_function": "GameObject::set_pos",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 617,
        "column": 0
      },
      "context": "void GameObject::set_pos( int _x, int _y )"
    },
    {
      "caller_function": "f",
      "called_function": "set_pos",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 617,
        "column": 0
      },
      "context": "void GameObject::set_pos( int _x, int _y )"
    },
    {
      "caller_function": "f",
      "called_function": "GameObject::set_orig",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 623,
        "column": 0
      },
      "context": "void GameObject::set_orig( int _x, int _y )"
    },
    {
      "caller_function": "f",
      "called_function": "set_orig",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 623,
        "column": 0
      },
      "context": "void GameObject::set_orig( int _x, int _y )"
    },
    {
      "caller_function": "f",
      "called_function": "GameObject::move_pos",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 629,
        "column": 0
      },
      "context": "void GameObject::move_pos( int _x, int _y )"
    },
    {
      "caller_function": "f",
      "called_function": "move_pos",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 629,
        "column": 0
      },
      "context": "void GameObject::move_pos( int _x, int _y )"
    },
    {
      "caller_function": "f",
      "called_function": "get_context",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 639,
        "column": 0
      },
      "context": "GameContext* context = get_context();"
    },
    {
      "caller_function": "f",
      "called_function": "update_object_position_in_spatial_grid",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 641,
        "column": 0
      },
      "context": "context->update_object_position_in_spatial_grid(this, old_x, old_y);"
    },
    {
      "caller_function": "f",
      "called_function": "GameObject::get_x",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 645,
        "column": 0
      },
      "context": "int GameObject::get_x() const"
    },
    {
      "caller_function": "f",
      "called_function": "get_x",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 645,
        "column": 0
      },
      "context": "int GameObject::get_x() const"
    },
    {
      "caller_function": "f",
      "called_function": "GameObject::get_y",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 650,
        "column": 0
      },
      "context": "int GameObject::get_y() const"
    },
    {
      "caller_function": "f",
      "called_function": "get_y",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 650,
        "column": 0
      },
      "context": "int GameObject::get_y() const"
    },
    {
      "caller_function": "f",
      "called_function": "GameObject::get_z",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 655,
        "column": 0
      },
      "context": "int GameObject::get_z() const"
    },
    {
      "caller_function": "f",
      "called_function": "get_z",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 655,
        "column": 0
      },
      "context": "int GameObject::get_z() const"
    },
    {
      "caller_function": "f",
      "called_function": "GameObject::get_speed",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 660,
        "column": 0
      },
      "context": "int GameObject::get_speed() const"
    },
    {
      "caller_function": "f",
      "called_function": "get_speed",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 660,
        "column": 0
      },
      "context": "int GameObject::get_speed() const"
    },
    {
      "caller_function": "f",
      "called_function": "GameObject::get_map_x",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 665,
        "column": 0
      },
      "context": "int GameObject::get_map_x() const"
    },
    {
      "caller_function": "f",
      "called_function": "get_map_x",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 665,
        "column": 0
      },
      "context": "int GameObject::get_map_x() const"
    },
    {
      "caller_function": "f",
      "called_function": "get_x",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 669,
        "column": 0
      },
      "context": "int tmp = get_x()/TILE_SIZE;"
    },
    {
      "caller_function": "f",
      "called_function": "GameObject::get_map_y",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 679,
        "column": 0
      },
      "context": "int GameObject::get_map_y() const"
    },
    {
      "caller_function": "f",
      "called_function": "get_map_y",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 679,
        "column": 0
      },
      "context": "int GameObject::get_map_y() const"
    },
    {
      "caller_function": "f",
      "called_function": "get_y",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 683,
        "column": 0
      },
      "context": "int tmp = get_y()/TILE_SIZE;"
    },
    {
      "caller_function": "f",
      "called_function": "GameObject::inc_speed",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 693,
        "column": 0
      },
      "context": "void GameObject::inc_speed( int _c )"
    },
    {
      "caller_function": "f",
      "called_function": "inc_speed",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 693,
        "column": 0
      },
      "context": "void GameObject::inc_speed( int _c )"
    },
    {
      "caller_function": "f",
      "called_function": "GameObject::dec_speed",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 698,
        "column": 0
      },
      "context": "void GameObject::dec_speed( int _c )"
    },
    {
      "caller_function": "f",
      "called_function": "dec_speed",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 698,
        "column": 0
      },
      "context": "void GameObject::dec_speed( int _c )"
    },
    {
      "caller_function": "f",
      "called_function": "GameObject::set_speed",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 703,
        "column": 0
      },
      "context": "void GameObject::set_speed( int _speed )"
    },
    {
      "caller_function": "f",
      "called_function": "set_speed",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 703,
        "column": 0
      },
      "context": "void GameObject::set_speed( int _speed )"
    },
    {
      "caller_function": "f",
      "called_function": "GameObject::is_flying",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 708,
        "column": 0
      },
      "context": "bool GameObject::is_flying() const"
    },
    {
      "caller_function": "f",
      "called_function": "is_flying",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 708,
        "column": 0
      },
      "context": "bool GameObject::is_flying() const"
    },
    {
      "caller_function": "f",
      "called_function": "GameObject::is_stopped",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 713,
        "column": 0
      },
      "context": "bool GameObject::is_stopped() const"
    },
    {
      "caller_function": "f",
      "called_function": "is_stopped",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 713,
        "column": 0
      },
      "context": "bool GameObject::is_stopped() const"
    },
    {
      "caller_function": "f",
      "called_function": "GameObject::get_cur_dir",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 718,
        "column": 0
      },
      "context": "Direction GameObject::get_cur_dir() const"
    },
    {
      "caller_function": "f",
      "called_function": "get_cur_dir",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 718,
        "column": 0
      },
      "context": "Direction GameObject::get_cur_dir() const"
    },
    {
      "caller_function": "f",
      "called_function": "GameObject::whats_left",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 723,
        "column": 0
      },
      "context": "int GameObject::whats_left()"
    },
    {
      "caller_function": "f",
      "called_function": "whats_left",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 723,
        "column": 0
      },
      "context": "int GameObject::whats_left()"
    },
    {
      "caller_function": "f",
      "called_function": "get_tile_type_at",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 725,
        "column": 0
      },
      "context": "return get_tile_type_at(x-1, y+TILE_SIZE/2);"
    },
    {
      "caller_function": "f",
      "called_function": "GameObject::whats_right",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 728,
        "column": 0
      },
      "context": "int GameObject::whats_right()"
    },
    {
      "caller_function": "f",
      "called_function": "whats_right",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 728,
        "column": 0
      },
      "context": "int GameObject::whats_right()"
    },
    {
      "caller_function": "f",
      "called_function": "get_tile_type_at",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 730,
        "column": 0
      },
      "context": "return get_tile_type_at(x+TILE_SIZE, y+TILE_SIZE/2);"
    },
    {
      "caller_function": "f",
      "called_function": "GameObject::whats_up",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 733,
        "column": 0
      },
      "context": "int GameObject::whats_up()"
    },
    {
      "caller_function": "f",
      "called_function": "whats_up",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 733,
        "column": 0
      },
      "context": "int GameObject::whats_up()"
    },
    {
      "caller_function": "f",
      "called_function": "get_tile_type_at",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 735,
        "column": 0
      },
      "context": "return get_tile_type_at(x+TILE_SIZE/2, y-1);"
    },
    {
      "caller_function": "f",
      "called_function": "GameObject::whats_down",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 738,
        "column": 0
      },
      "context": "int GameObject::whats_down()"
    },
    {
      "caller_function": "f",
      "called_function": "whats_down",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 738,
        "column": 0
      },
      "context": "int GameObject::whats_down()"
    },
    {
      "caller_function": "f",
      "called_function": "get_tile_type_at",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 740,
        "column": 0
      },
      "context": "return get_tile_type_at(x+TILE_SIZE/2, y+TILE_SIZE);"
    },
    {
      "caller_function": "f",
      "called_function": "GameObject::get_tile",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 743,
        "column": 0
      },
      "context": "MapTile* GameObject::get_tile() const"
    },
    {
      "caller_function": "f",
      "called_function": "get_tile",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 743,
        "column": 0
      },
      "context": "MapTile* GameObject::get_tile() const"
    },
    {
      "caller_function": "f",
      "called_function": "get_context",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 746,
        "column": 0
      },
      "context": "GameContext* context = get_context();"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 748,
        "column": 0
      },
      "context": "SDL_Log(\"ERROR: get_tile called with null context or map\");"
    },
    {
      "caller_function": "f",
      "called_function": "get_map",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 751,
        "column": 0
      },
      "context": "Map* map = context->get_map();"
    },
    {
      "caller_function": "f",
      "called_function": "CoordinateSystem::pixel_to_grid",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 754,
        "column": 0
      },
      "context": "GridCoord grid = CoordinateSystem::pixel_to_grid(PixelCoord(x, y));"
    },
    {
      "caller_function": "f",
      "called_function": "pixel_to_grid",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 754,
        "column": 0
      },
      "context": "GridCoord grid = CoordinateSystem::pixel_to_grid(PixelCoord(x, y));"
    },
    {
      "caller_function": "f",
      "called_function": "PixelCoord",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 754,
        "column": 0
      },
      "context": "GridCoord grid = CoordinateSystem::pixel_to_grid(PixelCoord(x, y));"
    },
    {
      "caller_function": "f",
      "called_function": "get_tile",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 755,
        "column": 0
      },
      "context": "return map->get_tile(grid.grid_x, grid.grid_y);"
    },
    {
      "caller_function": "f",
      "called_function": "GameObject::get_legacy_tile",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 759,
        "column": 0
      },
      "context": "MapTile* GameObject::get_legacy_tile() const"
    },
    {
      "caller_function": "f",
      "called_function": "get_legacy_tile",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 759,
        "column": 0
      },
      "context": "MapTile* GameObject::get_legacy_tile() const"
    },
    {
      "caller_function": "f",
      "called_function": "get_context",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 762,
        "column": 0
      },
      "context": "GameContext* context = get_context();"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 764,
        "column": 0
      },
      "context": "SDL_Log(\"ERROR: get_legacy_tile called with null context or map\");"
    },
    {
      "caller_function": "f",
      "called_function": "get_map",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 767,
        "column": 0
      },
      "context": "Map* map = context->get_map();"
    },
    {
      "caller_function": "f",
      "called_function": "CoordinateSystem::pixel_to_grid",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 770,
        "column": 0
      },
      "context": "GridCoord grid = CoordinateSystem::pixel_to_grid(PixelCoord(x, y));"
    },
    {
      "caller_function": "f",
      "called_function": "pixel_to_grid",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 770,
        "column": 0
      },
      "context": "GridCoord grid = CoordinateSystem::pixel_to_grid(PixelCoord(x, y));"
    },
    {
      "caller_function": "f",
      "called_function": "PixelCoord",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 770,
        "column": 0
      },
      "context": "GridCoord grid = CoordinateSystem::pixel_to_grid(PixelCoord(x, y));"
    },
    {
      "caller_function": "f",
      "called_function": "get_tile",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 771,
        "column": 0
      },
      "context": "return map->get_tile(grid.grid_x, grid.grid_y);"
    },
    {
      "caller_function": "f",
      "called_function": "GameObject::get_tile_entity",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 775,
        "column": 0
      },
      "context": "TileEntity* GameObject::get_tile_entity() const"
    },
    {
      "caller_function": "f",
      "called_function": "get_tile_entity",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 775,
        "column": 0
      },
      "context": "TileEntity* GameObject::get_tile_entity() const"
    },
    {
      "caller_function": "f",
      "called_function": "get_context",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 778,
        "column": 0
      },
      "context": "GameContext* context = get_context();"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 780,
        "column": 0
      },
      "context": "SDL_Log(\"ERROR: get_tile_entity called with null context or map\");"
    },
    {
      "caller_function": "f",
      "called_function": "get_map",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 783,
        "column": 0
      },
      "context": "Map* map = context->get_map();"
    },
    {
      "caller_function": "f",
      "called_function": "CoordinateSystem::pixel_to_grid",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 786,
        "column": 0
      },
      "context": "GridCoord grid = CoordinateSystem::pixel_to_grid(PixelCoord(x, y));"
    },
    {
      "caller_function": "f",
      "called_function": "pixel_to_grid",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 786,
        "column": 0
      },
      "context": "GridCoord grid = CoordinateSystem::pixel_to_grid(PixelCoord(x, y));"
    },
    {
      "caller_function": "f",
      "called_function": "PixelCoord",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 786,
        "column": 0
      },
      "context": "GridCoord grid = CoordinateSystem::pixel_to_grid(PixelCoord(x, y));"
    },
    {
      "caller_function": "f",
      "called_function": "get_tile_entity",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 787,
        "column": 0
      },
      "context": "return map->get_tile_entity(grid.grid_x, grid.grid_y);"
    },
    {
      "caller_function": "f",
      "called_function": "GameObject::get_tile_type_at",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 791,
        "column": 0
      },
      "context": "int GameObject::get_tile_type_at(int pixel_x, int pixel_y) const"
    },
    {
      "caller_function": "f",
      "called_function": "get_tile_type_at",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 791,
        "column": 0
      },
      "context": "int GameObject::get_tile_type_at(int pixel_x, int pixel_y) const"
    },
    {
      "caller_function": "f",
      "called_function": "get_context",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 794,
        "column": 0
      },
      "context": "GameContext* context = get_context();"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 796,
        "column": 0
      },
      "context": "SDL_Log(\"ERROR: get_tile_type_at called with null context or map\");"
    },
    {
      "caller_function": "f",
      "called_function": "get_map",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 799,
        "column": 0
      },
      "context": "Map* map = context->get_map();"
    },
    {
      "caller_function": "f",
      "called_function": "get_tile",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 805,
        "column": 0
      },
      "context": "MapTile* legacy_tile = map->get_tile(map_x, map_y);"
    },
    {
      "caller_function": "f",
      "called_function": "get_tile_type",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 807,
        "column": 0
      },
      "context": "return legacy_tile->get_tile_type();"
    },
    {
      "caller_function": "f",
      "called_function": "get_tile_entity",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 811,
        "column": 0
      },
      "context": "TileEntity* tile_entity = map->get_tile_entity(map_x, map_y);"
    },
    {
      "caller_function": "f",
      "called_function": "get_tile_type",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 813,
        "column": 0
      },
      "context": "return tile_entity->get_tile_type();"
    },
    {
      "caller_function": "f",
      "called_function": "GameObject::is_tile_blocking_at",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 821,
        "column": 0
      },
      "context": "bool GameObject::is_tile_blocking_at(int pixel_x, int pixel_y) const"
    },
    {
      "caller_function": "f",
      "called_function": "is_tile_blocking_at",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 821,
        "column": 0
      },
      "context": "bool GameObject::is_tile_blocking_at(int pixel_x, int pixel_y) const"
    },
    {
      "caller_function": "f",
      "called_function": "get_context",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 824,
        "column": 0
      },
      "context": "GameContext* context = get_context();"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 826,
        "column": 0
      },
      "context": "SDL_Log(\"ERROR: is_tile_blocking_at called with null context or map\");"
    },
    {
      "caller_function": "f",
      "called_function": "is_position_blocked",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 832,
        "column": 0
      },
      "context": "return context->is_position_blocked(map_x, map_y);"
    },
    {
      "caller_function": "f",
      "called_function": "GameObject::has_bomb_at",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 836,
        "column": 0
      },
      "context": "bool GameObject::has_bomb_at(int pixel_x, int pixel_y) const"
    },
    {
      "caller_function": "f",
      "called_function": "has_bomb_at",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 836,
        "column": 0
      },
      "context": "bool GameObject::has_bomb_at(int pixel_x, int pixel_y) const"
    },
    {
      "caller_function": "f",
      "called_function": "get_context",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 839,
        "column": 0
      },
      "context": "GameContext* context = get_context();"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 841,
        "column": 0
      },
      "context": "SDL_Log(\"ERROR: has_bomb_at called with null context or map\");"
    },
    {
      "caller_function": "f",
      "called_function": "has_bomb_at",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 847,
        "column": 0
      },
      "context": "return context->has_bomb_at(map_x, map_y);"
    },
    {
      "caller_function": "f",
      "called_function": "GameObject::has_bomber_at",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 851,
        "column": 0
      },
      "context": "bool GameObject::has_bomber_at(int pixel_x, int pixel_y) const"
    },
    {
      "caller_function": "f",
      "called_function": "has_bomber_at",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 851,
        "column": 0
      },
      "context": "bool GameObject::has_bomber_at(int pixel_x, int pixel_y) const"
    },
    {
      "caller_function": "f",
      "called_function": "get_context",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 854,
        "column": 0
      },
      "context": "GameContext* context = get_context();"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 856,
        "column": 0
      },
      "context": "SDL_Log(\"ERROR: has_bomber_at called with null context or map\");"
    },
    {
      "caller_function": "f",
      "called_function": "get_map",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 859,
        "column": 0
      },
      "context": "Map* map = context->get_map();"
    },
    {
      "caller_function": "f",
      "called_function": "get_tile",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 865,
        "column": 0
      },
      "context": "MapTile* legacy_tile = map->get_tile(map_x, map_y);"
    },
    {
      "caller_function": "f",
      "called_function": "has_bomber",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 867,
        "column": 0
      },
      "context": "return legacy_tile->has_bomber();"
    },
    {
      "caller_function": "f",
      "called_function": "get_tile_entity",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 871,
        "column": 0
      },
      "context": "TileEntity* tile_entity = map->get_tile_entity(map_x, map_y);"
    },
    {
      "caller_function": "f",
      "called_function": "has_bomber",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 873,
        "column": 0
      },
      "context": "return tile_entity->has_bomber();"
    },
    {
      "caller_function": "f",
      "called_function": "GameObject::set_bomb_on_tile",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 885,
        "column": 0
      },
      "context": "void GameObject::set_bomb_on_tile(Bomb* bomb) const {"
    },
    {
      "caller_function": "f",
      "called_function": "set_bomb_on_tile",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 885,
        "column": 0
      },
      "context": "void GameObject::set_bomb_on_tile(Bomb* bomb) const {"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 887,
        "column": 0
      },
      "context": "SDL_Log(\"GameObject: set_bomb_on_tile() called but legacy system removed - SpatialGrid handles colli"
    },
    {
      "caller_function": "f",
      "called_function": "set_bomb_on_tile",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 887,
        "column": 0
      },
      "context": "SDL_Log(\"GameObject: set_bomb_on_tile() called but legacy system removed - SpatialGrid handles colli"
    },
    {
      "caller_function": "f",
      "called_function": "GameObject::remove_bomb_from_tile",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 890,
        "column": 0
      },
      "context": "void GameObject::remove_bomb_from_tile(Bomb* bomb) const {"
    },
    {
      "caller_function": "f",
      "called_function": "remove_bomb_from_tile",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 890,
        "column": 0
      },
      "context": "void GameObject::remove_bomb_from_tile(Bomb* bomb) const {"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 892,
        "column": 0
      },
      "context": "SDL_Log(\"GameObject: remove_bomb_from_tile() called but legacy system removed - SpatialGrid handles "
    },
    {
      "caller_function": "f",
      "called_function": "remove_bomb_from_tile",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 892,
        "column": 0
      },
      "context": "SDL_Log(\"GameObject: remove_bomb_from_tile() called but legacy system removed - SpatialGrid handles "
    },
    {
      "caller_function": "f",
      "called_function": "GameObject::show",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 895,
        "column": 0
      },
      "context": "void GameObject::show()"
    },
    {
      "caller_function": "f",
      "called_function": "show",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 895,
        "column": 0
      },
      "context": "void GameObject::show()"
    },
    {
      "caller_function": "f",
      "called_function": "get_context",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 902,
        "column": 0
      },
      "context": "GameContext* context = get_context();"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 904,
        "column": 0
      },
      "context": "SDL_Log(\"ERROR: show() called with null context or lifecycle_manager\");"
    },
    {
      "caller_function": "f",
      "called_function": "show",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 904,
        "column": 0
      },
      "context": "SDL_Log(\"ERROR: show() called with null context or lifecycle_manager\");"
    },
    {
      "caller_function": "f",
      "called_function": "get_lifecycle_manager",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 908,
        "column": 0
      },
      "context": "LifecycleManager::ObjectState state = context->get_lifecycle_manager()->get_object_state(this);"
    },
    {
      "caller_function": "f",
      "called_function": "get_object_state",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 908,
        "column": 0
      },
      "context": "LifecycleManager::ObjectState state = context->get_lifecycle_manager()->get_object_state(this);"
    },
    {
      "caller_function": "f",
      "called_function": "get_rendering_facade",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 915,
        "column": 0
      },
      "context": "RenderingFacade* facade = context->get_rendering_facade();"
    },
    {
      "caller_function": "f",
      "called_function": "get_x",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 922,
        "column": 0
      },
      "context": "render_x = static_cast<float>(get_x());"
    },
    {
      "caller_function": "f",
      "called_function": "get_y",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 923,
        "column": 0
      },
      "context": "render_y = static_cast<float>(get_y());"
    },
    {
      "caller_function": "f",
      "called_function": "get_x",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 928,
        "column": 0
      },
      "context": "render_x = static_cast<float>(get_x()) - (SPRITE_WIDTH / 2);   // Center \u2192 top-left"
    },
    {
      "caller_function": "f",
      "called_function": "get_y",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 929,
        "column": 0
      },
      "context": "render_y = static_cast<float>(get_y()) - (SPRITE_HEIGHT / 2);  // Center \u2192 top-left"
    },
    {
      "caller_function": "f",
      "called_function": "position",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 932,
        "column": 0
      },
      "context": "PixelCoord position(render_x, render_y);"
    },
    {
      "caller_function": "f",
      "called_function": "render_sprite",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 934,
        "column": 0
      },
      "context": "auto result = facade->render_sprite(texture_name, position, sprite_nr, 0.0f, opacity_scaled);"
    },
    {
      "caller_function": "f",
      "called_function": "GameObject::show",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 936,
        "column": 0
      },
      "context": "SDL_Log(\"WARNING: GameObject::show() failed to render sprite '%s': %s (Context: %s)\","
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 936,
        "column": 0
      },
      "context": "SDL_Log(\"WARNING: GameObject::show() failed to render sprite '%s': %s (Context: %s)\","
    },
    {
      "caller_function": "f",
      "called_function": "show",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 936,
        "column": 0
      },
      "context": "SDL_Log(\"WARNING: GameObject::show() failed to render sprite '%s': %s (Context: %s)\","
    },
    {
      "caller_function": "f",
      "called_function": "c_str",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 937,
        "column": 0
      },
      "context": "texture_name.c_str(), result.get_error_message().c_str(), result.get_error_context().c_str());"
    },
    {
      "caller_function": "f",
      "called_function": "get_error_message",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 937,
        "column": 0
      },
      "context": "texture_name.c_str(), result.get_error_message().c_str(), result.get_error_context().c_str());"
    },
    {
      "caller_function": "f",
      "called_function": "c_str",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 937,
        "column": 0
      },
      "context": "texture_name.c_str(), result.get_error_message().c_str(), result.get_error_context().c_str());"
    },
    {
      "caller_function": "f",
      "called_function": "get_error_context",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 937,
        "column": 0
      },
      "context": "texture_name.c_str(), result.get_error_message().c_str(), result.get_error_context().c_str());"
    },
    {
      "caller_function": "f",
      "called_function": "c_str",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 937,
        "column": 0
      },
      "context": "texture_name.c_str(), result.get_error_message().c_str(), result.get_error_context().c_str());"
    },
    {
      "caller_function": "f",
      "called_function": "GameObject::show",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 940,
        "column": 0
      },
      "context": "SDL_Log(\"ERROR: GameObject::show() - RenderingFacade failed to render sprite '%s'\","
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 940,
        "column": 0
      },
      "context": "SDL_Log(\"ERROR: GameObject::show() - RenderingFacade failed to render sprite '%s'\","
    },
    {
      "caller_function": "f",
      "called_function": "show",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 940,
        "column": 0
      },
      "context": "SDL_Log(\"ERROR: GameObject::show() - RenderingFacade failed to render sprite '%s'\","
    },
    {
      "caller_function": "f",
      "called_function": "c_str",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 941,
        "column": 0
      },
      "context": "texture_name.c_str());"
    },
    {
      "caller_function": "f",
      "called_function": "GameObject::show",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 945,
        "column": 0
      },
      "context": "SDL_Log(\"ERROR: GameObject::show() - RenderingFacade not available, cannot render sprite '%s'\","
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 945,
        "column": 0
      },
      "context": "SDL_Log(\"ERROR: GameObject::show() - RenderingFacade not available, cannot render sprite '%s'\","
    },
    {
      "caller_function": "f",
      "called_function": "show",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 945,
        "column": 0
      },
      "context": "SDL_Log(\"ERROR: GameObject::show() - RenderingFacade not available, cannot render sprite '%s'\","
    },
    {
      "caller_function": "f",
      "called_function": "c_str",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 946,
        "column": 0
      },
      "context": "texture_name.c_str());"
    },
    {
      "caller_function": "f",
      "called_function": "GameObject::show",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 950,
        "column": 0
      },
      "context": "void GameObject::show(int _x, int _y) const"
    },
    {
      "caller_function": "f",
      "called_function": "show",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 950,
        "column": 0
      },
      "context": "void GameObject::show(int _x, int _y) const"
    },
    {
      "caller_function": "f",
      "called_function": "GameObject::show",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 954,
        "column": 0
      },
      "context": "void GameObject::show(int _x, int _y, float _scale) const"
    },
    {
      "caller_function": "f",
      "called_function": "show",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 954,
        "column": 0
      },
      "context": "void GameObject::show(int _x, int _y, float _scale) const"
    },
    {
      "caller_function": "f",
      "called_function": "GameObject::is_falling",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 958,
        "column": 0
      },
      "context": "bool GameObject::is_falling()"
    },
    {
      "caller_function": "f",
      "called_function": "is_falling",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 958,
        "column": 0
      },
      "context": "bool GameObject::is_falling()"
    },
    {
      "caller_function": "f",
      "called_function": "GameObject::output_object_info",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 963,
        "column": 0
      },
      "context": "void GameObject::output_object_info()"
    },
    {
      "caller_function": "f",
      "called_function": "output_object_info",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 963,
        "column": 0
      },
      "context": "void GameObject::output_object_info()"
    },
    {
      "caller_function": "f",
      "called_function": "objecttype2string",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 966,
        "column": 0
      },
      "context": "<<\" type=\"<<objecttype2string(get_type())"
    },
    {
      "caller_function": "f",
      "called_function": "get_type",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 966,
        "column": 0
      },
      "context": "<<\" type=\"<<objecttype2string(get_type())"
    },
    {
      "caller_function": "f",
      "called_function": "GameObject::set_next_fly_job",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 983,
        "column": 0
      },
      "context": "void GameObject::set_next_fly_job(int flyjobx, int flyjoby, int flyjobspeed)"
    },
    {
      "caller_function": "f",
      "called_function": "set_next_fly_job",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 983,
        "column": 0
      },
      "context": "void GameObject::set_next_fly_job(int flyjobx, int flyjoby, int flyjobspeed)"
    },
    {
      "caller_function": "f",
      "called_function": "GameObject::reset_next_fly_job",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 990,
        "column": 0
      },
      "context": "void GameObject::reset_next_fly_job()"
    },
    {
      "caller_function": "f",
      "called_function": "reset_next_fly_job",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 990,
        "column": 0
      },
      "context": "void GameObject::reset_next_fly_job()"
    },
    {
      "caller_function": "f",
      "called_function": "GameObject::is_next_fly_job",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 997,
        "column": 0
      },
      "context": "bool GameObject::is_next_fly_job()"
    },
    {
      "caller_function": "f",
      "called_function": "is_next_fly_job",
      "location": {
        "file": "src/GameObject.cpp",
        "line": 997,
        "column": 0
      },
      "context": "bool GameObject::is_next_fly_job()"
    },
    {
      "caller_function": "t",
      "called_function": "SDL_GetBasePath",
      "location": {
        "file": "src/Resources.cpp",
        "line": 21,
        "column": 0
      },
      "context": "const char* sdl_base_path = SDL_GetBasePath();"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_GetError",
      "location": {
        "file": "src/Resources.cpp",
        "line": 25,
        "column": 0
      },
      "context": "std::cerr << \"Error getting base path: \" << SDL_GetError() << std::endl;"
    },
    {
      "caller_function": "f",
      "called_function": "load_texture",
      "location": {
        "file": "src/Resources.cpp",
        "line": 32,
        "column": 0
      },
      "context": "textures[\"titlescreen\"] = load_texture(\"data/pics/clanbomber_title_andi.png\");"
    },
    {
      "caller_function": "f",
      "called_function": "load_texture",
      "location": {
        "file": "src/Resources.cpp",
        "line": 33,
        "column": 0
      },
      "context": "textures[\"fl_logo\"] = load_texture(\"data/pics/fischlustig_logo.png\");"
    },
    {
      "caller_function": "f",
      "called_function": "load_texture",
      "location": {
        "file": "src/Resources.cpp",
        "line": 34,
        "column": 0
      },
      "context": "textures[\"ps_teams\"] = load_texture(\"data/pics/ps_teams.png\", 125, 56);"
    },
    {
      "caller_function": "f",
      "called_function": "load_texture",
      "location": {
        "file": "src/Resources.cpp",
        "line": 35,
        "column": 0
      },
      "context": "textures[\"ps_controls\"] = load_texture(\"data/pics/ps_controls.png\", 125, 56);"
    },
    {
      "caller_function": "f",
      "called_function": "load_texture",
      "location": {
        "file": "src/Resources.cpp",
        "line": 36,
        "column": 0
      },
      "context": "textures[\"ps_teamlamps\"] = load_texture(\"data/pics/ps_teamlamps.png\", 30, 32);"
    },
    {
      "caller_function": "f",
      "called_function": "load_texture",
      "location": {
        "file": "src/Resources.cpp",
        "line": 37,
        "column": 0
      },
      "context": "textures[\"playersetup_background\"] = load_texture(\"data/pics/playersetup.png\");"
    },
    {
      "caller_function": "f",
      "called_function": "load_texture",
      "location": {
        "file": "src/Resources.cpp",
        "line": 38,
        "column": 0
      },
      "context": "textures[\"mapselector_background\"] = load_texture(\"data/pics/level_selection.png\");"
    },
    {
      "caller_function": "f",
      "called_function": "load_texture",
      "location": {
        "file": "src/Resources.cpp",
        "line": 39,
        "column": 0
      },
      "context": "textures[\"mapselector_not_available\"] = load_texture(\"data/pics/not_available.png\");"
    },
    {
      "caller_function": "f",
      "called_function": "load_texture",
      "location": {
        "file": "src/Resources.cpp",
        "line": 40,
        "column": 0
      },
      "context": "textures[\"gamestatus_tools\"] = load_texture(\"data/pics/cup2.png\", TILE_SIZE, TILE_SIZE);"
    },
    {
      "caller_function": "f",
      "called_function": "load_texture",
      "location": {
        "file": "src/Resources.cpp",
        "line": 41,
        "column": 0
      },
      "context": "textures[\"gamestatus_background\"] = load_texture(\"data/pics/game_status.png\");"
    },
    {
      "caller_function": "f",
      "called_function": "load_texture",
      "location": {
        "file": "src/Resources.cpp",
        "line": 42,
        "column": 0
      },
      "context": "textures[\"horst_evil\"] = load_texture(\"data/pics/horst_evil.png\");"
    },
    {
      "caller_function": "f",
      "called_function": "load_texture",
      "location": {
        "file": "src/Resources.cpp",
        "line": 43,
        "column": 0
      },
      "context": "textures[\"bomber_snake\"] = load_texture(\"data/pics/bomber_snake.png\", 40, 60);"
    },
    {
      "caller_function": "f",
      "called_function": "load_texture",
      "location": {
        "file": "src/Resources.cpp",
        "line": 44,
        "column": 0
      },
      "context": "textures[\"bomber_tux\"] = load_texture(\"data/pics/bomber_tux.png\", 40, 60);"
    },
    {
      "caller_function": "f",
      "called_function": "load_texture",
      "location": {
        "file": "src/Resources.cpp",
        "line": 45,
        "column": 0
      },
      "context": "textures[\"bomber_spider\"] = load_texture(\"data/pics/bomber_spider.png\", TILE_SIZE, TILE_SIZE);"
    },
    {
      "caller_function": "f",
      "called_function": "load_texture",
      "location": {
        "file": "src/Resources.cpp",
        "line": 46,
        "column": 0
      },
      "context": "textures[\"bomber_bsd\"] = load_texture(\"data/pics/bomber_bsd.png\", TILE_SIZE, 60);"
    },
    {
      "caller_function": "f",
      "called_function": "load_texture",
      "location": {
        "file": "src/Resources.cpp",
        "line": 47,
        "column": 0
      },
      "context": "textures[\"bomber_dull_red\"] = load_texture(\"data/pics/bomber_dull_red.png\", TILE_SIZE, TILE_SIZE);"
    },
    {
      "caller_function": "f",
      "called_function": "load_texture",
      "location": {
        "file": "src/Resources.cpp",
        "line": 48,
        "column": 0
      },
      "context": "textures[\"bomber_dull_blue\"] = load_texture(\"data/pics/bomber_dull_blue.png\", TILE_SIZE, TILE_SIZE);"
    },
    {
      "caller_function": "f",
      "called_function": "load_texture",
      "location": {
        "file": "src/Resources.cpp",
        "line": 49,
        "column": 0
      },
      "context": "textures[\"bomber_dull_yellow\"] = load_texture(\"data/pics/bomber_dull_yellow.png\", TILE_SIZE, TILE_SI"
    },
    {
      "caller_function": "f",
      "called_function": "load_texture",
      "location": {
        "file": "src/Resources.cpp",
        "line": 50,
        "column": 0
      },
      "context": "textures[\"bomber_dull_green\"] = load_texture(\"data/pics/bomber_dull_green.png\", TILE_SIZE, TILE_SIZE"
    },
    {
      "caller_function": "f",
      "called_function": "load_texture",
      "location": {
        "file": "src/Resources.cpp",
        "line": 51,
        "column": 0
      },
      "context": "textures[\"observer\"] = load_texture(\"data/pics/observer.png\", TILE_SIZE, TILE_SIZE);"
    },
    {
      "caller_function": "f",
      "called_function": "load_texture",
      "location": {
        "file": "src/Resources.cpp",
        "line": 52,
        "column": 0
      },
      "context": "textures[\"maptiles\"] = load_texture(\"data/pics/maptiles.png\", TILE_SIZE, TILE_SIZE);"
    },
    {
      "caller_function": "f",
      "called_function": "load_texture",
      "location": {
        "file": "src/Resources.cpp",
        "line": 53,
        "column": 0
      },
      "context": "textures[\"maptile_addons\"] = load_texture(\"data/pics/maptile_addons.png\", TILE_SIZE, TILE_SIZE);"
    },
    {
      "caller_function": "f",
      "called_function": "load_texture",
      "location": {
        "file": "src/Resources.cpp",
        "line": 54,
        "column": 0
      },
      "context": "textures[\"bombs\"] = load_texture(\"data/pics/bombs.png\", TILE_SIZE, TILE_SIZE);"
    },
    {
      "caller_function": "f",
      "called_function": "load_texture",
      "location": {
        "file": "src/Resources.cpp",
        "line": 55,
        "column": 0
      },
      "context": "textures[\"explosion\"] = load_texture(\"data/pics/explosion2.png\", TILE_SIZE, TILE_SIZE);"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/Resources.cpp",
        "line": 56,
        "column": 0
      },
      "context": "SDL_Log(\"DEBUG: Loaded explosion texture, pointer: %p\", textures[\"explosion\"]);"
    },
    {
      "caller_function": "f",
      "called_function": "load_texture",
      "location": {
        "file": "src/Resources.cpp",
        "line": 59,
        "column": 0
      },
      "context": "textures[\"extras2_0\"] = load_texture(\"data/pics/extras2_0.png\", TILE_SIZE, TILE_SIZE);  // BOMB"
    },
    {
      "caller_function": "f",
      "called_function": "load_texture",
      "location": {
        "file": "src/Resources.cpp",
        "line": 60,
        "column": 0
      },
      "context": "textures[\"extras2_1\"] = load_texture(\"data/pics/extras2_1.png\", TILE_SIZE, TILE_SIZE);  // FLAME"
    },
    {
      "caller_function": "f",
      "called_function": "load_texture",
      "location": {
        "file": "src/Resources.cpp",
        "line": 61,
        "column": 0
      },
      "context": "textures[\"extras2_2\"] = load_texture(\"data/pics/extras2_2.png\", TILE_SIZE, TILE_SIZE);  // SPEED"
    },
    {
      "caller_function": "f",
      "called_function": "load_texture",
      "location": {
        "file": "src/Resources.cpp",
        "line": 62,
        "column": 0
      },
      "context": "textures[\"extras2_3\"] = load_texture(\"data/pics/extras2_3.png\", TILE_SIZE, TILE_SIZE);  // KICK"
    },
    {
      "caller_function": "f",
      "called_function": "load_texture",
      "location": {
        "file": "src/Resources.cpp",
        "line": 63,
        "column": 0
      },
      "context": "textures[\"extras2_4\"] = load_texture(\"data/pics/extras2_4.png\", TILE_SIZE, TILE_SIZE);  // GLOVE"
    },
    {
      "caller_function": "f",
      "called_function": "load_texture",
      "location": {
        "file": "src/Resources.cpp",
        "line": 64,
        "column": 0
      },
      "context": "textures[\"extras2_5\"] = load_texture(\"data/pics/extras2_5.png\", TILE_SIZE, TILE_SIZE);  // SKATE"
    },
    {
      "caller_function": "f",
      "called_function": "load_texture",
      "location": {
        "file": "src/Resources.cpp",
        "line": 65,
        "column": 0
      },
      "context": "textures[\"extras2_6\"] = load_texture(\"data/pics/extras2_6.png\", TILE_SIZE, TILE_SIZE);  // DISEASE"
    },
    {
      "caller_function": "f",
      "called_function": "load_texture",
      "location": {
        "file": "src/Resources.cpp",
        "line": 66,
        "column": 0
      },
      "context": "textures[\"extras2_7\"] = load_texture(\"data/pics/extras2_7.png\", TILE_SIZE, TILE_SIZE);  // KOKS"
    },
    {
      "caller_function": "f",
      "called_function": "load_texture",
      "location": {
        "file": "src/Resources.cpp",
        "line": 67,
        "column": 0
      },
      "context": "textures[\"extras2_8\"] = load_texture(\"data/pics/extras2_8.png\", TILE_SIZE, TILE_SIZE);  // VIAGRA"
    },
    {
      "caller_function": "f",
      "called_function": "load_texture",
      "location": {
        "file": "src/Resources.cpp",
        "line": 68,
        "column": 0
      },
      "context": "textures[\"cb_logo_small\"] = load_texture(\"data/pics/cb_logo_small.png\");"
    },
    {
      "caller_function": "f",
      "called_function": "load_texture",
      "location": {
        "file": "src/Resources.cpp",
        "line": 69,
        "column": 0
      },
      "context": "textures[\"map_editor_background\"] = load_texture(\"data/pics/map_editor.png\");"
    },
    {
      "caller_function": "f",
      "called_function": "load_texture",
      "location": {
        "file": "src/Resources.cpp",
        "line": 70,
        "column": 0
      },
      "context": "textures[\"corpse_parts\"] = load_texture(\"data/pics/corpse_parts.png\", TILE_SIZE, TILE_SIZE);"
    },
    {
      "caller_function": "f",
      "called_function": "AudioMixer::init",
      "location": {
        "file": "src/Resources.cpp",
        "line": 73,
        "column": 0
      },
      "context": "AudioMixer::init();"
    },
    {
      "caller_function": "f",
      "called_function": "init",
      "location": {
        "file": "src/Resources.cpp",
        "line": 73,
        "column": 0
      },
      "context": "AudioMixer::init();"
    },
    {
      "caller_function": "r",
      "called_function": "AudioMixer::load_sound",
      "location": {
        "file": "src/Resources.cpp",
        "line": 91,
        "column": 0
      },
      "context": "MixerAudio* mixer_audio = AudioMixer::load_sound(full_path);"
    },
    {
      "caller_function": "r",
      "called_function": "load_sound",
      "location": {
        "file": "src/Resources.cpp",
        "line": 91,
        "column": 0
      },
      "context": "MixerAudio* mixer_audio = AudioMixer::load_sound(full_path);"
    },
    {
      "caller_function": "f",
      "called_function": "AudioMixer::add_sound",
      "location": {
        "file": "src/Resources.cpp",
        "line": 93,
        "column": 0
      },
      "context": "AudioMixer::add_sound(sound_name, mixer_audio);"
    },
    {
      "caller_function": "f",
      "called_function": "add_sound",
      "location": {
        "file": "src/Resources.cpp",
        "line": 93,
        "column": 0
      },
      "context": "AudioMixer::add_sound(sound_name, mixer_audio);"
    },
    {
      "caller_function": "n",
      "called_function": "AudioMixer::shutdown",
      "location": {
        "file": "src/Resources.cpp",
        "line": 99,
        "column": 0
      },
      "context": "AudioMixer::shutdown();"
    },
    {
      "caller_function": "n",
      "called_function": "shutdown",
      "location": {
        "file": "src/Resources.cpp",
        "line": 99,
        "column": 0
      },
      "context": "AudioMixer::shutdown();"
    },
    {
      "caller_function": "f",
      "called_function": "glDeleteTextures",
      "location": {
        "file": "src/Resources.cpp",
        "line": 104,
        "column": 0
      },
      "context": "glDeleteTextures(1, &pair.second->gl_texture);"
    },
    {
      "caller_function": "f",
      "called_function": "clear",
      "location": {
        "file": "src/Resources.cpp",
        "line": 109,
        "column": 0
      },
      "context": "textures.clear();"
    },
    {
      "caller_function": "f",
      "called_function": "clear",
      "location": {
        "file": "src/Resources.cpp",
        "line": 112,
        "column": 0
      },
      "context": "fonts.clear();"
    },
    {
      "caller_function": "e",
      "called_function": "IMG_Load",
      "location": {
        "file": "src/Resources.cpp",
        "line": 119,
        "column": 0
      },
      "context": "SDL_Surface* surface = IMG_Load(full_path.c_str());"
    },
    {
      "caller_function": "e",
      "called_function": "c_str",
      "location": {
        "file": "src/Resources.cpp",
        "line": 119,
        "column": 0
      },
      "context": "SDL_Surface* surface = IMG_Load(full_path.c_str());"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_GetError",
      "location": {
        "file": "src/Resources.cpp",
        "line": 121,
        "column": 0
      },
      "context": "std::cerr << \"Failed to load surface: \" << full_path << \" - \" << SDL_GetError() << std::endl;"
    },
    {
      "caller_function": "f",
      "called_function": "TextureInfo",
      "location": {
        "file": "src/Resources.cpp",
        "line": 125,
        "column": 0
      },
      "context": "TextureInfo* tex_info = new TextureInfo();"
    },
    {
      "caller_function": "f",
      "called_function": "glGenTextures",
      "location": {
        "file": "src/Resources.cpp",
        "line": 131,
        "column": 0
      },
      "context": "glGenTextures(1, &tex_info->gl_texture);"
    },
    {
      "caller_function": "f",
      "called_function": "glBindTexture",
      "location": {
        "file": "src/Resources.cpp",
        "line": 132,
        "column": 0
      },
      "context": "glBindTexture(GL_TEXTURE_2D, tex_info->gl_texture);"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_ConvertSurface",
      "location": {
        "file": "src/Resources.cpp",
        "line": 135,
        "column": 0
      },
      "context": "SDL_Surface* rgba_surface = SDL_ConvertSurface(surface, SDL_PIXELFORMAT_RGBA32);"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_DestroySurface",
      "location": {
        "file": "src/Resources.cpp",
        "line": 136,
        "column": 0
      },
      "context": "SDL_DestroySurface(surface);"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_GetError",
      "location": {
        "file": "src/Resources.cpp",
        "line": 139,
        "column": 0
      },
      "context": "std::cerr << \"Failed to convert surface to RGBA: \" << SDL_GetError() << std::endl;"
    },
    {
      "caller_function": "f",
      "called_function": "glTexImage2D",
      "location": {
        "file": "src/Resources.cpp",
        "line": 149,
        "column": 0
      },
      "context": "glTexImage2D(GL_TEXTURE_2D, 0, internal_format, rgba_surface->w, rgba_surface->h, 0,"
    },
    {
      "caller_function": "f",
      "called_function": "glTexParameteri",
      "location": {
        "file": "src/Resources.cpp",
        "line": 153,
        "column": 0
      },
      "context": "glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST);"
    },
    {
      "caller_function": "f",
      "called_function": "glTexParameteri",
      "location": {
        "file": "src/Resources.cpp",
        "line": 154,
        "column": 0
      },
      "context": "glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST);"
    },
    {
      "caller_function": "f",
      "called_function": "glTexParameteri",
      "location": {
        "file": "src/Resources.cpp",
        "line": 155,
        "column": 0
      },
      "context": "glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE);"
    },
    {
      "caller_function": "f",
      "called_function": "glTexParameteri",
      "location": {
        "file": "src/Resources.cpp",
        "line": 156,
        "column": 0
      },
      "context": "glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_EDGE);"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_DestroySurface",
      "location": {
        "file": "src/Resources.cpp",
        "line": 158,
        "column": 0
      },
      "context": "SDL_DestroySurface(rgba_surface);"
    },
    {
      "caller_function": "t",
      "called_function": "TTF_OpenFont",
      "location": {
        "file": "src/Resources.cpp",
        "line": 165,
        "column": 0
      },
      "context": "TTF_Font* font = TTF_OpenFont(full_path.c_str(), size);"
    },
    {
      "caller_function": "t",
      "called_function": "c_str",
      "location": {
        "file": "src/Resources.cpp",
        "line": 165,
        "column": 0
      },
      "context": "TTF_Font* font = TTF_OpenFont(full_path.c_str(), size);"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_GetError",
      "location": {
        "file": "src/Resources.cpp",
        "line": 167,
        "column": 0
      },
      "context": "std::cerr << \"Failed to load font: \" << full_path << \" - \" << SDL_GetError() << std::endl;"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/Resources.cpp",
        "line": 174,
        "column": 0
      },
      "context": "SDL_Log(\"DEBUG: get_texture called for 'explosion', count=%zu, ptr=%p\", textures.count(name), textur"
    },
    {
      "caller_function": "f",
      "called_function": "count",
      "location": {
        "file": "src/Resources.cpp",
        "line": 174,
        "column": 0
      },
      "context": "SDL_Log(\"DEBUG: get_texture called for 'explosion', count=%zu, ptr=%p\", textures.count(name), textur"
    },
    {
      "caller_function": "f",
      "called_function": "count",
      "location": {
        "file": "src/Resources.cpp",
        "line": 174,
        "column": 0
      },
      "context": "SDL_Log(\"DEBUG: get_texture called for 'explosion', count=%zu, ptr=%p\", textures.count(name), textur"
    },
    {
      "caller_function": "e",
      "called_function": "get_texture",
      "location": {
        "file": "src/Resources.cpp",
        "line": 183,
        "column": 0
      },
      "context": "TextureInfo* tex_info = get_texture(name);"
    },
    {
      "caller_function": "f",
      "called_function": "IMG_Load",
      "location": {
        "file": "src/Resources.cpp",
        "line": 193,
        "column": 0
      },
      "context": "SDL_Surface* surface = IMG_Load(full_path.c_str());"
    },
    {
      "caller_function": "f",
      "called_function": "c_str",
      "location": {
        "file": "src/Resources.cpp",
        "line": 193,
        "column": 0
      },
      "context": "SDL_Surface* surface = IMG_Load(full_path.c_str());"
    },
    {
      "caller_function": "f",
      "called_function": "glGenTextures",
      "location": {
        "file": "src/Resources.cpp",
        "line": 196,
        "column": 0
      },
      "context": "glGenTextures(1, &tex_info->gl_texture);"
    },
    {
      "caller_function": "f",
      "called_function": "glBindTexture",
      "location": {
        "file": "src/Resources.cpp",
        "line": 197,
        "column": 0
      },
      "context": "glBindTexture(GL_TEXTURE_2D, tex_info->gl_texture);"
    },
    {
      "caller_function": "f",
      "called_function": "glTexImage2D",
      "location": {
        "file": "src/Resources.cpp",
        "line": 207,
        "column": 0
      },
      "context": "glTexImage2D(GL_TEXTURE_2D, 0, internal_format, surface->w, surface->h, 0,"
    },
    {
      "caller_function": "f",
      "called_function": "glTexParameteri",
      "location": {
        "file": "src/Resources.cpp",
        "line": 210,
        "column": 0
      },
      "context": "glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST);"
    },
    {
      "caller_function": "f",
      "called_function": "glTexParameteri",
      "location": {
        "file": "src/Resources.cpp",
        "line": 211,
        "column": 0
      },
      "context": "glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST);"
    },
    {
      "caller_function": "f",
      "called_function": "glTexParameteri",
      "location": {
        "file": "src/Resources.cpp",
        "line": 212,
        "column": 0
      },
      "context": "glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE);"
    },
    {
      "caller_function": "f",
      "called_function": "glTexParameteri",
      "location": {
        "file": "src/Resources.cpp",
        "line": 213,
        "column": 0
      },
      "context": "glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_EDGE);"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_DestroySurface",
      "location": {
        "file": "src/Resources.cpp",
        "line": 215,
        "column": 0
      },
      "context": "SDL_DestroySurface(surface);"
    },
    {
      "caller_function": "e",
      "called_function": "file",
      "location": {
        "file": "src/Resources.cpp",
        "line": 226,
        "column": 0
      },
      "context": "std::ifstream file(full_path);"
    },
    {
      "caller_function": "f",
      "called_function": "rdbuf",
      "location": {
        "file": "src/Resources.cpp",
        "line": 233,
        "column": 0
      },
      "context": "buffer << file.rdbuf();"
    },
    {
      "caller_function": "f",
      "called_function": "str",
      "location": {
        "file": "src/Resources.cpp",
        "line": 234,
        "column": 0
      },
      "context": "return buffer.str();"
    },
    {
      "caller_function": "a",
      "called_function": "get_texture",
      "location": {
        "file": "src/Resources.cpp",
        "line": 240,
        "column": 0
      },
      "context": "TextureInfo* tex_info = get_texture(texture_name);"
    },
    {
      "caller_function": "a",
      "called_function": "IMG_Load",
      "location": {
        "file": "src/Resources.cpp",
        "line": 245,
        "column": 0
      },
      "context": "SDL_Surface* surface = IMG_Load(full_path.c_str());"
    },
    {
      "caller_function": "a",
      "called_function": "c_str",
      "location": {
        "file": "src/Resources.cpp",
        "line": 245,
        "column": 0
      },
      "context": "SDL_Surface* surface = IMG_Load(full_path.c_str());"
    },
    {
      "caller_function": "a",
      "called_function": "register_texture_metadata",
      "location": {
        "file": "src/Resources.cpp",
        "line": 252,
        "column": 0
      },
      "context": "renderer->register_texture_metadata(tex_info->gl_texture, surface->w, surface->h,"
    },
    {
      "caller_function": "a",
      "called_function": "SDL_DestroySurface",
      "location": {
        "file": "src/Resources.cpp",
        "line": 255,
        "column": 0
      },
      "context": "SDL_DestroySurface(surface);"
    },
    {
      "caller_function": "e",
      "called_function": "Timer::time_elapsed",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 29,
        "column": 0
      },
      "context": "total_time_accumulator += Timer::time_elapsed();"
    },
    {
      "caller_function": "e",
      "called_function": "time_elapsed",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 29,
        "column": 0
      },
      "context": "total_time_accumulator += Timer::time_elapsed();"
    },
    {
      "caller_function": "e",
      "called_function": "AIJob::AIJob",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 36,
        "column": 0
      },
      "context": "AIJob::AIJob(Controller_AI_Modern* _controller)"
    },
    {
      "caller_function": "e",
      "called_function": "AIJob",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 36,
        "column": 0
      },
      "context": "AIJob::AIJob(Controller_AI_Modern* _controller)"
    },
    {
      "caller_function": "e",
      "called_function": "controller",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 37,
        "column": 0
      },
      "context": ": controller(_controller)"
    },
    {
      "caller_function": "e",
      "called_function": "bomber",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 38,
        "column": 0
      },
      "context": ", bomber(_controller->bomber)"
    },
    {
      "caller_function": "e",
      "called_function": "context",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 39,
        "column": 0
      },
      "context": ", context(_controller->bomber->get_context())"
    },
    {
      "caller_function": "e",
      "called_function": "get_context",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 39,
        "column": 0
      },
      "context": ", context(_controller->bomber->get_context())"
    },
    {
      "caller_function": "e",
      "called_function": "AIJob",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 43,
        "column": 0
      },
      "context": "AIJob::~AIJob() {}"
    },
    {
      "caller_function": "e",
      "called_function": "AIJob_Go::AIJob_Go",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 47,
        "column": 0
      },
      "context": "AIJob_Go::AIJob_Go(Controller_AI_Modern* _controller, int _dir, int _distance)"
    },
    {
      "caller_function": "e",
      "called_function": "AIJob_Go",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 47,
        "column": 0
      },
      "context": "AIJob_Go::AIJob_Go(Controller_AI_Modern* _controller, int _dir, int _distance)"
    },
    {
      "caller_function": "e",
      "called_function": "AIJob",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 48,
        "column": 0
      },
      "context": ": AIJob(_controller), dir(_dir), distance(_distance)"
    },
    {
      "caller_function": "e",
      "called_function": "dir",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 48,
        "column": 0
      },
      "context": ": AIJob(_controller), dir(_dir), distance(_distance)"
    },
    {
      "caller_function": "e",
      "called_function": "distance",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 48,
        "column": 0
      },
      "context": ": AIJob(_controller), dir(_dir), distance(_distance)"
    },
    {
      "caller_function": "e",
      "called_function": "init",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 50,
        "column": 0
      },
      "context": "init();"
    },
    {
      "caller_function": "e",
      "called_function": "AIJob_Go",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 53,
        "column": 0
      },
      "context": "AIJob_Go::~AIJob_Go() {"
    },
    {
      "caller_function": "e",
      "called_function": "bomber_pos",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 61,
        "column": 0
      },
      "context": "PixelCoord bomber_pos(bomber->get_x(), bomber->get_y());"
    },
    {
      "caller_function": "e",
      "called_function": "get_x",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 61,
        "column": 0
      },
      "context": "PixelCoord bomber_pos(bomber->get_x(), bomber->get_y());"
    },
    {
      "caller_function": "e",
      "called_function": "get_y",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 61,
        "column": 0
      },
      "context": "PixelCoord bomber_pos(bomber->get_x(), bomber->get_y());"
    },
    {
      "caller_function": "e",
      "called_function": "CoordinateSystem::pixel_to_grid",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 62,
        "column": 0
      },
      "context": "GridCoord current_grid = CoordinateSystem::pixel_to_grid(bomber_pos);"
    },
    {
      "caller_function": "e",
      "called_function": "pixel_to_grid",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 62,
        "column": 0
      },
      "context": "GridCoord current_grid = CoordinateSystem::pixel_to_grid(bomber_pos);"
    },
    {
      "caller_function": "e",
      "called_function": "CoordinateSystem::grid_to_pixel",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 63,
        "column": 0
      },
      "context": "PixelCoord tile_center = CoordinateSystem::grid_to_pixel(current_grid);"
    },
    {
      "caller_function": "e",
      "called_function": "grid_to_pixel",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 63,
        "column": 0
      },
      "context": "PixelCoord tile_center = CoordinateSystem::grid_to_pixel(current_grid);"
    },
    {
      "caller_function": "f",
      "called_function": "get_map_y",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 115,
        "column": 0
      },
      "context": "start = bomber->get_map_y();"
    },
    {
      "caller_function": "f",
      "called_function": "get_map_y",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 122,
        "column": 0
      },
      "context": "start = bomber->get_map_y();"
    },
    {
      "caller_function": "f",
      "called_function": "get_map_x",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 129,
        "column": 0
      },
      "context": "start = bomber->get_map_x();"
    },
    {
      "caller_function": "f",
      "called_function": "get_map_x",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 136,
        "column": 0
      },
      "context": "start = bomber->get_map_x();"
    },
    {
      "caller_function": "f",
      "called_function": "AIJob_PutBomb::AIJob_PutBomb",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 147,
        "column": 0
      },
      "context": "AIJob_PutBomb::AIJob_PutBomb(Controller_AI_Modern* _controller)"
    },
    {
      "caller_function": "f",
      "called_function": "AIJob_PutBomb",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 147,
        "column": 0
      },
      "context": "AIJob_PutBomb::AIJob_PutBomb(Controller_AI_Modern* _controller)"
    },
    {
      "caller_function": "f",
      "called_function": "AIJob",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 148,
        "column": 0
      },
      "context": ": AIJob(_controller)"
    },
    {
      "caller_function": "f",
      "called_function": "AIJob_PutBomb",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 152,
        "column": 0
      },
      "context": "AIJob_PutBomb::~AIJob_PutBomb() {"
    },
    {
      "caller_function": "e",
      "called_function": "bomber_pos",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 161,
        "column": 0
      },
      "context": "PixelCoord bomber_pos(bomber->get_x(), bomber->get_y());"
    },
    {
      "caller_function": "e",
      "called_function": "get_x",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 161,
        "column": 0
      },
      "context": "PixelCoord bomber_pos(bomber->get_x(), bomber->get_y());"
    },
    {
      "caller_function": "e",
      "called_function": "get_y",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 161,
        "column": 0
      },
      "context": "PixelCoord bomber_pos(bomber->get_x(), bomber->get_y());"
    },
    {
      "caller_function": "e",
      "called_function": "CoordinateSystem::pixel_to_grid",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 162,
        "column": 0
      },
      "context": "GridCoord current_grid = CoordinateSystem::pixel_to_grid(bomber_pos);"
    },
    {
      "caller_function": "e",
      "called_function": "pixel_to_grid",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 162,
        "column": 0
      },
      "context": "GridCoord current_grid = CoordinateSystem::pixel_to_grid(bomber_pos);"
    },
    {
      "caller_function": "e",
      "called_function": "CoordinateSystem::grid_to_pixel",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 163,
        "column": 0
      },
      "context": "PixelCoord tile_center = CoordinateSystem::grid_to_pixel(current_grid);"
    },
    {
      "caller_function": "e",
      "called_function": "grid_to_pixel",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 163,
        "column": 0
      },
      "context": "PixelCoord tile_center = CoordinateSystem::grid_to_pixel(current_grid);"
    },
    {
      "caller_function": "f",
      "called_function": "AIJob_Wait::AIJob_Wait",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 174,
        "column": 0
      },
      "context": "AIJob_Wait::AIJob_Wait(Controller_AI_Modern* _controller, float _duration)"
    },
    {
      "caller_function": "f",
      "called_function": "AIJob_Wait",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 174,
        "column": 0
      },
      "context": "AIJob_Wait::AIJob_Wait(Controller_AI_Modern* _controller, float _duration)"
    },
    {
      "caller_function": "f",
      "called_function": "AIJob",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 175,
        "column": 0
      },
      "context": ": AIJob(_controller), duration(_duration)"
    },
    {
      "caller_function": "f",
      "called_function": "duration",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 175,
        "column": 0
      },
      "context": ": AIJob(_controller), duration(_duration)"
    },
    {
      "caller_function": "f",
      "called_function": "AIJob_Wait",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 179,
        "column": 0
      },
      "context": "AIJob_Wait::~AIJob_Wait() {}"
    },
    {
      "caller_function": "e",
      "called_function": "Timer::time_elapsed",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 182,
        "column": 0
      },
      "context": "duration -= Timer::time_elapsed();"
    },
    {
      "caller_function": "e",
      "called_function": "time_elapsed",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 182,
        "column": 0
      },
      "context": "duration -= Timer::time_elapsed();"
    },
    {
      "caller_function": "f",
      "called_function": "Controller_AI_Modern::Controller_AI_Modern",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 197,
        "column": 0
      },
      "context": "Controller_AI_Modern::Controller_AI_Modern(ModernAIPersonality _personality)"
    },
    {
      "caller_function": "f",
      "called_function": "Controller_AI_Modern",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 197,
        "column": 0
      },
      "context": "Controller_AI_Modern::Controller_AI_Modern(ModernAIPersonality _personality)"
    },
    {
      "caller_function": "f",
      "called_function": "personality",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 198,
        "column": 0
      },
      "context": ": personality(_personality)"
    },
    {
      "caller_function": "f",
      "called_function": "reaction_time",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 199,
        "column": 0
      },
      "context": ", reaction_time(0.1f)"
    },
    {
      "caller_function": "f",
      "called_function": "aggression_level",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 200,
        "column": 0
      },
      "context": ", aggression_level(0.5f)"
    },
    {
      "caller_function": "f",
      "called_function": "last_think_time",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 201,
        "column": 0
      },
      "context": ", last_think_time(0.0f)"
    },
    {
      "caller_function": "f",
      "called_function": "next_input_time",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 202,
        "column": 0
      },
      "context": ", next_input_time(0.0f)"
    },
    {
      "caller_function": "f",
      "called_function": "ai_update_interval",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 203,
        "column": 0
      },
      "context": ", ai_update_interval(0.05f) // 20 FPS AI thinking"
    },
    {
      "caller_function": "f",
      "called_function": "last_ai_update",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 204,
        "column": 0
      },
      "context": ", last_ai_update(0.0f)"
    },
    {
      "caller_function": "f",
      "called_function": "set_personality",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 207,
        "column": 0
      },
      "context": "set_personality(_personality);"
    },
    {
      "caller_function": "f",
      "called_function": "reset",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 208,
        "column": 0
      },
      "context": "reset();"
    },
    {
      "caller_function": "f",
      "called_function": "Controller_AI_Modern",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 211,
        "column": 0
      },
      "context": "Controller_AI_Modern::~Controller_AI_Modern() {"
    },
    {
      "caller_function": "f",
      "called_function": "clear_all_jobs",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 212,
        "column": 0
      },
      "context": "clear_all_jobs();"
    },
    {
      "caller_function": "h",
      "called_function": "Controller::attach",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 244,
        "column": 0
      },
      "context": "Controller::attach(_bomber);"
    },
    {
      "caller_function": "h",
      "called_function": "attach",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 244,
        "column": 0
      },
      "context": "Controller::attach(_bomber);"
    },
    {
      "caller_function": "f",
      "called_function": "get_context",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 248,
        "column": 0
      },
      "context": "map = bomber->get_context()->get_map();"
    },
    {
      "caller_function": "f",
      "called_function": "get_map",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 248,
        "column": 0
      },
      "context": "map = bomber->get_context()->get_map();"
    },
    {
      "caller_function": "f",
      "called_function": "get_context",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 258,
        "column": 0
      },
      "context": "map = bomber->get_context()->get_map();"
    },
    {
      "caller_function": "f",
      "called_function": "get_map",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 258,
        "column": 0
      },
      "context": "map = bomber->get_context()->get_map();"
    },
    {
      "caller_function": "f",
      "called_function": "clear_all_jobs",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 263,
        "column": 0
      },
      "context": "clear_all_jobs();"
    },
    {
      "caller_function": "e",
      "called_function": "get_total_time",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 276,
        "column": 0
      },
      "context": "float current_time = get_total_time();"
    },
    {
      "caller_function": "f",
      "called_function": "generate_rating_map",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 280,
        "column": 0
      },
      "context": "generate_rating_map();"
    },
    {
      "caller_function": "f",
      "called_function": "do_job",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 283,
        "column": 0
      },
      "context": "do_job();"
    },
    {
      "caller_function": "r",
      "called_function": "get_context",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 299,
        "column": 0
      },
      "context": "SpatialGrid* spatial_grid = bomber->get_context()->get_spatial_grid();"
    },
    {
      "caller_function": "r",
      "called_function": "get_spatial_grid",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 299,
        "column": 0
      },
      "context": "SpatialGrid* spatial_grid = bomber->get_context()->get_spatial_grid();"
    },
    {
      "caller_function": "f",
      "called_function": "collision_helper",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 301,
        "column": 0
      },
      "context": "CollisionHelper collision_helper(spatial_grid);"
    },
    {
      "caller_function": "f",
      "called_function": "bomber_position",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 302,
        "column": 0
      },
      "context": "PixelCoord bomber_position(bomber->get_x(), bomber->get_y());"
    },
    {
      "caller_function": "f",
      "called_function": "get_x",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 302,
        "column": 0
      },
      "context": "PixelCoord bomber_position(bomber->get_x(), bomber->get_y());"
    },
    {
      "caller_function": "f",
      "called_function": "get_y",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 302,
        "column": 0
      },
      "context": "PixelCoord bomber_position(bomber->get_x(), bomber->get_y());"
    },
    {
      "caller_function": "f",
      "called_function": "scan_ai_targets",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 305,
        "column": 0
      },
      "context": "CollisionHelper::AITargets ai_targets = collision_helper.scan_ai_targets(bomber_position, 25); // Fu"
    },
    {
      "caller_function": "f",
      "called_function": "get_map_x",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 310,
        "column": 0
      },
      "context": "int x = obj->get_map_x();"
    },
    {
      "caller_function": "f",
      "called_function": "get_map_y",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 311,
        "column": 0
      },
      "context": "int y = obj->get_map_y();"
    },
    {
      "caller_function": "f",
      "called_function": "apply_bomb_rating",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 312,
        "column": 0
      },
      "context": "apply_bomb_rating(x, y, 2, 3.0f, DIR_NONE);"
    },
    {
      "caller_function": "f",
      "called_function": "get_map_x",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 319,
        "column": 0
      },
      "context": "int x = obj->get_map_x();"
    },
    {
      "caller_function": "f",
      "called_function": "get_map_y",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 320,
        "column": 0
      },
      "context": "int y = obj->get_map_y();"
    },
    {
      "caller_function": "f",
      "called_function": "center_position",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 326,
        "column": 0
      },
      "context": "PixelCoord center_position(bomber->get_x(), bomber->get_y());"
    },
    {
      "caller_function": "f",
      "called_function": "get_x",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 326,
        "column": 0
      },
      "context": "PixelCoord center_position(bomber->get_x(), bomber->get_y());"
    },
    {
      "caller_function": "f",
      "called_function": "get_y",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 326,
        "column": 0
      },
      "context": "PixelCoord center_position(bomber->get_x(), bomber->get_y());"
    },
    {
      "caller_function": "f",
      "called_function": "get_objects_of_type_near",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 327,
        "column": 0
      },
      "context": "std::vector<GameObject*> explosions = spatial_grid->get_objects_of_type_near(center_position, GameOb"
    },
    {
      "caller_function": "f",
      "called_function": "get_map_x",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 330,
        "column": 0
      },
      "context": "int x = obj->get_map_x();"
    },
    {
      "caller_function": "f",
      "called_function": "get_map_y",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 331,
        "column": 0
      },
      "context": "int y = obj->get_map_y();"
    },
    {
      "caller_function": "r",
      "called_function": "get_map_x",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 340,
        "column": 0
      },
      "context": "int x = obj->get_map_x();"
    },
    {
      "caller_function": "r",
      "called_function": "get_map_y",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 341,
        "column": 0
      },
      "context": "int y = obj->get_map_y();"
    },
    {
      "caller_function": "h",
      "called_function": "apply_bomb_rating",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 345,
        "column": 0
      },
      "context": "apply_bomb_rating(x, y, 2, 3.0f, DIR_NONE);"
    },
    {
      "caller_function": "f",
      "called_function": "get_speed",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 378,
        "column": 0
      },
      "context": "} else if (countdown < 40.0f / (float)bomber->get_speed()) {"
    },
    {
      "caller_function": "r",
      "called_function": "get_context",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 387,
        "column": 0
      },
      "context": "if (bomber->get_context()->get_tile_manager()->is_tile_blocking_at(x + i, y)) break;"
    },
    {
      "caller_function": "r",
      "called_function": "get_tile_manager",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 387,
        "column": 0
      },
      "context": "if (bomber->get_context()->get_tile_manager()->is_tile_blocking_at(x + i, y)) break;"
    },
    {
      "caller_function": "r",
      "called_function": "is_tile_blocking_at",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 387,
        "column": 0
      },
      "context": "if (bomber->get_context()->get_tile_manager()->is_tile_blocking_at(x + i, y)) break;"
    },
    {
      "caller_function": "r",
      "called_function": "get_context",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 392,
        "column": 0
      },
      "context": "if (bomber->get_context()->get_tile_manager()->is_tile_blocking_at(x - i, y)) break;"
    },
    {
      "caller_function": "r",
      "called_function": "get_tile_manager",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 392,
        "column": 0
      },
      "context": "if (bomber->get_context()->get_tile_manager()->is_tile_blocking_at(x - i, y)) break;"
    },
    {
      "caller_function": "r",
      "called_function": "is_tile_blocking_at",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 392,
        "column": 0
      },
      "context": "if (bomber->get_context()->get_tile_manager()->is_tile_blocking_at(x - i, y)) break;"
    },
    {
      "caller_function": "r",
      "called_function": "get_context",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 397,
        "column": 0
      },
      "context": "if (bomber->get_context()->get_tile_manager()->is_tile_blocking_at(x, y + i)) break;"
    },
    {
      "caller_function": "r",
      "called_function": "get_tile_manager",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 397,
        "column": 0
      },
      "context": "if (bomber->get_context()->get_tile_manager()->is_tile_blocking_at(x, y + i)) break;"
    },
    {
      "caller_function": "r",
      "called_function": "is_tile_blocking_at",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 397,
        "column": 0
      },
      "context": "if (bomber->get_context()->get_tile_manager()->is_tile_blocking_at(x, y + i)) break;"
    },
    {
      "caller_function": "r",
      "called_function": "get_context",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 402,
        "column": 0
      },
      "context": "if (bomber->get_context()->get_tile_manager()->is_tile_blocking_at(x, y - i)) break;"
    },
    {
      "caller_function": "r",
      "called_function": "get_tile_manager",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 402,
        "column": 0
      },
      "context": "if (bomber->get_context()->get_tile_manager()->is_tile_blocking_at(x, y - i)) break;"
    },
    {
      "caller_function": "r",
      "called_function": "is_tile_blocking_at",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 402,
        "column": 0
      },
      "context": "if (bomber->get_context()->get_tile_manager()->is_tile_blocking_at(x, y - i)) break;"
    },
    {
      "caller_function": "f",
      "called_function": "find_new_jobs",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 409,
        "column": 0
      },
      "context": "find_new_jobs();"
    },
    {
      "caller_function": "f",
      "called_function": "empty",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 410,
        "column": 0
      },
      "context": "return !jobs.empty();"
    },
    {
      "caller_function": "f",
      "called_function": "clear_all_jobs",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 414,
        "column": 0
      },
      "context": "clear_all_jobs();"
    },
    {
      "caller_function": "f",
      "called_function": "job_ready",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 415,
        "column": 0
      },
      "context": "return job_ready();"
    },
    {
      "caller_function": "f",
      "called_function": "erase",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 419,
        "column": 0
      },
      "context": "jobs.erase(jobs.begin());"
    },
    {
      "caller_function": "f",
      "called_function": "begin",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 419,
        "column": 0
      },
      "context": "jobs.erase(jobs.begin());"
    },
    {
      "caller_function": "f",
      "called_function": "init",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 421,
        "column": 0
      },
      "context": "jobs[0]->init();"
    },
    {
      "caller_function": "f",
      "called_function": "job_ready",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 423,
        "column": 0
      },
      "context": "return job_ready();"
    },
    {
      "caller_function": "f",
      "called_function": "execute",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 458,
        "column": 0
      },
      "context": "jobs[0]->execute();"
    },
    {
      "caller_function": "s",
      "called_function": "get_map_x",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 463,
        "column": 0
      },
      "context": "int x = bomber->get_map_x();"
    },
    {
      "caller_function": "s",
      "called_function": "get_map_y",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 464,
        "column": 0
      },
      "context": "int y = bomber->get_map_y();"
    },
    {
      "caller_function": "f",
      "called_function": "clear_all_jobs",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 468,
        "column": 0
      },
      "context": "clear_all_jobs();"
    },
    {
      "caller_function": "f",
      "called_function": "find_way",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 475,
        "column": 0
      },
      "context": "find_way(0, RATING_X, 3);"
    },
    {
      "caller_function": "f",
      "called_function": "find_way",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 484,
        "column": 0
      },
      "context": "find_way(0, RATING_HOT, 4);"
    },
    {
      "caller_function": "s",
      "called_function": "get_map_x",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 492,
        "column": 0
      },
      "context": "int x = bomber->get_map_x();"
    },
    {
      "caller_function": "s",
      "called_function": "get_map_y",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 493,
        "column": 0
      },
      "context": "int y = bomber->get_map_y();"
    },
    {
      "caller_function": "f",
      "called_function": "push_back",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 522,
        "column": 0
      },
      "context": "jobs.push_back(std::make_unique<AIJob_PutBomb>(this));"
    },
    {
      "caller_function": "f",
      "called_function": "add_escape_sequence",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 524,
        "column": 0
      },
      "context": "add_escape_sequence(x, y);"
    },
    {
      "caller_function": "y",
      "called_function": "visit_map",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 532,
        "column": 0
      },
      "context": "std::vector<std::vector<int>> visit_map(MAP_WIDTH, std::vector<int>(MAP_HEIGHT, -1));"
    },
    {
      "caller_function": "y",
      "called_function": "start",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 537,
        "column": 0
      },
      "context": "CL_Vector start(bomber->get_map_x(), bomber->get_map_y());"
    },
    {
      "caller_function": "y",
      "called_function": "get_map_x",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 537,
        "column": 0
      },
      "context": "CL_Vector start(bomber->get_map_x(), bomber->get_map_y());"
    },
    {
      "caller_function": "y",
      "called_function": "get_map_y",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 537,
        "column": 0
      },
      "context": "CL_Vector start(bomber->get_map_x(), bomber->get_map_y());"
    },
    {
      "caller_function": "y",
      "called_function": "dest",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 538,
        "column": 0
      },
      "context": "CL_Vector dest(-1, -1, -1);"
    },
    {
      "caller_function": "y",
      "called_function": "push",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 541,
        "column": 0
      },
      "context": "new_queue.push(start);"
    },
    {
      "caller_function": "e",
      "called_function": "push",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 546,
        "column": 0
      },
      "context": "working_queue.push(new_queue.front());"
    },
    {
      "caller_function": "e",
      "called_function": "front",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 546,
        "column": 0
      },
      "context": "working_queue.push(new_queue.front());"
    },
    {
      "caller_function": "e",
      "called_function": "pop",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 547,
        "column": 0
      },
      "context": "new_queue.pop();"
    },
    {
      "caller_function": "e",
      "called_function": "front",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 552,
        "column": 0
      },
      "context": "CL_Vector current = working_queue.front();"
    },
    {
      "caller_function": "e",
      "called_function": "pop",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 553,
        "column": 0
      },
      "context": "working_queue.pop();"
    },
    {
      "caller_function": "r",
      "called_function": "rand",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 560,
        "column": 0
      },
      "context": "int a = rand() % 4;"
    },
    {
      "caller_function": "r",
      "called_function": "rand",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 561,
        "column": 0
      },
      "context": "int b = rand() % 4;"
    },
    {
      "caller_function": "r",
      "called_function": "std::swap",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 562,
        "column": 0
      },
      "context": "std::swap(directions[a], directions[b]);"
    },
    {
      "caller_function": "r",
      "called_function": "swap",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 562,
        "column": 0
      },
      "context": "std::swap(directions[a], directions[b]);"
    },
    {
      "caller_function": "f",
      "called_function": "push",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 578,
        "column": 0
      },
      "context": "new_queue.push(next);"
    },
    {
      "caller_function": "f",
      "called_function": "push_back",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 603,
        "column": 0
      },
      "context": "reverse_path.push_back(std::make_unique<AIJob_Go>(this, DIR_DOWN));"
    },
    {
      "caller_function": "f",
      "called_function": "push_back",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 606,
        "column": 0
      },
      "context": "reverse_path.push_back(std::make_unique<AIJob_Go>(this, DIR_LEFT));"
    },
    {
      "caller_function": "f",
      "called_function": "push_back",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 609,
        "column": 0
      },
      "context": "reverse_path.push_back(std::make_unique<AIJob_Go>(this, DIR_UP));"
    },
    {
      "caller_function": "f",
      "called_function": "push_back",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 612,
        "column": 0
      },
      "context": "reverse_path.push_back(std::make_unique<AIJob_Go>(this, DIR_RIGHT));"
    },
    {
      "caller_function": "f",
      "called_function": "std::move",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 621,
        "column": 0
      },
      "context": "jobs.push_back(std::move(reverse_path.back()));"
    },
    {
      "caller_function": "f",
      "called_function": "push_back",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 621,
        "column": 0
      },
      "context": "jobs.push_back(std::move(reverse_path.back()));"
    },
    {
      "caller_function": "f",
      "called_function": "move",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 621,
        "column": 0
      },
      "context": "jobs.push_back(std::move(reverse_path.back()));"
    },
    {
      "caller_function": "f",
      "called_function": "back",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 621,
        "column": 0
      },
      "context": "jobs.push_back(std::move(reverse_path.back()));"
    },
    {
      "caller_function": "r",
      "called_function": "std::move",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 626,
        "column": 0
      },
      "context": "jobs.push_back(std::move(*it));"
    },
    {
      "caller_function": "r",
      "called_function": "push_back",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 626,
        "column": 0
      },
      "context": "jobs.push_back(std::move(*it));"
    },
    {
      "caller_function": "r",
      "called_function": "move",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 626,
        "column": 0
      },
      "context": "jobs.push_back(std::move(*it));"
    },
    {
      "caller_function": "s",
      "called_function": "clear",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 634,
        "column": 0
      },
      "context": "jobs.clear();"
    },
    {
      "caller_function": "s",
      "called_function": "Controller_AI_Modern::is_hotspot",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 637,
        "column": 0
      },
      "context": "bool Controller_AI_Modern::is_hotspot(int x, int y) const {"
    },
    {
      "caller_function": "s",
      "called_function": "is_hotspot",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 637,
        "column": 0
      },
      "context": "bool Controller_AI_Modern::is_hotspot(int x, int y) const {"
    },
    {
      "caller_function": "s",
      "called_function": "Controller_AI_Modern::is_death",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 642,
        "column": 0
      },
      "context": "bool Controller_AI_Modern::is_death(int x, int y) const {"
    },
    {
      "caller_function": "s",
      "called_function": "is_death",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 642,
        "column": 0
      },
      "context": "bool Controller_AI_Modern::is_death(int x, int y) const {"
    },
    {
      "caller_function": "s",
      "called_function": "Controller_AI_Modern::can_escape_from_bomb",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 647,
        "column": 0
      },
      "context": "bool Controller_AI_Modern::can_escape_from_bomb(int x, int y) const {"
    },
    {
      "caller_function": "s",
      "called_function": "can_escape_from_bomb",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 647,
        "column": 0
      },
      "context": "bool Controller_AI_Modern::can_escape_from_bomb(int x, int y) const {"
    },
    {
      "caller_function": "s",
      "called_function": "is_hotspot",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 652,
        "column": 0
      },
      "context": "if (x > 0 && !is_hotspot(x - 1, y)) safe_tiles++;"
    },
    {
      "caller_function": "s",
      "called_function": "is_hotspot",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 653,
        "column": 0
      },
      "context": "if (x < MAP_WIDTH - 1 && !is_hotspot(x + 1, y)) safe_tiles++;"
    },
    {
      "caller_function": "s",
      "called_function": "is_hotspot",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 654,
        "column": 0
      },
      "context": "if (y > 0 && !is_hotspot(x, y - 1)) safe_tiles++;"
    },
    {
      "caller_function": "s",
      "called_function": "is_hotspot",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 655,
        "column": 0
      },
      "context": "if (y < MAP_HEIGHT - 1 && !is_hotspot(x, y + 1)) safe_tiles++;"
    },
    {
      "caller_function": "s",
      "called_function": "Controller_AI_Modern::bomber_rating",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 660,
        "column": 0
      },
      "context": "int Controller_AI_Modern::bomber_rating(int x, int y) const {"
    },
    {
      "caller_function": "s",
      "called_function": "bomber_rating",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 660,
        "column": 0
      },
      "context": "int Controller_AI_Modern::bomber_rating(int x, int y) const {"
    },
    {
      "caller_function": "s",
      "called_function": "Controller_AI_Modern::extra_rating",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 665,
        "column": 0
      },
      "context": "int Controller_AI_Modern::extra_rating(int x, int y) const {"
    },
    {
      "caller_function": "s",
      "called_function": "extra_rating",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 665,
        "column": 0
      },
      "context": "int Controller_AI_Modern::extra_rating(int x, int y) const {"
    },
    {
      "caller_function": "s",
      "called_function": "Controller_AI_Modern::get_aggression_modifier",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 670,
        "column": 0
      },
      "context": "float Controller_AI_Modern::get_aggression_modifier() const {"
    },
    {
      "caller_function": "s",
      "called_function": "get_aggression_modifier",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 670,
        "column": 0
      },
      "context": "float Controller_AI_Modern::get_aggression_modifier() const {"
    },
    {
      "caller_function": "h",
      "called_function": "Controller_AI_Modern::get_reaction_delay",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 681,
        "column": 0
      },
      "context": "float Controller_AI_Modern::get_reaction_delay() const {"
    },
    {
      "caller_function": "h",
      "called_function": "get_reaction_delay",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 681,
        "column": 0
      },
      "context": "float Controller_AI_Modern::get_reaction_delay() const {"
    },
    {
      "caller_function": "h",
      "called_function": "rand",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 682,
        "column": 0
      },
      "context": "return reaction_time * (0.5f + (rand() % 100) / 200.0f);"
    },
    {
      "caller_function": "h",
      "called_function": "Controller_AI_Modern::should_hunt_enemies",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 685,
        "column": 0
      },
      "context": "bool Controller_AI_Modern::should_hunt_enemies() const {"
    },
    {
      "caller_function": "h",
      "called_function": "should_hunt_enemies",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 685,
        "column": 0
      },
      "context": "bool Controller_AI_Modern::should_hunt_enemies() const {"
    },
    {
      "caller_function": "h",
      "called_function": "Controller_AI_Modern::get_current_state",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 698,
        "column": 0
      },
      "context": "std::string Controller_AI_Modern::get_current_state() const {"
    },
    {
      "caller_function": "h",
      "called_function": "get_current_state",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 698,
        "column": 0
      },
      "context": "std::string Controller_AI_Modern::get_current_state() const {"
    },
    {
      "caller_function": "h",
      "called_function": "empty",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 699,
        "column": 0
      },
      "context": "if (jobs.empty()) return \"IDLE\";"
    },
    {
      "caller_function": "h",
      "called_function": "get",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 702,
        "column": 0
      },
      "context": "if (dynamic_cast<const AIJob_Go*>(jobs[0].get())) return \"MOVING\";"
    },
    {
      "caller_function": "h",
      "called_function": "get",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 703,
        "column": 0
      },
      "context": "if (dynamic_cast<const AIJob_PutBomb*>(jobs[0].get())) return \"BOMBING\";"
    },
    {
      "caller_function": "h",
      "called_function": "get",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 704,
        "column": 0
      },
      "context": "if (dynamic_cast<const AIJob_Wait*>(jobs[0].get())) return \"WAITING\";"
    },
    {
      "caller_function": "h",
      "called_function": "Controller_AI_Modern::is_starting_corner_position",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 711,
        "column": 0
      },
      "context": "bool Controller_AI_Modern::is_starting_corner_position(int x, int y) const {"
    },
    {
      "caller_function": "h",
      "called_function": "is_starting_corner_position",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 711,
        "column": 0
      },
      "context": "bool Controller_AI_Modern::is_starting_corner_position(int x, int y) const {"
    },
    {
      "caller_function": "h",
      "called_function": "Controller_AI_Modern::can_escape_from_bomb_safely",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 719,
        "column": 0
      },
      "context": "bool Controller_AI_Modern::can_escape_from_bomb_safely(int x, int y) const {"
    },
    {
      "caller_function": "h",
      "called_function": "can_escape_from_bomb_safely",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 719,
        "column": 0
      },
      "context": "bool Controller_AI_Modern::can_escape_from_bomb_safely(int x, int y) const {"
    },
    {
      "caller_function": "f",
      "called_function": "Controller_AI_Modern::bombing_is_beneficial",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 769,
        "column": 0
      },
      "context": "bool Controller_AI_Modern::bombing_is_beneficial(int x, int y) const {"
    },
    {
      "caller_function": "f",
      "called_function": "bombing_is_beneficial",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 769,
        "column": 0
      },
      "context": "bool Controller_AI_Modern::bombing_is_beneficial(int x, int y) const {"
    },
    {
      "caller_function": "n",
      "called_function": "get_map_x",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 809,
        "column": 0
      },
      "context": "int x = bomber->get_map_x();"
    },
    {
      "caller_function": "n",
      "called_function": "get_map_y",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 810,
        "column": 0
      },
      "context": "int y = bomber->get_map_y();"
    },
    {
      "caller_function": "f",
      "called_function": "push_back",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 823,
        "column": 0
      },
      "context": "jobs.push_back("
    },
    {
      "caller_function": "f",
      "called_function": "push_back",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 832,
        "column": 0
      },
      "context": "jobs.push_back("
    },
    {
      "caller_function": "f",
      "called_function": "Controller_AI_Modern::count_active_bombs",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 845,
        "column": 0
      },
      "context": "int Controller_AI_Modern::count_active_bombs() const {"
    },
    {
      "caller_function": "f",
      "called_function": "count_active_bombs",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 845,
        "column": 0
      },
      "context": "int Controller_AI_Modern::count_active_bombs() const {"
    },
    {
      "caller_function": "f",
      "called_function": "get_context",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 849,
        "column": 0
      },
      "context": "SpatialGrid* spatial_grid = bomber->get_context()->get_spatial_grid();"
    },
    {
      "caller_function": "f",
      "called_function": "get_spatial_grid",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 849,
        "column": 0
      },
      "context": "SpatialGrid* spatial_grid = bomber->get_context()->get_spatial_grid();"
    },
    {
      "caller_function": "f",
      "called_function": "bomber_position",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 851,
        "column": 0
      },
      "context": "PixelCoord bomber_position(bomber->get_x(), bomber->get_y());"
    },
    {
      "caller_function": "f",
      "called_function": "get_x",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 851,
        "column": 0
      },
      "context": "PixelCoord bomber_position(bomber->get_x(), bomber->get_y());"
    },
    {
      "caller_function": "f",
      "called_function": "get_y",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 851,
        "column": 0
      },
      "context": "PixelCoord bomber_position(bomber->get_x(), bomber->get_y());"
    },
    {
      "caller_function": "f",
      "called_function": "get_bombs_near",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 854,
        "column": 0
      },
      "context": "std::vector<GameObject*> all_bombs = spatial_grid->get_bombs_near(bomber_position, 25); // 25 tile r"
    },
    {
      "caller_function": "f",
      "called_function": "size",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 855,
        "column": 0
      },
      "context": "count = all_bombs.size();"
    },
    {
      "caller_function": "f",
      "called_function": "Controller_AI_Modern::get_max_bombs",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 868,
        "column": 0
      },
      "context": "int Controller_AI_Modern::get_max_bombs() const {"
    },
    {
      "caller_function": "f",
      "called_function": "get_max_bombs",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 868,
        "column": 0
      },
      "context": "int Controller_AI_Modern::get_max_bombs() const {"
    },
    {
      "caller_function": "e",
      "called_function": "find_best_escape_direction",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 882,
        "column": 0
      },
      "context": "int best_dir = find_best_escape_direction(bomb_x, bomb_y);"
    },
    {
      "caller_function": "f",
      "called_function": "push_back",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 886,
        "column": 0
      },
      "context": "jobs.push_back(std::make_unique<AIJob_Go>(this, best_dir, 3));"
    },
    {
      "caller_function": "f",
      "called_function": "push_back",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 889,
        "column": 0
      },
      "context": "jobs.push_back(std::make_unique<AIJob_Wait>(this, 4.0f));"
    },
    {
      "caller_function": "f",
      "called_function": "Controller_AI_Modern::find_best_escape_direction",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 893,
        "column": 0
      },
      "context": "int Controller_AI_Modern::find_best_escape_direction(int bomb_x, int bomb_y) const {"
    },
    {
      "caller_function": "f",
      "called_function": "find_best_escape_direction",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 893,
        "column": 0
      },
      "context": "int Controller_AI_Modern::find_best_escape_direction(int bomb_x, int bomb_y) const {"
    },
    {
      "caller_function": "r",
      "called_function": "evaluate_escape_direction",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 901,
        "column": 0
      },
      "context": "int safety_score = evaluate_escape_direction(bomb_x, bomb_y, dir);"
    },
    {
      "caller_function": "f",
      "called_function": "Controller_AI_Modern::evaluate_escape_direction",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 911,
        "column": 0
      },
      "context": "int Controller_AI_Modern::evaluate_escape_direction(int bomb_x, int bomb_y, int direction) const {"
    },
    {
      "caller_function": "f",
      "called_function": "evaluate_escape_direction",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 911,
        "column": 0
      },
      "context": "int Controller_AI_Modern::evaluate_escape_direction(int bomb_x, int bomb_y, int direction) const {"
    },
    {
      "caller_function": "f",
      "called_function": "Controller_AI_Modern::count_nearby_threats",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 953,
        "column": 0
      },
      "context": "int Controller_AI_Modern::count_nearby_threats(int x, int y) const {"
    },
    {
      "caller_function": "f",
      "called_function": "count_nearby_threats",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 953,
        "column": 0
      },
      "context": "int Controller_AI_Modern::count_nearby_threats(int x, int y) const {"
    },
    {
      "caller_function": null,
      "called_function": "SettingsScreen::SettingsScreen",
      "location": {
        "file": "src/SettingsScreen.cpp",
        "line": 8,
        "column": 0
      },
      "context": "SettingsScreen::SettingsScreen(SDL_Renderer* renderer)"
    },
    {
      "caller_function": null,
      "called_function": "SettingsScreen",
      "location": {
        "file": "src/SettingsScreen.cpp",
        "line": 8,
        "column": 0
      },
      "context": "SettingsScreen::SettingsScreen(SDL_Renderer* renderer)"
    },
    {
      "caller_function": null,
      "called_function": "renderer",
      "location": {
        "file": "src/SettingsScreen.cpp",
        "line": 9,
        "column": 0
      },
      "context": ": renderer(renderer), selected_item(0), selected_player(0), next_state(GameState::SETTINGS) {"
    },
    {
      "caller_function": null,
      "called_function": "selected_item",
      "location": {
        "file": "src/SettingsScreen.cpp",
        "line": 9,
        "column": 0
      },
      "context": ": renderer(renderer), selected_item(0), selected_player(0), next_state(GameState::SETTINGS) {"
    },
    {
      "caller_function": null,
      "called_function": "selected_player",
      "location": {
        "file": "src/SettingsScreen.cpp",
        "line": 9,
        "column": 0
      },
      "context": ": renderer(renderer), selected_item(0), selected_player(0), next_state(GameState::SETTINGS) {"
    },
    {
      "caller_function": null,
      "called_function": "next_state",
      "location": {
        "file": "src/SettingsScreen.cpp",
        "line": 9,
        "column": 0
      },
      "context": ": renderer(renderer), selected_item(0), selected_player(0), next_state(GameState::SETTINGS) {"
    },
    {
      "caller_function": null,
      "called_function": "push_back",
      "location": {
        "file": "src/SettingsScreen.cpp",
        "line": 10,
        "column": 0
      },
      "context": "menu_items.push_back(\"Player Setup\");"
    },
    {
      "caller_function": null,
      "called_function": "push_back",
      "location": {
        "file": "src/SettingsScreen.cpp",
        "line": 11,
        "column": 0
      },
      "context": "menu_items.push_back(\"Game Options\");"
    },
    {
      "caller_function": null,
      "called_function": "push_back",
      "location": {
        "file": "src/SettingsScreen.cpp",
        "line": 12,
        "column": 0
      },
      "context": "menu_items.push_back(\"Graphics Options\");"
    },
    {
      "caller_function": null,
      "called_function": "push_back",
      "location": {
        "file": "src/SettingsScreen.cpp",
        "line": 13,
        "column": 0
      },
      "context": "menu_items.push_back(\"Back to Main Menu\");"
    },
    {
      "caller_function": null,
      "called_function": "SettingsScreen",
      "location": {
        "file": "src/SettingsScreen.cpp",
        "line": 16,
        "column": 0
      },
      "context": "SettingsScreen::~SettingsScreen() {"
    },
    {
      "caller_function": "h",
      "called_function": "size",
      "location": {
        "file": "src/SettingsScreen.cpp",
        "line": 23,
        "column": 0
      },
      "context": "selected_item = (selected_item > 0) ? selected_item - 1 : menu_items.size() - 1;"
    },
    {
      "caller_function": "h",
      "called_function": "size",
      "location": {
        "file": "src/SettingsScreen.cpp",
        "line": 26,
        "column": 0
      },
      "context": "selected_item = (selected_item < menu_items.size() - 1) ? selected_item + 1 : 0;"
    },
    {
      "caller_function": "h",
      "called_function": "handle_player_setup_input",
      "location": {
        "file": "src/SettingsScreen.cpp",
        "line": 47,
        "column": 0
      },
      "context": "handle_player_setup_input(event);"
    },
    {
      "caller_function": "f",
      "called_function": "render_player_setup",
      "location": {
        "file": "src/SettingsScreen.cpp",
        "line": 68,
        "column": 0
      },
      "context": "render_player_setup();"
    },
    {
      "caller_function": "f",
      "called_function": "render_game_options",
      "location": {
        "file": "src/SettingsScreen.cpp",
        "line": 70,
        "column": 0
      },
      "context": "render_game_options();"
    },
    {
      "caller_function": "f",
      "called_function": "SettingsScreen::get_next_state",
      "location": {
        "file": "src/SettingsScreen.cpp",
        "line": 87,
        "column": 0
      },
      "context": "GameState SettingsScreen::get_next_state() const {"
    },
    {
      "caller_function": "f",
      "called_function": "get_next_state",
      "location": {
        "file": "src/SettingsScreen.cpp",
        "line": 87,
        "column": 0
      },
      "context": "GameState SettingsScreen::get_next_state() const {"
    },
    {
      "caller_function": "r",
      "called_function": "is_enabled",
      "location": {
        "file": "src/SettingsScreen.cpp",
        "line": 107,
        "column": 0
      },
      "context": "SDL_Color player_color = GameConfig::bomber[i].is_enabled() ?"
    },
    {
      "caller_function": "r",
      "called_function": "std::to_string",
      "location": {
        "file": "src/SettingsScreen.cpp",
        "line": 110,
        "column": 0
      },
      "context": "std::string player_text = \"Player \" + std::to_string(i + 1) + \": \";"
    },
    {
      "caller_function": "r",
      "called_function": "to_string",
      "location": {
        "file": "src/SettingsScreen.cpp",
        "line": 110,
        "column": 0
      },
      "context": "std::string player_text = \"Player \" + std::to_string(i + 1) + \": \";"
    },
    {
      "caller_function": "f",
      "called_function": "get_name",
      "location": {
        "file": "src/SettingsScreen.cpp",
        "line": 112,
        "column": 0
      },
      "context": "player_text += GameConfig::bomber[i].get_name() + \" (\" +"
    },
    {
      "caller_function": "f",
      "called_function": "get_controller_name",
      "location": {
        "file": "src/SettingsScreen.cpp",
        "line": 113,
        "column": 0
      },
      "context": "get_controller_name(GameConfig::bomber[i].get_controller()) + \") \" +"
    },
    {
      "caller_function": "f",
      "called_function": "get_controller",
      "location": {
        "file": "src/SettingsScreen.cpp",
        "line": 113,
        "column": 0
      },
      "context": "get_controller_name(GameConfig::bomber[i].get_controller()) + \") \" +"
    },
    {
      "caller_function": "f",
      "called_function": "get_team_name",
      "location": {
        "file": "src/SettingsScreen.cpp",
        "line": 114,
        "column": 0
      },
      "context": "get_team_name(GameConfig::bomber[i].get_team());"
    },
    {
      "caller_function": "f",
      "called_function": "get_team",
      "location": {
        "file": "src/SettingsScreen.cpp",
        "line": 114,
        "column": 0
      },
      "context": "get_team_name(GameConfig::bomber[i].get_team());"
    },
    {
      "caller_function": "s",
      "called_function": "std::to_string",
      "location": {
        "file": "src/SettingsScreen.cpp",
        "line": 155,
        "column": 0
      },
      "context": "\"Points to win: \" + std::to_string(GameConfig::get_points_to_win()),"
    },
    {
      "caller_function": "s",
      "called_function": "GameConfig::get_points_to_win",
      "location": {
        "file": "src/SettingsScreen.cpp",
        "line": 155,
        "column": 0
      },
      "context": "\"Points to win: \" + std::to_string(GameConfig::get_points_to_win()),"
    },
    {
      "caller_function": "s",
      "called_function": "to_string",
      "location": {
        "file": "src/SettingsScreen.cpp",
        "line": 155,
        "column": 0
      },
      "context": "\"Points to win: \" + std::to_string(GameConfig::get_points_to_win()),"
    },
    {
      "caller_function": "s",
      "called_function": "get_points_to_win",
      "location": {
        "file": "src/SettingsScreen.cpp",
        "line": 155,
        "column": 0
      },
      "context": "\"Points to win: \" + std::to_string(GameConfig::get_points_to_win()),"
    },
    {
      "caller_function": "s",
      "called_function": "std::to_string",
      "location": {
        "file": "src/SettingsScreen.cpp",
        "line": 156,
        "column": 0
      },
      "context": "\"Round time: \" + std::to_string(GameConfig::get_round_time()) + \" seconds\","
    },
    {
      "caller_function": "s",
      "called_function": "GameConfig::get_round_time",
      "location": {
        "file": "src/SettingsScreen.cpp",
        "line": 156,
        "column": 0
      },
      "context": "\"Round time: \" + std::to_string(GameConfig::get_round_time()) + \" seconds\","
    },
    {
      "caller_function": "s",
      "called_function": "to_string",
      "location": {
        "file": "src/SettingsScreen.cpp",
        "line": 156,
        "column": 0
      },
      "context": "\"Round time: \" + std::to_string(GameConfig::get_round_time()) + \" seconds\","
    },
    {
      "caller_function": "s",
      "called_function": "get_round_time",
      "location": {
        "file": "src/SettingsScreen.cpp",
        "line": 156,
        "column": 0
      },
      "context": "\"Round time: \" + std::to_string(GameConfig::get_round_time()) + \" seconds\","
    },
    {
      "caller_function": "s",
      "called_function": "std::string",
      "location": {
        "file": "src/SettingsScreen.cpp",
        "line": 157,
        "column": 0
      },
      "context": "\"Random positions: \" + std::string(GameConfig::get_random_positions() ? \"ON\" : \"OFF\"),"
    },
    {
      "caller_function": "s",
      "called_function": "GameConfig::get_random_positions",
      "location": {
        "file": "src/SettingsScreen.cpp",
        "line": 157,
        "column": 0
      },
      "context": "\"Random positions: \" + std::string(GameConfig::get_random_positions() ? \"ON\" : \"OFF\"),"
    },
    {
      "caller_function": "s",
      "called_function": "string",
      "location": {
        "file": "src/SettingsScreen.cpp",
        "line": 157,
        "column": 0
      },
      "context": "\"Random positions: \" + std::string(GameConfig::get_random_positions() ? \"ON\" : \"OFF\"),"
    },
    {
      "caller_function": "s",
      "called_function": "get_random_positions",
      "location": {
        "file": "src/SettingsScreen.cpp",
        "line": 157,
        "column": 0
      },
      "context": "\"Random positions: \" + std::string(GameConfig::get_random_positions() ? \"ON\" : \"OFF\"),"
    },
    {
      "caller_function": "s",
      "called_function": "std::string",
      "location": {
        "file": "src/SettingsScreen.cpp",
        "line": 158,
        "column": 0
      },
      "context": "\"Random map order: \" + std::string(GameConfig::get_random_map_order() ? \"ON\" : \"OFF\")"
    },
    {
      "caller_function": "s",
      "called_function": "GameConfig::get_random_map_order",
      "location": {
        "file": "src/SettingsScreen.cpp",
        "line": 158,
        "column": 0
      },
      "context": "\"Random map order: \" + std::string(GameConfig::get_random_map_order() ? \"ON\" : \"OFF\")"
    },
    {
      "caller_function": "s",
      "called_function": "string",
      "location": {
        "file": "src/SettingsScreen.cpp",
        "line": 158,
        "column": 0
      },
      "context": "\"Random map order: \" + std::string(GameConfig::get_random_map_order() ? \"ON\" : \"OFF\")"
    },
    {
      "caller_function": "s",
      "called_function": "get_random_map_order",
      "location": {
        "file": "src/SettingsScreen.cpp",
        "line": 158,
        "column": 0
      },
      "context": "\"Random map order: \" + std::string(GameConfig::get_random_map_order() ? \"ON\" : \"OFF\")"
    },
    {
      "caller_function": "f",
      "called_function": "disable",
      "location": {
        "file": "src/SettingsScreen.cpp",
        "line": 192,
        "column": 0
      },
      "context": "GameConfig::bomber[selected_player].disable();"
    },
    {
      "caller_function": "f",
      "called_function": "enable",
      "location": {
        "file": "src/SettingsScreen.cpp",
        "line": 194,
        "column": 0
      },
      "context": "GameConfig::bomber[selected_player].enable();"
    },
    {
      "caller_function": "h",
      "called_function": "std::to_string",
      "location": {
        "file": "src/SettingsScreen.cpp",
        "line": 217,
        "column": 0
      },
      "context": "default: return \"Team \" + std::to_string(team);"
    },
    {
      "caller_function": "h",
      "called_function": "to_string",
      "location": {
        "file": "src/SettingsScreen.cpp",
        "line": 217,
        "column": 0
      },
      "context": "default: return \"Team \" + std::to_string(team);"
    },
    {
      "caller_function": "n",
      "called_function": "run",
      "location": {
        "file": "src/main.cpp",
        "line": 5,
        "column": 0
      },
      "context": "game.run();"
    },
    {
      "caller_function": "r",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/TileManager.cpp",
        "line": 17,
        "column": 0
      },
      "context": "SDL_Log(\"TileManager: Initialized intelligent tile coordination system\");"
    },
    {
      "caller_function": "t",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/TileManager.cpp",
        "line": 22,
        "column": 0
      },
      "context": "SDL_Log(\"TileManager: GameContext set to %p\", context);"
    },
    {
      "caller_function": "t",
      "called_function": "TileManager",
      "location": {
        "file": "src/TileManager.cpp",
        "line": 25,
        "column": 0
      },
      "context": "TileManager::~TileManager() {"
    },
    {
      "caller_function": "t",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/TileManager.cpp",
        "line": 26,
        "column": 0
      },
      "context": "SDL_Log(\"TileManager: Shutdown complete\");"
    },
    {
      "caller_function": "s",
      "called_function": "get_map",
      "location": {
        "file": "src/TileManager.cpp",
        "line": 32,
        "column": 0
      },
      "context": "if (!context || !context->get_map()) return;"
    },
    {
      "caller_function": "s",
      "called_function": "coordinate_with_lifecycle_manager",
      "location": {
        "file": "src/TileManager.cpp",
        "line": 35,
        "column": 0
      },
      "context": "coordinate_with_lifecycle_manager();"
    },
    {
      "caller_function": "s",
      "called_function": "process_dying_tiles",
      "location": {
        "file": "src/TileManager.cpp",
        "line": 38,
        "column": 0
      },
      "context": "process_dying_tiles();"
    },
    {
      "caller_function": "s",
      "called_function": "process_dead_tiles",
      "location": {
        "file": "src/TileManager.cpp",
        "line": 41,
        "column": 0
      },
      "context": "process_dead_tiles();"
    },
    {
      "caller_function": "s",
      "called_function": "handle_tile_updates",
      "location": {
        "file": "src/TileManager.cpp",
        "line": 44,
        "column": 0
      },
      "context": "handle_tile_updates();"
    },
    {
      "caller_function": "f",
      "called_function": "update_single_tile",
      "location": {
        "file": "src/TileManager.cpp",
        "line": 50,
        "column": 0
      },
      "context": "update_single_tile(tile, x, y);"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/TileManager.cpp",
        "line": 59,
        "column": 0
      },
      "context": "SDL_Log(\"TileManager: ERROR - No LifecycleManager available for coordination\");"
    },
    {
      "caller_function": "f",
      "called_function": "get_lifecycle_manager",
      "location": {
        "file": "src/TileManager.cpp",
        "line": 65,
        "column": 0
      },
      "context": "context->get_lifecycle_manager()->update_states(0.016f); // ~60 FPS delta"
    },
    {
      "caller_function": "f",
      "called_function": "update_states",
      "location": {
        "file": "src/TileManager.cpp",
        "line": 65,
        "column": 0
      },
      "context": "context->get_lifecycle_manager()->update_states(0.016f); // ~60 FPS delta"
    },
    {
      "caller_function": "s",
      "called_function": "get_lifecycle_manager",
      "location": {
        "file": "src/TileManager.cpp",
        "line": 70,
        "column": 0
      },
      "context": "if (!tile || !context->get_lifecycle_manager()) return;"
    },
    {
      "caller_function": "s",
      "called_function": "get_lifecycle_manager",
      "location": {
        "file": "src/TileManager.cpp",
        "line": 72,
        "column": 0
      },
      "context": "LifecycleManager::ObjectState state = context->get_lifecycle_manager()->get_tile_state(tile);"
    },
    {
      "caller_function": "s",
      "called_function": "get_tile_state",
      "location": {
        "file": "src/TileManager.cpp",
        "line": 72,
        "column": 0
      },
      "context": "LifecycleManager::ObjectState state = context->get_lifecycle_manager()->get_tile_state(tile);"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/TileManager.cpp",
        "line": 74,
        "column": 0
      },
      "context": "SDL_Log(\"TileManager: Tile at (%d,%d) is dying - monitoring\", x, y);"
    },
    {
      "caller_function": "s",
      "called_function": "get_lifecycle_manager",
      "location": {
        "file": "src/TileManager.cpp",
        "line": 82,
        "column": 0
      },
      "context": "if (!tile || !context->get_lifecycle_manager()) return;"
    },
    {
      "caller_function": "s",
      "called_function": "get_lifecycle_manager",
      "location": {
        "file": "src/TileManager.cpp",
        "line": 84,
        "column": 0
      },
      "context": "LifecycleManager::ObjectState state = context->get_lifecycle_manager()->get_tile_state(tile);"
    },
    {
      "caller_function": "s",
      "called_function": "get_tile_state",
      "location": {
        "file": "src/TileManager.cpp",
        "line": 84,
        "column": 0
      },
      "context": "LifecycleManager::ObjectState state = context->get_lifecycle_manager()->get_tile_state(tile);"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/TileManager.cpp",
        "line": 86,
        "column": 0
      },
      "context": "SDL_Log(\"TileManager: Tile at (%d,%d) ready for replacement - executing\", x, y);"
    },
    {
      "caller_function": "f",
      "called_function": "replace_tile_when_ready",
      "location": {
        "file": "src/TileManager.cpp",
        "line": 87,
        "column": 0
      },
      "context": "replace_tile_when_ready(x, y, MapTile::GROUND);"
    },
    {
      "caller_function": "n",
      "called_function": "is_valid_position",
      "location": {
        "file": "src/TileManager.cpp",
        "line": 95,
        "column": 0
      },
      "context": "if (!is_valid_position(map_x, map_y)) return;"
    },
    {
      "caller_function": "n",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/TileManager.cpp",
        "line": 97,
        "column": 0
      },
      "context": "SDL_Log(\"TileManager: Processing destruction request for tile at (%d,%d)\", map_x, map_y);"
    },
    {
      "caller_function": "n",
      "called_function": "get_map",
      "location": {
        "file": "src/TileManager.cpp",
        "line": 103,
        "column": 0
      },
      "context": "MapTile* legacy_tile = context->get_map()->get_tile(map_x, map_y);"
    },
    {
      "caller_function": "n",
      "called_function": "get_tile",
      "location": {
        "file": "src/TileManager.cpp",
        "line": 103,
        "column": 0
      },
      "context": "MapTile* legacy_tile = context->get_map()->get_tile(map_x, map_y);"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/TileManager.cpp",
        "line": 105,
        "column": 0
      },
      "context": "SDL_Log(\"TileManager: Destroying legacy MapTile at (%d,%d)\", map_x, map_y);"
    },
    {
      "caller_function": "f",
      "called_function": "destroy",
      "location": {
        "file": "src/TileManager.cpp",
        "line": 106,
        "column": 0
      },
      "context": "legacy_tile->destroy();"
    },
    {
      "caller_function": "f",
      "called_function": "get_map",
      "location": {
        "file": "src/TileManager.cpp",
        "line": 115,
        "column": 0
      },
      "context": "TileEntity* tile_entity = context->get_map()->get_tile_entity(map_x, map_y);"
    },
    {
      "caller_function": "f",
      "called_function": "get_tile_entity",
      "location": {
        "file": "src/TileManager.cpp",
        "line": 115,
        "column": 0
      },
      "context": "TileEntity* tile_entity = context->get_map()->get_tile_entity(map_x, map_y);"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/TileManager.cpp",
        "line": 117,
        "column": 0
      },
      "context": "SDL_Log(\"TileManager: Destroying TileEntity at (%d,%d)\", map_x, map_y);"
    },
    {
      "caller_function": "f",
      "called_function": "destroy",
      "location": {
        "file": "src/TileManager.cpp",
        "line": 118,
        "column": 0
      },
      "context": "tile_entity->destroy();"
    },
    {
      "caller_function": "f",
      "called_function": "get_bomb",
      "location": {
        "file": "src/TileManager.cpp",
        "line": 121,
        "column": 0
      },
      "context": "bomb_to_explode = tile_entity->get_bomb();"
    },
    {
      "caller_function": "f",
      "called_function": "explode_delayed",
      "location": {
        "file": "src/TileManager.cpp",
        "line": 128,
        "column": 0
      },
      "context": "bomb_to_explode->explode_delayed();"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/TileManager.cpp",
        "line": 132,
        "column": 0
      },
      "context": "SDL_Log(\"TileManager: Destruction completed for tile at (%d,%d)\", map_x, map_y);"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/TileManager.cpp",
        "line": 134,
        "column": 0
      },
      "context": "SDL_Log(\"TileManager: No destructible tile found at (%d,%d)\", map_x, map_y);"
    },
    {
      "caller_function": "y",
      "called_function": "is_valid_position",
      "location": {
        "file": "src/TileManager.cpp",
        "line": 139,
        "column": 0
      },
      "context": "if (!is_valid_position(map_x, map_y) || !context->get_map()) return;"
    },
    {
      "caller_function": "y",
      "called_function": "get_map",
      "location": {
        "file": "src/TileManager.cpp",
        "line": 139,
        "column": 0
      },
      "context": "if (!is_valid_position(map_x, map_y) || !context->get_map()) return;"
    },
    {
      "caller_function": "y",
      "called_function": "perform_tile_replacement",
      "location": {
        "file": "src/TileManager.cpp",
        "line": 141,
        "column": 0
      },
      "context": "perform_tile_replacement(map_x, map_y, new_tile_type);"
    },
    {
      "caller_function": "t",
      "called_function": "get_lifecycle_manager",
      "location": {
        "file": "src/TileManager.cpp",
        "line": 145,
        "column": 0
      },
      "context": "if (!tile || !context->get_lifecycle_manager()) return false;"
    },
    {
      "caller_function": "t",
      "called_function": "get_lifecycle_manager",
      "location": {
        "file": "src/TileManager.cpp",
        "line": 147,
        "column": 0
      },
      "context": "LifecycleManager::ObjectState state = context->get_lifecycle_manager()->get_tile_state(tile);"
    },
    {
      "caller_function": "t",
      "called_function": "get_tile_state",
      "location": {
        "file": "src/TileManager.cpp",
        "line": 147,
        "column": 0
      },
      "context": "LifecycleManager::ObjectState state = context->get_lifecycle_manager()->get_tile_state(tile);"
    },
    {
      "caller_function": "e",
      "called_function": "is_valid_position",
      "location": {
        "file": "src/TileManager.cpp",
        "line": 154,
        "column": 0
      },
      "context": "if (!is_valid_position(map_x, map_y)) return false;"
    },
    {
      "caller_function": "e",
      "called_function": "get_tile_at",
      "location": {
        "file": "src/TileManager.cpp",
        "line": 156,
        "column": 0
      },
      "context": "MapTile* tile = get_tile_at(map_x, map_y);"
    },
    {
      "caller_function": "e",
      "called_function": "is_blocking",
      "location": {
        "file": "src/TileManager.cpp",
        "line": 160,
        "column": 0
      },
      "context": "return !tile->is_blocking();"
    },
    {
      "caller_function": "d",
      "called_function": "is_position_walkable",
      "location": {
        "file": "src/TileManager.cpp",
        "line": 164,
        "column": 0
      },
      "context": "return !is_position_walkable(map_x, map_y);"
    },
    {
      "caller_function": "t",
      "called_function": "is_valid_position",
      "location": {
        "file": "src/TileManager.cpp",
        "line": 168,
        "column": 0
      },
      "context": "if (!is_valid_position(map_x, map_y) || !context->get_map()) return nullptr;"
    },
    {
      "caller_function": "t",
      "called_function": "get_map",
      "location": {
        "file": "src/TileManager.cpp",
        "line": 168,
        "column": 0
      },
      "context": "if (!is_valid_position(map_x, map_y) || !context->get_map()) return nullptr;"
    },
    {
      "caller_function": "t",
      "called_function": "get_map",
      "location": {
        "file": "src/TileManager.cpp",
        "line": 170,
        "column": 0
      },
      "context": "return context->get_map()->get_tile(map_x, map_y);"
    },
    {
      "caller_function": "t",
      "called_function": "get_tile",
      "location": {
        "file": "src/TileManager.cpp",
        "line": 170,
        "column": 0
      },
      "context": "return context->get_map()->get_tile(map_x, map_y);"
    },
    {
      "caller_function": "t",
      "called_function": "is_valid_position",
      "location": {
        "file": "src/TileManager.cpp",
        "line": 176,
        "column": 0
      },
      "context": "if (!is_valid_position(map_x, map_y) || !context->get_map()) return false;"
    },
    {
      "caller_function": "t",
      "called_function": "get_map",
      "location": {
        "file": "src/TileManager.cpp",
        "line": 176,
        "column": 0
      },
      "context": "if (!is_valid_position(map_x, map_y) || !context->get_map()) return false;"
    },
    {
      "caller_function": "t",
      "called_function": "get_map",
      "location": {
        "file": "src/TileManager.cpp",
        "line": 178,
        "column": 0
      },
      "context": "MapTile* legacy_tile = context->get_map()->get_tile(map_x, map_y);"
    },
    {
      "caller_function": "t",
      "called_function": "get_tile",
      "location": {
        "file": "src/TileManager.cpp",
        "line": 178,
        "column": 0
      },
      "context": "MapTile* legacy_tile = context->get_map()->get_tile(map_x, map_y);"
    },
    {
      "caller_function": "f",
      "called_function": "is_blocking",
      "location": {
        "file": "src/TileManager.cpp",
        "line": 180,
        "column": 0
      },
      "context": "return legacy_tile->is_blocking();"
    },
    {
      "caller_function": "f",
      "called_function": "get_map",
      "location": {
        "file": "src/TileManager.cpp",
        "line": 183,
        "column": 0
      },
      "context": "TileEntity* tile_entity = context->get_map()->get_tile_entity(map_x, map_y);"
    },
    {
      "caller_function": "f",
      "called_function": "get_tile_entity",
      "location": {
        "file": "src/TileManager.cpp",
        "line": 183,
        "column": 0
      },
      "context": "TileEntity* tile_entity = context->get_map()->get_tile_entity(map_x, map_y);"
    },
    {
      "caller_function": "f",
      "called_function": "is_blocking",
      "location": {
        "file": "src/TileManager.cpp",
        "line": 185,
        "column": 0
      },
      "context": "return tile_entity->is_blocking();"
    },
    {
      "caller_function": "t",
      "called_function": "is_valid_position",
      "location": {
        "file": "src/TileManager.cpp",
        "line": 192,
        "column": 0
      },
      "context": "if (!is_valid_position(map_x, map_y) || !context->get_map()) return false;"
    },
    {
      "caller_function": "t",
      "called_function": "get_map",
      "location": {
        "file": "src/TileManager.cpp",
        "line": 192,
        "column": 0
      },
      "context": "if (!is_valid_position(map_x, map_y) || !context->get_map()) return false;"
    },
    {
      "caller_function": "t",
      "called_function": "get_map",
      "location": {
        "file": "src/TileManager.cpp",
        "line": 194,
        "column": 0
      },
      "context": "MapTile* legacy_tile = context->get_map()->get_tile(map_x, map_y);"
    },
    {
      "caller_function": "t",
      "called_function": "get_tile",
      "location": {
        "file": "src/TileManager.cpp",
        "line": 194,
        "column": 0
      },
      "context": "MapTile* legacy_tile = context->get_map()->get_tile(map_x, map_y);"
    },
    {
      "caller_function": "f",
      "called_function": "get_map",
      "location": {
        "file": "src/TileManager.cpp",
        "line": 199,
        "column": 0
      },
      "context": "TileEntity* tile_entity = context->get_map()->get_tile_entity(map_x, map_y);"
    },
    {
      "caller_function": "f",
      "called_function": "get_tile_entity",
      "location": {
        "file": "src/TileManager.cpp",
        "line": 199,
        "column": 0
      },
      "context": "TileEntity* tile_entity = context->get_map()->get_tile_entity(map_x, map_y);"
    },
    {
      "caller_function": "f",
      "called_function": "get_bomb",
      "location": {
        "file": "src/TileManager.cpp",
        "line": 201,
        "column": 0
      },
      "context": "return tile_entity->get_bomb() != nullptr;"
    },
    {
      "caller_function": "t",
      "called_function": "is_valid_position",
      "location": {
        "file": "src/TileManager.cpp",
        "line": 208,
        "column": 0
      },
      "context": "if (!is_valid_position(map_x, map_y) || !context->get_map()) return false;"
    },
    {
      "caller_function": "t",
      "called_function": "get_map",
      "location": {
        "file": "src/TileManager.cpp",
        "line": 208,
        "column": 0
      },
      "context": "if (!is_valid_position(map_x, map_y) || !context->get_map()) return false;"
    },
    {
      "caller_function": "t",
      "called_function": "get_map",
      "location": {
        "file": "src/TileManager.cpp",
        "line": 210,
        "column": 0
      },
      "context": "MapTile* legacy_tile = context->get_map()->get_tile(map_x, map_y);"
    },
    {
      "caller_function": "t",
      "called_function": "get_tile",
      "location": {
        "file": "src/TileManager.cpp",
        "line": 210,
        "column": 0
      },
      "context": "MapTile* legacy_tile = context->get_map()->get_tile(map_x, map_y);"
    },
    {
      "caller_function": "f",
      "called_function": "is_destructible",
      "location": {
        "file": "src/TileManager.cpp",
        "line": 212,
        "column": 0
      },
      "context": "return legacy_tile->is_destructible();"
    },
    {
      "caller_function": "f",
      "called_function": "get_map",
      "location": {
        "file": "src/TileManager.cpp",
        "line": 215,
        "column": 0
      },
      "context": "TileEntity* tile_entity = context->get_map()->get_tile_entity(map_x, map_y);"
    },
    {
      "caller_function": "f",
      "called_function": "get_tile_entity",
      "location": {
        "file": "src/TileManager.cpp",
        "line": 215,
        "column": 0
      },
      "context": "TileEntity* tile_entity = context->get_map()->get_tile_entity(map_x, map_y);"
    },
    {
      "caller_function": "f",
      "called_function": "is_destructible",
      "location": {
        "file": "src/TileManager.cpp",
        "line": 217,
        "column": 0
      },
      "context": "return tile_entity->is_destructible();"
    },
    {
      "caller_function": "t",
      "called_function": "get_tile_at",
      "location": {
        "file": "src/TileManager.cpp",
        "line": 226,
        "column": 0
      },
      "context": "MapTile* tile = get_tile_at(map_x, map_y);"
    },
    {
      "caller_function": "f",
      "called_function": "set_bomb",
      "location": {
        "file": "src/TileManager.cpp",
        "line": 228,
        "column": 0
      },
      "context": "tile->set_bomb(bomb);"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/TileManager.cpp",
        "line": 229,
        "column": 0
      },
      "context": "SDL_Log(\"TileManager: Registered bomb %p at (%d,%d)\", bomb, map_x, map_y);"
    },
    {
      "caller_function": "t",
      "called_function": "get_tile_at",
      "location": {
        "file": "src/TileManager.cpp",
        "line": 234,
        "column": 0
      },
      "context": "MapTile* tile = get_tile_at(map_x, map_y);"
    },
    {
      "caller_function": "f",
      "called_function": "set_bomb",
      "location": {
        "file": "src/TileManager.cpp",
        "line": 236,
        "column": 0
      },
      "context": "tile->set_bomb(nullptr);"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/TileManager.cpp",
        "line": 237,
        "column": 0
      },
      "context": "SDL_Log(\"TileManager: Unregistered bomb at (%d,%d)\", map_x, map_y);"
    },
    {
      "caller_function": "t",
      "called_function": "get_tile_at",
      "location": {
        "file": "src/TileManager.cpp",
        "line": 242,
        "column": 0
      },
      "context": "MapTile* tile = get_tile_at(map_x, map_y);"
    },
    {
      "caller_function": "f",
      "called_function": "set_bomb",
      "location": {
        "file": "src/TileManager.cpp",
        "line": 244,
        "column": 0
      },
      "context": "tile->set_bomb(nullptr);"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/TileManager.cpp",
        "line": 245,
        "column": 0
      },
      "context": "SDL_Log(\"TileManager: Unregistered bomb %p at (%d,%d) with safety check\", bomb, map_x, map_y);"
    },
    {
      "caller_function": "f",
      "called_function": "get_bomb",
      "location": {
        "file": "src/TileManager.cpp",
        "line": 246,
        "column": 0
      },
      "context": "} else if (tile && tile->get_bomb() != bomb) {"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/TileManager.cpp",
        "line": 247,
        "column": 0
      },
      "context": "SDL_Log(\"WARNING: TileManager: Attempted to unregister bomb %p at (%d,%d) but found different bomb %"
    },
    {
      "caller_function": "f",
      "called_function": "get_bomb",
      "location": {
        "file": "src/TileManager.cpp",
        "line": 248,
        "column": 0
      },
      "context": "bomb, map_x, map_y, tile->get_bomb());"
    },
    {
      "caller_function": "t",
      "called_function": "get_tile_at",
      "location": {
        "file": "src/TileManager.cpp",
        "line": 253,
        "column": 0
      },
      "context": "MapTile* tile = get_tile_at(map_x, map_y);"
    },
    {
      "caller_function": "t",
      "called_function": "get_bomb",
      "location": {
        "file": "src/TileManager.cpp",
        "line": 254,
        "column": 0
      },
      "context": "return tile ? tile->get_bomb() : nullptr;"
    },
    {
      "caller_function": "t",
      "called_function": "get_tile_at",
      "location": {
        "file": "src/TileManager.cpp",
        "line": 258,
        "column": 0
      },
      "context": "MapTile* tile = get_tile_at(map_x, map_y);"
    },
    {
      "caller_function": "f",
      "called_function": "set_bomber",
      "location": {
        "file": "src/TileManager.cpp",
        "line": 260,
        "column": 0
      },
      "context": "tile->set_bomber(bomber);"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/TileManager.cpp",
        "line": 261,
        "column": 0
      },
      "context": "SDL_Log(\"TileManager: Registered bomber %p at (%d,%d)\", bomber, map_x, map_y);"
    },
    {
      "caller_function": "t",
      "called_function": "get_tile_at",
      "location": {
        "file": "src/TileManager.cpp",
        "line": 266,
        "column": 0
      },
      "context": "MapTile* tile = get_tile_at(map_x, map_y);"
    },
    {
      "caller_function": "f",
      "called_function": "set_bomber",
      "location": {
        "file": "src/TileManager.cpp",
        "line": 268,
        "column": 0
      },
      "context": "tile->set_bomber(nullptr);"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/TileManager.cpp",
        "line": 269,
        "column": 0
      },
      "context": "SDL_Log(\"TileManager: Unregistered bomber at (%d,%d)\", map_x, map_y);"
    },
    {
      "caller_function": "t",
      "called_function": "get_tile_at",
      "location": {
        "file": "src/TileManager.cpp",
        "line": 274,
        "column": 0
      },
      "context": "MapTile* tile = get_tile_at(map_x, map_y);"
    },
    {
      "caller_function": "t",
      "called_function": "get_bomber",
      "location": {
        "file": "src/TileManager.cpp",
        "line": 275,
        "column": 0
      },
      "context": "return tile ? tile->get_bomber() : nullptr;"
    },
    {
      "caller_function": "t",
      "called_function": "get_bomber_at",
      "location": {
        "file": "src/TileManager.cpp",
        "line": 279,
        "column": 0
      },
      "context": "return get_bomber_at(map_x, map_y) != nullptr;"
    },
    {
      "caller_function": "s",
      "called_function": "get_map",
      "location": {
        "file": "src/TileManager.cpp",
        "line": 285,
        "column": 0
      },
      "context": "if (!context->get_map() || !callback) return;"
    },
    {
      "caller_function": "r",
      "called_function": "get_map",
      "location": {
        "file": "src/TileManager.cpp",
        "line": 289,
        "column": 0
      },
      "context": "MapTile* tile = context->get_map()->get_tile(x, y);"
    },
    {
      "caller_function": "r",
      "called_function": "get_tile",
      "location": {
        "file": "src/TileManager.cpp",
        "line": 289,
        "column": 0
      },
      "context": "MapTile* tile = context->get_map()->get_tile(x, y);"
    },
    {
      "caller_function": "r",
      "called_function": "callback",
      "location": {
        "file": "src/TileManager.cpp",
        "line": 290,
        "column": 0
      },
      "context": "callback(tile, x, y);"
    },
    {
      "caller_function": "f",
      "called_function": "get_tile_at",
      "location": {
        "file": "src/TileManager.cpp",
        "line": 304,
        "column": 0
      },
      "context": "MapTile* tile = get_tile_at(x, y);"
    },
    {
      "caller_function": "f",
      "called_function": "push_back",
      "location": {
        "file": "src/TileManager.cpp",
        "line": 306,
        "column": 0
      },
      "context": "result.push_back(tile);"
    },
    {
      "caller_function": "e",
      "called_function": "act",
      "location": {
        "file": "src/TileManager.cpp",
        "line": 321,
        "column": 0
      },
      "context": "tile->act();"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/TileManager.cpp",
        "line": 325,
        "column": 0
      },
      "context": "SDL_Log(\"TileManager: Tile at (%d,%d) marked for destruction\", map_x, map_y);"
    },
    {
      "caller_function": "t",
      "called_function": "get_tile_at",
      "location": {
        "file": "src/TileManager.cpp",
        "line": 330,
        "column": 0
      },
      "context": "MapTile* tile = get_tile_at(map_x, map_y);"
    },
    {
      "caller_function": "t",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/TileManager.cpp",
        "line": 333,
        "column": 0
      },
      "context": "SDL_Log(\"TileManager: Handling destruction request for tile at (%d,%d)\", map_x, map_y);"
    },
    {
      "caller_function": "t",
      "called_function": "request_tile_destruction",
      "location": {
        "file": "src/TileManager.cpp",
        "line": 334,
        "column": 0
      },
      "context": "request_tile_destruction(map_x, map_y);"
    },
    {
      "caller_function": "t",
      "called_function": "get_map",
      "location": {
        "file": "src/TileManager.cpp",
        "line": 338,
        "column": 0
      },
      "context": "if (!context->get_map()) return;"
    },
    {
      "caller_function": "t",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/TileManager.cpp",
        "line": 340,
        "column": 0
      },
      "context": "SDL_Log(\"TileManager: Replacing tile at (%d,%d) with type %d\", map_x, map_y, new_tile_type);"
    },
    {
      "caller_function": "t",
      "called_function": "get_tile_at",
      "location": {
        "file": "src/TileManager.cpp",
        "line": 343,
        "column": 0
      },
      "context": "MapTile* old_tile = get_tile_at(map_x, map_y);"
    },
    {
      "caller_function": "f",
      "called_function": "MapTile::create",
      "location": {
        "file": "src/TileManager.cpp",
        "line": 349,
        "column": 0
      },
      "context": "MapTile* new_tile = MapTile::create("
    },
    {
      "caller_function": "f",
      "called_function": "create",
      "location": {
        "file": "src/TileManager.cpp",
        "line": 349,
        "column": 0
      },
      "context": "MapTile* new_tile = MapTile::create("
    },
    {
      "caller_function": "f",
      "called_function": "get_map",
      "location": {
        "file": "src/TileManager.cpp",
        "line": 355,
        "column": 0
      },
      "context": "context->get_map()->set_tile(map_x, map_y, new_tile);"
    },
    {
      "caller_function": "f",
      "called_function": "set_tile",
      "location": {
        "file": "src/TileManager.cpp",
        "line": 355,
        "column": 0
      },
      "context": "context->get_map()->set_tile(map_x, map_y, new_tile);"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/TileManager.cpp",
        "line": 357,
        "column": 0
      },
      "context": "SDL_Log(\"TileManager: Tile replacement complete at (%d,%d)\", map_x, map_y);"
    },
    {
      "caller_function": "f",
      "called_function": "TileManager::is_valid_position",
      "location": {
        "file": "src/TileManager.cpp",
        "line": 362,
        "column": 0
      },
      "context": "bool TileManager::is_valid_position(int map_x, int map_y) const {"
    },
    {
      "caller_function": "f",
      "called_function": "is_valid_position",
      "location": {
        "file": "src/TileManager.cpp",
        "line": 362,
        "column": 0
      },
      "context": "bool TileManager::is_valid_position(int map_x, int map_y) const {"
    },
    {
      "caller_function": "f",
      "called_function": "grid",
      "location": {
        "file": "src/TileManager.cpp",
        "line": 364,
        "column": 0
      },
      "context": "GridCoord grid(map_x, map_y);"
    },
    {
      "caller_function": "f",
      "called_function": "CoordinateSystem::is_grid_valid",
      "location": {
        "file": "src/TileManager.cpp",
        "line": 365,
        "column": 0
      },
      "context": "return CoordinateSystem::is_grid_valid(grid);"
    },
    {
      "caller_function": "f",
      "called_function": "is_grid_valid",
      "location": {
        "file": "src/TileManager.cpp",
        "line": 365,
        "column": 0
      },
      "context": "return CoordinateSystem::is_grid_valid(grid);"
    },
    {
      "caller_function": null,
      "called_function": "AudioMixer::listener_pos",
      "location": {
        "file": "src/AudioMixer.cpp",
        "line": 11,
        "column": 0
      },
      "context": "AudioPosition AudioMixer::listener_pos(GameConstants::DEFAULT_LISTENER_X, GameConstants::DEFAULT_LIS"
    },
    {
      "caller_function": null,
      "called_function": "listener_pos",
      "location": {
        "file": "src/AudioMixer.cpp",
        "line": 11,
        "column": 0
      },
      "context": "AudioPosition AudioMixer::listener_pos(GameConstants::DEFAULT_LISTENER_X, GameConstants::DEFAULT_LIS"
    },
    {
      "caller_function": "e",
      "called_function": "AudioMixer::get_listener_position",
      "location": {
        "file": "src/AudioMixer.cpp",
        "line": 16,
        "column": 0
      },
      "context": "float dx = sound_pos.x - AudioMixer::get_listener_position().x;"
    },
    {
      "caller_function": "e",
      "called_function": "get_listener_position",
      "location": {
        "file": "src/AudioMixer.cpp",
        "line": 16,
        "column": 0
      },
      "context": "float dx = sound_pos.x - AudioMixer::get_listener_position().x;"
    },
    {
      "caller_function": "e",
      "called_function": "AudioMixer::get_listener_position",
      "location": {
        "file": "src/AudioMixer.cpp",
        "line": 17,
        "column": 0
      },
      "context": "float dy = sound_pos.y - AudioMixer::get_listener_position().y;"
    },
    {
      "caller_function": "e",
      "called_function": "get_listener_position",
      "location": {
        "file": "src/AudioMixer.cpp",
        "line": 17,
        "column": 0
      },
      "context": "float dy = sound_pos.y - AudioMixer::get_listener_position().y;"
    },
    {
      "caller_function": "e",
      "called_function": "AudioMixer::get_listener_position",
      "location": {
        "file": "src/AudioMixer.cpp",
        "line": 18,
        "column": 0
      },
      "context": "float dz = sound_pos.z - AudioMixer::get_listener_position().z;"
    },
    {
      "caller_function": "e",
      "called_function": "get_listener_position",
      "location": {
        "file": "src/AudioMixer.cpp",
        "line": 18,
        "column": 0
      },
      "context": "float dz = sound_pos.z - AudioMixer::get_listener_position().z;"
    },
    {
      "caller_function": "e",
      "called_function": "std::sqrt",
      "location": {
        "file": "src/AudioMixer.cpp",
        "line": 19,
        "column": 0
      },
      "context": "return std::sqrt(dx*dx + dy*dy + dz*dz);"
    },
    {
      "caller_function": "e",
      "called_function": "sqrt",
      "location": {
        "file": "src/AudioMixer.cpp",
        "line": 19,
        "column": 0
      },
      "context": "return std::sqrt(dx*dx + dy*dy + dz*dz);"
    },
    {
      "caller_function": "n",
      "called_function": "AudioMixer::get_listener_position",
      "location": {
        "file": "src/AudioMixer.cpp",
        "line": 23,
        "column": 0
      },
      "context": "float dx = sound_pos.x - AudioMixer::get_listener_position().x;"
    },
    {
      "caller_function": "n",
      "called_function": "get_listener_position",
      "location": {
        "file": "src/AudioMixer.cpp",
        "line": 23,
        "column": 0
      },
      "context": "float dx = sound_pos.x - AudioMixer::get_listener_position().x;"
    },
    {
      "caller_function": "n",
      "called_function": "std::max",
      "location": {
        "file": "src/AudioMixer.cpp",
        "line": 26,
        "column": 0
      },
      "context": "float pan = std::max(-1.0f, std::min(1.0f, dx / pan_range));"
    },
    {
      "caller_function": "n",
      "called_function": "std::min",
      "location": {
        "file": "src/AudioMixer.cpp",
        "line": 26,
        "column": 0
      },
      "context": "float pan = std::max(-1.0f, std::min(1.0f, dx / pan_range));"
    },
    {
      "caller_function": "n",
      "called_function": "max",
      "location": {
        "file": "src/AudioMixer.cpp",
        "line": 26,
        "column": 0
      },
      "context": "float pan = std::max(-1.0f, std::min(1.0f, dx / pan_range));"
    },
    {
      "caller_function": "n",
      "called_function": "min",
      "location": {
        "file": "src/AudioMixer.cpp",
        "line": 26,
        "column": 0
      },
      "context": "float pan = std::max(-1.0f, std::min(1.0f, dx / pan_range));"
    },
    {
      "caller_function": "f",
      "called_function": "std::max",
      "location": {
        "file": "src/AudioMixer.cpp",
        "line": 36,
        "column": 0
      },
      "context": "left_gain = std::max(0.0f, left_gain);"
    },
    {
      "caller_function": "f",
      "called_function": "max",
      "location": {
        "file": "src/AudioMixer.cpp",
        "line": 36,
        "column": 0
      },
      "context": "left_gain = std::max(0.0f, left_gain);"
    },
    {
      "caller_function": "f",
      "called_function": "std::max",
      "location": {
        "file": "src/AudioMixer.cpp",
        "line": 37,
        "column": 0
      },
      "context": "right_gain = std::max(0.0f, right_gain);"
    },
    {
      "caller_function": "f",
      "called_function": "max",
      "location": {
        "file": "src/AudioMixer.cpp",
        "line": 37,
        "column": 0
      },
      "context": "right_gain = std::max(0.0f, right_gain);"
    },
    {
      "caller_function": "t",
      "called_function": "SDL_zero",
      "location": {
        "file": "src/AudioMixer.cpp",
        "line": 42,
        "column": 0
      },
      "context": "SDL_zero(device_spec);"
    },
    {
      "caller_function": "t",
      "called_function": "SDL_OpenAudioDeviceStream",
      "location": {
        "file": "src/AudioMixer.cpp",
        "line": 47,
        "column": 0
      },
      "context": "stream = SDL_OpenAudioDeviceStream(SDL_AUDIO_DEVICE_DEFAULT_PLAYBACK, &device_spec,"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_GetError",
      "location": {
        "file": "src/AudioMixer.cpp",
        "line": 50,
        "column": 0
      },
      "context": "std::cerr << \"Failed to open audio mixer stream: \" << SDL_GetError() << std::endl;"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_ResumeAudioDevice",
      "location": {
        "file": "src/AudioMixer.cpp",
        "line": 52,
        "column": 0
      },
      "context": "SDL_ResumeAudioDevice(SDL_GetAudioStreamDevice(stream));"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_GetAudioStreamDevice",
      "location": {
        "file": "src/AudioMixer.cpp",
        "line": 52,
        "column": 0
      },
      "context": "SDL_ResumeAudioDevice(SDL_GetAudioStreamDevice(stream));"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_DestroyAudioStream",
      "location": {
        "file": "src/AudioMixer.cpp",
        "line": 58,
        "column": 0
      },
      "context": "SDL_DestroyAudioStream(stream);"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_free",
      "location": {
        "file": "src/AudioMixer.cpp",
        "line": 64,
        "column": 0
      },
      "context": "SDL_free(audio->buffer);"
    },
    {
      "caller_function": "f",
      "called_function": "clear",
      "location": {
        "file": "src/AudioMixer.cpp",
        "line": 68,
        "column": 0
      },
      "context": "sounds.clear();"
    },
    {
      "caller_function": "d",
      "called_function": "MixerAudio",
      "location": {
        "file": "src/AudioMixer.cpp",
        "line": 72,
        "column": 0
      },
      "context": "MixerAudio* audio = new MixerAudio();"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_GetError",
      "location": {
        "file": "src/AudioMixer.cpp",
        "line": 76,
        "column": 0
      },
      "context": "std::cerr << \"Failed to load sound: \" << path << \" - \" << SDL_GetError() << std::endl;"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_ConvertAudioSamples",
      "location": {
        "file": "src/AudioMixer.cpp",
        "line": 90,
        "column": 0
      },
      "context": "if (!SDL_ConvertAudioSamples(&audio->spec, audio->buffer, audio->length,"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/AudioMixer.cpp",
        "line": 92,
        "column": 0
      },
      "context": "SDL_Log(\"Failed to convert sound %s on load: %s\", path.c_str(), SDL_GetError());"
    },
    {
      "caller_function": "f",
      "called_function": "c_str",
      "location": {
        "file": "src/AudioMixer.cpp",
        "line": 92,
        "column": 0
      },
      "context": "SDL_Log(\"Failed to convert sound %s on load: %s\", path.c_str(), SDL_GetError());"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_GetError",
      "location": {
        "file": "src/AudioMixer.cpp",
        "line": 92,
        "column": 0
      },
      "context": "SDL_Log(\"Failed to convert sound %s on load: %s\", path.c_str(), SDL_GetError());"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_free",
      "location": {
        "file": "src/AudioMixer.cpp",
        "line": 93,
        "column": 0
      },
      "context": "SDL_free(audio->buffer);"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_free",
      "location": {
        "file": "src/AudioMixer.cpp",
        "line": 98,
        "column": 0
      },
      "context": "SDL_free(audio->buffer);"
    },
    {
      "caller_function": "d",
      "called_function": "play_sound_3d",
      "location": {
        "file": "src/AudioMixer.cpp",
        "line": 114,
        "column": 0
      },
      "context": "return play_sound_3d(name, listener_pos, 0.0f);"
    },
    {
      "caller_function": "d",
      "called_function": "find",
      "location": {
        "file": "src/AudioMixer.cpp",
        "line": 120,
        "column": 0
      },
      "context": "auto it = sounds.find(name);"
    },
    {
      "caller_function": "f",
      "called_function": "calculate_distance",
      "location": {
        "file": "src/AudioMixer.cpp",
        "line": 127,
        "column": 0
      },
      "context": "float distance = calculate_distance(pos);"
    },
    {
      "caller_function": "f",
      "called_function": "std::max",
      "location": {
        "file": "src/AudioMixer.cpp",
        "line": 132,
        "column": 0
      },
      "context": "volume = std::max(0.0f, 1.0f - (distance / max_distance));"
    },
    {
      "caller_function": "f",
      "called_function": "max",
      "location": {
        "file": "src/AudioMixer.cpp",
        "line": 132,
        "column": 0
      },
      "context": "volume = std::max(0.0f, 1.0f - (distance / max_distance));"
    },
    {
      "caller_function": "f",
      "called_function": "calculate_stereo_pan",
      "location": {
        "file": "src/AudioMixer.cpp",
        "line": 137,
        "column": 0
      },
      "context": "calculate_stereo_pan(pos, left_gain, right_gain);"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/AudioMixer.cpp",
        "line": 150,
        "column": 0
      },
      "context": "SDL_Log(\"No free audio channels to play sound: %s\", name.c_str());"
    },
    {
      "caller_function": "f",
      "called_function": "c_str",
      "location": {
        "file": "src/AudioMixer.cpp",
        "line": 150,
        "column": 0
      },
      "context": "SDL_Log(\"No free audio channels to play sound: %s\", name.c_str());"
    },
    {
      "caller_function": "k",
      "called_function": "mix_buffer",
      "location": {
        "file": "src/AudioMixer.cpp",
        "line": 171,
        "column": 0
      },
      "context": "std::vector<Sint32> mix_buffer(additional_amount / sizeof(Sint16), 0);"
    },
    {
      "caller_function": "f",
      "called_function": "std::min",
      "location": {
        "file": "src/AudioMixer.cpp",
        "line": 180,
        "column": 0
      },
      "context": "Uint32 amount_to_mix = std::min((Uint32)additional_amount, remaining_length);"
    },
    {
      "caller_function": "f",
      "called_function": "min",
      "location": {
        "file": "src/AudioMixer.cpp",
        "line": 180,
        "column": 0
      },
      "context": "Uint32 amount_to_mix = std::min((Uint32)additional_amount, remaining_length);"
    },
    {
      "caller_function": "f",
      "called_function": "final_buffer",
      "location": {
        "file": "src/AudioMixer.cpp",
        "line": 200,
        "column": 0
      },
      "context": "std::vector<Sint16> final_buffer(additional_amount / sizeof(Sint16));"
    },
    {
      "caller_function": "r",
      "called_function": "std::clamp",
      "location": {
        "file": "src/AudioMixer.cpp",
        "line": 202,
        "column": 0
      },
      "context": "final_buffer[i] = (Sint16)std::clamp(mix_buffer[i], (Sint32)SDL_MIN_SINT16, (Sint32)SDL_MAX_SINT16);"
    },
    {
      "caller_function": "r",
      "called_function": "clamp",
      "location": {
        "file": "src/AudioMixer.cpp",
        "line": 202,
        "column": 0
      },
      "context": "final_buffer[i] = (Sint16)std::clamp(mix_buffer[i], (Sint32)SDL_MIN_SINT16, (Sint32)SDL_MAX_SINT16);"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/AudioMixer.cpp",
        "line": 207,
        "column": 0
      },
      "context": "SDL_Log(\"Failed to put audio data in callback: %s\", SDL_GetError());"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_GetError",
      "location": {
        "file": "src/AudioMixer.cpp",
        "line": 207,
        "column": 0
      },
      "context": "SDL_Log(\"Failed to put audio data in callback: %s\", SDL_GetError());"
    },
    {
      "caller_function": "e",
      "called_function": "sqrt",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 29,
        "column": 0
      },
      "context": "return sqrt(dx*dx + dy*dy);"
    },
    {
      "caller_function": "h",
      "called_function": "sqrt",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 33,
        "column": 0
      },
      "context": "return sqrt(v.x*v.x + v.y*v.y);"
    },
    {
      "caller_function": "t",
      "called_function": "CL_Vector",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 37,
        "column": 0
      },
      "context": "return CL_Vector(a.x - b.x, a.y - b.y);"
    },
    {
      "caller_function": "d",
      "called_function": "CL_Vector",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 41,
        "column": 0
      },
      "context": "return CL_Vector(a.x + b.x, a.y + b.y);"
    },
    {
      "caller_function": "y",
      "called_function": "CL_Vector",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 45,
        "column": 0
      },
      "context": "return CL_Vector(v.x * scalar, v.y * scalar);"
    },
    {
      "caller_function": "e",
      "called_function": "vector_length",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 49,
        "column": 0
      },
      "context": "float len = vector_length(v);"
    },
    {
      "caller_function": "f",
      "called_function": "CL_Vector",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 51,
        "column": 0
      },
      "context": "return CL_Vector(v.x / len, v.y / len);"
    },
    {
      "caller_function": "f",
      "called_function": "CL_Vector",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 53,
        "column": 0
      },
      "context": "return CL_Vector(0, 0);"
    },
    {
      "caller_function": "e",
      "called_function": "Timer::time_elapsed",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 59,
        "column": 0
      },
      "context": "total_time_accumulator += Timer::time_elapsed();"
    },
    {
      "caller_function": "e",
      "called_function": "time_elapsed",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 59,
        "column": 0
      },
      "context": "total_time_accumulator += Timer::time_elapsed();"
    },
    {
      "caller_function": "e",
      "called_function": "Controller_AI_Smart::Controller_AI_Smart",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 64,
        "column": 0
      },
      "context": "Controller_AI_Smart::Controller_AI_Smart(AIPersonality personality)"
    },
    {
      "caller_function": "e",
      "called_function": "Controller_AI_Smart",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 64,
        "column": 0
      },
      "context": "Controller_AI_Smart::Controller_AI_Smart(AIPersonality personality)"
    },
    {
      "caller_function": "e",
      "called_function": "personality",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 65,
        "column": 0
      },
      "context": ": personality(personality)"
    },
    {
      "caller_function": "e",
      "called_function": "reaction_time",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 66,
        "column": 0
      },
      "context": ", reaction_time(0.1f)"
    },
    {
      "caller_function": "e",
      "called_function": "aggression_level",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 67,
        "column": 0
      },
      "context": ", aggression_level(0.5f)"
    },
    {
      "caller_function": "e",
      "called_function": "thinking_frequency",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 68,
        "column": 0
      },
      "context": ", thinking_frequency(0.1f)"
    },
    {
      "caller_function": "e",
      "called_function": "current_state",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 69,
        "column": 0
      },
      "context": ", current_state(AIState::EXPLORING)"
    },
    {
      "caller_function": "e",
      "called_function": "current_state_name",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 70,
        "column": 0
      },
      "context": ", current_state_name(\"EXPLORING\")"
    },
    {
      "caller_function": "e",
      "called_function": "current_target",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 71,
        "column": 0
      },
      "context": ", current_target(0, 0)"
    },
    {
      "caller_function": "e",
      "called_function": "last_think_time",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 72,
        "column": 0
      },
      "context": ", last_think_time(0.0f)"
    },
    {
      "caller_function": "e",
      "called_function": "next_input_time",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 73,
        "column": 0
      },
      "context": ", next_input_time(0.0f)"
    },
    {
      "caller_function": "e",
      "called_function": "bomb_cooldown_ai",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 74,
        "column": 0
      },
      "context": ", bomb_cooldown_ai(0.0f)"
    },
    {
      "caller_function": "e",
      "called_function": "last_bomb_time",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 75,
        "column": 0
      },
      "context": ", last_bomb_time(0.0f)"
    },
    {
      "caller_function": "e",
      "called_function": "stuck_timer",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 76,
        "column": 0
      },
      "context": ", stuck_timer(0.0f)"
    },
    {
      "caller_function": "e",
      "called_function": "last_position",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 77,
        "column": 0
      },
      "context": ", last_position(0, 0)"
    },
    {
      "caller_function": "e",
      "called_function": "memory_fade_time",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 78,
        "column": 0
      },
      "context": ", memory_fade_time(5.0f)"
    },
    {
      "caller_function": "e",
      "called_function": "ai_update_interval",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 79,
        "column": 0
      },
      "context": ", ai_update_interval(0.05f) // 20 FPS AI thinking"
    },
    {
      "caller_function": "e",
      "called_function": "last_ai_update",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 80,
        "column": 0
      },
      "context": ", last_ai_update(0.0f)"
    },
    {
      "caller_function": "e",
      "called_function": "set_personality",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 82,
        "column": 0
      },
      "context": "set_personality(personality);"
    },
    {
      "caller_function": "e",
      "called_function": "reset",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 83,
        "column": 0
      },
      "context": "reset();"
    },
    {
      "caller_function": "e",
      "called_function": "Controller_AI_Smart",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 86,
        "column": 0
      },
      "context": "Controller_AI_Smart::~Controller_AI_Smart() {}"
    },
    {
      "caller_function": "t",
      "called_function": "CL_Vector",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 91,
        "column": 0
      },
      "context": "current_target = CL_Vector(0, 0);"
    },
    {
      "caller_function": "t",
      "called_function": "clear",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 96,
        "column": 0
      },
      "context": "dangerous_positions.clear();"
    },
    {
      "caller_function": "t",
      "called_function": "clear",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 97,
        "column": 0
      },
      "context": "recently_bombed_positions.clear();"
    },
    {
      "caller_function": "e",
      "called_function": "get_total_time",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 139,
        "column": 0
      },
      "context": "float current_time = get_total_time();"
    },
    {
      "caller_function": "f",
      "called_function": "think",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 143,
        "column": 0
      },
      "context": "think();"
    },
    {
      "caller_function": "f",
      "called_function": "execute_behavior",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 149,
        "column": 0
      },
      "context": "execute_behavior();"
    },
    {
      "caller_function": "f",
      "called_function": "Timer::time_elapsed",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 154,
        "column": 0
      },
      "context": "bomb_cooldown_ai -= Timer::time_elapsed();"
    },
    {
      "caller_function": "f",
      "called_function": "time_elapsed",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 154,
        "column": 0
      },
      "context": "bomb_cooldown_ai -= Timer::time_elapsed();"
    },
    {
      "caller_function": "f",
      "called_function": "current_pos",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 158,
        "column": 0
      },
      "context": "CL_Vector current_pos(bomber->get_x(), bomber->get_y());"
    },
    {
      "caller_function": "f",
      "called_function": "get_x",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 158,
        "column": 0
      },
      "context": "CL_Vector current_pos(bomber->get_x(), bomber->get_y());"
    },
    {
      "caller_function": "f",
      "called_function": "get_y",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 158,
        "column": 0
      },
      "context": "CL_Vector current_pos(bomber->get_x(), bomber->get_y());"
    },
    {
      "caller_function": "f",
      "called_function": "Timer::time_elapsed",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 160,
        "column": 0
      },
      "context": "stuck_timer += Timer::time_elapsed();"
    },
    {
      "caller_function": "f",
      "called_function": "time_elapsed",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 160,
        "column": 0
      },
      "context": "stuck_timer += Timer::time_elapsed();"
    },
    {
      "caller_function": "k",
      "called_function": "get_context",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 168,
        "column": 0
      },
      "context": "if (!bomber || !bomber->get_context()) return;"
    },
    {
      "caller_function": "k",
      "called_function": "analyze_enemies",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 170,
        "column": 0
      },
      "context": "analyze_enemies();"
    },
    {
      "caller_function": "k",
      "called_function": "Timer::time_elapsed",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 173,
        "column": 0
      },
      "context": "float fade_factor = Timer::time_elapsed() / memory_fade_time;"
    },
    {
      "caller_function": "k",
      "called_function": "time_elapsed",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 173,
        "column": 0
      },
      "context": "float fade_factor = Timer::time_elapsed() / memory_fade_time;"
    },
    {
      "caller_function": "k",
      "called_function": "erase",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 174,
        "column": 0
      },
      "context": "dangerous_positions.erase("
    },
    {
      "caller_function": "k",
      "called_function": "std::remove_if",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 175,
        "column": 0
      },
      "context": "std::remove_if(dangerous_positions.begin(), dangerous_positions.end(),"
    },
    {
      "caller_function": "k",
      "called_function": "remove_if",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 175,
        "column": 0
      },
      "context": "std::remove_if(dangerous_positions.begin(), dangerous_positions.end(),"
    },
    {
      "caller_function": "k",
      "called_function": "begin",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 175,
        "column": 0
      },
      "context": "std::remove_if(dangerous_positions.begin(), dangerous_positions.end(),"
    },
    {
      "caller_function": "k",
      "called_function": "end",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 175,
        "column": 0
      },
      "context": "std::remove_if(dangerous_positions.begin(), dangerous_positions.end(),"
    },
    {
      "caller_function": "k",
      "called_function": "rand",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 176,
        "column": 0
      },
      "context": "[fade_factor](const CL_Vector&) { return (rand() % 100) < (fade_factor * 100); }),"
    },
    {
      "caller_function": "k",
      "called_function": "end",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 177,
        "column": 0
      },
      "context": "dangerous_positions.end()"
    },
    {
      "caller_function": "k",
      "called_function": "update_current_state",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 181,
        "column": 0
      },
      "context": "update_current_state();"
    },
    {
      "caller_function": "k",
      "called_function": "get_total_time",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 183,
        "column": 0
      },
      "context": "last_think_time = get_total_time();"
    },
    {
      "caller_function": "e",
      "called_function": "get_context",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 187,
        "column": 0
      },
      "context": "if (!bomber || !bomber->get_context()) return;"
    },
    {
      "caller_function": "e",
      "called_function": "my_pos",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 189,
        "column": 0
      },
      "context": "CL_Vector my_pos(bomber->get_x(), bomber->get_y());"
    },
    {
      "caller_function": "e",
      "called_function": "get_x",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 189,
        "column": 0
      },
      "context": "CL_Vector my_pos(bomber->get_x(), bomber->get_y());"
    },
    {
      "caller_function": "e",
      "called_function": "get_y",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 189,
        "column": 0
      },
      "context": "CL_Vector my_pos(bomber->get_x(), bomber->get_y());"
    },
    {
      "caller_function": "e",
      "called_function": "calculate_danger_level",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 190,
        "column": 0
      },
      "context": "float danger_level = calculate_danger_level(my_pos);"
    },
    {
      "caller_function": "f",
      "called_function": "transition_to_state",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 194,
        "column": 0
      },
      "context": "transition_to_state(AIState::FLEEING);"
    },
    {
      "caller_function": "f",
      "called_function": "scan_for_targets",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 199,
        "column": 0
      },
      "context": "auto targets = scan_for_targets();"
    },
    {
      "caller_function": "f",
      "called_function": "transition_to_state",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 202,
        "column": 0
      },
      "context": "transition_to_state(AIState::EXPLORING);"
    },
    {
      "caller_function": "f",
      "called_function": "select_best_target",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 206,
        "column": 0
      },
      "context": "auto best_target = select_best_target(targets);"
    },
    {
      "caller_function": "f",
      "called_function": "transition_to_state",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 211,
        "column": 0
      },
      "context": "transition_to_state(AIState::HUNTING);"
    },
    {
      "caller_function": "f",
      "called_function": "transition_to_state",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 213,
        "column": 0
      },
      "context": "transition_to_state(AIState::COLLECTING);"
    },
    {
      "caller_function": "f",
      "called_function": "should_place_bomb",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 214,
        "column": 0
      },
      "context": "} else if (should_place_bomb()) {"
    },
    {
      "caller_function": "f",
      "called_function": "transition_to_state",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 215,
        "column": 0
      },
      "context": "transition_to_state(AIState::BOMBING);"
    },
    {
      "caller_function": "f",
      "called_function": "transition_to_state",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 217,
        "column": 0
      },
      "context": "transition_to_state(AIState::EXPLORING);"
    },
    {
      "caller_function": "h",
      "called_function": "find_safe_position",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 235,
        "column": 0
      },
      "context": "current_target = find_safe_position();"
    },
    {
      "caller_function": "r",
      "called_function": "my_pos",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 255,
        "column": 0
      },
      "context": "CL_Vector my_pos(bomber->get_x(), bomber->get_y());"
    },
    {
      "caller_function": "r",
      "called_function": "get_x",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 255,
        "column": 0
      },
      "context": "CL_Vector my_pos(bomber->get_x(), bomber->get_y());"
    },
    {
      "caller_function": "r",
      "called_function": "get_y",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 255,
        "column": 0
      },
      "context": "CL_Vector my_pos(bomber->get_x(), bomber->get_y());"
    },
    {
      "caller_function": "h",
      "called_function": "find_safe_position",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 260,
        "column": 0
      },
      "context": "CL_Vector safe_pos = find_safe_position();"
    },
    {
      "caller_function": "h",
      "called_function": "find_path_to",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 261,
        "column": 0
      },
      "context": "auto path = find_path_to(safe_pos);"
    },
    {
      "caller_function": "f",
      "called_function": "find_path_to",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 276,
        "column": 0
      },
      "context": "auto path = find_path_to(current_target);"
    },
    {
      "caller_function": "f",
      "called_function": "get_total_time",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 291,
        "column": 0
      },
      "context": "last_bomb_time = get_total_time();"
    },
    {
      "caller_function": "f",
      "called_function": "get_bomb_frequency_modifier",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 301,
        "column": 0
      },
      "context": "bomb_cooldown_ai = 2.0f * get_bomb_frequency_modifier();"
    },
    {
      "caller_function": "f",
      "called_function": "push_back",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 302,
        "column": 0
      },
      "context": "recently_bombed_positions.push_back(my_pos);"
    },
    {
      "caller_function": "f",
      "called_function": "transition_to_state",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 305,
        "column": 0
      },
      "context": "transition_to_state(AIState::EXPLORING);"
    },
    {
      "caller_function": "f",
      "called_function": "Timer::time_elapsed",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 313,
        "column": 0
      },
      "context": "explore_timer += Timer::time_elapsed();"
    },
    {
      "caller_function": "f",
      "called_function": "time_elapsed",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 313,
        "column": 0
      },
      "context": "explore_timer += Timer::time_elapsed();"
    },
    {
      "caller_function": "f",
      "called_function": "rand",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 317,
        "column": 0
      },
      "context": "int direction = rand() % 4;"
    },
    {
      "caller_function": "h",
      "called_function": "get_total_time",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 336,
        "column": 0
      },
      "context": "next_input_time = get_total_time() + get_reaction_delay();"
    },
    {
      "caller_function": "h",
      "called_function": "get_reaction_delay",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 336,
        "column": 0
      },
      "context": "next_input_time = get_total_time() + get_reaction_delay();"
    },
    {
      "caller_function": "f",
      "called_function": "current",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 347,
        "column": 0
      },
      "context": "CL_Vector current(bomber->get_x(), bomber->get_y());"
    },
    {
      "caller_function": "f",
      "called_function": "get_x",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 347,
        "column": 0
      },
      "context": "CL_Vector current(bomber->get_x(), bomber->get_y());"
    },
    {
      "caller_function": "f",
      "called_function": "get_y",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 347,
        "column": 0
      },
      "context": "CL_Vector current(bomber->get_x(), bomber->get_y());"
    },
    {
      "caller_function": "f",
      "called_function": "push_back",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 348,
        "column": 0
      },
      "context": "path.push_back(current);"
    },
    {
      "caller_function": "f",
      "called_function": "vector_subtract",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 351,
        "column": 0
      },
      "context": "CL_Vector direction = vector_subtract(target, current);"
    },
    {
      "caller_function": "f",
      "called_function": "vector_length",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 352,
        "column": 0
      },
      "context": "float distance = vector_length(direction);"
    },
    {
      "caller_function": "f",
      "called_function": "push_back",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 355,
        "column": 0
      },
      "context": "path.push_back(target);"
    },
    {
      "caller_function": "f",
      "called_function": "vector_normalize",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 359,
        "column": 0
      },
      "context": "direction = vector_normalize(direction);"
    },
    {
      "caller_function": "r",
      "called_function": "vector_add",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 364,
        "column": 0
      },
      "context": "CL_Vector next_pos = vector_add(current, vector_multiply(direction, step));"
    },
    {
      "caller_function": "r",
      "called_function": "vector_multiply",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 364,
        "column": 0
      },
      "context": "CL_Vector next_pos = vector_add(current, vector_multiply(direction, step));"
    },
    {
      "caller_function": "r",
      "called_function": "CoordinateSystem::pixel_to_grid",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 367,
        "column": 0
      },
      "context": "GridCoord grid = CoordinateSystem::pixel_to_grid(PixelCoord(next_pos.x, next_pos.y));"
    },
    {
      "caller_function": "r",
      "called_function": "pixel_to_grid",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 367,
        "column": 0
      },
      "context": "GridCoord grid = CoordinateSystem::pixel_to_grid(PixelCoord(next_pos.x, next_pos.y));"
    },
    {
      "caller_function": "r",
      "called_function": "PixelCoord",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 367,
        "column": 0
      },
      "context": "GridCoord grid = CoordinateSystem::pixel_to_grid(PixelCoord(next_pos.x, next_pos.y));"
    },
    {
      "caller_function": "f",
      "called_function": "push_back",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 372,
        "column": 0
      },
      "context": "path.push_back(next_pos);"
    },
    {
      "caller_function": "f",
      "called_function": "perp1",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 375,
        "column": 0
      },
      "context": "CL_Vector perp1(-direction.y, direction.x);"
    },
    {
      "caller_function": "f",
      "called_function": "perp2",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 376,
        "column": 0
      },
      "context": "CL_Vector perp2(direction.y, -direction.x);"
    },
    {
      "caller_function": "f",
      "called_function": "vector_add",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 378,
        "column": 0
      },
      "context": "CL_Vector alt1 = vector_add(current, vector_multiply(perp1, tile_size_f));"
    },
    {
      "caller_function": "f",
      "called_function": "vector_multiply",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 378,
        "column": 0
      },
      "context": "CL_Vector alt1 = vector_add(current, vector_multiply(perp1, tile_size_f));"
    },
    {
      "caller_function": "f",
      "called_function": "vector_add",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 379,
        "column": 0
      },
      "context": "CL_Vector alt2 = vector_add(current, vector_multiply(perp2, tile_size_f));"
    },
    {
      "caller_function": "f",
      "called_function": "vector_multiply",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 379,
        "column": 0
      },
      "context": "CL_Vector alt2 = vector_add(current, vector_multiply(perp2, tile_size_f));"
    },
    {
      "caller_function": "f",
      "called_function": "CoordinateSystem::pixel_to_grid",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 381,
        "column": 0
      },
      "context": "GridCoord alt1_grid = CoordinateSystem::pixel_to_grid(PixelCoord(alt1.x, alt1.y));"
    },
    {
      "caller_function": "f",
      "called_function": "pixel_to_grid",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 381,
        "column": 0
      },
      "context": "GridCoord alt1_grid = CoordinateSystem::pixel_to_grid(PixelCoord(alt1.x, alt1.y));"
    },
    {
      "caller_function": "f",
      "called_function": "PixelCoord",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 381,
        "column": 0
      },
      "context": "GridCoord alt1_grid = CoordinateSystem::pixel_to_grid(PixelCoord(alt1.x, alt1.y));"
    },
    {
      "caller_function": "f",
      "called_function": "CoordinateSystem::pixel_to_grid",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 382,
        "column": 0
      },
      "context": "GridCoord alt2_grid = CoordinateSystem::pixel_to_grid(PixelCoord(alt2.x, alt2.y));"
    },
    {
      "caller_function": "f",
      "called_function": "pixel_to_grid",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 382,
        "column": 0
      },
      "context": "GridCoord alt2_grid = CoordinateSystem::pixel_to_grid(PixelCoord(alt2.x, alt2.y));"
    },
    {
      "caller_function": "f",
      "called_function": "PixelCoord",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 382,
        "column": 0
      },
      "context": "GridCoord alt2_grid = CoordinateSystem::pixel_to_grid(PixelCoord(alt2.x, alt2.y));"
    },
    {
      "caller_function": "f",
      "called_function": "get_context",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 386,
        "column": 0
      },
      "context": "bool tile1_blocking = bomber->get_context()->get_tile_manager()->is_tile_blocking_at(alt1_x, alt1_y)"
    },
    {
      "caller_function": "f",
      "called_function": "get_tile_manager",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 386,
        "column": 0
      },
      "context": "bool tile1_blocking = bomber->get_context()->get_tile_manager()->is_tile_blocking_at(alt1_x, alt1_y)"
    },
    {
      "caller_function": "f",
      "called_function": "is_tile_blocking_at",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 386,
        "column": 0
      },
      "context": "bool tile1_blocking = bomber->get_context()->get_tile_manager()->is_tile_blocking_at(alt1_x, alt1_y)"
    },
    {
      "caller_function": "f",
      "called_function": "get_context",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 387,
        "column": 0
      },
      "context": "bool tile2_blocking = bomber->get_context()->get_tile_manager()->is_tile_blocking_at(alt2_x, alt2_y)"
    },
    {
      "caller_function": "f",
      "called_function": "get_tile_manager",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 387,
        "column": 0
      },
      "context": "bool tile2_blocking = bomber->get_context()->get_tile_manager()->is_tile_blocking_at(alt2_x, alt2_y)"
    },
    {
      "caller_function": "f",
      "called_function": "is_tile_blocking_at",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 387,
        "column": 0
      },
      "context": "bool tile2_blocking = bomber->get_context()->get_tile_manager()->is_tile_blocking_at(alt2_x, alt2_y)"
    },
    {
      "caller_function": "f",
      "called_function": "push_back",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 390,
        "column": 0
      },
      "context": "path.push_back(alt1);"
    },
    {
      "caller_function": "f",
      "called_function": "push_back",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 392,
        "column": 0
      },
      "context": "path.push_back(alt2);"
    },
    {
      "caller_function": "f",
      "called_function": "push_back",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 398,
        "column": 0
      },
      "context": "path.push_back(target);"
    },
    {
      "caller_function": "e",
      "called_function": "calculate_danger_level",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 404,
        "column": 0
      },
      "context": "float danger = calculate_danger_level(pos);"
    },
    {
      "caller_function": "l",
      "called_function": "get_context",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 409,
        "column": 0
      },
      "context": "if (!bomber || !bomber->get_context()) return 0.0f;"
    },
    {
      "caller_function": "r",
      "called_function": "vector_distance",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 415,
        "column": 0
      },
      "context": "float dist = vector_distance(pos, dangerous_pos);"
    },
    {
      "caller_function": "f",
      "called_function": "get_context",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 422,
        "column": 0
      },
      "context": "SpatialGrid* spatial_grid = bomber->get_context()->get_spatial_grid();"
    },
    {
      "caller_function": "f",
      "called_function": "get_spatial_grid",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 422,
        "column": 0
      },
      "context": "SpatialGrid* spatial_grid = bomber->get_context()->get_spatial_grid();"
    },
    {
      "caller_function": "f",
      "called_function": "position",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 424,
        "column": 0
      },
      "context": "PixelCoord position(pos.x, pos.y);"
    },
    {
      "caller_function": "f",
      "called_function": "get_bombs_near",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 427,
        "column": 0
      },
      "context": "std::vector<GameObject*> nearby_bombs = spatial_grid->get_bombs_near(position, 5);"
    },
    {
      "caller_function": "f",
      "called_function": "bomb_pos",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 430,
        "column": 0
      },
      "context": "CL_Vector bomb_pos(obj->get_x(), obj->get_y());"
    },
    {
      "caller_function": "f",
      "called_function": "get_x",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 430,
        "column": 0
      },
      "context": "CL_Vector bomb_pos(obj->get_x(), obj->get_y());"
    },
    {
      "caller_function": "f",
      "called_function": "get_y",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 430,
        "column": 0
      },
      "context": "CL_Vector bomb_pos(obj->get_x(), obj->get_y());"
    },
    {
      "caller_function": "f",
      "called_function": "vector_distance",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 431,
        "column": 0
      },
      "context": "float dist = vector_distance(pos, bomb_pos);"
    },
    {
      "caller_function": "f",
      "called_function": "get_bombers_near",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 440,
        "column": 0
      },
      "context": "std::vector<GameObject*> nearby_bombers = spatial_grid->get_bombers_near(position, 2);"
    },
    {
      "caller_function": "f",
      "called_function": "enemy_pos",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 445,
        "column": 0
      },
      "context": "CL_Vector enemy_pos(enemy->get_x(), enemy->get_y());"
    },
    {
      "caller_function": "f",
      "called_function": "get_x",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 445,
        "column": 0
      },
      "context": "CL_Vector enemy_pos(enemy->get_x(), enemy->get_y());"
    },
    {
      "caller_function": "f",
      "called_function": "get_y",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 445,
        "column": 0
      },
      "context": "CL_Vector enemy_pos(enemy->get_x(), enemy->get_y());"
    },
    {
      "caller_function": "f",
      "called_function": "vector_distance",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 446,
        "column": 0
      },
      "context": "float dist = vector_distance(pos, enemy_pos);"
    },
    {
      "caller_function": "f",
      "called_function": "bomb_pos",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 458,
        "column": 0
      },
      "context": "CL_Vector bomb_pos(obj->get_x(), obj->get_y());"
    },
    {
      "caller_function": "f",
      "called_function": "get_x",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 458,
        "column": 0
      },
      "context": "CL_Vector bomb_pos(obj->get_x(), obj->get_y());"
    },
    {
      "caller_function": "f",
      "called_function": "get_y",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 458,
        "column": 0
      },
      "context": "CL_Vector bomb_pos(obj->get_x(), obj->get_y());"
    },
    {
      "caller_function": "f",
      "called_function": "vector_distance",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 459,
        "column": 0
      },
      "context": "float dist = vector_distance(pos, bomb_pos);"
    },
    {
      "caller_function": "r",
      "called_function": "get_type",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 468,
        "column": 0
      },
      "context": "if (!obj || obj->get_type() != GameObject::BOMBER) continue;"
    },
    {
      "caller_function": "f",
      "called_function": "enemy_pos",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 472,
        "column": 0
      },
      "context": "CL_Vector enemy_pos(enemy->get_x(), enemy->get_y());"
    },
    {
      "caller_function": "f",
      "called_function": "get_x",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 472,
        "column": 0
      },
      "context": "CL_Vector enemy_pos(enemy->get_x(), enemy->get_y());"
    },
    {
      "caller_function": "f",
      "called_function": "get_y",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 472,
        "column": 0
      },
      "context": "CL_Vector enemy_pos(enemy->get_x(), enemy->get_y());"
    },
    {
      "caller_function": "f",
      "called_function": "vector_distance",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 473,
        "column": 0
      },
      "context": "float dist = vector_distance(pos, enemy_pos);"
    },
    {
      "caller_function": "f",
      "called_function": "std::min",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 482,
        "column": 0
      },
      "context": "return std::min(danger, 1.0f); // Cap at 1.0"
    },
    {
      "caller_function": "f",
      "called_function": "min",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 482,
        "column": 0
      },
      "context": "return std::min(danger, 1.0f); // Cap at 1.0"
    },
    {
      "caller_function": "f",
      "called_function": "CL_Vector",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 487,
        "column": 0
      },
      "context": "return CL_Vector(bomber->get_x(), bomber->get_y());"
    },
    {
      "caller_function": "f",
      "called_function": "get_x",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 487,
        "column": 0
      },
      "context": "return CL_Vector(bomber->get_x(), bomber->get_y());"
    },
    {
      "caller_function": "f",
      "called_function": "get_y",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 487,
        "column": 0
      },
      "context": "return CL_Vector(bomber->get_x(), bomber->get_y());"
    },
    {
      "caller_function": "f",
      "called_function": "my_pos",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 490,
        "column": 0
      },
      "context": "CL_Vector my_pos(bomber->get_x(), bomber->get_y());"
    },
    {
      "caller_function": "f",
      "called_function": "get_x",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 490,
        "column": 0
      },
      "context": "CL_Vector my_pos(bomber->get_x(), bomber->get_y());"
    },
    {
      "caller_function": "f",
      "called_function": "get_y",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 490,
        "column": 0
      },
      "context": "CL_Vector my_pos(bomber->get_x(), bomber->get_y());"
    },
    {
      "caller_function": "r",
      "called_function": "abs",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 499,
        "column": 0
      },
      "context": "if (abs(dx) != radius && abs(dy) != radius) continue; // Only check perimeter"
    },
    {
      "caller_function": "r",
      "called_function": "abs",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 499,
        "column": 0
      },
      "context": "if (abs(dx) != radius && abs(dy) != radius) continue; // Only check perimeter"
    },
    {
      "caller_function": "r",
      "called_function": "vector_add",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 502,
        "column": 0
      },
      "context": "CL_Vector test_pos = vector_add(my_pos, CL_Vector(dx * tile_size_f, dy * tile_size_f));"
    },
    {
      "caller_function": "r",
      "called_function": "CL_Vector",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 502,
        "column": 0
      },
      "context": "CL_Vector test_pos = vector_add(my_pos, CL_Vector(dx * tile_size_f, dy * tile_size_f));"
    },
    {
      "caller_function": "r",
      "called_function": "CoordinateSystem::pixel_to_grid",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 505,
        "column": 0
      },
      "context": "GridCoord test_grid = CoordinateSystem::pixel_to_grid(PixelCoord(test_pos.x, test_pos.y));"
    },
    {
      "caller_function": "r",
      "called_function": "pixel_to_grid",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 505,
        "column": 0
      },
      "context": "GridCoord test_grid = CoordinateSystem::pixel_to_grid(PixelCoord(test_pos.x, test_pos.y));"
    },
    {
      "caller_function": "r",
      "called_function": "PixelCoord",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 505,
        "column": 0
      },
      "context": "GridCoord test_grid = CoordinateSystem::pixel_to_grid(PixelCoord(test_pos.x, test_pos.y));"
    },
    {
      "caller_function": "r",
      "called_function": "get_context",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 509,
        "column": 0
      },
      "context": "if (bomber->get_context()->get_tile_manager()->is_tile_blocking_at(grid_x, grid_y)) continue;"
    },
    {
      "caller_function": "r",
      "called_function": "get_tile_manager",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 509,
        "column": 0
      },
      "context": "if (bomber->get_context()->get_tile_manager()->is_tile_blocking_at(grid_x, grid_y)) continue;"
    },
    {
      "caller_function": "r",
      "called_function": "is_tile_blocking_at",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 509,
        "column": 0
      },
      "context": "if (bomber->get_context()->get_tile_manager()->is_tile_blocking_at(grid_x, grid_y)) continue;"
    },
    {
      "caller_function": "r",
      "called_function": "calculate_danger_level",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 511,
        "column": 0
      },
      "context": "float danger = calculate_danger_level(test_pos);"
    },
    {
      "caller_function": "s",
      "called_function": "get_context",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 528,
        "column": 0
      },
      "context": "if (!bomber || !bomber->get_context()) return targets;"
    },
    {
      "caller_function": "s",
      "called_function": "my_pos",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 530,
        "column": 0
      },
      "context": "CL_Vector my_pos(bomber->get_x(), bomber->get_y());"
    },
    {
      "caller_function": "s",
      "called_function": "get_x",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 530,
        "column": 0
      },
      "context": "CL_Vector my_pos(bomber->get_x(), bomber->get_y());"
    },
    {
      "caller_function": "s",
      "called_function": "get_y",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 530,
        "column": 0
      },
      "context": "CL_Vector my_pos(bomber->get_x(), bomber->get_y());"
    },
    {
      "caller_function": "s",
      "called_function": "get_context",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 533,
        "column": 0
      },
      "context": "SpatialGrid* spatial_grid = bomber->get_context()->get_spatial_grid();"
    },
    {
      "caller_function": "s",
      "called_function": "get_spatial_grid",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 533,
        "column": 0
      },
      "context": "SpatialGrid* spatial_grid = bomber->get_context()->get_spatial_grid();"
    },
    {
      "caller_function": "f",
      "called_function": "collision_helper",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 535,
        "column": 0
      },
      "context": "CollisionHelper collision_helper(spatial_grid);"
    },
    {
      "caller_function": "f",
      "called_function": "bomber_position",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 536,
        "column": 0
      },
      "context": "PixelCoord bomber_position(my_pos.x, my_pos.y);"
    },
    {
      "caller_function": "f",
      "called_function": "scan_ai_targets",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 539,
        "column": 0
      },
      "context": "CollisionHelper::AITargets ai_targets = collision_helper.scan_ai_targets(bomber_position, 10); // 10"
    },
    {
      "caller_function": "f",
      "called_function": "target_pos",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 544,
        "column": 0
      },
      "context": "CL_Vector target_pos(obj->get_x(), obj->get_y());"
    },
    {
      "caller_function": "f",
      "called_function": "get_x",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 544,
        "column": 0
      },
      "context": "CL_Vector target_pos(obj->get_x(), obj->get_y());"
    },
    {
      "caller_function": "f",
      "called_function": "get_y",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 544,
        "column": 0
      },
      "context": "CL_Vector target_pos(obj->get_x(), obj->get_y());"
    },
    {
      "caller_function": "f",
      "called_function": "vector_distance",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 545,
        "column": 0
      },
      "context": "float distance = vector_distance(my_pos, target_pos);"
    },
    {
      "caller_function": "f",
      "called_function": "evaluate_powerup_value",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 552,
        "column": 0
      },
      "context": "target.priority = evaluate_powerup_value(0) * (1.0f / (distance / 40.0f + 1.0f));"
    },
    {
      "caller_function": "f",
      "called_function": "is_position_safe",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 553,
        "column": 0
      },
      "context": "target.is_safe_path = is_position_safe(target_pos);"
    },
    {
      "caller_function": "f",
      "called_function": "push_back",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 555,
        "column": 0
      },
      "context": "targets.push_back(target);"
    },
    {
      "caller_function": "f",
      "called_function": "enemy_pos",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 565,
        "column": 0
      },
      "context": "CL_Vector enemy_pos(enemy->get_x(), enemy->get_y());"
    },
    {
      "caller_function": "f",
      "called_function": "get_x",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 565,
        "column": 0
      },
      "context": "CL_Vector enemy_pos(enemy->get_x(), enemy->get_y());"
    },
    {
      "caller_function": "f",
      "called_function": "get_y",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 565,
        "column": 0
      },
      "context": "CL_Vector enemy_pos(enemy->get_x(), enemy->get_y());"
    },
    {
      "caller_function": "f",
      "called_function": "vector_distance",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 566,
        "column": 0
      },
      "context": "float distance = vector_distance(my_pos, enemy_pos);"
    },
    {
      "caller_function": "f",
      "called_function": "is_position_safe",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 574,
        "column": 0
      },
      "context": "target.is_safe_path = is_position_safe(enemy_pos);"
    },
    {
      "caller_function": "f",
      "called_function": "push_back",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 576,
        "column": 0
      },
      "context": "targets.push_back(target);"
    },
    {
      "caller_function": "f",
      "called_function": "target_pos",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 585,
        "column": 0
      },
      "context": "CL_Vector target_pos(obj->get_x(), obj->get_y());"
    },
    {
      "caller_function": "f",
      "called_function": "get_x",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 585,
        "column": 0
      },
      "context": "CL_Vector target_pos(obj->get_x(), obj->get_y());"
    },
    {
      "caller_function": "f",
      "called_function": "get_y",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 585,
        "column": 0
      },
      "context": "CL_Vector target_pos(obj->get_x(), obj->get_y());"
    },
    {
      "caller_function": "f",
      "called_function": "vector_distance",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 586,
        "column": 0
      },
      "context": "float distance = vector_distance(my_pos, target_pos);"
    },
    {
      "caller_function": "f",
      "called_function": "evaluate_powerup_value",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 593,
        "column": 0
      },
      "context": "target.priority = evaluate_powerup_value(0) * (1.0f / (distance / 40.0f + 1.0f));"
    },
    {
      "caller_function": "f",
      "called_function": "is_position_safe",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 594,
        "column": 0
      },
      "context": "target.is_safe_path = is_position_safe(target_pos);"
    },
    {
      "caller_function": "f",
      "called_function": "push_back",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 596,
        "column": 0
      },
      "context": "targets.push_back(target);"
    },
    {
      "caller_function": "r",
      "called_function": "get_type",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 603,
        "column": 0
      },
      "context": "if (!obj || obj->get_type() != GameObject::BOMBER) continue;"
    },
    {
      "caller_function": "f",
      "called_function": "enemy_pos",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 607,
        "column": 0
      },
      "context": "CL_Vector enemy_pos(enemy->get_x(), enemy->get_y());"
    },
    {
      "caller_function": "f",
      "called_function": "get_x",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 607,
        "column": 0
      },
      "context": "CL_Vector enemy_pos(enemy->get_x(), enemy->get_y());"
    },
    {
      "caller_function": "f",
      "called_function": "get_y",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 607,
        "column": 0
      },
      "context": "CL_Vector enemy_pos(enemy->get_x(), enemy->get_y());"
    },
    {
      "caller_function": "f",
      "called_function": "vector_distance",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 608,
        "column": 0
      },
      "context": "float distance = vector_distance(my_pos, enemy_pos);"
    },
    {
      "caller_function": "f",
      "called_function": "is_position_safe",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 616,
        "column": 0
      },
      "context": "target.is_safe_path = is_position_safe(enemy_pos);"
    },
    {
      "caller_function": "f",
      "called_function": "push_back",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 618,
        "column": 0
      },
      "context": "targets.push_back(target);"
    },
    {
      "caller_function": "f",
      "called_function": "get_aggression_modifier",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 636,
        "column": 0
      },
      "context": "adjusted_priority *= get_aggression_modifier();"
    },
    {
      "caller_function": "b",
      "called_function": "my_pos",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 660,
        "column": 0
      },
      "context": "CL_Vector my_pos(bomber->get_x(), bomber->get_y());"
    },
    {
      "caller_function": "b",
      "called_function": "get_x",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 660,
        "column": 0
      },
      "context": "CL_Vector my_pos(bomber->get_x(), bomber->get_y());"
    },
    {
      "caller_function": "b",
      "called_function": "get_y",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 660,
        "column": 0
      },
      "context": "CL_Vector my_pos(bomber->get_x(), bomber->get_y());"
    },
    {
      "caller_function": "b",
      "called_function": "can_escape_from_bomb",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 663,
        "column": 0
      },
      "context": "if (!can_escape_from_bomb(my_pos)) return false;"
    },
    {
      "caller_function": "f",
      "called_function": "rand",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 678,
        "column": 0
      },
      "context": "return (rand() % 100) < (aggression_level * 30); // Random strategic bombing"
    },
    {
      "caller_function": "b",
      "called_function": "find_safe_position",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 686,
        "column": 0
      },
      "context": "CL_Vector safe_pos = find_safe_position();"
    },
    {
      "caller_function": "b",
      "called_function": "vector_distance",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 687,
        "column": 0
      },
      "context": "float escape_distance = vector_distance(bomb_pos, safe_pos);"
    },
    {
      "caller_function": "b",
      "called_function": "get_speed",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 688,
        "column": 0
      },
      "context": "float escape_time = escape_distance / (bomber ? bomber->get_speed() : 90.0f);"
    },
    {
      "caller_function": "y",
      "called_function": "predict_explosion_tiles",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 696,
        "column": 0
      },
      "context": "auto explosion_tiles = predict_explosion_tiles(bomb_pos, bomber->get_power());"
    },
    {
      "caller_function": "y",
      "called_function": "get_power",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 696,
        "column": 0
      },
      "context": "auto explosion_tiles = predict_explosion_tiles(bomb_pos, bomber->get_power());"
    },
    {
      "caller_function": "r",
      "called_function": "get_type",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 699,
        "column": 0
      },
      "context": "if (!obj || obj->get_type() != GameObject::BOMBER) continue;"
    },
    {
      "caller_function": "f",
      "called_function": "enemy_pos",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 703,
        "column": 0
      },
      "context": "CL_Vector enemy_pos(enemy->get_x(), enemy->get_y());"
    },
    {
      "caller_function": "f",
      "called_function": "get_x",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 703,
        "column": 0
      },
      "context": "CL_Vector enemy_pos(enemy->get_x(), enemy->get_y());"
    },
    {
      "caller_function": "f",
      "called_function": "get_y",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 703,
        "column": 0
      },
      "context": "CL_Vector enemy_pos(enemy->get_x(), enemy->get_y());"
    },
    {
      "caller_function": "f",
      "called_function": "CoordinateSystem::pixel_to_grid",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 706,
        "column": 0
      },
      "context": "GridCoord enemy_grid = CoordinateSystem::pixel_to_grid(PixelCoord(enemy_pos.x, enemy_pos.y));"
    },
    {
      "caller_function": "f",
      "called_function": "pixel_to_grid",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 706,
        "column": 0
      },
      "context": "GridCoord enemy_grid = CoordinateSystem::pixel_to_grid(PixelCoord(enemy_pos.x, enemy_pos.y));"
    },
    {
      "caller_function": "f",
      "called_function": "PixelCoord",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 706,
        "column": 0
      },
      "context": "GridCoord enemy_grid = CoordinateSystem::pixel_to_grid(PixelCoord(enemy_pos.x, enemy_pos.y));"
    },
    {
      "caller_function": "r",
      "called_function": "CoordinateSystem::pixel_to_grid",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 710,
        "column": 0
      },
      "context": "GridCoord explosion_grid = CoordinateSystem::pixel_to_grid(PixelCoord(explosion_tile.x, explosion_ti"
    },
    {
      "caller_function": "r",
      "called_function": "pixel_to_grid",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 710,
        "column": 0
      },
      "context": "GridCoord explosion_grid = CoordinateSystem::pixel_to_grid(PixelCoord(explosion_tile.x, explosion_ti"
    },
    {
      "caller_function": "r",
      "called_function": "PixelCoord",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 710,
        "column": 0
      },
      "context": "GridCoord explosion_grid = CoordinateSystem::pixel_to_grid(PixelCoord(explosion_tile.x, explosion_ti"
    },
    {
      "caller_function": "r",
      "called_function": "CoordinateSystem::grid_distance",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 713,
        "column": 0
      },
      "context": "float grid_dist = CoordinateSystem::grid_distance(enemy_grid, explosion_grid);"
    },
    {
      "caller_function": "r",
      "called_function": "grid_distance",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 713,
        "column": 0
      },
      "context": "float grid_dist = CoordinateSystem::grid_distance(enemy_grid, explosion_grid);"
    },
    {
      "caller_function": "s",
      "called_function": "CoordinateSystem::pixel_to_grid",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 729,
        "column": 0
      },
      "context": "GridCoord bomb_grid = CoordinateSystem::pixel_to_grid(PixelCoord(bomb_pos.x, bomb_pos.y));"
    },
    {
      "caller_function": "s",
      "called_function": "pixel_to_grid",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 729,
        "column": 0
      },
      "context": "GridCoord bomb_grid = CoordinateSystem::pixel_to_grid(PixelCoord(bomb_pos.x, bomb_pos.y));"
    },
    {
      "caller_function": "s",
      "called_function": "PixelCoord",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 729,
        "column": 0
      },
      "context": "GridCoord bomb_grid = CoordinateSystem::pixel_to_grid(PixelCoord(bomb_pos.x, bomb_pos.y));"
    },
    {
      "caller_function": "s",
      "called_function": "CoordinateSystem::grid_to_pixel",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 732,
        "column": 0
      },
      "context": "PixelCoord center_pixel = CoordinateSystem::grid_to_pixel(bomb_grid);"
    },
    {
      "caller_function": "s",
      "called_function": "grid_to_pixel",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 732,
        "column": 0
      },
      "context": "PixelCoord center_pixel = CoordinateSystem::grid_to_pixel(bomb_grid);"
    },
    {
      "caller_function": "s",
      "called_function": "push_back",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 733,
        "column": 0
      },
      "context": "tiles.push_back(CL_Vector(center_pixel.pixel_x, center_pixel.pixel_y));"
    },
    {
      "caller_function": "s",
      "called_function": "CL_Vector",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 733,
        "column": 0
      },
      "context": "tiles.push_back(CL_Vector(center_pixel.pixel_x, center_pixel.pixel_y));"
    },
    {
      "caller_function": "r",
      "called_function": "right_grid",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 738,
        "column": 0
      },
      "context": "GridCoord right_grid(bomb_grid.grid_x + i, bomb_grid.grid_y);"
    },
    {
      "caller_function": "r",
      "called_function": "CoordinateSystem::grid_to_pixel",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 739,
        "column": 0
      },
      "context": "PixelCoord right_pixel = CoordinateSystem::grid_to_pixel(right_grid);"
    },
    {
      "caller_function": "r",
      "called_function": "grid_to_pixel",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 739,
        "column": 0
      },
      "context": "PixelCoord right_pixel = CoordinateSystem::grid_to_pixel(right_grid);"
    },
    {
      "caller_function": "r",
      "called_function": "push_back",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 740,
        "column": 0
      },
      "context": "tiles.push_back(CL_Vector(right_pixel.pixel_x, right_pixel.pixel_y));"
    },
    {
      "caller_function": "r",
      "called_function": "CL_Vector",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 740,
        "column": 0
      },
      "context": "tiles.push_back(CL_Vector(right_pixel.pixel_x, right_pixel.pixel_y));"
    },
    {
      "caller_function": "r",
      "called_function": "left_grid",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 743,
        "column": 0
      },
      "context": "GridCoord left_grid(bomb_grid.grid_x - i, bomb_grid.grid_y);"
    },
    {
      "caller_function": "r",
      "called_function": "CoordinateSystem::grid_to_pixel",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 744,
        "column": 0
      },
      "context": "PixelCoord left_pixel = CoordinateSystem::grid_to_pixel(left_grid);"
    },
    {
      "caller_function": "r",
      "called_function": "grid_to_pixel",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 744,
        "column": 0
      },
      "context": "PixelCoord left_pixel = CoordinateSystem::grid_to_pixel(left_grid);"
    },
    {
      "caller_function": "r",
      "called_function": "push_back",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 745,
        "column": 0
      },
      "context": "tiles.push_back(CL_Vector(left_pixel.pixel_x, left_pixel.pixel_y));"
    },
    {
      "caller_function": "r",
      "called_function": "CL_Vector",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 745,
        "column": 0
      },
      "context": "tiles.push_back(CL_Vector(left_pixel.pixel_x, left_pixel.pixel_y));"
    },
    {
      "caller_function": "r",
      "called_function": "down_grid",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 748,
        "column": 0
      },
      "context": "GridCoord down_grid(bomb_grid.grid_x, bomb_grid.grid_y + i);"
    },
    {
      "caller_function": "r",
      "called_function": "CoordinateSystem::grid_to_pixel",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 749,
        "column": 0
      },
      "context": "PixelCoord down_pixel = CoordinateSystem::grid_to_pixel(down_grid);"
    },
    {
      "caller_function": "r",
      "called_function": "grid_to_pixel",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 749,
        "column": 0
      },
      "context": "PixelCoord down_pixel = CoordinateSystem::grid_to_pixel(down_grid);"
    },
    {
      "caller_function": "r",
      "called_function": "push_back",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 750,
        "column": 0
      },
      "context": "tiles.push_back(CL_Vector(down_pixel.pixel_x, down_pixel.pixel_y));"
    },
    {
      "caller_function": "r",
      "called_function": "CL_Vector",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 750,
        "column": 0
      },
      "context": "tiles.push_back(CL_Vector(down_pixel.pixel_x, down_pixel.pixel_y));"
    },
    {
      "caller_function": "r",
      "called_function": "up_grid",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 753,
        "column": 0
      },
      "context": "GridCoord up_grid(bomb_grid.grid_x, bomb_grid.grid_y - i);"
    },
    {
      "caller_function": "r",
      "called_function": "CoordinateSystem::grid_to_pixel",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 754,
        "column": 0
      },
      "context": "PixelCoord up_pixel = CoordinateSystem::grid_to_pixel(up_grid);"
    },
    {
      "caller_function": "r",
      "called_function": "grid_to_pixel",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 754,
        "column": 0
      },
      "context": "PixelCoord up_pixel = CoordinateSystem::grid_to_pixel(up_grid);"
    },
    {
      "caller_function": "r",
      "called_function": "push_back",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 755,
        "column": 0
      },
      "context": "tiles.push_back(CL_Vector(up_pixel.pixel_x, up_pixel.pixel_y));"
    },
    {
      "caller_function": "r",
      "called_function": "CL_Vector",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 755,
        "column": 0
      },
      "context": "tiles.push_back(CL_Vector(up_pixel.pixel_x, up_pixel.pixel_y));"
    },
    {
      "caller_function": "s",
      "called_function": "get_context",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 763,
        "column": 0
      },
      "context": "if (!bomber || !bomber->get_context()) return;"
    },
    {
      "caller_function": "f",
      "called_function": "bomb_pos",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 767,
        "column": 0
      },
      "context": "CL_Vector bomb_pos(obj->get_x(), obj->get_y());"
    },
    {
      "caller_function": "f",
      "called_function": "get_x",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 767,
        "column": 0
      },
      "context": "CL_Vector bomb_pos(obj->get_x(), obj->get_y());"
    },
    {
      "caller_function": "f",
      "called_function": "get_y",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 767,
        "column": 0
      },
      "context": "CL_Vector bomb_pos(obj->get_x(), obj->get_y());"
    },
    {
      "caller_function": "f",
      "called_function": "push_back",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 779,
        "column": 0
      },
      "context": "dangerous_positions.push_back(bomb_pos);"
    },
    {
      "caller_function": "n",
      "called_function": "CL_Vector",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 786,
        "column": 0
      },
      "context": "if (!enemy) return CL_Vector(0, 0);"
    },
    {
      "caller_function": "n",
      "called_function": "CL_Vector",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 790,
        "column": 0
      },
      "context": "return CL_Vector(enemy->get_x(), enemy->get_y());"
    },
    {
      "caller_function": "n",
      "called_function": "get_x",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 790,
        "column": 0
      },
      "context": "return CL_Vector(enemy->get_x(), enemy->get_y());"
    },
    {
      "caller_function": "n",
      "called_function": "get_y",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 790,
        "column": 0
      },
      "context": "return CL_Vector(enemy->get_x(), enemy->get_y());"
    },
    {
      "caller_function": "s",
      "called_function": "is_dead",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 794,
        "column": 0
      },
      "context": "if (!enemy || enemy->is_dead()) return false;"
    },
    {
      "caller_function": "s",
      "called_function": "my_pos",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 797,
        "column": 0
      },
      "context": "CL_Vector my_pos(bomber->get_x(), bomber->get_y());"
    },
    {
      "caller_function": "s",
      "called_function": "get_x",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 797,
        "column": 0
      },
      "context": "CL_Vector my_pos(bomber->get_x(), bomber->get_y());"
    },
    {
      "caller_function": "s",
      "called_function": "get_y",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 797,
        "column": 0
      },
      "context": "CL_Vector my_pos(bomber->get_x(), bomber->get_y());"
    },
    {
      "caller_function": "s",
      "called_function": "enemy_pos",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 798,
        "column": 0
      },
      "context": "CL_Vector enemy_pos(enemy->get_x(), enemy->get_y());"
    },
    {
      "caller_function": "s",
      "called_function": "get_x",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 798,
        "column": 0
      },
      "context": "CL_Vector enemy_pos(enemy->get_x(), enemy->get_y());"
    },
    {
      "caller_function": "s",
      "called_function": "get_y",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 798,
        "column": 0
      },
      "context": "CL_Vector enemy_pos(enemy->get_x(), enemy->get_y());"
    },
    {
      "caller_function": "s",
      "called_function": "vector_distance",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 800,
        "column": 0
      },
      "context": "return vector_distance(my_pos, enemy_pos) < 120.0f; // Close proximity = dangerous"
    },
    {
      "caller_function": "y",
      "called_function": "rand",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 815,
        "column": 0
      },
      "context": "return reaction_time * (0.5f + (rand() % 100) / 200.0f); // Add some randomness"
    },
    {
      "caller_function": "e",
      "called_function": "std::max",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 827,
        "column": 0
      },
      "context": "reaction_time = std::max(0.01f, std::min(2.0f, seconds));"
    },
    {
      "caller_function": "e",
      "called_function": "std::min",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 827,
        "column": 0
      },
      "context": "reaction_time = std::max(0.01f, std::min(2.0f, seconds));"
    },
    {
      "caller_function": "e",
      "called_function": "max",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 827,
        "column": 0
      },
      "context": "reaction_time = std::max(0.01f, std::min(2.0f, seconds));"
    },
    {
      "caller_function": "e",
      "called_function": "min",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 827,
        "column": 0
      },
      "context": "reaction_time = std::max(0.01f, std::min(2.0f, seconds));"
    },
    {
      "caller_function": "l",
      "called_function": "std::max",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 831,
        "column": 0
      },
      "context": "aggression_level = std::max(0.0f, std::min(1.0f, level));"
    },
    {
      "caller_function": "l",
      "called_function": "std::min",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 831,
        "column": 0
      },
      "context": "aggression_level = std::max(0.0f, std::min(1.0f, level));"
    },
    {
      "caller_function": "l",
      "called_function": "max",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 831,
        "column": 0
      },
      "context": "aggression_level = std::max(0.0f, std::min(1.0f, level));"
    },
    {
      "caller_function": "l",
      "called_function": "min",
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 831,
        "column": 0
      },
      "context": "aggression_level = std::max(0.0f, std::min(1.0f, level));"
    },
    {
      "caller_function": null,
      "called_function": "ParticleSystem::ParticleSystem",
      "location": {
        "file": "src/ParticleSystem.cpp",
        "line": 8,
        "column": 0
      },
      "context": "ParticleSystem::ParticleSystem(int _x, int _y, ParticleType type, GameContext* context)"
    },
    {
      "caller_function": null,
      "called_function": "ParticleSystem",
      "location": {
        "file": "src/ParticleSystem.cpp",
        "line": 8,
        "column": 0
      },
      "context": "ParticleSystem::ParticleSystem(int _x, int _y, ParticleType type, GameContext* context)"
    },
    {
      "caller_function": null,
      "called_function": "GameObject",
      "location": {
        "file": "src/ParticleSystem.cpp",
        "line": 9,
        "column": 0
      },
      "context": ": GameObject(_x, _y, context), particle_type(type), random_gen(std::random_device{}()), random_dist("
    },
    {
      "caller_function": null,
      "called_function": "particle_type",
      "location": {
        "file": "src/ParticleSystem.cpp",
        "line": 9,
        "column": 0
      },
      "context": ": GameObject(_x, _y, context), particle_type(type), random_gen(std::random_device{}()), random_dist("
    },
    {
      "caller_function": null,
      "called_function": "random_gen",
      "location": {
        "file": "src/ParticleSystem.cpp",
        "line": 9,
        "column": 0
      },
      "context": ": GameObject(_x, _y, context), particle_type(type), random_gen(std::random_device{}()), random_dist("
    },
    {
      "caller_function": null,
      "called_function": "random_dist",
      "location": {
        "file": "src/ParticleSystem.cpp",
        "line": 9,
        "column": 0
      },
      "context": ": GameObject(_x, _y, context), particle_type(type), random_gen(std::random_device{}()), random_dist("
    },
    {
      "caller_function": "h",
      "called_function": "emit_explosion_sparks",
      "location": {
        "file": "src/ParticleSystem.cpp",
        "line": 22,
        "column": 0
      },
      "context": "emit_explosion_sparks();"
    },
    {
      "caller_function": "h",
      "called_function": "emit_dust_cloud",
      "location": {
        "file": "src/ParticleSystem.cpp",
        "line": 26,
        "column": 0
      },
      "context": "emit_dust_cloud();"
    },
    {
      "caller_function": "h",
      "called_function": "emit_fire_particles",
      "location": {
        "file": "src/ParticleSystem.cpp",
        "line": 32,
        "column": 0
      },
      "context": "emit_fire_particles();"
    },
    {
      "caller_function": "h",
      "called_function": "emit_smoke_trail",
      "location": {
        "file": "src/ParticleSystem.cpp",
        "line": 38,
        "column": 0
      },
      "context": "emit_smoke_trail();"
    },
    {
      "caller_function": "h",
      "called_function": "ParticleSystem",
      "location": {
        "file": "src/ParticleSystem.cpp",
        "line": 46,
        "column": 0
      },
      "context": "ParticleSystem::~ParticleSystem() {"
    },
    {
      "caller_function": "l",
      "called_function": "clear",
      "location": {
        "file": "src/ParticleSystem.cpp",
        "line": 51,
        "column": 0
      },
      "context": "particles.clear();"
    },
    {
      "caller_function": "l",
      "called_function": "seed",
      "location": {
        "file": "src/ParticleSystem.cpp",
        "line": 57,
        "column": 0
      },
      "context": "random_gen.seed(std::random_device{}());"
    },
    {
      "caller_function": "t",
      "called_function": "update_particles",
      "location": {
        "file": "src/ParticleSystem.cpp",
        "line": 64,
        "column": 0
      },
      "context": "update_particles(deltaTime);"
    },
    {
      "caller_function": "h",
      "called_function": "emit_dust_cloud",
      "location": {
        "file": "src/ParticleSystem.cpp",
        "line": 72,
        "column": 0
      },
      "context": "emit_dust_cloud(3);"
    },
    {
      "caller_function": "h",
      "called_function": "emit_fire_particles",
      "location": {
        "file": "src/ParticleSystem.cpp",
        "line": 75,
        "column": 0
      },
      "context": "emit_fire_particles(4);"
    },
    {
      "caller_function": "h",
      "called_function": "emit_smoke_trail",
      "location": {
        "file": "src/ParticleSystem.cpp",
        "line": 78,
        "column": 0
      },
      "context": "emit_smoke_trail(2);"
    },
    {
      "caller_function": "w",
      "called_function": "render_particles",
      "location": {
        "file": "src/ParticleSystem.cpp",
        "line": 94,
        "column": 0
      },
      "context": "render_particles();"
    },
    {
      "caller_function": "f",
      "called_function": "erase",
      "location": {
        "file": "src/ParticleSystem.cpp",
        "line": 105,
        "column": 0
      },
      "context": "it = particles.erase(it);"
    },
    {
      "caller_function": "s",
      "called_function": "ParticleSystem::create_particle",
      "location": {
        "file": "src/ParticleSystem.cpp",
        "line": 137,
        "column": 0
      },
      "context": "void ParticleSystem::create_particle(float px, float py, float vel_x, float vel_y,"
    },
    {
      "caller_function": "s",
      "called_function": "create_particle",
      "location": {
        "file": "src/ParticleSystem.cpp",
        "line": 137,
        "column": 0
      },
      "context": "void ParticleSystem::create_particle(float px, float py, float vel_x, float vel_y,"
    },
    {
      "caller_function": "f",
      "called_function": "push_back",
      "location": {
        "file": "src/ParticleSystem.cpp",
        "line": 155,
        "column": 0
      },
      "context": "particles.push_back(p);"
    },
    {
      "caller_function": "r",
      "called_function": "random_dist",
      "location": {
        "file": "src/ParticleSystem.cpp",
        "line": 161,
        "column": 0
      },
      "context": "float angle = random_dist(random_gen) * M_PI * 2.0f;"
    },
    {
      "caller_function": "r",
      "called_function": "random_dist",
      "location": {
        "file": "src/ParticleSystem.cpp",
        "line": 162,
        "column": 0
      },
      "context": "float velocity = 100.0f + random_dist(random_gen) * 150.0f;"
    },
    {
      "caller_function": "r",
      "called_function": "std::cos",
      "location": {
        "file": "src/ParticleSystem.cpp",
        "line": 164,
        "column": 0
      },
      "context": "float vel_x = std::cos(angle) * velocity;"
    },
    {
      "caller_function": "r",
      "called_function": "cos",
      "location": {
        "file": "src/ParticleSystem.cpp",
        "line": 164,
        "column": 0
      },
      "context": "float vel_x = std::cos(angle) * velocity;"
    },
    {
      "caller_function": "r",
      "called_function": "std::sin",
      "location": {
        "file": "src/ParticleSystem.cpp",
        "line": 165,
        "column": 0
      },
      "context": "float vel_y = std::sin(angle) * velocity - 50.0f; // Slight upward bias"
    },
    {
      "caller_function": "r",
      "called_function": "sin",
      "location": {
        "file": "src/ParticleSystem.cpp",
        "line": 165,
        "column": 0
      },
      "context": "float vel_y = std::sin(angle) * velocity - 50.0f; // Slight upward bias"
    },
    {
      "caller_function": "r",
      "called_function": "random_dist",
      "location": {
        "file": "src/ParticleSystem.cpp",
        "line": 167,
        "column": 0
      },
      "context": "float offset_x = random_dist(random_gen) * 10.0f;"
    },
    {
      "caller_function": "r",
      "called_function": "random_dist",
      "location": {
        "file": "src/ParticleSystem.cpp",
        "line": 168,
        "column": 0
      },
      "context": "float offset_y = random_dist(random_gen) * 10.0f;"
    },
    {
      "caller_function": "r",
      "called_function": "random_dist",
      "location": {
        "file": "src/ParticleSystem.cpp",
        "line": 172,
        "column": 0
      },
      "context": "Uint8 g = 150 + random_dist(random_gen) * 105;"
    },
    {
      "caller_function": "r",
      "called_function": "create_particle",
      "location": {
        "file": "src/ParticleSystem.cpp",
        "line": 175,
        "column": 0
      },
      "context": "create_particle(x + offset_x, y + offset_y, vel_x, vel_y,"
    },
    {
      "caller_function": "r",
      "called_function": "random_dist",
      "location": {
        "file": "src/ParticleSystem.cpp",
        "line": 176,
        "column": 0
      },
      "context": "0.5f + random_dist(random_gen) * 0.5f,"
    },
    {
      "caller_function": "r",
      "called_function": "random_dist",
      "location": {
        "file": "src/ParticleSystem.cpp",
        "line": 177,
        "column": 0
      },
      "context": "2.0f + random_dist(random_gen) * 2.0f, r, g, b);"
    },
    {
      "caller_function": "r",
      "called_function": "random_dist",
      "location": {
        "file": "src/ParticleSystem.cpp",
        "line": 183,
        "column": 0
      },
      "context": "float angle = random_dist(random_gen) * M_PI * 2.0f;"
    },
    {
      "caller_function": "r",
      "called_function": "random_dist",
      "location": {
        "file": "src/ParticleSystem.cpp",
        "line": 184,
        "column": 0
      },
      "context": "float velocity = 30.0f + random_dist(random_gen) * 40.0f;"
    },
    {
      "caller_function": "r",
      "called_function": "std::cos",
      "location": {
        "file": "src/ParticleSystem.cpp",
        "line": 186,
        "column": 0
      },
      "context": "float vel_x = std::cos(angle) * velocity;"
    },
    {
      "caller_function": "r",
      "called_function": "cos",
      "location": {
        "file": "src/ParticleSystem.cpp",
        "line": 186,
        "column": 0
      },
      "context": "float vel_x = std::cos(angle) * velocity;"
    },
    {
      "caller_function": "r",
      "called_function": "std::sin",
      "location": {
        "file": "src/ParticleSystem.cpp",
        "line": 187,
        "column": 0
      },
      "context": "float vel_y = std::sin(angle) * velocity;"
    },
    {
      "caller_function": "r",
      "called_function": "sin",
      "location": {
        "file": "src/ParticleSystem.cpp",
        "line": 187,
        "column": 0
      },
      "context": "float vel_y = std::sin(angle) * velocity;"
    },
    {
      "caller_function": "r",
      "called_function": "random_dist",
      "location": {
        "file": "src/ParticleSystem.cpp",
        "line": 189,
        "column": 0
      },
      "context": "float offset_x = random_dist(random_gen) * 15.0f;"
    },
    {
      "caller_function": "r",
      "called_function": "random_dist",
      "location": {
        "file": "src/ParticleSystem.cpp",
        "line": 190,
        "column": 0
      },
      "context": "float offset_y = random_dist(random_gen) * 15.0f;"
    },
    {
      "caller_function": "r",
      "called_function": "random_dist",
      "location": {
        "file": "src/ParticleSystem.cpp",
        "line": 193,
        "column": 0
      },
      "context": "Uint8 gray = 100 + random_dist(random_gen) * 50;"
    },
    {
      "caller_function": "r",
      "called_function": "random_dist",
      "location": {
        "file": "src/ParticleSystem.cpp",
        "line": 200,
        "column": 0
      },
      "context": "p.life = 1.5f + random_dist(random_gen) * 1.0f;"
    },
    {
      "caller_function": "r",
      "called_function": "random_dist",
      "location": {
        "file": "src/ParticleSystem.cpp",
        "line": 202,
        "column": 0
      },
      "context": "p.size = 3.0f + random_dist(random_gen) * 2.0f;"
    },
    {
      "caller_function": "r",
      "called_function": "push_back",
      "location": {
        "file": "src/ParticleSystem.cpp",
        "line": 210,
        "column": 0
      },
      "context": "particles.push_back(p);"
    },
    {
      "caller_function": "r",
      "called_function": "random_dist",
      "location": {
        "file": "src/ParticleSystem.cpp",
        "line": 216,
        "column": 0
      },
      "context": "float angle = random_dist(random_gen) * M_PI * 0.5f - M_PI * 0.25f; // Upward bias"
    },
    {
      "caller_function": "r",
      "called_function": "random_dist",
      "location": {
        "file": "src/ParticleSystem.cpp",
        "line": 217,
        "column": 0
      },
      "context": "float velocity = 60.0f + random_dist(random_gen) * 80.0f;"
    },
    {
      "caller_function": "r",
      "called_function": "std::cos",
      "location": {
        "file": "src/ParticleSystem.cpp",
        "line": 219,
        "column": 0
      },
      "context": "float vel_x = std::cos(angle) * velocity;"
    },
    {
      "caller_function": "r",
      "called_function": "cos",
      "location": {
        "file": "src/ParticleSystem.cpp",
        "line": 219,
        "column": 0
      },
      "context": "float vel_x = std::cos(angle) * velocity;"
    },
    {
      "caller_function": "r",
      "called_function": "std::sin",
      "location": {
        "file": "src/ParticleSystem.cpp",
        "line": 220,
        "column": 0
      },
      "context": "float vel_y = std::sin(angle) * velocity - 80.0f; // Strong upward motion"
    },
    {
      "caller_function": "r",
      "called_function": "sin",
      "location": {
        "file": "src/ParticleSystem.cpp",
        "line": 220,
        "column": 0
      },
      "context": "float vel_y = std::sin(angle) * velocity - 80.0f; // Strong upward motion"
    },
    {
      "caller_function": "r",
      "called_function": "random_dist",
      "location": {
        "file": "src/ParticleSystem.cpp",
        "line": 222,
        "column": 0
      },
      "context": "float offset_x = random_dist(random_gen) * 8.0f;"
    },
    {
      "caller_function": "r",
      "called_function": "random_dist",
      "location": {
        "file": "src/ParticleSystem.cpp",
        "line": 223,
        "column": 0
      },
      "context": "float offset_y = random_dist(random_gen) * 8.0f;"
    },
    {
      "caller_function": "r",
      "called_function": "random_dist",
      "location": {
        "file": "src/ParticleSystem.cpp",
        "line": 227,
        "column": 0
      },
      "context": "Uint8 g = 100 + random_dist(random_gen) * 155;"
    },
    {
      "caller_function": "r",
      "called_function": "random_dist",
      "location": {
        "file": "src/ParticleSystem.cpp",
        "line": 228,
        "column": 0
      },
      "context": "Uint8 b = random_dist(random_gen) * 50;"
    },
    {
      "caller_function": "r",
      "called_function": "random_dist",
      "location": {
        "file": "src/ParticleSystem.cpp",
        "line": 235,
        "column": 0
      },
      "context": "p.life = 0.8f + random_dist(random_gen) * 0.7f;"
    },
    {
      "caller_function": "r",
      "called_function": "random_dist",
      "location": {
        "file": "src/ParticleSystem.cpp",
        "line": 237,
        "column": 0
      },
      "context": "p.size = 2.5f + random_dist(random_gen) * 1.5f;"
    },
    {
      "caller_function": "r",
      "called_function": "gravity",
      "location": {
        "file": "src/ParticleSystem.cpp",
        "line": 242,
        "column": 0
      },
      "context": "p.gravity = -50.0f; // Negative gravity (buoyancy)"
    },
    {
      "caller_function": "r",
      "called_function": "push_back",
      "location": {
        "file": "src/ParticleSystem.cpp",
        "line": 245,
        "column": 0
      },
      "context": "particles.push_back(p);"
    },
    {
      "caller_function": "r",
      "called_function": "random_dist",
      "location": {
        "file": "src/ParticleSystem.cpp",
        "line": 251,
        "column": 0
      },
      "context": "float angle = random_dist(random_gen) * M_PI * 0.3f - M_PI * 0.15f; // Slight upward bias"
    },
    {
      "caller_function": "r",
      "called_function": "random_dist",
      "location": {
        "file": "src/ParticleSystem.cpp",
        "line": 252,
        "column": 0
      },
      "context": "float velocity = 20.0f + random_dist(random_gen) * 30.0f;"
    },
    {
      "caller_function": "r",
      "called_function": "std::cos",
      "location": {
        "file": "src/ParticleSystem.cpp",
        "line": 254,
        "column": 0
      },
      "context": "float vel_x = std::cos(angle) * velocity;"
    },
    {
      "caller_function": "r",
      "called_function": "cos",
      "location": {
        "file": "src/ParticleSystem.cpp",
        "line": 254,
        "column": 0
      },
      "context": "float vel_x = std::cos(angle) * velocity;"
    },
    {
      "caller_function": "r",
      "called_function": "std::sin",
      "location": {
        "file": "src/ParticleSystem.cpp",
        "line": 255,
        "column": 0
      },
      "context": "float vel_y = std::sin(angle) * velocity - 40.0f; // Upward motion"
    },
    {
      "caller_function": "r",
      "called_function": "sin",
      "location": {
        "file": "src/ParticleSystem.cpp",
        "line": 255,
        "column": 0
      },
      "context": "float vel_y = std::sin(angle) * velocity - 40.0f; // Upward motion"
    },
    {
      "caller_function": "r",
      "called_function": "random_dist",
      "location": {
        "file": "src/ParticleSystem.cpp",
        "line": 257,
        "column": 0
      },
      "context": "float offset_x = random_dist(random_gen) * 12.0f;"
    },
    {
      "caller_function": "r",
      "called_function": "random_dist",
      "location": {
        "file": "src/ParticleSystem.cpp",
        "line": 258,
        "column": 0
      },
      "context": "float offset_y = random_dist(random_gen) * 12.0f;"
    },
    {
      "caller_function": "r",
      "called_function": "random_dist",
      "location": {
        "file": "src/ParticleSystem.cpp",
        "line": 261,
        "column": 0
      },
      "context": "Uint8 gray = 60 + random_dist(random_gen) * 40;"
    },
    {
      "caller_function": "r",
      "called_function": "random_dist",
      "location": {
        "file": "src/ParticleSystem.cpp",
        "line": 268,
        "column": 0
      },
      "context": "p.life = 2.0f + random_dist(random_gen) * 1.5f;"
    },
    {
      "caller_function": "r",
      "called_function": "random_dist",
      "location": {
        "file": "src/ParticleSystem.cpp",
        "line": 270,
        "column": 0
      },
      "context": "p.size = 4.0f + random_dist(random_gen) * 3.0f;"
    },
    {
      "caller_function": "r",
      "called_function": "push_back",
      "location": {
        "file": "src/ParticleSystem.cpp",
        "line": 278,
        "column": 0
      },
      "context": "particles.push_back(p);"
    },
    {
      "caller_function": "n",
      "called_function": "tiles",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 31,
        "column": 0
      },
      "context": "z = Z_EXPLOSION;  // Explosions should be above tiles (2000 > 0) and bombs (2000 < 3000)"
    },
    {
      "caller_function": "n",
      "called_function": "bombs",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 31,
        "column": 0
      },
      "context": "z = Z_EXPLOSION;  // Explosions should be above tiles (2000 > 0) and bombs (2000 < 3000)"
    },
    {
      "caller_function": "f",
      "called_function": "get_context",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 35,
        "column": 0
      },
      "context": "GPUAcceleratedRenderer* gpu_renderer = get_context()->get_rendering_facade()->get_gpu_renderer();"
    },
    {
      "caller_function": "f",
      "called_function": "get_rendering_facade",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 35,
        "column": 0
      },
      "context": "GPUAcceleratedRenderer* gpu_renderer = get_context()->get_rendering_facade()->get_gpu_renderer();"
    },
    {
      "caller_function": "f",
      "called_function": "get_gpu_renderer",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 35,
        "column": 0
      },
      "context": "GPUAcceleratedRenderer* gpu_renderer = get_context()->get_rendering_facade()->get_gpu_renderer();"
    },
    {
      "caller_function": "f",
      "called_function": "set_explosion_effect",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 39,
        "column": 0
      },
      "context": "gpu_renderer->set_explosion_effect(_x, _y, explosion_radius, 1.0f);"
    },
    {
      "caller_function": "f",
      "called_function": "emit_particles",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 42,
        "column": 0
      },
      "context": "gpu_renderer->emit_particles(_x, _y, power * 50, GPUAcceleratedRenderer::FIRE, nullptr, 2.0f);"
    },
    {
      "caller_function": "f",
      "called_function": "emit_particles",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 43,
        "column": 0
      },
      "context": "gpu_renderer->emit_particles(_x, _y, power * 30, GPUAcceleratedRenderer::SPARK, nullptr, 1.5f);"
    },
    {
      "caller_function": "f",
      "called_function": "emit_particles",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 44,
        "column": 0
      },
      "context": "gpu_renderer->emit_particles(_x, _y, power * 20, GPUAcceleratedRenderer::SMOKE, nullptr, 3.0f);"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 46,
        "column": 0
      },
      "context": "SDL_Log(\"SPECTACULAR explosion effects activated at (%d,%d) with power %d!\", _x, _y, power);"
    },
    {
      "caller_function": "f",
      "called_function": "GameObjectFactory::getInstance",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 51,
        "column": 0
      },
      "context": "ParticleSystem* explosion_sparks = GameObjectFactory::getInstance().create_particle_system(_x, _y, E"
    },
    {
      "caller_function": "f",
      "called_function": "getInstance",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 51,
        "column": 0
      },
      "context": "ParticleSystem* explosion_sparks = GameObjectFactory::getInstance().create_particle_system(_x, _y, E"
    },
    {
      "caller_function": "f",
      "called_function": "create_particle_system",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 51,
        "column": 0
      },
      "context": "ParticleSystem* explosion_sparks = GameObjectFactory::getInstance().create_particle_system(_x, _y, E"
    },
    {
      "caller_function": "f",
      "called_function": "get_context",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 51,
        "column": 0
      },
      "context": "ParticleSystem* explosion_sparks = GameObjectFactory::getInstance().create_particle_system(_x, _y, E"
    },
    {
      "caller_function": "f",
      "called_function": "GameObjectFactory::getInstance",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 53,
        "column": 0
      },
      "context": "ParticleSystem* dust_cloud = GameObjectFactory::getInstance().create_particle_system(_x, _y, DUST_CL"
    },
    {
      "caller_function": "f",
      "called_function": "getInstance",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 53,
        "column": 0
      },
      "context": "ParticleSystem* dust_cloud = GameObjectFactory::getInstance().create_particle_system(_x, _y, DUST_CL"
    },
    {
      "caller_function": "f",
      "called_function": "create_particle_system",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 53,
        "column": 0
      },
      "context": "ParticleSystem* dust_cloud = GameObjectFactory::getInstance().create_particle_system(_x, _y, DUST_CL"
    },
    {
      "caller_function": "f",
      "called_function": "get_context",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 53,
        "column": 0
      },
      "context": "ParticleSystem* dust_cloud = GameObjectFactory::getInstance().create_particle_system(_x, _y, DUST_CL"
    },
    {
      "caller_function": "r",
      "called_function": "is_tile_blocking_at",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 62,
        "column": 0
      },
      "context": "if (is_tile_blocking_at(get_map_x(), get_map_y() - i)) break;"
    },
    {
      "caller_function": "r",
      "called_function": "get_map_x",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 62,
        "column": 0
      },
      "context": "if (is_tile_blocking_at(get_map_x(), get_map_y() - i)) break;"
    },
    {
      "caller_function": "r",
      "called_function": "get_map_y",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 62,
        "column": 0
      },
      "context": "if (is_tile_blocking_at(get_map_x(), get_map_y() - i)) break;"
    },
    {
      "caller_function": "r",
      "called_function": "is_tile_blocking_at",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 66,
        "column": 0
      },
      "context": "if (is_tile_blocking_at(get_map_x(), get_map_y() + i)) break;"
    },
    {
      "caller_function": "r",
      "called_function": "get_map_x",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 66,
        "column": 0
      },
      "context": "if (is_tile_blocking_at(get_map_x(), get_map_y() + i)) break;"
    },
    {
      "caller_function": "r",
      "called_function": "get_map_y",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 66,
        "column": 0
      },
      "context": "if (is_tile_blocking_at(get_map_x(), get_map_y() + i)) break;"
    },
    {
      "caller_function": "r",
      "called_function": "is_tile_blocking_at",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 70,
        "column": 0
      },
      "context": "if (is_tile_blocking_at(get_map_x() - i, get_map_y())) break;"
    },
    {
      "caller_function": "r",
      "called_function": "get_map_x",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 70,
        "column": 0
      },
      "context": "if (is_tile_blocking_at(get_map_x() - i, get_map_y())) break;"
    },
    {
      "caller_function": "r",
      "called_function": "get_map_y",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 70,
        "column": 0
      },
      "context": "if (is_tile_blocking_at(get_map_x() - i, get_map_y())) break;"
    },
    {
      "caller_function": "r",
      "called_function": "is_tile_blocking_at",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 74,
        "column": 0
      },
      "context": "if (is_tile_blocking_at(get_map_x() + i, get_map_y())) break;"
    },
    {
      "caller_function": "r",
      "called_function": "get_map_x",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 74,
        "column": 0
      },
      "context": "if (is_tile_blocking_at(get_map_x() + i, get_map_y())) break;"
    },
    {
      "caller_function": "r",
      "called_function": "get_map_y",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 74,
        "column": 0
      },
      "context": "if (is_tile_blocking_at(get_map_x() + i, get_map_y())) break;"
    },
    {
      "caller_function": "r",
      "called_function": "detonate_other_bombs",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 77,
        "column": 0
      },
      "context": "detonate_other_bombs();"
    },
    {
      "caller_function": "r",
      "called_function": "notify_explosion_haptics",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 80,
        "column": 0
      },
      "context": "notify_explosion_haptics();"
    },
    {
      "caller_function": "t",
      "called_function": "detonate_other_bombs",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 85,
        "column": 0
      },
      "context": "detonate_other_bombs();"
    },
    {
      "caller_function": "t",
      "called_function": "kill_bombers",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 86,
        "column": 0
      },
      "context": "kill_bombers();"
    },
    {
      "caller_function": "t",
      "called_function": "explode_corpses",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 87,
        "column": 0
      },
      "context": "explode_corpses();"
    },
    {
      "caller_function": "f",
      "called_function": "get_context",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 95,
        "column": 0
      },
      "context": "GPUAcceleratedRenderer* gpu_renderer = get_context()->get_rendering_facade()->get_gpu_renderer();"
    },
    {
      "caller_function": "f",
      "called_function": "get_rendering_facade",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 95,
        "column": 0
      },
      "context": "GPUAcceleratedRenderer* gpu_renderer = get_context()->get_rendering_facade()->get_gpu_renderer();"
    },
    {
      "caller_function": "f",
      "called_function": "get_gpu_renderer",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 95,
        "column": 0
      },
      "context": "GPUAcceleratedRenderer* gpu_renderer = get_context()->get_rendering_facade()->get_gpu_renderer();"
    },
    {
      "caller_function": "f",
      "called_function": "set_explosion_effect",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 97,
        "column": 0
      },
      "context": "gpu_renderer->set_explosion_effect(x, y, 0.0f, 0.0f); // Clear explosion effect"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 98,
        "column": 0
      },
      "context": "SDL_Log(\"Explosion effects cleared at (%.0f,%.0f) after full duration\", x, y);"
    },
    {
      "caller_function": "s",
      "called_function": "destroy_tile_at",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 107,
        "column": 0
      },
      "context": "destroy_tile_at(get_map_x(), get_map_y());"
    },
    {
      "caller_function": "s",
      "called_function": "get_map_x",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 107,
        "column": 0
      },
      "context": "destroy_tile_at(get_map_x(), get_map_y());"
    },
    {
      "caller_function": "s",
      "called_function": "get_map_y",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 107,
        "column": 0
      },
      "context": "destroy_tile_at(get_map_x(), get_map_y());"
    },
    {
      "caller_function": "r",
      "called_function": "destroy_tile_at",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 111,
        "column": 0
      },
      "context": "destroy_tile_at(get_map_x(), get_map_y() - i);"
    },
    {
      "caller_function": "r",
      "called_function": "get_map_x",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 111,
        "column": 0
      },
      "context": "destroy_tile_at(get_map_x(), get_map_y() - i);"
    },
    {
      "caller_function": "r",
      "called_function": "get_map_y",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 111,
        "column": 0
      },
      "context": "destroy_tile_at(get_map_x(), get_map_y() - i);"
    },
    {
      "caller_function": "r",
      "called_function": "destroy_tile_at",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 114,
        "column": 0
      },
      "context": "destroy_tile_at(get_map_x(), get_map_y() + i);"
    },
    {
      "caller_function": "r",
      "called_function": "get_map_x",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 114,
        "column": 0
      },
      "context": "destroy_tile_at(get_map_x(), get_map_y() + i);"
    },
    {
      "caller_function": "r",
      "called_function": "get_map_y",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 114,
        "column": 0
      },
      "context": "destroy_tile_at(get_map_x(), get_map_y() + i);"
    },
    {
      "caller_function": "r",
      "called_function": "destroy_tile_at",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 117,
        "column": 0
      },
      "context": "destroy_tile_at(get_map_x() - i, get_map_y());"
    },
    {
      "caller_function": "r",
      "called_function": "get_map_x",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 117,
        "column": 0
      },
      "context": "destroy_tile_at(get_map_x() - i, get_map_y());"
    },
    {
      "caller_function": "r",
      "called_function": "get_map_y",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 117,
        "column": 0
      },
      "context": "destroy_tile_at(get_map_x() - i, get_map_y());"
    },
    {
      "caller_function": "r",
      "called_function": "destroy_tile_at",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 120,
        "column": 0
      },
      "context": "destroy_tile_at(get_map_x() + i, get_map_y());"
    },
    {
      "caller_function": "r",
      "called_function": "get_map_x",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 120,
        "column": 0
      },
      "context": "destroy_tile_at(get_map_x() + i, get_map_y());"
    },
    {
      "caller_function": "r",
      "called_function": "get_map_y",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 120,
        "column": 0
      },
      "context": "destroy_tile_at(get_map_x() + i, get_map_y());"
    },
    {
      "caller_function": "f",
      "called_function": "get_context",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 198,
        "column": 0
      },
      "context": "GPUAcceleratedRenderer* gpu_renderer = get_context()->get_rendering_facade()->get_gpu_renderer();"
    },
    {
      "caller_function": "f",
      "called_function": "get_rendering_facade",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 198,
        "column": 0
      },
      "context": "GPUAcceleratedRenderer* gpu_renderer = get_context()->get_rendering_facade()->get_gpu_renderer();"
    },
    {
      "caller_function": "f",
      "called_function": "get_gpu_renderer",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 198,
        "column": 0
      },
      "context": "GPUAcceleratedRenderer* gpu_renderer = get_context()->get_rendering_facade()->get_gpu_renderer();"
    },
    {
      "caller_function": "f",
      "called_function": "get_dummy_white_texture",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 205,
        "column": 0
      },
      "context": "GLuint dummy_texture = get_dummy_white_texture();"
    },
    {
      "caller_function": "f",
      "called_function": "add_sprite",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 214,
        "column": 0
      },
      "context": "gpu_renderer->add_sprite("
    },
    {
      "caller_function": "f",
      "called_function": "Position",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 215,
        "column": 0
      },
      "context": "tile_x, tile_y,               // Position (center) of this tile"
    },
    {
      "caller_function": "f",
      "called_function": "texture",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 217,
        "column": 0
      },
      "context": "dummy_texture,                // Dummy texture (shader ignores this)"
    },
    {
      "caller_function": "f",
      "called_function": "Color",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 218,
        "column": 0
      },
      "context": "white_color,                  // Color (full white, no tinting)"
    },
    {
      "caller_function": "f",
      "called_function": "frame",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 221,
        "column": 0
      },
      "context": "0                            // Sprite frame (ignored)"
    },
    {
      "caller_function": "f",
      "called_function": "glGenTextures",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 233,
        "column": 0
      },
      "context": "glGenTextures(1, &white_texture);"
    },
    {
      "caller_function": "f",
      "called_function": "glBindTexture",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 234,
        "column": 0
      },
      "context": "glBindTexture(GL_TEXTURE_2D, white_texture);"
    },
    {
      "caller_function": "f",
      "called_function": "glTexImage2D",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 236,
        "column": 0
      },
      "context": "glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA, 1, 1, 0, GL_RGBA, GL_UNSIGNED_BYTE, white_pixel);"
    },
    {
      "caller_function": "f",
      "called_function": "glTexParameteri",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 238,
        "column": 0
      },
      "context": "glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST);"
    },
    {
      "caller_function": "f",
      "called_function": "glTexParameteri",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 239,
        "column": 0
      },
      "context": "glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST);"
    },
    {
      "caller_function": "f",
      "called_function": "glTexParameteri",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 240,
        "column": 0
      },
      "context": "glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE);"
    },
    {
      "caller_function": "f",
      "called_function": "glTexParameteri",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 241,
        "column": 0
      },
      "context": "glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_EDGE);"
    },
    {
      "caller_function": "f",
      "called_function": "get_context",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 257,
        "column": 0
      },
      "context": "GPUAcceleratedRenderer* gpu_renderer = get_context()->get_rendering_facade()->get_gpu_renderer();"
    },
    {
      "caller_function": "f",
      "called_function": "get_rendering_facade",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 257,
        "column": 0
      },
      "context": "GPUAcceleratedRenderer* gpu_renderer = get_context()->get_rendering_facade()->get_gpu_renderer();"
    },
    {
      "caller_function": "f",
      "called_function": "get_gpu_renderer",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 257,
        "column": 0
      },
      "context": "GPUAcceleratedRenderer* gpu_renderer = get_context()->get_rendering_facade()->get_gpu_renderer();"
    },
    {
      "caller_function": "f",
      "called_function": "get_map_x",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 260,
        "column": 0
      },
      "context": "int map_x = get_map_x();"
    },
    {
      "caller_function": "f",
      "called_function": "get_map_y",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 261,
        "column": 0
      },
      "context": "int map_y = get_map_y();"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 267,
        "column": 0
      },
      "context": "SDL_Log(\"DEBUG: Explosion rendering at age=%.3f, center=(%.1f,%.1f), lengths=(%d,%d,%d,%d)\","
    },
    {
      "caller_function": "f",
      "called_function": "set_explosion_info",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 271,
        "column": 0
      },
      "context": "gpu_renderer->set_explosion_info("
    },
    {
      "caller_function": "f",
      "called_function": "begin_batch",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 279,
        "column": 0
      },
      "context": "gpu_renderer->begin_batch(GPUAcceleratedRenderer::EXPLOSION_HEAT);"
    },
    {
      "caller_function": "f",
      "called_function": "std::max",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 282,
        "column": 0
      },
      "context": "float max_extent = std::max(std::max(length_up, length_down), std::max(length_left, length_right));"
    },
    {
      "caller_function": "f",
      "called_function": "std::max",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 282,
        "column": 0
      },
      "context": "float max_extent = std::max(std::max(length_up, length_down), std::max(length_left, length_right));"
    },
    {
      "caller_function": "f",
      "called_function": "std::max",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 282,
        "column": 0
      },
      "context": "float max_extent = std::max(std::max(length_up, length_down), std::max(length_left, length_right));"
    },
    {
      "caller_function": "f",
      "called_function": "max",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 282,
        "column": 0
      },
      "context": "float max_extent = std::max(std::max(length_up, length_down), std::max(length_left, length_right));"
    },
    {
      "caller_function": "f",
      "called_function": "max",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 282,
        "column": 0
      },
      "context": "float max_extent = std::max(std::max(length_up, length_down), std::max(length_left, length_right));"
    },
    {
      "caller_function": "f",
      "called_function": "max",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 282,
        "column": 0
      },
      "context": "float max_extent = std::max(std::max(length_up, length_down), std::max(length_left, length_right));"
    },
    {
      "caller_function": "f",
      "called_function": "get_dummy_white_texture",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 289,
        "column": 0
      },
      "context": "GLuint dummy_texture = get_dummy_white_texture();"
    },
    {
      "caller_function": "f",
      "called_function": "add_sprite",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 294,
        "column": 0
      },
      "context": "gpu_renderer->add_sprite("
    },
    {
      "caller_function": "f",
      "called_function": "end_batch",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 304,
        "column": 0
      },
      "context": "gpu_renderer->end_batch();"
    },
    {
      "caller_function": "f",
      "called_function": "clear_explosion_info",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 305,
        "column": 0
      },
      "context": "gpu_renderer->clear_explosion_info();"
    },
    {
      "caller_function": "s",
      "called_function": "get_context",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 312,
        "column": 0
      },
      "context": "GameContext* ctx = get_context();"
    },
    {
      "caller_function": "f",
      "called_function": "Explosion::kill_bombers",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 314,
        "column": 0
      },
      "context": "SDL_Log(\"ERROR: Explosion::kill_bombers() - No GameContext available\");"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 314,
        "column": 0
      },
      "context": "SDL_Log(\"ERROR: Explosion::kill_bombers() - No GameContext available\");"
    },
    {
      "caller_function": "f",
      "called_function": "kill_bombers",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 314,
        "column": 0
      },
      "context": "SDL_Log(\"ERROR: Explosion::kill_bombers() - No GameContext available\");"
    },
    {
      "caller_function": "f",
      "called_function": "get_spatial_grid",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 318,
        "column": 0
      },
      "context": "SpatialGrid* spatial_grid = ctx->get_spatial_grid();"
    },
    {
      "caller_function": "f",
      "called_function": "collision_helper",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 321,
        "column": 0
      },
      "context": "CollisionHelper collision_helper(spatial_grid);"
    },
    {
      "caller_function": "f",
      "called_function": "push_back",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 327,
        "column": 0
      },
      "context": "explosion_area.push_back(GridCoord(get_map_x(), get_map_y()));"
    },
    {
      "caller_function": "f",
      "called_function": "GridCoord",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 327,
        "column": 0
      },
      "context": "explosion_area.push_back(GridCoord(get_map_x(), get_map_y()));"
    },
    {
      "caller_function": "f",
      "called_function": "get_map_x",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 327,
        "column": 0
      },
      "context": "explosion_area.push_back(GridCoord(get_map_x(), get_map_y()));"
    },
    {
      "caller_function": "f",
      "called_function": "get_map_y",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 327,
        "column": 0
      },
      "context": "explosion_area.push_back(GridCoord(get_map_x(), get_map_y()));"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 328,
        "column": 0
      },
      "context": "SDL_Log(\"EXPLOSION AREA: Center at (%d,%d)\", get_map_x(), get_map_y());"
    },
    {
      "caller_function": "f",
      "called_function": "get_map_x",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 328,
        "column": 0
      },
      "context": "SDL_Log(\"EXPLOSION AREA: Center at (%d,%d)\", get_map_x(), get_map_y());"
    },
    {
      "caller_function": "f",
      "called_function": "get_map_y",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 328,
        "column": 0
      },
      "context": "SDL_Log(\"EXPLOSION AREA: Center at (%d,%d)\", get_map_x(), get_map_y());"
    },
    {
      "caller_function": "r",
      "called_function": "coord",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 332,
        "column": 0
      },
      "context": "GridCoord coord(get_map_x(), get_map_y() - i);"
    },
    {
      "caller_function": "r",
      "called_function": "get_map_x",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 332,
        "column": 0
      },
      "context": "GridCoord coord(get_map_x(), get_map_y() - i);"
    },
    {
      "caller_function": "r",
      "called_function": "get_map_y",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 332,
        "column": 0
      },
      "context": "GridCoord coord(get_map_x(), get_map_y() - i);"
    },
    {
      "caller_function": "r",
      "called_function": "push_back",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 333,
        "column": 0
      },
      "context": "explosion_area.push_back(coord);"
    },
    {
      "caller_function": "r",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 334,
        "column": 0
      },
      "context": "SDL_Log(\"EXPLOSION AREA: Up ray %d at (%d,%d)\", i, coord.grid_x, coord.grid_y);"
    },
    {
      "caller_function": "r",
      "called_function": "coord",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 337,
        "column": 0
      },
      "context": "GridCoord coord(get_map_x(), get_map_y() + i);"
    },
    {
      "caller_function": "r",
      "called_function": "get_map_x",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 337,
        "column": 0
      },
      "context": "GridCoord coord(get_map_x(), get_map_y() + i);"
    },
    {
      "caller_function": "r",
      "called_function": "get_map_y",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 337,
        "column": 0
      },
      "context": "GridCoord coord(get_map_x(), get_map_y() + i);"
    },
    {
      "caller_function": "r",
      "called_function": "push_back",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 338,
        "column": 0
      },
      "context": "explosion_area.push_back(coord);"
    },
    {
      "caller_function": "r",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 339,
        "column": 0
      },
      "context": "SDL_Log(\"EXPLOSION AREA: Down ray %d at (%d,%d)\", i, coord.grid_x, coord.grid_y);"
    },
    {
      "caller_function": "r",
      "called_function": "coord",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 342,
        "column": 0
      },
      "context": "GridCoord coord(get_map_x() - i, get_map_y());"
    },
    {
      "caller_function": "r",
      "called_function": "get_map_x",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 342,
        "column": 0
      },
      "context": "GridCoord coord(get_map_x() - i, get_map_y());"
    },
    {
      "caller_function": "r",
      "called_function": "get_map_y",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 342,
        "column": 0
      },
      "context": "GridCoord coord(get_map_x() - i, get_map_y());"
    },
    {
      "caller_function": "r",
      "called_function": "push_back",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 343,
        "column": 0
      },
      "context": "explosion_area.push_back(coord);"
    },
    {
      "caller_function": "r",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 344,
        "column": 0
      },
      "context": "SDL_Log(\"EXPLOSION AREA: Left ray %d at (%d,%d)\", i, coord.grid_x, coord.grid_y);"
    },
    {
      "caller_function": "r",
      "called_function": "coord",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 347,
        "column": 0
      },
      "context": "GridCoord coord(get_map_x() + i, get_map_y());"
    },
    {
      "caller_function": "r",
      "called_function": "get_map_x",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 347,
        "column": 0
      },
      "context": "GridCoord coord(get_map_x() + i, get_map_y());"
    },
    {
      "caller_function": "r",
      "called_function": "get_map_y",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 347,
        "column": 0
      },
      "context": "GridCoord coord(get_map_x() + i, get_map_y());"
    },
    {
      "caller_function": "r",
      "called_function": "push_back",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 348,
        "column": 0
      },
      "context": "explosion_area.push_back(coord);"
    },
    {
      "caller_function": "r",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 349,
        "column": 0
      },
      "context": "SDL_Log(\"EXPLOSION AREA: Right ray %d at (%d,%d)\", i, coord.grid_x, coord.grid_y);"
    },
    {
      "caller_function": "r",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 352,
        "column": 0
      },
      "context": "SDL_Log(\"EXPLOSION AREA: Total %zu coordinates in explosion area\", explosion_area.size());"
    },
    {
      "caller_function": "r",
      "called_function": "size",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 352,
        "column": 0
      },
      "context": "SDL_Log(\"EXPLOSION AREA: Total %zu coordinates in explosion area\", explosion_area.size());"
    },
    {
      "caller_function": "r",
      "called_function": "find_explosion_victims",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 355,
        "column": 0
      },
      "context": "std::vector<GameObject*> victims = collision_helper.find_explosion_victims(explosion_area);"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 362,
        "column": 0
      },
      "context": "SDL_Log(\"Explosion killed bomber at (%d,%d) using SpatialGrid O(n)\","
    },
    {
      "caller_function": "f",
      "called_function": "get_map_x",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 363,
        "column": 0
      },
      "context": "bomber->get_map_x(), bomber->get_map_y());"
    },
    {
      "caller_function": "f",
      "called_function": "get_map_y",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 363,
        "column": 0
      },
      "context": "bomber->get_map_x(), bomber->get_map_y());"
    },
    {
      "caller_function": "f",
      "called_function": "get_controller",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 366,
        "column": 0
      },
      "context": "Controller* controller = bomber->get_controller();"
    },
    {
      "caller_function": "f",
      "called_function": "trigger_explosion_vibration",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 369,
        "column": 0
      },
      "context": "joystick_controller->trigger_explosion_vibration("
    },
    {
      "caller_function": "f",
      "called_function": "get_x",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 370,
        "column": 0
      },
      "context": "x, y, power, bomber->get_x(), bomber->get_y(), true  // true = bomber died"
    },
    {
      "caller_function": "f",
      "called_function": "get_y",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 370,
        "column": 0
      },
      "context": "x, y, power, bomber->get_x(), bomber->get_y(), true  // true = bomber died"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 372,
        "column": 0
      },
      "context": "SDL_Log(\"HAPTIC: Death vibration triggered for bomber at (%d,%d)\", bomber->get_x(), bomber->get_y())"
    },
    {
      "caller_function": "f",
      "called_function": "get_x",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 372,
        "column": 0
      },
      "context": "SDL_Log(\"HAPTIC: Death vibration triggered for bomber at (%d,%d)\", bomber->get_x(), bomber->get_y())"
    },
    {
      "caller_function": "f",
      "called_function": "get_y",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 372,
        "column": 0
      },
      "context": "SDL_Log(\"HAPTIC: Death vibration triggered for bomber at (%d,%d)\", bomber->get_x(), bomber->get_y())"
    },
    {
      "caller_function": "f",
      "called_function": "die",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 375,
        "column": 0
      },
      "context": "bomber->die();"
    },
    {
      "caller_function": "f",
      "called_function": "get_object_lists",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 381,
        "column": 0
      },
      "context": "const std::list<class GameObject*>& object_lists = ctx->get_object_lists();"
    },
    {
      "caller_function": "r",
      "called_function": "get_type",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 384,
        "column": 0
      },
      "context": "if (!obj || obj->get_type() != GameObject::BOMBER) continue;"
    },
    {
      "caller_function": "f",
      "called_function": "get_map_x",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 388,
        "column": 0
      },
      "context": "int bomber_map_x = bomber->get_map_x();"
    },
    {
      "caller_function": "f",
      "called_function": "get_map_y",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 389,
        "column": 0
      },
      "context": "int bomber_map_y = bomber->get_map_y();"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 421,
        "column": 0
      },
      "context": "SDL_Log(\"Explosion killed bomber at (%d,%d) using legacy O(n\u00b2)\", bomber_map_x, bomber_map_y);"
    },
    {
      "caller_function": "f",
      "called_function": "get_controller",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 424,
        "column": 0
      },
      "context": "Controller* controller = bomber->get_controller();"
    },
    {
      "caller_function": "f",
      "called_function": "trigger_explosion_vibration",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 427,
        "column": 0
      },
      "context": "joystick_controller->trigger_explosion_vibration("
    },
    {
      "caller_function": "f",
      "called_function": "get_x",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 428,
        "column": 0
      },
      "context": "x, y, power, bomber->get_x(), bomber->get_y(), true  // true = bomber died"
    },
    {
      "caller_function": "f",
      "called_function": "get_y",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 428,
        "column": 0
      },
      "context": "x, y, power, bomber->get_x(), bomber->get_y(), true  // true = bomber died"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 430,
        "column": 0
      },
      "context": "SDL_Log(\"HAPTIC: Death vibration triggered for bomber at (%d,%d)\", bomber->get_x(), bomber->get_y())"
    },
    {
      "caller_function": "f",
      "called_function": "get_x",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 430,
        "column": 0
      },
      "context": "SDL_Log(\"HAPTIC: Death vibration triggered for bomber at (%d,%d)\", bomber->get_x(), bomber->get_y())"
    },
    {
      "caller_function": "f",
      "called_function": "get_y",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 430,
        "column": 0
      },
      "context": "SDL_Log(\"HAPTIC: Death vibration triggered for bomber at (%d,%d)\", bomber->get_x(), bomber->get_y())"
    },
    {
      "caller_function": "f",
      "called_function": "die",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 433,
        "column": 0
      },
      "context": "bomber->die();"
    },
    {
      "caller_function": "s",
      "called_function": "get_context",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 442,
        "column": 0
      },
      "context": "GameContext* ctx = get_context();"
    },
    {
      "caller_function": "f",
      "called_function": "Explosion::explode_corpses",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 444,
        "column": 0
      },
      "context": "SDL_Log(\"ERROR: Explosion::explode_corpses() - No GameContext available\");"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 444,
        "column": 0
      },
      "context": "SDL_Log(\"ERROR: Explosion::explode_corpses() - No GameContext available\");"
    },
    {
      "caller_function": "f",
      "called_function": "explode_corpses",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 444,
        "column": 0
      },
      "context": "SDL_Log(\"ERROR: Explosion::explode_corpses() - No GameContext available\");"
    },
    {
      "caller_function": "f",
      "called_function": "get_spatial_grid",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 448,
        "column": 0
      },
      "context": "SpatialGrid* spatial_grid = ctx->get_spatial_grid();"
    },
    {
      "caller_function": "f",
      "called_function": "collision_helper",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 451,
        "column": 0
      },
      "context": "CollisionHelper collision_helper(spatial_grid);"
    },
    {
      "caller_function": "f",
      "called_function": "push_back",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 457,
        "column": 0
      },
      "context": "explosion_area.push_back(GridCoord(get_map_x(), get_map_y()));"
    },
    {
      "caller_function": "f",
      "called_function": "GridCoord",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 457,
        "column": 0
      },
      "context": "explosion_area.push_back(GridCoord(get_map_x(), get_map_y()));"
    },
    {
      "caller_function": "f",
      "called_function": "get_map_x",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 457,
        "column": 0
      },
      "context": "explosion_area.push_back(GridCoord(get_map_x(), get_map_y()));"
    },
    {
      "caller_function": "f",
      "called_function": "get_map_y",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 457,
        "column": 0
      },
      "context": "explosion_area.push_back(GridCoord(get_map_x(), get_map_y()));"
    },
    {
      "caller_function": "r",
      "called_function": "push_back",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 461,
        "column": 0
      },
      "context": "explosion_area.push_back(GridCoord(get_map_x(), get_map_y() - i));"
    },
    {
      "caller_function": "r",
      "called_function": "GridCoord",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 461,
        "column": 0
      },
      "context": "explosion_area.push_back(GridCoord(get_map_x(), get_map_y() - i));"
    },
    {
      "caller_function": "r",
      "called_function": "get_map_x",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 461,
        "column": 0
      },
      "context": "explosion_area.push_back(GridCoord(get_map_x(), get_map_y() - i));"
    },
    {
      "caller_function": "r",
      "called_function": "get_map_y",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 461,
        "column": 0
      },
      "context": "explosion_area.push_back(GridCoord(get_map_x(), get_map_y() - i));"
    },
    {
      "caller_function": "r",
      "called_function": "push_back",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 464,
        "column": 0
      },
      "context": "explosion_area.push_back(GridCoord(get_map_x(), get_map_y() + i));"
    },
    {
      "caller_function": "r",
      "called_function": "GridCoord",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 464,
        "column": 0
      },
      "context": "explosion_area.push_back(GridCoord(get_map_x(), get_map_y() + i));"
    },
    {
      "caller_function": "r",
      "called_function": "get_map_x",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 464,
        "column": 0
      },
      "context": "explosion_area.push_back(GridCoord(get_map_x(), get_map_y() + i));"
    },
    {
      "caller_function": "r",
      "called_function": "get_map_y",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 464,
        "column": 0
      },
      "context": "explosion_area.push_back(GridCoord(get_map_x(), get_map_y() + i));"
    },
    {
      "caller_function": "r",
      "called_function": "push_back",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 467,
        "column": 0
      },
      "context": "explosion_area.push_back(GridCoord(get_map_x() - i, get_map_y()));"
    },
    {
      "caller_function": "r",
      "called_function": "GridCoord",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 467,
        "column": 0
      },
      "context": "explosion_area.push_back(GridCoord(get_map_x() - i, get_map_y()));"
    },
    {
      "caller_function": "r",
      "called_function": "get_map_x",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 467,
        "column": 0
      },
      "context": "explosion_area.push_back(GridCoord(get_map_x() - i, get_map_y()));"
    },
    {
      "caller_function": "r",
      "called_function": "get_map_y",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 467,
        "column": 0
      },
      "context": "explosion_area.push_back(GridCoord(get_map_x() - i, get_map_y()));"
    },
    {
      "caller_function": "r",
      "called_function": "push_back",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 470,
        "column": 0
      },
      "context": "explosion_area.push_back(GridCoord(get_map_x() + i, get_map_y()));"
    },
    {
      "caller_function": "r",
      "called_function": "GridCoord",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 470,
        "column": 0
      },
      "context": "explosion_area.push_back(GridCoord(get_map_x() + i, get_map_y()));"
    },
    {
      "caller_function": "r",
      "called_function": "get_map_x",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 470,
        "column": 0
      },
      "context": "explosion_area.push_back(GridCoord(get_map_x() + i, get_map_y()));"
    },
    {
      "caller_function": "r",
      "called_function": "get_map_y",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 470,
        "column": 0
      },
      "context": "explosion_area.push_back(GridCoord(get_map_x() + i, get_map_y()));"
    },
    {
      "caller_function": "r",
      "called_function": "find_explosion_victims",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 474,
        "column": 0
      },
      "context": "std::vector<GameObject*> victims = collision_helper.find_explosion_victims(explosion_area);"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 480,
        "column": 0
      },
      "context": "SDL_Log(\"Corpse at (%d,%d) exploded due to explosion using SpatialGrid O(n)\","
    },
    {
      "caller_function": "f",
      "called_function": "get_map_x",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 481,
        "column": 0
      },
      "context": "corpse->get_map_x(), corpse->get_map_y());"
    },
    {
      "caller_function": "f",
      "called_function": "get_map_y",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 481,
        "column": 0
      },
      "context": "corpse->get_map_x(), corpse->get_map_y());"
    },
    {
      "caller_function": "f",
      "called_function": "explode",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 482,
        "column": 0
      },
      "context": "corpse->explode(); // This creates the gore explosion!"
    },
    {
      "caller_function": "f",
      "called_function": "get_object_lists",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 488,
        "column": 0
      },
      "context": "const std::list<class GameObject*>& object_lists = ctx->get_object_lists();"
    },
    {
      "caller_function": "f",
      "called_function": "get_map_x",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 494,
        "column": 0
      },
      "context": "int corpse_map_x = corpse->get_map_x();"
    },
    {
      "caller_function": "f",
      "called_function": "get_map_y",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 495,
        "column": 0
      },
      "context": "int corpse_map_y = corpse->get_map_y();"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 527,
        "column": 0
      },
      "context": "SDL_Log(\"Corpse at (%d,%d) exploded due to explosion using legacy O(n\u00b2)\", corpse_map_x, corpse_map_y"
    },
    {
      "caller_function": "f",
      "called_function": "explode",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 528,
        "column": 0
      },
      "context": "corpse->explode(); // This creates the gore explosion!"
    },
    {
      "caller_function": "t",
      "called_function": "get_context",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 539,
        "column": 0
      },
      "context": "MapTile* legacy_tile = get_context()->get_map()->get_tile(map_x, map_y);"
    },
    {
      "caller_function": "t",
      "called_function": "get_map",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 539,
        "column": 0
      },
      "context": "MapTile* legacy_tile = get_context()->get_map()->get_tile(map_x, map_y);"
    },
    {
      "caller_function": "t",
      "called_function": "get_tile",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 539,
        "column": 0
      },
      "context": "MapTile* legacy_tile = get_context()->get_map()->get_tile(map_x, map_y);"
    },
    {
      "caller_function": "f",
      "called_function": "get_context",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 547,
        "column": 0
      },
      "context": "TileEntity* tile_entity = get_context()->get_map()->get_tile_entity(map_x, map_y);"
    },
    {
      "caller_function": "f",
      "called_function": "get_map",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 547,
        "column": 0
      },
      "context": "TileEntity* tile_entity = get_context()->get_map()->get_tile_entity(map_x, map_y);"
    },
    {
      "caller_function": "f",
      "called_function": "get_tile_entity",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 547,
        "column": 0
      },
      "context": "TileEntity* tile_entity = get_context()->get_map()->get_tile_entity(map_x, map_y);"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 562,
        "column": 0
      },
      "context": "SDL_Log(\"Explosion: Requesting tile destruction at (%d,%d) via TileManager\", map_x, map_y);"
    },
    {
      "caller_function": "f",
      "called_function": "get_context",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 563,
        "column": 0
      },
      "context": "get_context()->get_tile_manager()->request_tile_destruction(map_x, map_y);"
    },
    {
      "caller_function": "f",
      "called_function": "get_tile_manager",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 563,
        "column": 0
      },
      "context": "get_context()->get_tile_manager()->request_tile_destruction(map_x, map_y);"
    },
    {
      "caller_function": "f",
      "called_function": "request_tile_destruction",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 563,
        "column": 0
      },
      "context": "get_context()->get_tile_manager()->request_tile_destruction(map_x, map_y);"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 565,
        "column": 0
      },
      "context": "SDL_Log(\"WARNING: No TileManager available for tile destruction at (%d,%d)\", map_x, map_y);"
    },
    {
      "caller_function": "s",
      "called_function": "get_context",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 570,
        "column": 0
      },
      "context": "GameContext* ctx = get_context();"
    },
    {
      "caller_function": "f",
      "called_function": "get_object_lists",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 576,
        "column": 0
      },
      "context": "const std::list<class GameObject*>& object_lists = ctx->get_object_lists();"
    },
    {
      "caller_function": "r",
      "called_function": "get_type",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 579,
        "column": 0
      },
      "context": "if (!obj || obj->get_type() != GameObject::BOMBER) continue;"
    },
    {
      "caller_function": "r",
      "called_function": "get_controller",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 584,
        "column": 0
      },
      "context": "Controller* controller = bomber->get_controller();"
    },
    {
      "caller_function": "r",
      "called_function": "get_type",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 588,
        "column": 0
      },
      "context": "Controller::CONTROLLER_TYPE controller_type = controller->get_type();"
    },
    {
      "caller_function": "f",
      "called_function": "is_dead",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 593,
        "column": 0
      },
      "context": "bool bomber_died = bomber->is_dead();"
    },
    {
      "caller_function": "f",
      "called_function": "trigger_explosion_vibration",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 596,
        "column": 0
      },
      "context": "joystick_controller->trigger_explosion_vibration("
    },
    {
      "caller_function": "f",
      "called_function": "position",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 597,
        "column": 0
      },
      "context": "x, y,                           // Explosion position (world coordinates)"
    },
    {
      "caller_function": "f",
      "called_function": "get_x",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 599,
        "column": 0
      },
      "context": "bomber->get_x(), bomber->get_y(),  // Bomber position (world coordinates)"
    },
    {
      "caller_function": "f",
      "called_function": "get_y",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 599,
        "column": 0
      },
      "context": "bomber->get_x(), bomber->get_y(),  // Bomber position (world coordinates)"
    },
    {
      "caller_function": "f",
      "called_function": "position",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 599,
        "column": 0
      },
      "context": "bomber->get_x(), bomber->get_y(),  // Bomber position (world coordinates)"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 603,
        "column": 0
      },
      "context": "SDL_Log(\"HAPTIC: Notified joystick controller for bomber at (%d,%d) about explosion at (%.1f,%.1f) p"
    },
    {
      "caller_function": "f",
      "called_function": "get_x",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 604,
        "column": 0
      },
      "context": "bomber->get_x(), bomber->get_y(), x, y, power, bomber_died ? \"true\" : \"false\");"
    },
    {
      "caller_function": "f",
      "called_function": "get_y",
      "location": {
        "file": "src/Explosion.cpp",
        "line": 604,
        "column": 0
      },
      "context": "bomber->get_x(), bomber->get_y(), x, y, power, bomber_died ? \"true\" : \"false\");"
    },
    {
      "caller_function": null,
      "called_function": "TileEntity::TileEntity",
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 25,
        "column": 0
      },
      "context": "TileEntity::TileEntity(MapTile_Pure* tile_data, GameContext* context)"
    },
    {
      "caller_function": null,
      "called_function": "TileEntity",
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 25,
        "column": 0
      },
      "context": "TileEntity::TileEntity(MapTile_Pure* tile_data, GameContext* context)"
    },
    {
      "caller_function": null,
      "called_function": "GameObject",
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 26,
        "column": 0
      },
      "context": ": GameObject(tile_data->get_pixel_x(), tile_data->get_pixel_y(), context), tile_data(tile_data) {"
    },
    {
      "caller_function": null,
      "called_function": "get_pixel_x",
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 26,
        "column": 0
      },
      "context": ": GameObject(tile_data->get_pixel_x(), tile_data->get_pixel_y(), context), tile_data(tile_data) {"
    },
    {
      "caller_function": null,
      "called_function": "get_pixel_y",
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 26,
        "column": 0
      },
      "context": ": GameObject(tile_data->get_pixel_x(), tile_data->get_pixel_y(), context), tile_data(tile_data) {"
    },
    {
      "caller_function": null,
      "called_function": "tile_data",
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 26,
        "column": 0
      },
      "context": ": GameObject(tile_data->get_pixel_x(), tile_data->get_pixel_y(), context), tile_data(tile_data) {"
    },
    {
      "caller_function": null,
      "called_function": "get_sprite_number",
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 29,
        "column": 0
      },
      "context": "sprite_nr = tile_data->get_sprite_number();"
    },
    {
      "caller_function": null,
      "called_function": "level",
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 34,
        "column": 0
      },
      "context": "z = Z_GROUND;  // Tiles should be at ground level (0), behind bombs (3000)"
    },
    {
      "caller_function": null,
      "called_function": "bombs",
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 34,
        "column": 0
      },
      "context": "z = Z_GROUND;  // Tiles should be at ground level (0), behind bombs (3000)"
    },
    {
      "caller_function": null,
      "called_function": "SDL_Log",
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 36,
        "column": 0
      },
      "context": "SDL_Log(\"TileEntity: Created entity for %s tile at (%d,%d)\","
    },
    {
      "caller_function": null,
      "called_function": "get_type",
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 37,
        "column": 0
      },
      "context": "tile_data->get_type() == MapTile_Pure::GROUND ? \"GROUND\" :"
    },
    {
      "caller_function": null,
      "called_function": "get_type",
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 38,
        "column": 0
      },
      "context": "tile_data->get_type() == MapTile_Pure::WALL ? \"WALL\" :"
    },
    {
      "caller_function": null,
      "called_function": "get_type",
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 39,
        "column": 0
      },
      "context": "tile_data->get_type() == MapTile_Pure::BOX ? \"BOX\" : \"UNKNOWN\","
    },
    {
      "caller_function": null,
      "called_function": "get_map_x",
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 40,
        "column": 0
      },
      "context": "get_map_x(), get_map_y());"
    },
    {
      "caller_function": null,
      "called_function": "get_map_y",
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 40,
        "column": 0
      },
      "context": "get_map_x(), get_map_y());"
    },
    {
      "caller_function": null,
      "called_function": "TileEntity",
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 43,
        "column": 0
      },
      "context": "TileEntity::~TileEntity() {"
    },
    {
      "caller_function": "f",
      "called_function": "TileEntity::act",
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 53,
        "column": 0
      },
      "context": "SDL_Log(\"CRITICAL: TileEntity::act() - tile_data corrupted to 0xffffffffffffffff at (%d,%d)!\", get_x"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 53,
        "column": 0
      },
      "context": "SDL_Log(\"CRITICAL: TileEntity::act() - tile_data corrupted to 0xffffffffffffffff at (%d,%d)!\", get_x"
    },
    {
      "caller_function": "f",
      "called_function": "act",
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 53,
        "column": 0
      },
      "context": "SDL_Log(\"CRITICAL: TileEntity::act() - tile_data corrupted to 0xffffffffffffffff at (%d,%d)!\", get_x"
    },
    {
      "caller_function": "f",
      "called_function": "get_x",
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 53,
        "column": 0
      },
      "context": "SDL_Log(\"CRITICAL: TileEntity::act() - tile_data corrupted to 0xffffffffffffffff at (%d,%d)!\", get_x"
    },
    {
      "caller_function": "f",
      "called_function": "get_y",
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 53,
        "column": 0
      },
      "context": "SDL_Log(\"CRITICAL: TileEntity::act() - tile_data corrupted to 0xffffffffffffffff at (%d,%d)!\", get_x"
    },
    {
      "caller_function": "f",
      "called_function": "update_destruction_animation",
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 60,
        "column": 0
      },
      "context": "update_destruction_animation(deltaTime);"
    },
    {
      "caller_function": "f",
      "called_function": "GameObject::show",
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 78,
        "column": 0
      },
      "context": "GameObject::show();"
    },
    {
      "caller_function": "f",
      "called_function": "show",
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 78,
        "column": 0
      },
      "context": "GameObject::show();"
    },
    {
      "caller_function": "f",
      "called_function": "render_destruction_effects",
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 81,
        "column": 0
      },
      "context": "render_destruction_effects();"
    },
    {
      "caller_function": "f",
      "called_function": "TileEntity::destroy",
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 88,
        "column": 0
      },
      "context": "SDL_Log(\"ERROR: TileEntity::destroy() - corrupted tile_data pointer: %p\", tile_data);"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 88,
        "column": 0
      },
      "context": "SDL_Log(\"ERROR: TileEntity::destroy() - corrupted tile_data pointer: %p\", tile_data);"
    },
    {
      "caller_function": "f",
      "called_function": "destroy",
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 88,
        "column": 0
      },
      "context": "SDL_Log(\"ERROR: TileEntity::destroy() - corrupted tile_data pointer: %p\", tile_data);"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 93,
        "column": 0
      },
      "context": "SDL_Log(\"TileEntity: Destroying tile at (%d,%d)\", get_map_x(), get_map_y());"
    },
    {
      "caller_function": "f",
      "called_function": "get_map_x",
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 93,
        "column": 0
      },
      "context": "SDL_Log(\"TileEntity: Destroying tile at (%d,%d)\", get_map_x(), get_map_y());"
    },
    {
      "caller_function": "f",
      "called_function": "get_map_y",
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 93,
        "column": 0
      },
      "context": "SDL_Log(\"TileEntity: Destroying tile at (%d,%d)\", get_map_x(), get_map_y());"
    },
    {
      "caller_function": "f",
      "called_function": "on_destruction_request",
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 98,
        "column": 0
      },
      "context": "tile_data->on_destruction_request();"
    },
    {
      "caller_function": "f",
      "called_function": "get_context",
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 102,
        "column": 0
      },
      "context": "get_context()->get_lifecycle_manager()->mark_tile_entity_for_destruction(this);"
    },
    {
      "caller_function": "f",
      "called_function": "get_lifecycle_manager",
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 102,
        "column": 0
      },
      "context": "get_context()->get_lifecycle_manager()->mark_tile_entity_for_destruction(this);"
    },
    {
      "caller_function": "f",
      "called_function": "mark_tile_entity_for_destruction",
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 102,
        "column": 0
      },
      "context": "get_context()->get_lifecycle_manager()->mark_tile_entity_for_destruction(this);"
    },
    {
      "caller_function": "f",
      "called_function": "tile_pos",
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 106,
        "column": 0
      },
      "context": "AudioPosition tile_pos(get_x(), get_y(), 0.0f);"
    },
    {
      "caller_function": "f",
      "called_function": "get_x",
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 106,
        "column": 0
      },
      "context": "AudioPosition tile_pos(get_x(), get_y(), 0.0f);"
    },
    {
      "caller_function": "f",
      "called_function": "get_y",
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 106,
        "column": 0
      },
      "context": "AudioPosition tile_pos(get_x(), get_y(), 0.0f);"
    },
    {
      "caller_function": "f",
      "called_function": "AudioMixer::play_sound_3d",
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 107,
        "column": 0
      },
      "context": "AudioMixer::play_sound_3d(\"break\", tile_pos, 500.0f);"
    },
    {
      "caller_function": "f",
      "called_function": "play_sound_3d",
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 107,
        "column": 0
      },
      "context": "AudioMixer::play_sound_3d(\"break\", tile_pos, 500.0f);"
    },
    {
      "caller_function": "f",
      "called_function": "TileEntity::destroy",
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 109,
        "column": 0
      },
      "context": "SDL_Log(\"WARNING: TileEntity::destroy() called on already destroyed tile at (%d,%d)\", get_map_x(), g"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 109,
        "column": 0
      },
      "context": "SDL_Log(\"WARNING: TileEntity::destroy() called on already destroyed tile at (%d,%d)\", get_map_x(), g"
    },
    {
      "caller_function": "f",
      "called_function": "destroy",
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 109,
        "column": 0
      },
      "context": "SDL_Log(\"WARNING: TileEntity::destroy() called on already destroyed tile at (%d,%d)\", get_map_x(), g"
    },
    {
      "caller_function": "f",
      "called_function": "get_map_x",
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 109,
        "column": 0
      },
      "context": "SDL_Log(\"WARNING: TileEntity::destroy() called on already destroyed tile at (%d,%d)\", get_map_x(), g"
    },
    {
      "caller_function": "f",
      "called_function": "get_map_y",
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 109,
        "column": 0
      },
      "context": "SDL_Log(\"WARNING: TileEntity::destroy() called on already destroyed tile at (%d,%d)\", get_map_x(), g"
    },
    {
      "caller_function": "a",
      "called_function": "gen",
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 116,
        "column": 0
      },
      "context": "std::mt19937 gen(rd());"
    },
    {
      "caller_function": "a",
      "called_function": "main_dist",
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 117,
        "column": 0
      },
      "context": "std::uniform_int_distribution<> main_dist(0, 7); // 8 main categories (0-7)"
    },
    {
      "caller_function": "a",
      "called_function": "categories",
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 117,
        "column": 0
      },
      "context": "std::uniform_int_distribution<> main_dist(0, 7); // 8 main categories (0-7)"
    },
    {
      "caller_function": "a",
      "called_function": "main_dist",
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 119,
        "column": 0
      },
      "context": "int roll = main_dist(gen);"
    },
    {
      "caller_function": "h",
      "called_function": "ups",
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 123,
        "column": 0
      },
      "context": "case 0: // Power-ups (25% chance total)"
    },
    {
      "caller_function": "h",
      "called_function": "capacity",
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 126,
        "column": 0
      },
      "context": "case 1: // Bomb capacity (12.5% chance)"
    },
    {
      "caller_function": "h",
      "called_function": "Speed",
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 129,
        "column": 0
      },
      "context": "case 2: // Speed (12.5% chance)"
    },
    {
      "caller_function": "h",
      "called_function": "abilities",
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 132,
        "column": 0
      },
      "context": "case 3: { // Special abilities (12.5% chance - kick or glove)"
    },
    {
      "caller_function": "h",
      "called_function": "special_dist",
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 133,
        "column": 0
      },
      "context": "std::uniform_int_distribution<> special_dist(0, 1);"
    },
    {
      "caller_function": "h",
      "called_function": "special_dist",
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 134,
        "column": 0
      },
      "context": "extra_type = (special_dist(gen) == 0) ? Extra::KICK : Extra::GLOVE;"
    },
    {
      "caller_function": "h",
      "called_function": "effects",
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 137,
        "column": 0
      },
      "context": "case 4: { // Negative effects (12.5% chance)"
    },
    {
      "caller_function": "h",
      "called_function": "negative_dist",
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 138,
        "column": 0
      },
      "context": "std::uniform_int_distribution<> negative_dist(0, 7);"
    },
    {
      "caller_function": "h",
      "called_function": "negative_dist",
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 139,
        "column": 0
      },
      "context": "int neg_roll = negative_dist(gen);"
    },
    {
      "caller_function": "f",
      "called_function": "Constipation",
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 141,
        "column": 0
      },
      "context": "extra_type = Extra::DISEASE; // Constipation (25% of this case)"
    },
    {
      "caller_function": "f",
      "called_function": "bombs",
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 143,
        "column": 0
      },
      "context": "extra_type = Extra::VIAGRA; // Sticky bombs (25% of this case)"
    },
    {
      "caller_function": "f",
      "called_function": "speed",
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 145,
        "column": 0
      },
      "context": "extra_type = Extra::KOKS; // Uncontrollable speed (25% of this case)"
    },
    {
      "caller_function": "f",
      "called_function": "spawned",
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 147,
        "column": 0
      },
      "context": "return; // No extra spawned (25% of this case)"
    },
    {
      "caller_function": "f",
      "called_function": "Skate",
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 151,
        "column": 0
      },
      "context": "case 5: // Skate (rare, 6.25% chance)"
    },
    {
      "caller_function": "f",
      "called_function": "grid",
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 166,
        "column": 0
      },
      "context": "GridCoord grid(tile_data->get_grid_x(), tile_data->get_grid_y());"
    },
    {
      "caller_function": "f",
      "called_function": "get_grid_x",
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 166,
        "column": 0
      },
      "context": "GridCoord grid(tile_data->get_grid_x(), tile_data->get_grid_y());"
    },
    {
      "caller_function": "f",
      "called_function": "get_grid_y",
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 166,
        "column": 0
      },
      "context": "GridCoord grid(tile_data->get_grid_x(), tile_data->get_grid_y());"
    },
    {
      "caller_function": "f",
      "called_function": "CoordinateSystem::grid_to_pixel",
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 167,
        "column": 0
      },
      "context": "PixelCoord center = CoordinateSystem::grid_to_pixel(grid);"
    },
    {
      "caller_function": "f",
      "called_function": "grid_to_pixel",
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 167,
        "column": 0
      },
      "context": "PixelCoord center = CoordinateSystem::grid_to_pixel(grid);"
    },
    {
      "caller_function": "f",
      "called_function": "Extra",
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 168,
        "column": 0
      },
      "context": "Extra* extra = new Extra(static_cast<int>(center.pixel_x), static_cast<int>(center.pixel_y), extra_t"
    },
    {
      "caller_function": "f",
      "called_function": "get_context",
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 168,
        "column": 0
      },
      "context": "Extra* extra = new Extra(static_cast<int>(center.pixel_x), static_cast<int>(center.pixel_y), extra_t"
    },
    {
      "caller_function": "f",
      "called_function": "get_context",
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 169,
        "column": 0
      },
      "context": "get_context()->register_object(extra);"
    },
    {
      "caller_function": "f",
      "called_function": "register_object",
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 169,
        "column": 0
      },
      "context": "get_context()->register_object(extra);"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 178,
        "column": 0
      },
      "context": "SDL_Log(\"TileEntity at (%d,%d) completing destruction animation\", get_map_x(), get_map_y());"
    },
    {
      "caller_function": "f",
      "called_function": "get_map_x",
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 178,
        "column": 0
      },
      "context": "SDL_Log(\"TileEntity at (%d,%d) completing destruction animation\", get_map_x(), get_map_y());"
    },
    {
      "caller_function": "f",
      "called_function": "get_map_y",
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 178,
        "column": 0
      },
      "context": "SDL_Log(\"TileEntity at (%d,%d) completing destruction animation\", get_map_x(), get_map_y());"
    },
    {
      "caller_function": "f",
      "called_function": "spawn_extra",
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 181,
        "column": 0
      },
      "context": "spawn_extra();"
    },
    {
      "caller_function": "f",
      "called_function": "std::min",
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 193,
        "column": 0
      },
      "context": "animation_progress = std::min(animation_progress, 1.0f);"
    },
    {
      "caller_function": "f",
      "called_function": "min",
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 193,
        "column": 0
      },
      "context": "animation_progress = std::min(animation_progress, 1.0f);"
    },
    {
      "caller_function": "f",
      "called_function": "Resources::get_gl_texture",
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 197,
        "column": 0
      },
      "context": "GLuint gl_texture = Resources::get_gl_texture(texture_name);"
    },
    {
      "caller_function": "f",
      "called_function": "get_gl_texture",
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 197,
        "column": 0
      },
      "context": "GLuint gl_texture = Resources::get_gl_texture(texture_name);"
    },
    {
      "caller_function": "f",
      "called_function": "get_context",
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 203,
        "column": 0
      },
      "context": "get_context()->get_renderer()->add_sprite("
    },
    {
      "caller_function": "f",
      "called_function": "get_renderer",
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 203,
        "column": 0
      },
      "context": "get_context()->get_renderer()->add_sprite("
    },
    {
      "caller_function": "f",
      "called_function": "add_sprite",
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 203,
        "column": 0
      },
      "context": "get_context()->get_renderer()->add_sprite("
    },
    {
      "caller_function": "f",
      "called_function": "get_x",
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 204,
        "column": 0
      },
      "context": "(float)get_x(), (float)get_y(), (float)TILE_SIZE, (float)TILE_SIZE,"
    },
    {
      "caller_function": "f",
      "called_function": "get_y",
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 204,
        "column": 0
      },
      "context": "(float)get_x(), (float)get_y(), (float)TILE_SIZE, (float)TILE_SIZE,"
    },
    {
      "caller_function": "f",
      "called_function": "TileEntity_Box::TileEntity_Box",
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 214,
        "column": 0
      },
      "context": "TileEntity_Box::TileEntity_Box(MapTile_Pure* tile_data, GameContext* context)"
    },
    {
      "caller_function": "f",
      "called_function": "TileEntity_Box",
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 214,
        "column": 0
      },
      "context": "TileEntity_Box::TileEntity_Box(MapTile_Pure* tile_data, GameContext* context)"
    },
    {
      "caller_function": "f",
      "called_function": "TileEntity",
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 215,
        "column": 0
      },
      "context": ": TileEntity(tile_data, context) {"
    },
    {
      "caller_function": "t",
      "called_function": "TileEntity::act",
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 220,
        "column": 0
      },
      "context": "TileEntity::act(deltaTime); // Base destruction animation"
    },
    {
      "caller_function": "t",
      "called_function": "act",
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 220,
        "column": 0
      },
      "context": "TileEntity::act(deltaTime); // Base destruction animation"
    },
    {
      "caller_function": "f",
      "called_function": "GameObjectFactory::getInstance",
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 226,
        "column": 0
      },
      "context": "ParticleSystem* smoke = GameObjectFactory::getInstance().create_particle_system(get_x(), get_y(), SM"
    },
    {
      "caller_function": "f",
      "called_function": "getInstance",
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 226,
        "column": 0
      },
      "context": "ParticleSystem* smoke = GameObjectFactory::getInstance().create_particle_system(get_x(), get_y(), SM"
    },
    {
      "caller_function": "f",
      "called_function": "create_particle_system",
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 226,
        "column": 0
      },
      "context": "ParticleSystem* smoke = GameObjectFactory::getInstance().create_particle_system(get_x(), get_y(), SM"
    },
    {
      "caller_function": "f",
      "called_function": "get_x",
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 226,
        "column": 0
      },
      "context": "ParticleSystem* smoke = GameObjectFactory::getInstance().create_particle_system(get_x(), get_y(), SM"
    },
    {
      "caller_function": "f",
      "called_function": "get_y",
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 226,
        "column": 0
      },
      "context": "ParticleSystem* smoke = GameObjectFactory::getInstance().create_particle_system(get_x(), get_y(), SM"
    },
    {
      "caller_function": "f",
      "called_function": "get_context",
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 226,
        "column": 0
      },
      "context": "ParticleSystem* smoke = GameObjectFactory::getInstance().create_particle_system(get_x(), get_y(), SM"
    },
    {
      "caller_function": "f",
      "called_function": "TileEntity::show",
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 234,
        "column": 0
      },
      "context": "TileEntity::show(); // Normal tile rendering"
    },
    {
      "caller_function": "f",
      "called_function": "show",
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 234,
        "column": 0
      },
      "context": "TileEntity::show(); // Normal tile rendering"
    },
    {
      "caller_function": "f",
      "called_function": "render_fragmentation_effects",
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 236,
        "column": 0
      },
      "context": "render_fragmentation_effects(); // Spectacular box destruction"
    },
    {
      "caller_function": "y",
      "called_function": "TileEntity::destroy",
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 241,
        "column": 0
      },
      "context": "TileEntity::destroy(); // Base destruction"
    },
    {
      "caller_function": "y",
      "called_function": "destroy",
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 241,
        "column": 0
      },
      "context": "TileEntity::destroy(); // Base destruction"
    },
    {
      "caller_function": "f",
      "called_function": "Timer::time_elapsed",
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 245,
        "column": 0
      },
      "context": "float current_time = Timer::time_elapsed();"
    },
    {
      "caller_function": "f",
      "called_function": "time_elapsed",
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 245,
        "column": 0
      },
      "context": "float current_time = Timer::time_elapsed();"
    },
    {
      "caller_function": "f",
      "called_function": "get_context",
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 252,
        "column": 0
      },
      "context": "get_context()->get_renderer()->emit_particles(get_x(), get_y(), 25, GPUAcceleratedRenderer::SPARK, n"
    },
    {
      "caller_function": "f",
      "called_function": "get_renderer",
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 252,
        "column": 0
      },
      "context": "get_context()->get_renderer()->emit_particles(get_x(), get_y(), 25, GPUAcceleratedRenderer::SPARK, n"
    },
    {
      "caller_function": "f",
      "called_function": "emit_particles",
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 252,
        "column": 0
      },
      "context": "get_context()->get_renderer()->emit_particles(get_x(), get_y(), 25, GPUAcceleratedRenderer::SPARK, n"
    },
    {
      "caller_function": "f",
      "called_function": "get_x",
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 252,
        "column": 0
      },
      "context": "get_context()->get_renderer()->emit_particles(get_x(), get_y(), 25, GPUAcceleratedRenderer::SPARK, n"
    },
    {
      "caller_function": "f",
      "called_function": "get_y",
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 252,
        "column": 0
      },
      "context": "get_context()->get_renderer()->emit_particles(get_x(), get_y(), 25, GPUAcceleratedRenderer::SPARK, n"
    },
    {
      "caller_function": "f",
      "called_function": "get_context",
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 253,
        "column": 0
      },
      "context": "get_context()->get_renderer()->emit_particles(get_x(), get_y(), 15, GPUAcceleratedRenderer::SMOKE, n"
    },
    {
      "caller_function": "f",
      "called_function": "get_renderer",
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 253,
        "column": 0
      },
      "context": "get_context()->get_renderer()->emit_particles(get_x(), get_y(), 15, GPUAcceleratedRenderer::SMOKE, n"
    },
    {
      "caller_function": "f",
      "called_function": "emit_particles",
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 253,
        "column": 0
      },
      "context": "get_context()->get_renderer()->emit_particles(get_x(), get_y(), 15, GPUAcceleratedRenderer::SMOKE, n"
    },
    {
      "caller_function": "f",
      "called_function": "get_x",
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 253,
        "column": 0
      },
      "context": "get_context()->get_renderer()->emit_particles(get_x(), get_y(), 15, GPUAcceleratedRenderer::SMOKE, n"
    },
    {
      "caller_function": "f",
      "called_function": "get_y",
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 253,
        "column": 0
      },
      "context": "get_context()->get_renderer()->emit_particles(get_x(), get_y(), 15, GPUAcceleratedRenderer::SMOKE, n"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 255,
        "column": 0
      },
      "context": "SDL_Log(\"SPECTACULAR tile destruction effects at (%d,%d)!\", get_x(), get_y());"
    },
    {
      "caller_function": "f",
      "called_function": "get_x",
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 255,
        "column": 0
      },
      "context": "SDL_Log(\"SPECTACULAR tile destruction effects at (%d,%d)!\", get_x(), get_y());"
    },
    {
      "caller_function": "f",
      "called_function": "get_y",
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 255,
        "column": 0
      },
      "context": "SDL_Log(\"SPECTACULAR tile destruction effects at (%d,%d)!\", get_x(), get_y());"
    },
    {
      "caller_function": "f",
      "called_function": "GameObjectFactory::getInstance",
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 259,
        "column": 0
      },
      "context": "ParticleSystem* dust = GameObjectFactory::getInstance().create_particle_system(get_x(), get_y(), DUS"
    },
    {
      "caller_function": "f",
      "called_function": "getInstance",
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 259,
        "column": 0
      },
      "context": "ParticleSystem* dust = GameObjectFactory::getInstance().create_particle_system(get_x(), get_y(), DUS"
    },
    {
      "caller_function": "f",
      "called_function": "create_particle_system",
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 259,
        "column": 0
      },
      "context": "ParticleSystem* dust = GameObjectFactory::getInstance().create_particle_system(get_x(), get_y(), DUS"
    },
    {
      "caller_function": "f",
      "called_function": "get_x",
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 259,
        "column": 0
      },
      "context": "ParticleSystem* dust = GameObjectFactory::getInstance().create_particle_system(get_x(), get_y(), DUS"
    },
    {
      "caller_function": "f",
      "called_function": "get_y",
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 259,
        "column": 0
      },
      "context": "ParticleSystem* dust = GameObjectFactory::getInstance().create_particle_system(get_x(), get_y(), DUS"
    },
    {
      "caller_function": "f",
      "called_function": "get_context",
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 259,
        "column": 0
      },
      "context": "ParticleSystem* dust = GameObjectFactory::getInstance().create_particle_system(get_x(), get_y(), DUS"
    },
    {
      "caller_function": "f",
      "called_function": "GameObjectFactory::getInstance",
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 261,
        "column": 0
      },
      "context": "ParticleSystem* sparks = GameObjectFactory::getInstance().create_particle_system(get_x(), get_y(), E"
    },
    {
      "caller_function": "f",
      "called_function": "getInstance",
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 261,
        "column": 0
      },
      "context": "ParticleSystem* sparks = GameObjectFactory::getInstance().create_particle_system(get_x(), get_y(), E"
    },
    {
      "caller_function": "f",
      "called_function": "create_particle_system",
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 261,
        "column": 0
      },
      "context": "ParticleSystem* sparks = GameObjectFactory::getInstance().create_particle_system(get_x(), get_y(), E"
    },
    {
      "caller_function": "f",
      "called_function": "get_x",
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 261,
        "column": 0
      },
      "context": "ParticleSystem* sparks = GameObjectFactory::getInstance().create_particle_system(get_x(), get_y(), E"
    },
    {
      "caller_function": "f",
      "called_function": "get_y",
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 261,
        "column": 0
      },
      "context": "ParticleSystem* sparks = GameObjectFactory::getInstance().create_particle_system(get_x(), get_y(), E"
    },
    {
      "caller_function": "f",
      "called_function": "get_context",
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 261,
        "column": 0
      },
      "context": "ParticleSystem* sparks = GameObjectFactory::getInstance().create_particle_system(get_x(), get_y(), E"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 266,
        "column": 0
      },
      "context": "SDL_Log(\"Particle emission rate limited for tile at (%d,%d)\", get_x(), get_y());"
    },
    {
      "caller_function": "f",
      "called_function": "get_x",
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 266,
        "column": 0
      },
      "context": "SDL_Log(\"Particle emission rate limited for tile at (%d,%d)\", get_x(), get_y());"
    },
    {
      "caller_function": "f",
      "called_function": "get_y",
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 266,
        "column": 0
      },
      "context": "SDL_Log(\"Particle emission rate limited for tile at (%d,%d)\", get_x(), get_y());"
    },
    {
      "caller_function": "s",
      "called_function": "std::min",
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 274,
        "column": 0
      },
      "context": "animation_progress = std::min(animation_progress, 1.0f);"
    },
    {
      "caller_function": "s",
      "called_function": "min",
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 274,
        "column": 0
      },
      "context": "animation_progress = std::min(animation_progress, 1.0f);"
    },
    {
      "caller_function": "f",
      "called_function": "Resources::get_gl_texture",
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 277,
        "column": 0
      },
      "context": "GLuint gl_texture = Resources::get_gl_texture(texture_name);"
    },
    {
      "caller_function": "f",
      "called_function": "get_gl_texture",
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 277,
        "column": 0
      },
      "context": "GLuint gl_texture = Resources::get_gl_texture(texture_name);"
    },
    {
      "caller_function": "f",
      "called_function": "get_context",
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 280,
        "column": 0
      },
      "context": "get_context()->get_renderer()->begin_batch(GPUAcceleratedRenderer::TILE_FRAGMENTATION);"
    },
    {
      "caller_function": "f",
      "called_function": "get_renderer",
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 280,
        "column": 0
      },
      "context": "get_context()->get_renderer()->begin_batch(GPUAcceleratedRenderer::TILE_FRAGMENTATION);"
    },
    {
      "caller_function": "f",
      "called_function": "begin_batch",
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 280,
        "column": 0
      },
      "context": "get_context()->get_renderer()->begin_batch(GPUAcceleratedRenderer::TILE_FRAGMENTATION);"
    },
    {
      "caller_function": "r",
      "called_function": "get_x",
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 309,
        "column": 0
      },
      "context": "float fragment_x = get_x() + cos(angle) * current_velocity * time_factor;"
    },
    {
      "caller_function": "r",
      "called_function": "cos",
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 309,
        "column": 0
      },
      "context": "float fragment_x = get_x() + cos(angle) * current_velocity * time_factor;"
    },
    {
      "caller_function": "r",
      "called_function": "get_y",
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 310,
        "column": 0
      },
      "context": "float fragment_y = get_y() + sin(angle) * current_velocity * time_factor;"
    },
    {
      "caller_function": "r",
      "called_function": "sin",
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 310,
        "column": 0
      },
      "context": "float fragment_y = get_y() + sin(angle) * current_velocity * time_factor;"
    },
    {
      "caller_function": "r",
      "called_function": "std::max",
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 324,
        "column": 0
      },
      "context": "scale_x *= std::max(0.1f, height_scale);"
    },
    {
      "caller_function": "r",
      "called_function": "max",
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 324,
        "column": 0
      },
      "context": "scale_x *= std::max(0.1f, height_scale);"
    },
    {
      "caller_function": "r",
      "called_function": "std::max",
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 325,
        "column": 0
      },
      "context": "scale_y *= std::max(0.1f, height_scale);"
    },
    {
      "caller_function": "r",
      "called_function": "max",
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 325,
        "column": 0
      },
      "context": "scale_y *= std::max(0.1f, height_scale);"
    },
    {
      "caller_function": "f",
      "called_function": "abs",
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 339,
        "column": 0
      },
      "context": "float bounce_energy = abs(fragment_z) * 0.5f; // Energy based on impact"
    },
    {
      "caller_function": "f",
      "called_function": "sin",
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 340,
        "column": 0
      },
      "context": "float bounce_chaos = sin(time_factor * 12.0f + i * 2.3f) * bounce_energy;"
    },
    {
      "caller_function": "f",
      "called_function": "cos",
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 343,
        "column": 0
      },
      "context": "fragment_x += bounce_chaos * cos(angle + 0.7f);"
    },
    {
      "caller_function": "f",
      "called_function": "sin",
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 344,
        "column": 0
      },
      "context": "fragment_y += bounce_chaos * sin(angle + 0.7f);"
    },
    {
      "caller_function": "f",
      "called_function": "sin",
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 370,
        "column": 0
      },
      "context": "float tumble_wobble = sin(animation_progress * 8.0f + i) * tumble_factor;"
    },
    {
      "caller_function": "f",
      "called_function": "fragments",
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 381,
        "column": 0
      },
      "context": "CORNER_PIECE = 0,    // Edge/corner fragments (darker, weathered)"
    },
    {
      "caller_function": "f",
      "called_function": "planks",
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 382,
        "column": 0
      },
      "context": "EDGE_PLANK = 1,      // Side planks (medium tone)"
    },
    {
      "caller_function": "f",
      "called_function": "wood",
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 383,
        "column": 0
      },
      "context": "INNER_WOOD = 2,      // Fresh inner wood (lighter)"
    },
    {
      "caller_function": "f",
      "called_function": "splinters",
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 384,
        "column": 0
      },
      "context": "SPLINTER = 3         // Small splinters (very light)"
    },
    {
      "caller_function": "h",
      "called_function": "wood",
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 398,
        "column": 0
      },
      "context": "case INNER_WOOD:    // Fresh inner wood (lighter)"
    },
    {
      "caller_function": "h",
      "called_function": "std::min",
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 410,
        "column": 0
      },
      "context": "std::min(1.0f, std::max(0.3f, base_r + color_var)),"
    },
    {
      "caller_function": "h",
      "called_function": "std::max",
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 410,
        "column": 0
      },
      "context": "std::min(1.0f, std::max(0.3f, base_r + color_var)),"
    },
    {
      "caller_function": "h",
      "called_function": "min",
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 410,
        "column": 0
      },
      "context": "std::min(1.0f, std::max(0.3f, base_r + color_var)),"
    },
    {
      "caller_function": "h",
      "called_function": "max",
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 410,
        "column": 0
      },
      "context": "std::min(1.0f, std::max(0.3f, base_r + color_var)),"
    },
    {
      "caller_function": "h",
      "called_function": "std::min",
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 411,
        "column": 0
      },
      "context": "std::min(1.0f, std::max(0.3f, base_g + color_var)),"
    },
    {
      "caller_function": "h",
      "called_function": "std::max",
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 411,
        "column": 0
      },
      "context": "std::min(1.0f, std::max(0.3f, base_g + color_var)),"
    },
    {
      "caller_function": "h",
      "called_function": "min",
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 411,
        "column": 0
      },
      "context": "std::min(1.0f, std::max(0.3f, base_g + color_var)),"
    },
    {
      "caller_function": "h",
      "called_function": "max",
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 411,
        "column": 0
      },
      "context": "std::min(1.0f, std::max(0.3f, base_g + color_var)),"
    },
    {
      "caller_function": "h",
      "called_function": "std::min",
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 412,
        "column": 0
      },
      "context": "std::min(1.0f, std::max(0.3f, base_b + color_var)),"
    },
    {
      "caller_function": "h",
      "called_function": "std::max",
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 412,
        "column": 0
      },
      "context": "std::min(1.0f, std::max(0.3f, base_b + color_var)),"
    },
    {
      "caller_function": "h",
      "called_function": "min",
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 412,
        "column": 0
      },
      "context": "std::min(1.0f, std::max(0.3f, base_b + color_var)),"
    },
    {
      "caller_function": "h",
      "called_function": "max",
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 412,
        "column": 0
      },
      "context": "std::min(1.0f, std::max(0.3f, base_b + color_var)),"
    },
    {
      "caller_function": "h",
      "called_function": "get_context",
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 426,
        "column": 0
      },
      "context": "get_context()->get_renderer()->add_animated_sprite("
    },
    {
      "caller_function": "h",
      "called_function": "get_renderer",
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 426,
        "column": 0
      },
      "context": "get_context()->get_renderer()->add_animated_sprite("
    },
    {
      "caller_function": "h",
      "called_function": "add_animated_sprite",
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 426,
        "column": 0
      },
      "context": "get_context()->get_renderer()->add_animated_sprite("
    },
    {
      "caller_function": "h",
      "called_function": "get_context",
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 436,
        "column": 0
      },
      "context": "get_context()->get_renderer()->end_batch();"
    },
    {
      "caller_function": "h",
      "called_function": "get_renderer",
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 436,
        "column": 0
      },
      "context": "get_context()->get_renderer()->end_batch();"
    },
    {
      "caller_function": "h",
      "called_function": "end_batch",
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 436,
        "column": 0
      },
      "context": "get_context()->get_renderer()->end_batch();"
    },
    {
      "caller_function": "h",
      "called_function": "catch",
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 439,
        "column": 0
      },
      "context": "} catch (...) {"
    },
    {
      "caller_function": "h",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 440,
        "column": 0
      },
      "context": "SDL_Log(\"GPU fragmentation failed, falling back to base effect\");"
    },
    {
      "caller_function": "h",
      "called_function": "render_destruction_effects",
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 447,
        "column": 0
      },
      "context": "render_destruction_effects();"
    },
    {
      "caller_function": null,
      "called_function": "Extra::Extra",
      "location": {
        "file": "src/Extra.cpp",
        "line": 15,
        "column": 0
      },
      "context": "Extra::Extra(int _x, int _y, EXTRA_TYPE _type, GameContext* context)"
    },
    {
      "caller_function": null,
      "called_function": "Extra",
      "location": {
        "file": "src/Extra.cpp",
        "line": 15,
        "column": 0
      },
      "context": "Extra::Extra(int _x, int _y, EXTRA_TYPE _type, GameContext* context)"
    },
    {
      "caller_function": null,
      "called_function": "GameObject",
      "location": {
        "file": "src/Extra.cpp",
        "line": 16,
        "column": 0
      },
      "context": ": GameObject(_x, _y, context) {"
    },
    {
      "caller_function": null,
      "called_function": "std::to_string",
      "location": {
        "file": "src/Extra.cpp",
        "line": 23,
        "column": 0
      },
      "context": "texture_name = \"extras2_\" + std::to_string((int)extra_type);"
    },
    {
      "caller_function": null,
      "called_function": "to_string",
      "location": {
        "file": "src/Extra.cpp",
        "line": 23,
        "column": 0
      },
      "context": "texture_name = \"extras2_\" + std::to_string((int)extra_type);"
    },
    {
      "caller_function": null,
      "called_function": "SDL_Log",
      "location": {
        "file": "src/Extra.cpp",
        "line": 29,
        "column": 0
      },
      "context": "SDL_Log(\"\ud83c\udf81 EXTRA: Using GameObject global centering at (%.1f,%.1f)\", x, y);"
    },
    {
      "caller_function": null,
      "called_function": "SDL_Log",
      "location": {
        "file": "src/Extra.cpp",
        "line": 32,
        "column": 0
      },
      "context": "SDL_Log(\"Extra created: type=%s at pixel (%d,%d), grid (%d,%d), texture=%s\","
    },
    {
      "caller_function": null,
      "called_function": "pixel",
      "location": {
        "file": "src/Extra.cpp",
        "line": 32,
        "column": 0
      },
      "context": "SDL_Log(\"Extra created: type=%s at pixel (%d,%d), grid (%d,%d), texture=%s\","
    },
    {
      "caller_function": null,
      "called_function": "grid",
      "location": {
        "file": "src/Extra.cpp",
        "line": 32,
        "column": 0
      },
      "context": "SDL_Log(\"Extra created: type=%s at pixel (%d,%d), grid (%d,%d), texture=%s\","
    },
    {
      "caller_function": null,
      "called_function": "get_map_x",
      "location": {
        "file": "src/Extra.cpp",
        "line": 33,
        "column": 0
      },
      "context": "type_names[(int)extra_type], (int)x, (int)y, get_map_x(), get_map_y(), texture_name.c_str());"
    },
    {
      "caller_function": null,
      "called_function": "get_map_y",
      "location": {
        "file": "src/Extra.cpp",
        "line": 33,
        "column": 0
      },
      "context": "type_names[(int)extra_type], (int)x, (int)y, get_map_x(), get_map_y(), texture_name.c_str());"
    },
    {
      "caller_function": null,
      "called_function": "c_str",
      "location": {
        "file": "src/Extra.cpp",
        "line": 33,
        "column": 0
      },
      "context": "type_names[(int)extra_type], (int)x, (int)y, get_map_x(), get_map_y(), texture_name.c_str());"
    },
    {
      "caller_function": null,
      "called_function": "Extra",
      "location": {
        "file": "src/Extra.cpp",
        "line": 36,
        "column": 0
      },
      "context": "Extra::~Extra() {"
    },
    {
      "caller_function": "f",
      "called_function": "std::sin",
      "location": {
        "file": "src/Extra.cpp",
        "line": 50,
        "column": 0
      },
      "context": "bounce_offset = std::sin(bounce_timer) * 3.0f; // 3 pixel bounce"
    },
    {
      "caller_function": "f",
      "called_function": "sin",
      "location": {
        "file": "src/Extra.cpp",
        "line": 50,
        "column": 0
      },
      "context": "bounce_offset = std::sin(bounce_timer) * 3.0f; // 3 pixel bounce"
    },
    {
      "caller_function": "f",
      "called_function": "get_context",
      "location": {
        "file": "src/Extra.cpp",
        "line": 53,
        "column": 0
      },
      "context": "GameContext* ctx = get_context();"
    },
    {
      "caller_function": "f",
      "called_function": "get_spatial_grid",
      "location": {
        "file": "src/Extra.cpp",
        "line": 59,
        "column": 0
      },
      "context": "SpatialGrid* spatial_grid = ctx->get_spatial_grid();"
    },
    {
      "caller_function": "f",
      "called_function": "collision_helper",
      "location": {
        "file": "src/Extra.cpp",
        "line": 61,
        "column": 0
      },
      "context": "CollisionHelper collision_helper(spatial_grid);"
    },
    {
      "caller_function": "f",
      "called_function": "extra_pos",
      "location": {
        "file": "src/Extra.cpp",
        "line": 62,
        "column": 0
      },
      "context": "PixelCoord extra_pos(static_cast<float>(x), static_cast<float>(y));"
    },
    {
      "caller_function": "f",
      "called_function": "find_nearest_bomber",
      "location": {
        "file": "src/Extra.cpp",
        "line": 67,
        "column": 0
      },
      "context": "GameObject* nearest_bomber = collision_helper.find_nearest_bomber(extra_pos, 30.0f);"
    },
    {
      "caller_function": "f",
      "called_function": "get_x",
      "location": {
        "file": "src/Extra.cpp",
        "line": 71,
        "column": 0
      },
      "context": "float dx = static_cast<float>(bomber->get_x()) - static_cast<float>(x);"
    },
    {
      "caller_function": "f",
      "called_function": "get_y",
      "location": {
        "file": "src/Extra.cpp",
        "line": 72,
        "column": 0
      },
      "context": "float dy = static_cast<float>(bomber->get_y()) - static_cast<float>(y);"
    },
    {
      "caller_function": "f",
      "called_function": "sqrt",
      "location": {
        "file": "src/Extra.cpp",
        "line": 73,
        "column": 0
      },
      "context": "float distance = sqrt(dx*dx + dy*dy);"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/Extra.cpp",
        "line": 75,
        "column": 0
      },
      "context": "SDL_Log(\"EXTRA: Collected at distance %.1f by bomber at (%d,%d), extra at (%d,%d) using SpatialGrid\""
    },
    {
      "caller_function": "f",
      "called_function": "get_x",
      "location": {
        "file": "src/Extra.cpp",
        "line": 76,
        "column": 0
      },
      "context": "distance, bomber->get_x(), bomber->get_y(), x, y);"
    },
    {
      "caller_function": "f",
      "called_function": "get_y",
      "location": {
        "file": "src/Extra.cpp",
        "line": 76,
        "column": 0
      },
      "context": "distance, bomber->get_x(), bomber->get_y(), x, y);"
    },
    {
      "caller_function": "f",
      "called_function": "apply_effect_to_bomber",
      "location": {
        "file": "src/Extra.cpp",
        "line": 77,
        "column": 0
      },
      "context": "apply_effect_to_bomber(bomber);"
    },
    {
      "caller_function": "f",
      "called_function": "collect",
      "location": {
        "file": "src/Extra.cpp",
        "line": 78,
        "column": 0
      },
      "context": "collect();"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/Extra.cpp",
        "line": 84,
        "column": 0
      },
      "context": "SDL_Log(\"EXTRA: SpatialGrid not available, using fallback collision detection\");"
    },
    {
      "caller_function": "r",
      "called_function": "get_type",
      "location": {
        "file": "src/Extra.cpp",
        "line": 86,
        "column": 0
      },
      "context": "if (!obj || obj->get_type() != GameObject::BOMBER) continue;"
    },
    {
      "caller_function": "f",
      "called_function": "get_x",
      "location": {
        "file": "src/Extra.cpp",
        "line": 90,
        "column": 0
      },
      "context": "float dx = static_cast<float>(bomber->get_x()) - static_cast<float>(x);"
    },
    {
      "caller_function": "f",
      "called_function": "get_y",
      "location": {
        "file": "src/Extra.cpp",
        "line": 91,
        "column": 0
      },
      "context": "float dy = static_cast<float>(bomber->get_y()) - static_cast<float>(y);"
    },
    {
      "caller_function": "f",
      "called_function": "sqrt",
      "location": {
        "file": "src/Extra.cpp",
        "line": 92,
        "column": 0
      },
      "context": "float distance = sqrt(dx*dx + dy*dy);"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/Extra.cpp",
        "line": 95,
        "column": 0
      },
      "context": "SDL_Log(\"EXTRA: Collected at distance %.1f by bomber at (%d,%d), extra at (%d,%d) using fallback\","
    },
    {
      "caller_function": "f",
      "called_function": "get_x",
      "location": {
        "file": "src/Extra.cpp",
        "line": 96,
        "column": 0
      },
      "context": "distance, bomber->get_x(), bomber->get_y(), x, y);"
    },
    {
      "caller_function": "f",
      "called_function": "get_y",
      "location": {
        "file": "src/Extra.cpp",
        "line": 96,
        "column": 0
      },
      "context": "distance, bomber->get_x(), bomber->get_y(), x, y);"
    },
    {
      "caller_function": "f",
      "called_function": "apply_effect_to_bomber",
      "location": {
        "file": "src/Extra.cpp",
        "line": 97,
        "column": 0
      },
      "context": "apply_effect_to_bomber(bomber);"
    },
    {
      "caller_function": "f",
      "called_function": "collect",
      "location": {
        "file": "src/Extra.cpp",
        "line": 98,
        "column": 0
      },
      "context": "collect();"
    },
    {
      "caller_function": "f",
      "called_function": "GameObject::show",
      "location": {
        "file": "src/Extra.cpp",
        "line": 112,
        "column": 0
      },
      "context": "GameObject::show(); // For now, just show normally until fully faded"
    },
    {
      "caller_function": "f",
      "called_function": "show",
      "location": {
        "file": "src/Extra.cpp",
        "line": 112,
        "column": 0
      },
      "context": "GameObject::show(); // For now, just show normally until fully faded"
    },
    {
      "caller_function": "f",
      "called_function": "GameObject::show",
      "location": {
        "file": "src/Extra.cpp",
        "line": 118,
        "column": 0
      },
      "context": "GameObject::show();"
    },
    {
      "caller_function": "f",
      "called_function": "show",
      "location": {
        "file": "src/Extra.cpp",
        "line": 118,
        "column": 0
      },
      "context": "GameObject::show();"
    },
    {
      "caller_function": "t",
      "called_function": "GameObjectFactory::getInstance",
      "location": {
        "file": "src/Extra.cpp",
        "line": 129,
        "column": 0
      },
      "context": "ParticleSystem* pickup_sparkles = GameObjectFactory::getInstance().create_particle_system(x, y, EXPL"
    },
    {
      "caller_function": "t",
      "called_function": "getInstance",
      "location": {
        "file": "src/Extra.cpp",
        "line": 129,
        "column": 0
      },
      "context": "ParticleSystem* pickup_sparkles = GameObjectFactory::getInstance().create_particle_system(x, y, EXPL"
    },
    {
      "caller_function": "t",
      "called_function": "create_particle_system",
      "location": {
        "file": "src/Extra.cpp",
        "line": 129,
        "column": 0
      },
      "context": "ParticleSystem* pickup_sparkles = GameObjectFactory::getInstance().create_particle_system(x, y, EXPL"
    },
    {
      "caller_function": "t",
      "called_function": "get_context",
      "location": {
        "file": "src/Extra.cpp",
        "line": 129,
        "column": 0
      },
      "context": "ParticleSystem* pickup_sparkles = GameObjectFactory::getInstance().create_particle_system(x, y, EXPL"
    },
    {
      "caller_function": "t",
      "called_function": "extra_pos",
      "location": {
        "file": "src/Extra.cpp",
        "line": 132,
        "column": 0
      },
      "context": "AudioPosition extra_pos(x, y, 0.0f);"
    },
    {
      "caller_function": "f",
      "called_function": "AudioMixer::play_sound_3d",
      "location": {
        "file": "src/Extra.cpp",
        "line": 136,
        "column": 0
      },
      "context": "AudioMixer::play_sound_3d(\"schnief\", extra_pos, 400.0f); // Negative sound"
    },
    {
      "caller_function": "f",
      "called_function": "play_sound_3d",
      "location": {
        "file": "src/Extra.cpp",
        "line": 136,
        "column": 0
      },
      "context": "AudioMixer::play_sound_3d(\"schnief\", extra_pos, 400.0f); // Negative sound"
    },
    {
      "caller_function": "f",
      "called_function": "AudioMixer::play_sound_3d",
      "location": {
        "file": "src/Extra.cpp",
        "line": 138,
        "column": 0
      },
      "context": "AudioMixer::play_sound_3d(\"wow\", extra_pos, 400.0f); // Positive sound"
    },
    {
      "caller_function": "f",
      "called_function": "play_sound_3d",
      "location": {
        "file": "src/Extra.cpp",
        "line": 138,
        "column": 0
      },
      "context": "AudioMixer::play_sound_3d(\"wow\", extra_pos, 400.0f); // Positive sound"
    },
    {
      "caller_function": "h",
      "called_function": "inc_max_bombs",
      "location": {
        "file": "src/Extra.cpp",
        "line": 150,
        "column": 0
      },
      "context": "bomber->inc_max_bombs(1);"
    },
    {
      "caller_function": "h",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/Extra.cpp",
        "line": 151,
        "column": 0
      },
      "context": "SDL_Log(\"Bomber gained extra bomb! Max bombs: %d\", bomber->get_max_bombs());"
    },
    {
      "caller_function": "h",
      "called_function": "get_max_bombs",
      "location": {
        "file": "src/Extra.cpp",
        "line": 151,
        "column": 0
      },
      "context": "SDL_Log(\"Bomber gained extra bomb! Max bombs: %d\", bomber->get_max_bombs());"
    },
    {
      "caller_function": "h",
      "called_function": "inc_power",
      "location": {
        "file": "src/Extra.cpp",
        "line": 156,
        "column": 0
      },
      "context": "bomber->inc_power(1);"
    },
    {
      "caller_function": "h",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/Extra.cpp",
        "line": 157,
        "column": 0
      },
      "context": "SDL_Log(\"Bomber gained flame power! Power: %d\", bomber->get_power());"
    },
    {
      "caller_function": "h",
      "called_function": "get_power",
      "location": {
        "file": "src/Extra.cpp",
        "line": 157,
        "column": 0
      },
      "context": "SDL_Log(\"Bomber gained flame power! Power: %d\", bomber->get_power());"
    },
    {
      "caller_function": "h",
      "called_function": "inc_speed",
      "location": {
        "file": "src/Extra.cpp",
        "line": 162,
        "column": 0
      },
      "context": "bomber->inc_speed(20);"
    },
    {
      "caller_function": "h",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/Extra.cpp",
        "line": 163,
        "column": 0
      },
      "context": "SDL_Log(\"Bomber gained speed boost!\");"
    },
    {
      "caller_function": "h",
      "called_function": "set_can_kick",
      "location": {
        "file": "src/Extra.cpp",
        "line": 168,
        "column": 0
      },
      "context": "bomber->set_can_kick(true);"
    },
    {
      "caller_function": "h",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/Extra.cpp",
        "line": 169,
        "column": 0
      },
      "context": "SDL_Log(\"Bomber gained kick ability!\");"
    },
    {
      "caller_function": "h",
      "called_function": "set_can_throw",
      "location": {
        "file": "src/Extra.cpp",
        "line": 174,
        "column": 0
      },
      "context": "bomber->set_can_throw(true);"
    },
    {
      "caller_function": "h",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/Extra.cpp",
        "line": 175,
        "column": 0
      },
      "context": "SDL_Log(\"Bomber gained glove ability! Can now throw bombs!\");"
    },
    {
      "caller_function": "h",
      "called_function": "inc_speed",
      "location": {
        "file": "src/Extra.cpp",
        "line": 180,
        "column": 0
      },
      "context": "bomber->inc_speed(10);"
    },
    {
      "caller_function": "h",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/Extra.cpp",
        "line": 181,
        "column": 0
      },
      "context": "SDL_Log(\"Bomber gained skates! (Basic speed boost)\");"
    },
    {
      "caller_function": "h",
      "called_function": "dec_speed",
      "location": {
        "file": "src/Extra.cpp",
        "line": 186,
        "column": 0
      },
      "context": "bomber->dec_speed(40);"
    },
    {
      "caller_function": "h",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/Extra.cpp",
        "line": 187,
        "column": 0
      },
      "context": "SDL_Log(\"Bomber got constipation! Speed reduced!\");"
    },
    {
      "caller_function": "h",
      "called_function": "inc_speed",
      "location": {
        "file": "src/Extra.cpp",
        "line": 193,
        "column": 0
      },
      "context": "bomber->inc_speed(50);"
    },
    {
      "caller_function": "h",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/Extra.cpp",
        "line": 194,
        "column": 0
      },
      "context": "SDL_Log(\"Bomber took speed! Very fast but harder to control!\");"
    },
    {
      "caller_function": "h",
      "called_function": "dec_speed",
      "location": {
        "file": "src/Extra.cpp",
        "line": 200,
        "column": 0
      },
      "context": "bomber->dec_speed(20);"
    },
    {
      "caller_function": "h",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/Extra.cpp",
        "line": 201,
        "column": 0
      },
      "context": "SDL_Log(\"Bomber took viagra! Movement affected!\");"
    },
    {
      "caller_function": null,
      "called_function": "BomberCorpse::BomberCorpse",
      "location": {
        "file": "src/BomberCorpse.cpp",
        "line": 12,
        "column": 0
      },
      "context": "BomberCorpse::BomberCorpse(int _x, int _y, Bomber::COLOR bomber_color, GameContext* context)"
    },
    {
      "caller_function": null,
      "called_function": "BomberCorpse",
      "location": {
        "file": "src/BomberCorpse.cpp",
        "line": 12,
        "column": 0
      },
      "context": "BomberCorpse::BomberCorpse(int _x, int _y, Bomber::COLOR bomber_color, GameContext* context)"
    },
    {
      "caller_function": null,
      "called_function": "GameObject",
      "location": {
        "file": "src/BomberCorpse.cpp",
        "line": 13,
        "column": 0
      },
      "context": ": GameObject(_x, _y, context) {"
    },
    {
      "caller_function": "h",
      "called_function": "sprite",
      "location": {
        "file": "src/BomberCorpse.cpp",
        "line": 34,
        "column": 0
      },
      "context": "sprite_nr = 40; // Dead pose sprite (assuming it exists)"
    },
    {
      "caller_function": "h",
      "called_function": "corpse_pos",
      "location": {
        "file": "src/BomberCorpse.cpp",
        "line": 38,
        "column": 0
      },
      "context": "AudioPosition corpse_pos(x, y, 0.0f);"
    },
    {
      "caller_function": "h",
      "called_function": "AudioMixer::play_sound_3d",
      "location": {
        "file": "src/BomberCorpse.cpp",
        "line": 39,
        "column": 0
      },
      "context": "AudioMixer::play_sound_3d(\"die\", corpse_pos, 500.0f);"
    },
    {
      "caller_function": "h",
      "called_function": "play_sound_3d",
      "location": {
        "file": "src/BomberCorpse.cpp",
        "line": 39,
        "column": 0
      },
      "context": "AudioMixer::play_sound_3d(\"die\", corpse_pos, 500.0f);"
    },
    {
      "caller_function": "h",
      "called_function": "BomberCorpse",
      "location": {
        "file": "src/BomberCorpse.cpp",
        "line": 42,
        "column": 0
      },
      "context": "BomberCorpse::~BomberCorpse() {"
    },
    {
      "caller_function": "f",
      "called_function": "create_gore_explosion",
      "location": {
        "file": "src/BomberCorpse.cpp",
        "line": 51,
        "column": 0
      },
      "context": "create_gore_explosion();"
    },
    {
      "caller_function": "f",
      "called_function": "corpse_pos",
      "location": {
        "file": "src/BomberCorpse.cpp",
        "line": 75,
        "column": 0
      },
      "context": "AudioPosition corpse_pos(x, y, 0.0f);"
    },
    {
      "caller_function": "f",
      "called_function": "AudioMixer::play_sound_3d",
      "location": {
        "file": "src/BomberCorpse.cpp",
        "line": 76,
        "column": 0
      },
      "context": "AudioMixer::play_sound_3d(\"corpse_explode\", corpse_pos, 600.0f);"
    },
    {
      "caller_function": "f",
      "called_function": "play_sound_3d",
      "location": {
        "file": "src/BomberCorpse.cpp",
        "line": 76,
        "column": 0
      },
      "context": "AudioMixer::play_sound_3d(\"corpse_explode\", corpse_pos, 600.0f);"
    },
    {
      "caller_function": "n",
      "called_function": "gen",
      "location": {
        "file": "src/BomberCorpse.cpp",
        "line": 82,
        "column": 0
      },
      "context": "std::mt19937 gen(rd());"
    },
    {
      "caller_function": "n",
      "called_function": "GameObjectFactory::getInstance",
      "location": {
        "file": "src/BomberCorpse.cpp",
        "line": 85,
        "column": 0
      },
      "context": "ParticleSystem* blood_splatter = GameObjectFactory::getInstance().create_particle_system(x, y, FIRE_"
    },
    {
      "caller_function": "n",
      "called_function": "getInstance",
      "location": {
        "file": "src/BomberCorpse.cpp",
        "line": 85,
        "column": 0
      },
      "context": "ParticleSystem* blood_splatter = GameObjectFactory::getInstance().create_particle_system(x, y, FIRE_"
    },
    {
      "caller_function": "n",
      "called_function": "create_particle_system",
      "location": {
        "file": "src/BomberCorpse.cpp",
        "line": 85,
        "column": 0
      },
      "context": "ParticleSystem* blood_splatter = GameObjectFactory::getInstance().create_particle_system(x, y, FIRE_"
    },
    {
      "caller_function": "n",
      "called_function": "get_context",
      "location": {
        "file": "src/BomberCorpse.cpp",
        "line": 85,
        "column": 0
      },
      "context": "ParticleSystem* blood_splatter = GameObjectFactory::getInstance().create_particle_system(x, y, FIRE_"
    },
    {
      "caller_function": "n",
      "called_function": "GameObjectFactory::getInstance",
      "location": {
        "file": "src/BomberCorpse.cpp",
        "line": 87,
        "column": 0
      },
      "context": "ParticleSystem* gore_smoke = GameObjectFactory::getInstance().create_particle_system(x, y, SMOKE_TRA"
    },
    {
      "caller_function": "n",
      "called_function": "getInstance",
      "location": {
        "file": "src/BomberCorpse.cpp",
        "line": 87,
        "column": 0
      },
      "context": "ParticleSystem* gore_smoke = GameObjectFactory::getInstance().create_particle_system(x, y, SMOKE_TRA"
    },
    {
      "caller_function": "n",
      "called_function": "create_particle_system",
      "location": {
        "file": "src/BomberCorpse.cpp",
        "line": 87,
        "column": 0
      },
      "context": "ParticleSystem* gore_smoke = GameObjectFactory::getInstance().create_particle_system(x, y, SMOKE_TRA"
    },
    {
      "caller_function": "n",
      "called_function": "get_context",
      "location": {
        "file": "src/BomberCorpse.cpp",
        "line": 87,
        "column": 0
      },
      "context": "ParticleSystem* gore_smoke = GameObjectFactory::getInstance().create_particle_system(x, y, SMOKE_TRA"
    },
    {
      "caller_function": "n",
      "called_function": "part_count_dist",
      "location": {
        "file": "src/BomberCorpse.cpp",
        "line": 90,
        "column": 0
      },
      "context": "std::uniform_int_distribution<> part_count_dist(8, 12);"
    },
    {
      "caller_function": "n",
      "called_function": "part_type_dist",
      "location": {
        "file": "src/BomberCorpse.cpp",
        "line": 91,
        "column": 0
      },
      "context": "std::uniform_int_distribution<> part_type_dist(0, 3); // 4 different body parts"
    },
    {
      "caller_function": "n",
      "called_function": "velocity_dist",
      "location": {
        "file": "src/BomberCorpse.cpp",
        "line": 92,
        "column": 0
      },
      "context": "std::uniform_real_distribution<> velocity_dist(150.0f, 450.0f); // Higher velocities for more violen"
    },
    {
      "caller_function": "n",
      "called_function": "angle_dist",
      "location": {
        "file": "src/BomberCorpse.cpp",
        "line": 93,
        "column": 0
      },
      "context": "std::uniform_real_distribution<> angle_dist(0.0f, 2.0f * M_PI);"
    },
    {
      "caller_function": "n",
      "called_function": "force_dist",
      "location": {
        "file": "src/BomberCorpse.cpp",
        "line": 94,
        "column": 0
      },
      "context": "std::uniform_real_distribution<> force_dist(800.0f, 1500.0f); // Explosion force range"
    },
    {
      "caller_function": "n",
      "called_function": "part_count_dist",
      "location": {
        "file": "src/BomberCorpse.cpp",
        "line": 96,
        "column": 0
      },
      "context": "int num_parts = part_count_dist(gen);"
    },
    {
      "caller_function": "r",
      "called_function": "angle_dist",
      "location": {
        "file": "src/BomberCorpse.cpp",
        "line": 99,
        "column": 0
      },
      "context": "float angle = angle_dist(gen);"
    },
    {
      "caller_function": "r",
      "called_function": "velocity_dist",
      "location": {
        "file": "src/BomberCorpse.cpp",
        "line": 100,
        "column": 0
      },
      "context": "float velocity = velocity_dist(gen);"
    },
    {
      "caller_function": "r",
      "called_function": "force_dist",
      "location": {
        "file": "src/BomberCorpse.cpp",
        "line": 101,
        "column": 0
      },
      "context": "float explosion_force = force_dist(gen);"
    },
    {
      "caller_function": "r",
      "called_function": "std::cos",
      "location": {
        "file": "src/BomberCorpse.cpp",
        "line": 104,
        "column": 0
      },
      "context": "float vel_x = std::cos(angle) * velocity;"
    },
    {
      "caller_function": "r",
      "called_function": "cos",
      "location": {
        "file": "src/BomberCorpse.cpp",
        "line": 104,
        "column": 0
      },
      "context": "float vel_x = std::cos(angle) * velocity;"
    },
    {
      "caller_function": "r",
      "called_function": "std::sin",
      "location": {
        "file": "src/BomberCorpse.cpp",
        "line": 105,
        "column": 0
      },
      "context": "float vel_y = std::sin(angle) * velocity;"
    },
    {
      "caller_function": "r",
      "called_function": "sin",
      "location": {
        "file": "src/BomberCorpse.cpp",
        "line": 105,
        "column": 0
      },
      "context": "float vel_y = std::sin(angle) * velocity;"
    },
    {
      "caller_function": "r",
      "called_function": "part_type_dist",
      "location": {
        "file": "src/BomberCorpse.cpp",
        "line": 111,
        "column": 0
      },
      "context": "int part_type = part_type_dist(gen);"
    },
    {
      "caller_function": "r",
      "called_function": "pos_offset",
      "location": {
        "file": "src/BomberCorpse.cpp",
        "line": 114,
        "column": 0
      },
      "context": "std::uniform_real_distribution<> pos_offset(-15.0f, 15.0f);"
    },
    {
      "caller_function": "r",
      "called_function": "pos_offset",
      "location": {
        "file": "src/BomberCorpse.cpp",
        "line": 115,
        "column": 0
      },
      "context": "float start_x = x + pos_offset(gen);"
    },
    {
      "caller_function": "r",
      "called_function": "pos_offset",
      "location": {
        "file": "src/BomberCorpse.cpp",
        "line": 116,
        "column": 0
      },
      "context": "float start_y = y + pos_offset(gen);"
    },
    {
      "caller_function": "r",
      "called_function": "CorpsePart",
      "location": {
        "file": "src/BomberCorpse.cpp",
        "line": 119,
        "column": 0
      },
      "context": "CorpsePart* part = new CorpsePart(start_x, start_y, part_type, vel_x, vel_y, explosion_force, get_co"
    },
    {
      "caller_function": "r",
      "called_function": "get_context",
      "location": {
        "file": "src/BomberCorpse.cpp",
        "line": 119,
        "column": 0
      },
      "context": "CorpsePart* part = new CorpsePart(start_x, start_y, part_type, vel_x, vel_y, explosion_force, get_co"
    },
    {
      "caller_function": "r",
      "called_function": "get_context",
      "location": {
        "file": "src/BomberCorpse.cpp",
        "line": 120,
        "column": 0
      },
      "context": "get_context()->register_object(part);"
    },
    {
      "caller_function": "r",
      "called_function": "register_object",
      "location": {
        "file": "src/BomberCorpse.cpp",
        "line": 120,
        "column": 0
      },
      "context": "get_context()->register_object(part);"
    },
    {
      "caller_function": "r",
      "called_function": "angle_dist",
      "location": {
        "file": "src/BomberCorpse.cpp",
        "line": 125,
        "column": 0
      },
      "context": "float angle = angle_dist(gen);"
    },
    {
      "caller_function": "r",
      "called_function": "velocity_dist",
      "location": {
        "file": "src/BomberCorpse.cpp",
        "line": 126,
        "column": 0
      },
      "context": "float velocity = velocity_dist(gen) * 0.6f; // Smaller blood droplets"
    },
    {
      "caller_function": "r",
      "called_function": "force_dist",
      "location": {
        "file": "src/BomberCorpse.cpp",
        "line": 127,
        "column": 0
      },
      "context": "float force = force_dist(gen) * 0.3f;"
    },
    {
      "caller_function": "r",
      "called_function": "std::cos",
      "location": {
        "file": "src/BomberCorpse.cpp",
        "line": 129,
        "column": 0
      },
      "context": "float vel_x = std::cos(angle) * velocity;"
    },
    {
      "caller_function": "r",
      "called_function": "cos",
      "location": {
        "file": "src/BomberCorpse.cpp",
        "line": 129,
        "column": 0
      },
      "context": "float vel_x = std::cos(angle) * velocity;"
    },
    {
      "caller_function": "r",
      "called_function": "std::sin",
      "location": {
        "file": "src/BomberCorpse.cpp",
        "line": 130,
        "column": 0
      },
      "context": "float vel_y = std::sin(angle) * velocity * 0.8f; // Less upward for blood"
    },
    {
      "caller_function": "r",
      "called_function": "sin",
      "location": {
        "file": "src/BomberCorpse.cpp",
        "line": 130,
        "column": 0
      },
      "context": "float vel_y = std::sin(angle) * velocity * 0.8f; // Less upward for blood"
    },
    {
      "caller_function": "r",
      "called_function": "blood_offset",
      "location": {
        "file": "src/BomberCorpse.cpp",
        "line": 132,
        "column": 0
      },
      "context": "std::uniform_real_distribution<> blood_offset(-20.0f, 20.0f);"
    },
    {
      "caller_function": "r",
      "called_function": "blood_offset",
      "location": {
        "file": "src/BomberCorpse.cpp",
        "line": 133,
        "column": 0
      },
      "context": "float start_x = x + blood_offset(gen);"
    },
    {
      "caller_function": "r",
      "called_function": "blood_offset",
      "location": {
        "file": "src/BomberCorpse.cpp",
        "line": 134,
        "column": 0
      },
      "context": "float start_y = y + blood_offset(gen);"
    },
    {
      "caller_function": "r",
      "called_function": "CorpsePart",
      "location": {
        "file": "src/BomberCorpse.cpp",
        "line": 137,
        "column": 0
      },
      "context": "CorpsePart* blood_drop = new CorpsePart(start_x, start_y, 0, vel_x, vel_y, force, get_context());"
    },
    {
      "caller_function": "r",
      "called_function": "get_context",
      "location": {
        "file": "src/BomberCorpse.cpp",
        "line": 137,
        "column": 0
      },
      "context": "CorpsePart* blood_drop = new CorpsePart(start_x, start_y, 0, vel_x, vel_y, force, get_context());"
    },
    {
      "caller_function": "r",
      "called_function": "get_context",
      "location": {
        "file": "src/BomberCorpse.cpp",
        "line": 138,
        "column": 0
      },
      "context": "get_context()->register_object(blood_drop);"
    },
    {
      "caller_function": "r",
      "called_function": "register_object",
      "location": {
        "file": "src/BomberCorpse.cpp",
        "line": 138,
        "column": 0
      },
      "context": "get_context()->register_object(blood_drop);"
    },
    {
      "caller_function": "x",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/MapTile_Box.cpp",
        "line": 22,
        "column": 0
      },
      "context": "SDL_Log(\"MapTile_Box created at pixel (%d,%d), maps to grid (%d,%d), destructible=%d, destroyed=%d\","
    },
    {
      "caller_function": "x",
      "called_function": "pixel",
      "location": {
        "file": "src/MapTile_Box.cpp",
        "line": 22,
        "column": 0
      },
      "context": "SDL_Log(\"MapTile_Box created at pixel (%d,%d), maps to grid (%d,%d), destructible=%d, destroyed=%d\","
    },
    {
      "caller_function": "x",
      "called_function": "grid",
      "location": {
        "file": "src/MapTile_Box.cpp",
        "line": 22,
        "column": 0
      },
      "context": "SDL_Log(\"MapTile_Box created at pixel (%d,%d), maps to grid (%d,%d), destructible=%d, destroyed=%d\","
    },
    {
      "caller_function": "x",
      "called_function": "get_map_x",
      "location": {
        "file": "src/MapTile_Box.cpp",
        "line": 23,
        "column": 0
      },
      "context": "_x, _y, get_map_x(), get_map_y(), destructible, destroyed);"
    },
    {
      "caller_function": "x",
      "called_function": "get_map_y",
      "location": {
        "file": "src/MapTile_Box.cpp",
        "line": 23,
        "column": 0
      },
      "context": "_x, _y, get_map_x(), get_map_y(), destructible, destroyed);"
    },
    {
      "caller_function": "x",
      "called_function": "MapTile_Box",
      "location": {
        "file": "src/MapTile_Box.cpp",
        "line": 26,
        "column": 0
      },
      "context": "MapTile_Box::~MapTile_Box() {"
    },
    {
      "caller_function": "f",
      "called_function": "Timer::time_elapsed",
      "location": {
        "file": "src/MapTile_Box.cpp",
        "line": 32,
        "column": 0
      },
      "context": "destroy_animation += Timer::time_elapsed();"
    },
    {
      "caller_function": "f",
      "called_function": "time_elapsed",
      "location": {
        "file": "src/MapTile_Box.cpp",
        "line": 32,
        "column": 0
      },
      "context": "destroy_animation += Timer::time_elapsed();"
    },
    {
      "caller_function": "f",
      "called_function": "GameObjectFactory::getInstance",
      "location": {
        "file": "src/MapTile_Box.cpp",
        "line": 36,
        "column": 0
      },
      "context": "ParticleSystem* smoke = GameObjectFactory::getInstance().create_particle_system(get_x(), get_y(), SM"
    },
    {
      "caller_function": "f",
      "called_function": "getInstance",
      "location": {
        "file": "src/MapTile_Box.cpp",
        "line": 36,
        "column": 0
      },
      "context": "ParticleSystem* smoke = GameObjectFactory::getInstance().create_particle_system(get_x(), get_y(), SM"
    },
    {
      "caller_function": "f",
      "called_function": "create_particle_system",
      "location": {
        "file": "src/MapTile_Box.cpp",
        "line": 36,
        "column": 0
      },
      "context": "ParticleSystem* smoke = GameObjectFactory::getInstance().create_particle_system(get_x(), get_y(), SM"
    },
    {
      "caller_function": "f",
      "called_function": "get_x",
      "location": {
        "file": "src/MapTile_Box.cpp",
        "line": 36,
        "column": 0
      },
      "context": "ParticleSystem* smoke = GameObjectFactory::getInstance().create_particle_system(get_x(), get_y(), SM"
    },
    {
      "caller_function": "f",
      "called_function": "get_y",
      "location": {
        "file": "src/MapTile_Box.cpp",
        "line": 36,
        "column": 0
      },
      "context": "ParticleSystem* smoke = GameObjectFactory::getInstance().create_particle_system(get_x(), get_y(), SM"
    },
    {
      "caller_function": "f",
      "called_function": "get_context",
      "location": {
        "file": "src/MapTile_Box.cpp",
        "line": 36,
        "column": 0
      },
      "context": "ParticleSystem* smoke = GameObjectFactory::getInstance().create_particle_system(get_x(), get_y(), SM"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/MapTile_Box.cpp",
        "line": 41,
        "column": 0
      },
      "context": "SDL_Log(\"MapTile_Box at (%d,%d) setting delete_me=true after animation\", get_map_x(), get_map_y());"
    },
    {
      "caller_function": "f",
      "called_function": "get_map_x",
      "location": {
        "file": "src/MapTile_Box.cpp",
        "line": 41,
        "column": 0
      },
      "context": "SDL_Log(\"MapTile_Box at (%d,%d) setting delete_me=true after animation\", get_map_x(), get_map_y());"
    },
    {
      "caller_function": "f",
      "called_function": "get_map_y",
      "location": {
        "file": "src/MapTile_Box.cpp",
        "line": 41,
        "column": 0
      },
      "context": "SDL_Log(\"MapTile_Box at (%d,%d) setting delete_me=true after animation\", get_map_x(), get_map_y());"
    },
    {
      "caller_function": "f",
      "called_function": "spawn_extra",
      "location": {
        "file": "src/MapTile_Box.cpp",
        "line": 44,
        "column": 0
      },
      "context": "spawn_extra();"
    },
    {
      "caller_function": "f",
      "called_function": "MapTile::show",
      "location": {
        "file": "src/MapTile_Box.cpp",
        "line": 53,
        "column": 0
      },
      "context": "MapTile::show();"
    },
    {
      "caller_function": "f",
      "called_function": "show",
      "location": {
        "file": "src/MapTile_Box.cpp",
        "line": 53,
        "column": 0
      },
      "context": "MapTile::show();"
    },
    {
      "caller_function": "f",
      "called_function": "std::min",
      "location": {
        "file": "src/MapTile_Box.cpp",
        "line": 60,
        "column": 0
      },
      "context": "animation_progress = std::min(animation_progress, 1.0f);"
    },
    {
      "caller_function": "f",
      "called_function": "min",
      "location": {
        "file": "src/MapTile_Box.cpp",
        "line": 60,
        "column": 0
      },
      "context": "animation_progress = std::min(animation_progress, 1.0f);"
    },
    {
      "caller_function": "f",
      "called_function": "Resources::get_gl_texture",
      "location": {
        "file": "src/MapTile_Box.cpp",
        "line": 64,
        "column": 0
      },
      "context": "GLuint gl_texture = Resources::get_gl_texture(texture_name);"
    },
    {
      "caller_function": "f",
      "called_function": "get_gl_texture",
      "location": {
        "file": "src/MapTile_Box.cpp",
        "line": 64,
        "column": 0
      },
      "context": "GLuint gl_texture = Resources::get_gl_texture(texture_name);"
    },
    {
      "caller_function": "f",
      "called_function": "get_context",
      "location": {
        "file": "src/MapTile_Box.cpp",
        "line": 67,
        "column": 0
      },
      "context": "get_context()->get_renderer()->begin_batch(GPUAcceleratedRenderer::TILE_FRAGMENTATION);"
    },
    {
      "caller_function": "f",
      "called_function": "get_renderer",
      "location": {
        "file": "src/MapTile_Box.cpp",
        "line": 67,
        "column": 0
      },
      "context": "get_context()->get_renderer()->begin_batch(GPUAcceleratedRenderer::TILE_FRAGMENTATION);"
    },
    {
      "caller_function": "f",
      "called_function": "begin_batch",
      "location": {
        "file": "src/MapTile_Box.cpp",
        "line": 67,
        "column": 0
      },
      "context": "get_context()->get_renderer()->begin_batch(GPUAcceleratedRenderer::TILE_FRAGMENTATION);"
    },
    {
      "caller_function": "r",
      "called_function": "get_x",
      "location": {
        "file": "src/MapTile_Box.cpp",
        "line": 96,
        "column": 0
      },
      "context": "float fragment_x = get_x() + cos(angle) * current_velocity * time_factor;"
    },
    {
      "caller_function": "r",
      "called_function": "cos",
      "location": {
        "file": "src/MapTile_Box.cpp",
        "line": 96,
        "column": 0
      },
      "context": "float fragment_x = get_x() + cos(angle) * current_velocity * time_factor;"
    },
    {
      "caller_function": "r",
      "called_function": "get_y",
      "location": {
        "file": "src/MapTile_Box.cpp",
        "line": 97,
        "column": 0
      },
      "context": "float fragment_y = get_y() + sin(angle) * current_velocity * time_factor;"
    },
    {
      "caller_function": "r",
      "called_function": "sin",
      "location": {
        "file": "src/MapTile_Box.cpp",
        "line": 97,
        "column": 0
      },
      "context": "float fragment_y = get_y() + sin(angle) * current_velocity * time_factor;"
    },
    {
      "caller_function": "r",
      "called_function": "std::max",
      "location": {
        "file": "src/MapTile_Box.cpp",
        "line": 111,
        "column": 0
      },
      "context": "scale_x *= std::max(0.1f, height_scale);"
    },
    {
      "caller_function": "r",
      "called_function": "max",
      "location": {
        "file": "src/MapTile_Box.cpp",
        "line": 111,
        "column": 0
      },
      "context": "scale_x *= std::max(0.1f, height_scale);"
    },
    {
      "caller_function": "r",
      "called_function": "std::max",
      "location": {
        "file": "src/MapTile_Box.cpp",
        "line": 112,
        "column": 0
      },
      "context": "scale_y *= std::max(0.1f, height_scale);"
    },
    {
      "caller_function": "r",
      "called_function": "max",
      "location": {
        "file": "src/MapTile_Box.cpp",
        "line": 112,
        "column": 0
      },
      "context": "scale_y *= std::max(0.1f, height_scale);"
    },
    {
      "caller_function": "f",
      "called_function": "abs",
      "location": {
        "file": "src/MapTile_Box.cpp",
        "line": 126,
        "column": 0
      },
      "context": "float bounce_energy = abs(fragment_z) * 0.5f; // Energy based on impact"
    },
    {
      "caller_function": "f",
      "called_function": "sin",
      "location": {
        "file": "src/MapTile_Box.cpp",
        "line": 127,
        "column": 0
      },
      "context": "float bounce_chaos = sin(time_factor * 12.0f + i * 2.3f) * bounce_energy;"
    },
    {
      "caller_function": "f",
      "called_function": "cos",
      "location": {
        "file": "src/MapTile_Box.cpp",
        "line": 130,
        "column": 0
      },
      "context": "fragment_x += bounce_chaos * cos(angle + 0.7f);"
    },
    {
      "caller_function": "f",
      "called_function": "sin",
      "location": {
        "file": "src/MapTile_Box.cpp",
        "line": 131,
        "column": 0
      },
      "context": "fragment_y += bounce_chaos * sin(angle + 0.7f);"
    },
    {
      "caller_function": "f",
      "called_function": "sin",
      "location": {
        "file": "src/MapTile_Box.cpp",
        "line": 157,
        "column": 0
      },
      "context": "float tumble_wobble = sin(animation_progress * 8.0f + i) * tumble_factor;"
    },
    {
      "caller_function": "f",
      "called_function": "fragments",
      "location": {
        "file": "src/MapTile_Box.cpp",
        "line": 168,
        "column": 0
      },
      "context": "CORNER_PIECE = 0,    // Edge/corner fragments (darker, weathered)"
    },
    {
      "caller_function": "f",
      "called_function": "planks",
      "location": {
        "file": "src/MapTile_Box.cpp",
        "line": 169,
        "column": 0
      },
      "context": "EDGE_PLANK = 1,      // Side planks (medium tone)"
    },
    {
      "caller_function": "f",
      "called_function": "wood",
      "location": {
        "file": "src/MapTile_Box.cpp",
        "line": 170,
        "column": 0
      },
      "context": "INNER_WOOD = 2,      // Fresh inner wood (lighter)"
    },
    {
      "caller_function": "f",
      "called_function": "splinters",
      "location": {
        "file": "src/MapTile_Box.cpp",
        "line": 171,
        "column": 0
      },
      "context": "SPLINTER = 3         // Small splinters (very light)"
    },
    {
      "caller_function": "h",
      "called_function": "wood",
      "location": {
        "file": "src/MapTile_Box.cpp",
        "line": 185,
        "column": 0
      },
      "context": "case INNER_WOOD:    // Fresh inner wood (lighter)"
    },
    {
      "caller_function": "h",
      "called_function": "std::min",
      "location": {
        "file": "src/MapTile_Box.cpp",
        "line": 197,
        "column": 0
      },
      "context": "std::min(1.0f, std::max(0.3f, base_r + color_var)),"
    },
    {
      "caller_function": "h",
      "called_function": "std::max",
      "location": {
        "file": "src/MapTile_Box.cpp",
        "line": 197,
        "column": 0
      },
      "context": "std::min(1.0f, std::max(0.3f, base_r + color_var)),"
    },
    {
      "caller_function": "h",
      "called_function": "min",
      "location": {
        "file": "src/MapTile_Box.cpp",
        "line": 197,
        "column": 0
      },
      "context": "std::min(1.0f, std::max(0.3f, base_r + color_var)),"
    },
    {
      "caller_function": "h",
      "called_function": "max",
      "location": {
        "file": "src/MapTile_Box.cpp",
        "line": 197,
        "column": 0
      },
      "context": "std::min(1.0f, std::max(0.3f, base_r + color_var)),"
    },
    {
      "caller_function": "h",
      "called_function": "std::min",
      "location": {
        "file": "src/MapTile_Box.cpp",
        "line": 198,
        "column": 0
      },
      "context": "std::min(1.0f, std::max(0.3f, base_g + color_var)),"
    },
    {
      "caller_function": "h",
      "called_function": "std::max",
      "location": {
        "file": "src/MapTile_Box.cpp",
        "line": 198,
        "column": 0
      },
      "context": "std::min(1.0f, std::max(0.3f, base_g + color_var)),"
    },
    {
      "caller_function": "h",
      "called_function": "min",
      "location": {
        "file": "src/MapTile_Box.cpp",
        "line": 198,
        "column": 0
      },
      "context": "std::min(1.0f, std::max(0.3f, base_g + color_var)),"
    },
    {
      "caller_function": "h",
      "called_function": "max",
      "location": {
        "file": "src/MapTile_Box.cpp",
        "line": 198,
        "column": 0
      },
      "context": "std::min(1.0f, std::max(0.3f, base_g + color_var)),"
    },
    {
      "caller_function": "h",
      "called_function": "std::min",
      "location": {
        "file": "src/MapTile_Box.cpp",
        "line": 199,
        "column": 0
      },
      "context": "std::min(1.0f, std::max(0.3f, base_b + color_var)),"
    },
    {
      "caller_function": "h",
      "called_function": "std::max",
      "location": {
        "file": "src/MapTile_Box.cpp",
        "line": 199,
        "column": 0
      },
      "context": "std::min(1.0f, std::max(0.3f, base_b + color_var)),"
    },
    {
      "caller_function": "h",
      "called_function": "min",
      "location": {
        "file": "src/MapTile_Box.cpp",
        "line": 199,
        "column": 0
      },
      "context": "std::min(1.0f, std::max(0.3f, base_b + color_var)),"
    },
    {
      "caller_function": "h",
      "called_function": "max",
      "location": {
        "file": "src/MapTile_Box.cpp",
        "line": 199,
        "column": 0
      },
      "context": "std::min(1.0f, std::max(0.3f, base_b + color_var)),"
    },
    {
      "caller_function": "h",
      "called_function": "get_context",
      "location": {
        "file": "src/MapTile_Box.cpp",
        "line": 220,
        "column": 0
      },
      "context": "get_context()->get_renderer()->add_animated_sprite("
    },
    {
      "caller_function": "h",
      "called_function": "get_renderer",
      "location": {
        "file": "src/MapTile_Box.cpp",
        "line": 220,
        "column": 0
      },
      "context": "get_context()->get_renderer()->add_animated_sprite("
    },
    {
      "caller_function": "h",
      "called_function": "add_animated_sprite",
      "location": {
        "file": "src/MapTile_Box.cpp",
        "line": 220,
        "column": 0
      },
      "context": "get_context()->get_renderer()->add_animated_sprite("
    },
    {
      "caller_function": "h",
      "called_function": "get_context",
      "location": {
        "file": "src/MapTile_Box.cpp",
        "line": 230,
        "column": 0
      },
      "context": "get_context()->get_renderer()->end_batch();"
    },
    {
      "caller_function": "h",
      "called_function": "get_renderer",
      "location": {
        "file": "src/MapTile_Box.cpp",
        "line": 230,
        "column": 0
      },
      "context": "get_context()->get_renderer()->end_batch();"
    },
    {
      "caller_function": "h",
      "called_function": "end_batch",
      "location": {
        "file": "src/MapTile_Box.cpp",
        "line": 230,
        "column": 0
      },
      "context": "get_context()->get_renderer()->end_batch();"
    },
    {
      "caller_function": "h",
      "called_function": "catch",
      "location": {
        "file": "src/MapTile_Box.cpp",
        "line": 233,
        "column": 0
      },
      "context": "} catch (...) {"
    },
    {
      "caller_function": "h",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/MapTile_Box.cpp",
        "line": 234,
        "column": 0
      },
      "context": "SDL_Log(\"GPU fragmentation failed, falling back to SDL effect\");"
    },
    {
      "caller_function": "f",
      "called_function": "MapTile_Box::destroy",
      "location": {
        "file": "src/MapTile_Box.cpp",
        "line": 244,
        "column": 0
      },
      "context": "SDL_Log(\"MapTile_Box::destroy() called at (%d,%d)\", get_map_x(), get_map_y());"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/MapTile_Box.cpp",
        "line": 244,
        "column": 0
      },
      "context": "SDL_Log(\"MapTile_Box::destroy() called at (%d,%d)\", get_map_x(), get_map_y());"
    },
    {
      "caller_function": "f",
      "called_function": "destroy",
      "location": {
        "file": "src/MapTile_Box.cpp",
        "line": 244,
        "column": 0
      },
      "context": "SDL_Log(\"MapTile_Box::destroy() called at (%d,%d)\", get_map_x(), get_map_y());"
    },
    {
      "caller_function": "f",
      "called_function": "get_map_x",
      "location": {
        "file": "src/MapTile_Box.cpp",
        "line": 244,
        "column": 0
      },
      "context": "SDL_Log(\"MapTile_Box::destroy() called at (%d,%d)\", get_map_x(), get_map_y());"
    },
    {
      "caller_function": "f",
      "called_function": "get_map_y",
      "location": {
        "file": "src/MapTile_Box.cpp",
        "line": 244,
        "column": 0
      },
      "context": "SDL_Log(\"MapTile_Box::destroy() called at (%d,%d)\", get_map_x(), get_map_y());"
    },
    {
      "caller_function": "f",
      "called_function": "box_pos",
      "location": {
        "file": "src/MapTile_Box.cpp",
        "line": 250,
        "column": 0
      },
      "context": "AudioPosition box_pos(get_x(), get_y(), 0.0f);"
    },
    {
      "caller_function": "f",
      "called_function": "get_x",
      "location": {
        "file": "src/MapTile_Box.cpp",
        "line": 250,
        "column": 0
      },
      "context": "AudioPosition box_pos(get_x(), get_y(), 0.0f);"
    },
    {
      "caller_function": "f",
      "called_function": "get_y",
      "location": {
        "file": "src/MapTile_Box.cpp",
        "line": 250,
        "column": 0
      },
      "context": "AudioPosition box_pos(get_x(), get_y(), 0.0f);"
    },
    {
      "caller_function": "f",
      "called_function": "AudioMixer::play_sound_3d",
      "location": {
        "file": "src/MapTile_Box.cpp",
        "line": 251,
        "column": 0
      },
      "context": "AudioMixer::play_sound_3d(\"break\", box_pos, 500.0f);"
    },
    {
      "caller_function": "f",
      "called_function": "play_sound_3d",
      "location": {
        "file": "src/MapTile_Box.cpp",
        "line": 251,
        "column": 0
      },
      "context": "AudioMixer::play_sound_3d(\"break\", box_pos, 500.0f);"
    },
    {
      "caller_function": "f",
      "called_function": "get_context",
      "location": {
        "file": "src/MapTile_Box.cpp",
        "line": 259,
        "column": 0
      },
      "context": "get_context()->get_particle_effects()->create_box_destruction_effect(get_x(), get_y(), 1.0f);"
    },
    {
      "caller_function": "f",
      "called_function": "get_particle_effects",
      "location": {
        "file": "src/MapTile_Box.cpp",
        "line": 259,
        "column": 0
      },
      "context": "get_context()->get_particle_effects()->create_box_destruction_effect(get_x(), get_y(), 1.0f);"
    },
    {
      "caller_function": "f",
      "called_function": "create_box_destruction_effect",
      "location": {
        "file": "src/MapTile_Box.cpp",
        "line": 259,
        "column": 0
      },
      "context": "get_context()->get_particle_effects()->create_box_destruction_effect(get_x(), get_y(), 1.0f);"
    },
    {
      "caller_function": "f",
      "called_function": "get_x",
      "location": {
        "file": "src/MapTile_Box.cpp",
        "line": 259,
        "column": 0
      },
      "context": "get_context()->get_particle_effects()->create_box_destruction_effect(get_x(), get_y(), 1.0f);"
    },
    {
      "caller_function": "f",
      "called_function": "get_y",
      "location": {
        "file": "src/MapTile_Box.cpp",
        "line": 259,
        "column": 0
      },
      "context": "get_context()->get_particle_effects()->create_box_destruction_effect(get_x(), get_y(), 1.0f);"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/MapTile_Box.cpp",
        "line": 260,
        "column": 0
      },
      "context": "SDL_Log(\"Box destruction effect requested at (%d,%d)\", get_x(), get_y());"
    },
    {
      "caller_function": "f",
      "called_function": "get_x",
      "location": {
        "file": "src/MapTile_Box.cpp",
        "line": 260,
        "column": 0
      },
      "context": "SDL_Log(\"Box destruction effect requested at (%d,%d)\", get_x(), get_y());"
    },
    {
      "caller_function": "f",
      "called_function": "get_y",
      "location": {
        "file": "src/MapTile_Box.cpp",
        "line": 260,
        "column": 0
      },
      "context": "SDL_Log(\"Box destruction effect requested at (%d,%d)\", get_x(), get_y());"
    },
    {
      "caller_function": "f",
      "called_function": "GameObjectFactory::getInstance",
      "location": {
        "file": "src/MapTile_Box.cpp",
        "line": 264,
        "column": 0
      },
      "context": "ParticleSystem* dust = GameObjectFactory::getInstance().create_particle_system(get_x(), get_y(), DUS"
    },
    {
      "caller_function": "f",
      "called_function": "getInstance",
      "location": {
        "file": "src/MapTile_Box.cpp",
        "line": 264,
        "column": 0
      },
      "context": "ParticleSystem* dust = GameObjectFactory::getInstance().create_particle_system(get_x(), get_y(), DUS"
    },
    {
      "caller_function": "f",
      "called_function": "create_particle_system",
      "location": {
        "file": "src/MapTile_Box.cpp",
        "line": 264,
        "column": 0
      },
      "context": "ParticleSystem* dust = GameObjectFactory::getInstance().create_particle_system(get_x(), get_y(), DUS"
    },
    {
      "caller_function": "f",
      "called_function": "get_x",
      "location": {
        "file": "src/MapTile_Box.cpp",
        "line": 264,
        "column": 0
      },
      "context": "ParticleSystem* dust = GameObjectFactory::getInstance().create_particle_system(get_x(), get_y(), DUS"
    },
    {
      "caller_function": "f",
      "called_function": "get_y",
      "location": {
        "file": "src/MapTile_Box.cpp",
        "line": 264,
        "column": 0
      },
      "context": "ParticleSystem* dust = GameObjectFactory::getInstance().create_particle_system(get_x(), get_y(), DUS"
    },
    {
      "caller_function": "f",
      "called_function": "get_context",
      "location": {
        "file": "src/MapTile_Box.cpp",
        "line": 264,
        "column": 0
      },
      "context": "ParticleSystem* dust = GameObjectFactory::getInstance().create_particle_system(get_x(), get_y(), DUS"
    },
    {
      "caller_function": "f",
      "called_function": "GameObjectFactory::getInstance",
      "location": {
        "file": "src/MapTile_Box.cpp",
        "line": 266,
        "column": 0
      },
      "context": "ParticleSystem* sparks = GameObjectFactory::getInstance().create_particle_system(get_x(), get_y(), E"
    },
    {
      "caller_function": "f",
      "called_function": "getInstance",
      "location": {
        "file": "src/MapTile_Box.cpp",
        "line": 266,
        "column": 0
      },
      "context": "ParticleSystem* sparks = GameObjectFactory::getInstance().create_particle_system(get_x(), get_y(), E"
    },
    {
      "caller_function": "f",
      "called_function": "create_particle_system",
      "location": {
        "file": "src/MapTile_Box.cpp",
        "line": 266,
        "column": 0
      },
      "context": "ParticleSystem* sparks = GameObjectFactory::getInstance().create_particle_system(get_x(), get_y(), E"
    },
    {
      "caller_function": "f",
      "called_function": "get_x",
      "location": {
        "file": "src/MapTile_Box.cpp",
        "line": 266,
        "column": 0
      },
      "context": "ParticleSystem* sparks = GameObjectFactory::getInstance().create_particle_system(get_x(), get_y(), E"
    },
    {
      "caller_function": "f",
      "called_function": "get_y",
      "location": {
        "file": "src/MapTile_Box.cpp",
        "line": 266,
        "column": 0
      },
      "context": "ParticleSystem* sparks = GameObjectFactory::getInstance().create_particle_system(get_x(), get_y(), E"
    },
    {
      "caller_function": "f",
      "called_function": "get_context",
      "location": {
        "file": "src/MapTile_Box.cpp",
        "line": 266,
        "column": 0
      },
      "context": "ParticleSystem* sparks = GameObjectFactory::getInstance().create_particle_system(get_x(), get_y(), E"
    },
    {
      "caller_function": null,
      "called_function": "CL_Vector",
      "location": {
        "file": "src/UtilsCL_Vector.h",
        "line": 24,
        "column": 0
      },
      "context": "CL_Vector(float x = 0.0f, float y = 0.0f, float z = 0.0f)"
    },
    {
      "caller_function": "I",
      "called_function": "Controller_AI",
      "location": {
        "file": "src/Controller_AI.h",
        "line": 9,
        "column": 0
      },
      "context": "virtual ~Controller_AI() {}"
    },
    {
      "caller_function": "I",
      "called_function": "update",
      "location": {
        "file": "src/Controller_AI.h",
        "line": 11,
        "column": 0
      },
      "context": "void update() override {}"
    },
    {
      "caller_function": "I",
      "called_function": "reset",
      "location": {
        "file": "src/Controller_AI.h",
        "line": 12,
        "column": 0
      },
      "context": "void reset() override {}"
    },
    {
      "caller_function": "I",
      "called_function": "is_left",
      "location": {
        "file": "src/Controller_AI.h",
        "line": 13,
        "column": 0
      },
      "context": "bool is_left() override { return false; }"
    },
    {
      "caller_function": "I",
      "called_function": "is_right",
      "location": {
        "file": "src/Controller_AI.h",
        "line": 14,
        "column": 0
      },
      "context": "bool is_right() override { return false; }"
    },
    {
      "caller_function": "I",
      "called_function": "is_up",
      "location": {
        "file": "src/Controller_AI.h",
        "line": 15,
        "column": 0
      },
      "context": "bool is_up() override { return false; }"
    },
    {
      "caller_function": "I",
      "called_function": "is_down",
      "location": {
        "file": "src/Controller_AI.h",
        "line": 16,
        "column": 0
      },
      "context": "bool is_down() override { return false; }"
    },
    {
      "caller_function": "I",
      "called_function": "is_bomb",
      "location": {
        "file": "src/Controller_AI.h",
        "line": 17,
        "column": 0
      },
      "context": "bool is_bomb() override { return false; }"
    },
    {
      "caller_function": null,
      "called_function": "Controller_Keyboard",
      "location": {
        "file": "src/Controller_Keyboard.h",
        "line": 9,
        "column": 0
      },
      "context": "Controller_Keyboard(int keymap_index);"
    },
    {
      "caller_function": null,
      "called_function": "update",
      "location": {
        "file": "src/Controller_Keyboard.h",
        "line": 11,
        "column": 0
      },
      "context": "void update() override;"
    },
    {
      "caller_function": null,
      "called_function": "reset",
      "location": {
        "file": "src/Controller_Keyboard.h",
        "line": 12,
        "column": 0
      },
      "context": "void reset() override;"
    },
    {
      "caller_function": null,
      "called_function": "is_left",
      "location": {
        "file": "src/Controller_Keyboard.h",
        "line": 13,
        "column": 0
      },
      "context": "bool is_left() override;"
    },
    {
      "caller_function": null,
      "called_function": "is_right",
      "location": {
        "file": "src/Controller_Keyboard.h",
        "line": 14,
        "column": 0
      },
      "context": "bool is_right() override;"
    },
    {
      "caller_function": null,
      "called_function": "is_up",
      "location": {
        "file": "src/Controller_Keyboard.h",
        "line": 15,
        "column": 0
      },
      "context": "bool is_up() override;"
    },
    {
      "caller_function": null,
      "called_function": "is_down",
      "location": {
        "file": "src/Controller_Keyboard.h",
        "line": 16,
        "column": 0
      },
      "context": "bool is_down() override;"
    },
    {
      "caller_function": null,
      "called_function": "is_bomb",
      "location": {
        "file": "src/Controller_Keyboard.h",
        "line": 17,
        "column": 0
      },
      "context": "bool is_bomb() override;"
    },
    {
      "caller_function": null,
      "called_function": "update_keyboard_state",
      "location": {
        "file": "src/Controller_Keyboard.h",
        "line": 19,
        "column": 0
      },
      "context": "static void update_keyboard_state();"
    },
    {
      "caller_function": null,
      "called_function": "init",
      "location": {
        "file": "src/Timer.h",
        "line": 8,
        "column": 0
      },
      "context": "static void init();"
    },
    {
      "caller_function": null,
      "called_function": "tick",
      "location": {
        "file": "src/Timer.h",
        "line": 9,
        "column": 0
      },
      "context": "static void tick();"
    },
    {
      "caller_function": null,
      "called_function": "time_elapsed",
      "location": {
        "file": "src/Timer.h",
        "line": 10,
        "column": 0
      },
      "context": "static float time_elapsed();"
    },
    {
      "caller_function": null,
      "called_function": "BomberConfig",
      "location": {
        "file": "src/GameConfig.h",
        "line": 31,
        "column": 0
      },
      "context": "BomberConfig();"
    },
    {
      "caller_function": null,
      "called_function": "BomberConfig",
      "location": {
        "file": "src/GameConfig.h",
        "line": 32,
        "column": 0
      },
      "context": "~BomberConfig();"
    },
    {
      "caller_function": null,
      "called_function": "get_skin",
      "location": {
        "file": "src/GameConfig.h",
        "line": 34,
        "column": 0
      },
      "context": "int\t\tget_skin();"
    },
    {
      "caller_function": null,
      "called_function": "get_name",
      "location": {
        "file": "src/GameConfig.h",
        "line": 35,
        "column": 0
      },
      "context": "std::string\tget_name();"
    },
    {
      "caller_function": null,
      "called_function": "get_team",
      "location": {
        "file": "src/GameConfig.h",
        "line": 36,
        "column": 0
      },
      "context": "int\t\tget_team();"
    },
    {
      "caller_function": null,
      "called_function": "get_controller",
      "location": {
        "file": "src/GameConfig.h",
        "line": 37,
        "column": 0
      },
      "context": "int\t\tget_controller();"
    },
    {
      "caller_function": null,
      "called_function": "set_skin",
      "location": {
        "file": "src/GameConfig.h",
        "line": 39,
        "column": 0
      },
      "context": "void\tset_skin(int _skin);"
    },
    {
      "caller_function": null,
      "called_function": "set_name",
      "location": {
        "file": "src/GameConfig.h",
        "line": 40,
        "column": 0
      },
      "context": "void\tset_name(std::string _name);"
    },
    {
      "caller_function": null,
      "called_function": "set_team",
      "location": {
        "file": "src/GameConfig.h",
        "line": 41,
        "column": 0
      },
      "context": "void\tset_team(int _team);"
    },
    {
      "caller_function": null,
      "called_function": "set_controller",
      "location": {
        "file": "src/GameConfig.h",
        "line": 42,
        "column": 0
      },
      "context": "void\tset_controller(int _controller);"
    },
    {
      "caller_function": null,
      "called_function": "set_highlight_maptile",
      "location": {
        "file": "src/GameConfig.h",
        "line": 43,
        "column": 0
      },
      "context": "void\tset_highlight_maptile(bool _highlight_maptile);"
    },
    {
      "caller_function": null,
      "called_function": "get_highlight_maptile",
      "location": {
        "file": "src/GameConfig.h",
        "line": 44,
        "column": 0
      },
      "context": "int\t\tget_highlight_maptile();"
    },
    {
      "caller_function": null,
      "called_function": "enable",
      "location": {
        "file": "src/GameConfig.h",
        "line": 45,
        "column": 0
      },
      "context": "void\tenable();"
    },
    {
      "caller_function": null,
      "called_function": "disable",
      "location": {
        "file": "src/GameConfig.h",
        "line": 46,
        "column": 0
      },
      "context": "void\tdisable();"
    },
    {
      "caller_function": null,
      "called_function": "is_enabled",
      "location": {
        "file": "src/GameConfig.h",
        "line": 47,
        "column": 0
      },
      "context": "int\t\tis_enabled();"
    },
    {
      "caller_function": null,
      "called_function": "set_enabled",
      "location": {
        "file": "src/GameConfig.h",
        "line": 48,
        "column": 0
      },
      "context": "void\tset_enabled(bool _enabled);"
    },
    {
      "caller_function": null,
      "called_function": "set_local",
      "location": {
        "file": "src/GameConfig.h",
        "line": 49,
        "column": 0
      },
      "context": "void\tset_local(bool _local);"
    },
    {
      "caller_function": null,
      "called_function": "is_local",
      "location": {
        "file": "src/GameConfig.h",
        "line": 50,
        "column": 0
      },
      "context": "bool\tis_local();"
    },
    {
      "caller_function": null,
      "called_function": "get_client_ip",
      "location": {
        "file": "src/GameConfig.h",
        "line": 51,
        "column": 0
      },
      "context": "char*\tget_client_ip();"
    },
    {
      "caller_function": null,
      "called_function": "set_client_ip",
      "location": {
        "file": "src/GameConfig.h",
        "line": 52,
        "column": 0
      },
      "context": "void\tset_client_ip(char* ip_string);"
    },
    {
      "caller_function": null,
      "called_function": "set_client_index",
      "location": {
        "file": "src/GameConfig.h",
        "line": 53,
        "column": 0
      },
      "context": "void\tset_client_index(int index);"
    },
    {
      "caller_function": null,
      "called_function": "get_client_index",
      "location": {
        "file": "src/GameConfig.h",
        "line": 54,
        "column": 0
      },
      "context": "int\t\tget_client_index();"
    },
    {
      "caller_function": null,
      "called_function": "get_config_index",
      "location": {
        "file": "src/GameConfig.h",
        "line": 55,
        "column": 0
      },
      "context": "int\t\tget_config_index();"
    },
    {
      "caller_function": null,
      "called_function": "set_config_index",
      "location": {
        "file": "src/GameConfig.h",
        "line": 56,
        "column": 0
      },
      "context": "void\tset_config_index(int index);"
    },
    {
      "caller_function": null,
      "called_function": "is_server_bomber",
      "location": {
        "file": "src/GameConfig.h",
        "line": 57,
        "column": 0
      },
      "context": "bool\tis_server_bomber();"
    },
    {
      "caller_function": null,
      "called_function": "set_server_bomber",
      "location": {
        "file": "src/GameConfig.h",
        "line": 58,
        "column": 0
      },
      "context": "void\tset_server_bomber(bool from_server);"
    },
    {
      "caller_function": null,
      "called_function": "set_round_time",
      "location": {
        "file": "src/GameConfig.h",
        "line": 77,
        "column": 0
      },
      "context": "static void set_round_time(int);"
    },
    {
      "caller_function": null,
      "called_function": "set_max_skateboards",
      "location": {
        "file": "src/GameConfig.h",
        "line": 79,
        "column": 0
      },
      "context": "static void set_max_skateboards(int);"
    },
    {
      "caller_function": null,
      "called_function": "set_max_power",
      "location": {
        "file": "src/GameConfig.h",
        "line": 80,
        "column": 0
      },
      "context": "static void set_max_power(int);"
    },
    {
      "caller_function": null,
      "called_function": "set_max_bombs",
      "location": {
        "file": "src/GameConfig.h",
        "line": 81,
        "column": 0
      },
      "context": "static void set_max_bombs(int);"
    },
    {
      "caller_function": null,
      "called_function": "set_start_skateboards",
      "location": {
        "file": "src/GameConfig.h",
        "line": 83,
        "column": 0
      },
      "context": "static void set_start_skateboards(int);"
    },
    {
      "caller_function": null,
      "called_function": "set_start_power",
      "location": {
        "file": "src/GameConfig.h",
        "line": 84,
        "column": 0
      },
      "context": "static void set_start_power(int);"
    },
    {
      "caller_function": null,
      "called_function": "set_start_bombs",
      "location": {
        "file": "src/GameConfig.h",
        "line": 85,
        "column": 0
      },
      "context": "static void set_start_bombs(int);"
    },
    {
      "caller_function": null,
      "called_function": "set_start_kick",
      "location": {
        "file": "src/GameConfig.h",
        "line": 86,
        "column": 0
      },
      "context": "static void set_start_kick(int);"
    },
    {
      "caller_function": null,
      "called_function": "set_start_glove",
      "location": {
        "file": "src/GameConfig.h",
        "line": 87,
        "column": 0
      },
      "context": "static void set_start_glove(int);"
    },
    {
      "caller_function": null,
      "called_function": "set_skateboards",
      "location": {
        "file": "src/GameConfig.h",
        "line": 89,
        "column": 0
      },
      "context": "static void set_skateboards(int);"
    },
    {
      "caller_function": null,
      "called_function": "set_power",
      "location": {
        "file": "src/GameConfig.h",
        "line": 90,
        "column": 0
      },
      "context": "static void set_power(int);"
    },
    {
      "caller_function": null,
      "called_function": "set_bombs",
      "location": {
        "file": "src/GameConfig.h",
        "line": 91,
        "column": 0
      },
      "context": "static void set_bombs(int);"
    },
    {
      "caller_function": null,
      "called_function": "set_kick",
      "location": {
        "file": "src/GameConfig.h",
        "line": 92,
        "column": 0
      },
      "context": "static void set_kick(int);"
    },
    {
      "caller_function": null,
      "called_function": "set_glove",
      "location": {
        "file": "src/GameConfig.h",
        "line": 93,
        "column": 0
      },
      "context": "static void set_glove(int);"
    },
    {
      "caller_function": null,
      "called_function": "set_joint",
      "location": {
        "file": "src/GameConfig.h",
        "line": 95,
        "column": 0
      },
      "context": "static void set_joint(int);"
    },
    {
      "caller_function": null,
      "called_function": "set_viagra",
      "location": {
        "file": "src/GameConfig.h",
        "line": 96,
        "column": 0
      },
      "context": "static void set_viagra(int);"
    },
    {
      "caller_function": null,
      "called_function": "set_koks",
      "location": {
        "file": "src/GameConfig.h",
        "line": 97,
        "column": 0
      },
      "context": "static void set_koks(int);"
    },
    {
      "caller_function": null,
      "called_function": "set_start_map",
      "location": {
        "file": "src/GameConfig.h",
        "line": 99,
        "column": 0
      },
      "context": "static void set_start_map(int);"
    },
    {
      "caller_function": null,
      "called_function": "set_random_map_order",
      "location": {
        "file": "src/GameConfig.h",
        "line": 100,
        "column": 0
      },
      "context": "static void set_random_map_order(int);"
    },
    {
      "caller_function": null,
      "called_function": "set_points_to_win",
      "location": {
        "file": "src/GameConfig.h",
        "line": 102,
        "column": 0
      },
      "context": "static void set_points_to_win(int);"
    },
    {
      "caller_function": null,
      "called_function": "set_theme",
      "location": {
        "file": "src/GameConfig.h",
        "line": 103,
        "column": 0
      },
      "context": "static void set_theme(int);"
    },
    {
      "caller_function": null,
      "called_function": "set_music",
      "location": {
        "file": "src/GameConfig.h",
        "line": 104,
        "column": 0
      },
      "context": "static void set_music(int);"
    },
    {
      "caller_function": null,
      "called_function": "set_kids_mode",
      "location": {
        "file": "src/GameConfig.h",
        "line": 106,
        "column": 0
      },
      "context": "static void set_kids_mode(int);"
    },
    {
      "caller_function": null,
      "called_function": "set_shaky_explosions",
      "location": {
        "file": "src/GameConfig.h",
        "line": 107,
        "column": 0
      },
      "context": "static void set_shaky_explosions(int);"
    },
    {
      "caller_function": null,
      "called_function": "set_highlight_maptiles",
      "location": {
        "file": "src/GameConfig.h",
        "line": 108,
        "column": 0
      },
      "context": "static void set_highlight_maptiles(int);"
    },
    {
      "caller_function": null,
      "called_function": "set_random_positions",
      "location": {
        "file": "src/GameConfig.h",
        "line": 109,
        "column": 0
      },
      "context": "static void set_random_positions(int);"
    },
    {
      "caller_function": null,
      "called_function": "set_corpse_parts",
      "location": {
        "file": "src/GameConfig.h",
        "line": 110,
        "column": 0
      },
      "context": "static void set_corpse_parts(int);"
    },
    {
      "caller_function": null,
      "called_function": "set_bomb_countdown",
      "location": {
        "file": "src/GameConfig.h",
        "line": 112,
        "column": 0
      },
      "context": "static void set_bomb_countdown(int);"
    },
    {
      "caller_function": null,
      "called_function": "set_bomb_delay",
      "location": {
        "file": "src/GameConfig.h",
        "line": 113,
        "column": 0
      },
      "context": "static void set_bomb_delay(int);"
    },
    {
      "caller_function": null,
      "called_function": "set_bomb_speed",
      "location": {
        "file": "src/GameConfig.h",
        "line": 114,
        "column": 0
      },
      "context": "static void set_bomb_speed(int);"
    },
    {
      "caller_function": null,
      "called_function": "set_filename",
      "location": {
        "file": "src/GameConfig.h",
        "line": 116,
        "column": 0
      },
      "context": "static void set_filename(std::filesystem::path _filename);"
    },
    {
      "caller_function": null,
      "called_function": "set_path",
      "location": {
        "file": "src/GameConfig.h",
        "line": 117,
        "column": 0
      },
      "context": "static void set_path(std::filesystem::path _path);"
    },
    {
      "caller_function": null,
      "called_function": "get_round_time",
      "location": {
        "file": "src/GameConfig.h",
        "line": 119,
        "column": 0
      },
      "context": "static int get_round_time();"
    },
    {
      "caller_function": null,
      "called_function": "get_random_map_order",
      "location": {
        "file": "src/GameConfig.h",
        "line": 120,
        "column": 0
      },
      "context": "static int get_random_map_order();"
    },
    {
      "caller_function": null,
      "called_function": "get_max_skateboards",
      "location": {
        "file": "src/GameConfig.h",
        "line": 122,
        "column": 0
      },
      "context": "static int get_max_skateboards();"
    },
    {
      "caller_function": null,
      "called_function": "get_max_power",
      "location": {
        "file": "src/GameConfig.h",
        "line": 123,
        "column": 0
      },
      "context": "static int get_max_power();"
    },
    {
      "caller_function": null,
      "called_function": "get_max_bombs",
      "location": {
        "file": "src/GameConfig.h",
        "line": 124,
        "column": 0
      },
      "context": "static int get_max_bombs();"
    },
    {
      "caller_function": null,
      "called_function": "get_start_skateboards",
      "location": {
        "file": "src/GameConfig.h",
        "line": 126,
        "column": 0
      },
      "context": "static int get_start_skateboards();"
    },
    {
      "caller_function": null,
      "called_function": "get_start_power",
      "location": {
        "file": "src/GameConfig.h",
        "line": 127,
        "column": 0
      },
      "context": "static int get_start_power();"
    },
    {
      "caller_function": null,
      "called_function": "get_start_bombs",
      "location": {
        "file": "src/GameConfig.h",
        "line": 128,
        "column": 0
      },
      "context": "static int get_start_bombs();"
    },
    {
      "caller_function": null,
      "called_function": "get_start_kick",
      "location": {
        "file": "src/GameConfig.h",
        "line": 129,
        "column": 0
      },
      "context": "static int get_start_kick();"
    },
    {
      "caller_function": null,
      "called_function": "get_start_glove",
      "location": {
        "file": "src/GameConfig.h",
        "line": 130,
        "column": 0
      },
      "context": "static int get_start_glove();"
    },
    {
      "caller_function": null,
      "called_function": "get_skateboards",
      "location": {
        "file": "src/GameConfig.h",
        "line": 132,
        "column": 0
      },
      "context": "static int get_skateboards();"
    },
    {
      "caller_function": null,
      "called_function": "get_power",
      "location": {
        "file": "src/GameConfig.h",
        "line": 133,
        "column": 0
      },
      "context": "static int get_power();"
    },
    {
      "caller_function": null,
      "called_function": "get_bombs",
      "location": {
        "file": "src/GameConfig.h",
        "line": 134,
        "column": 0
      },
      "context": "static int get_bombs();"
    },
    {
      "caller_function": null,
      "called_function": "get_kick",
      "location": {
        "file": "src/GameConfig.h",
        "line": 135,
        "column": 0
      },
      "context": "static int get_kick();"
    },
    {
      "caller_function": null,
      "called_function": "get_glove",
      "location": {
        "file": "src/GameConfig.h",
        "line": 136,
        "column": 0
      },
      "context": "static int get_glove();"
    },
    {
      "caller_function": null,
      "called_function": "get_joint",
      "location": {
        "file": "src/GameConfig.h",
        "line": 138,
        "column": 0
      },
      "context": "static int get_joint();"
    },
    {
      "caller_function": null,
      "called_function": "get_viagra",
      "location": {
        "file": "src/GameConfig.h",
        "line": 139,
        "column": 0
      },
      "context": "static int get_viagra();"
    },
    {
      "caller_function": null,
      "called_function": "get_koks",
      "location": {
        "file": "src/GameConfig.h",
        "line": 140,
        "column": 0
      },
      "context": "static int get_koks();"
    },
    {
      "caller_function": null,
      "called_function": "get_start_map",
      "location": {
        "file": "src/GameConfig.h",
        "line": 142,
        "column": 0
      },
      "context": "static int get_start_map();"
    },
    {
      "caller_function": null,
      "called_function": "get_points_to_win",
      "location": {
        "file": "src/GameConfig.h",
        "line": 144,
        "column": 0
      },
      "context": "static int get_points_to_win();"
    },
    {
      "caller_function": null,
      "called_function": "get_theme",
      "location": {
        "file": "src/GameConfig.h",
        "line": 145,
        "column": 0
      },
      "context": "static int get_theme();"
    },
    {
      "caller_function": null,
      "called_function": "get_music",
      "location": {
        "file": "src/GameConfig.h",
        "line": 147,
        "column": 0
      },
      "context": "static int get_music();"
    },
    {
      "caller_function": null,
      "called_function": "get_kids_mode",
      "location": {
        "file": "src/GameConfig.h",
        "line": 149,
        "column": 0
      },
      "context": "static int get_kids_mode();"
    },
    {
      "caller_function": null,
      "called_function": "get_shaky_explosions",
      "location": {
        "file": "src/GameConfig.h",
        "line": 150,
        "column": 0
      },
      "context": "static int get_shaky_explosions();"
    },
    {
      "caller_function": null,
      "called_function": "get_highlight_maptiles",
      "location": {
        "file": "src/GameConfig.h",
        "line": 151,
        "column": 0
      },
      "context": "static int get_highlight_maptiles();"
    },
    {
      "caller_function": null,
      "called_function": "get_random_positions",
      "location": {
        "file": "src/GameConfig.h",
        "line": 152,
        "column": 0
      },
      "context": "static int get_random_positions();"
    },
    {
      "caller_function": null,
      "called_function": "get_corpse_parts",
      "location": {
        "file": "src/GameConfig.h",
        "line": 153,
        "column": 0
      },
      "context": "static int get_corpse_parts();"
    },
    {
      "caller_function": null,
      "called_function": "get_number_of_players",
      "location": {
        "file": "src/GameConfig.h",
        "line": 155,
        "column": 0
      },
      "context": "static int get_number_of_players();"
    },
    {
      "caller_function": null,
      "called_function": "get_number_of_opponents",
      "location": {
        "file": "src/GameConfig.h",
        "line": 156,
        "column": 0
      },
      "context": "static int get_number_of_opponents();"
    },
    {
      "caller_function": null,
      "called_function": "get_bomb_countdown",
      "location": {
        "file": "src/GameConfig.h",
        "line": 158,
        "column": 0
      },
      "context": "static int get_bomb_countdown();"
    },
    {
      "caller_function": null,
      "called_function": "get_bomb_delay",
      "location": {
        "file": "src/GameConfig.h",
        "line": 159,
        "column": 0
      },
      "context": "static int get_bomb_delay();"
    },
    {
      "caller_function": null,
      "called_function": "get_bomb_speed",
      "location": {
        "file": "src/GameConfig.h",
        "line": 160,
        "column": 0
      },
      "context": "static int get_bomb_speed();"
    },
    {
      "caller_function": null,
      "called_function": "get_fullscreen",
      "location": {
        "file": "src/GameConfig.h",
        "line": 162,
        "column": 0
      },
      "context": "static bool get_fullscreen();"
    },
    {
      "caller_function": null,
      "called_function": "set_fullscreen",
      "location": {
        "file": "src/GameConfig.h",
        "line": 163,
        "column": 0
      },
      "context": "static void set_fullscreen(bool val);"
    },
    {
      "caller_function": null,
      "called_function": "load",
      "location": {
        "file": "src/GameConfig.h",
        "line": 165,
        "column": 0
      },
      "context": "static bool load();"
    },
    {
      "caller_function": null,
      "called_function": "save",
      "location": {
        "file": "src/GameConfig.h",
        "line": 166,
        "column": 0
      },
      "context": "static bool save(bool init=false);"
    },
    {
      "caller_function": null,
      "called_function": "get_sound_enabled",
      "location": {
        "file": "src/GameConfig.h",
        "line": 167,
        "column": 0
      },
      "context": "static int get_sound_enabled();"
    },
    {
      "caller_function": null,
      "called_function": "set_last_server",
      "location": {
        "file": "src/GameConfig.h",
        "line": 170,
        "column": 0
      },
      "context": "static void set_last_server(std::string server_name);"
    },
    {
      "caller_function": null,
      "called_function": "get_last_server",
      "location": {
        "file": "src/GameConfig.h",
        "line": 171,
        "column": 0
      },
      "context": "static std::string get_last_server();"
    },
    {
      "caller_function": null,
      "called_function": "Screen",
      "location": {
        "file": "src/Screen.h",
        "line": 8,
        "column": 0
      },
      "context": "virtual ~Screen() {}"
    },
    {
      "caller_function": null,
      "called_function": "handle_events",
      "location": {
        "file": "src/Screen.h",
        "line": 9,
        "column": 0
      },
      "context": "virtual void handle_events(SDL_Event& event) = 0;"
    },
    {
      "caller_function": null,
      "called_function": "update",
      "location": {
        "file": "src/Screen.h",
        "line": 10,
        "column": 0
      },
      "context": "virtual void update(float deltaTime) = 0;"
    },
    {
      "caller_function": null,
      "called_function": "render",
      "location": {
        "file": "src/Screen.h",
        "line": 11,
        "column": 0
      },
      "context": "virtual void render(SDL_Renderer* renderer) = 0;"
    },
    {
      "caller_function": null,
      "called_function": "SettingsScreen",
      "location": {
        "file": "src/SettingsScreen.h",
        "line": 12,
        "column": 0
      },
      "context": "SettingsScreen(SDL_Renderer* renderer);"
    },
    {
      "caller_function": null,
      "called_function": "SettingsScreen",
      "location": {
        "file": "src/SettingsScreen.h",
        "line": 13,
        "column": 0
      },
      "context": "~SettingsScreen();"
    },
    {
      "caller_function": null,
      "called_function": "handle_events",
      "location": {
        "file": "src/SettingsScreen.h",
        "line": 15,
        "column": 0
      },
      "context": "void handle_events(SDL_Event& event) override;"
    },
    {
      "caller_function": null,
      "called_function": "update",
      "location": {
        "file": "src/SettingsScreen.h",
        "line": 16,
        "column": 0
      },
      "context": "void update(float deltaTime) override;"
    },
    {
      "caller_function": null,
      "called_function": "render",
      "location": {
        "file": "src/SettingsScreen.h",
        "line": 17,
        "column": 0
      },
      "context": "void render(SDL_Renderer* renderer) override;"
    },
    {
      "caller_function": null,
      "called_function": "get_next_state",
      "location": {
        "file": "src/SettingsScreen.h",
        "line": 19,
        "column": 0
      },
      "context": "GameState get_next_state() const;"
    },
    {
      "caller_function": null,
      "called_function": "render_player_setup",
      "location": {
        "file": "src/SettingsScreen.h",
        "line": 28,
        "column": 0
      },
      "context": "void render_player_setup();"
    },
    {
      "caller_function": null,
      "called_function": "render_game_options",
      "location": {
        "file": "src/SettingsScreen.h",
        "line": 29,
        "column": 0
      },
      "context": "void render_game_options();"
    },
    {
      "caller_function": null,
      "called_function": "handle_player_setup_input",
      "location": {
        "file": "src/SettingsScreen.h",
        "line": 30,
        "column": 0
      },
      "context": "void handle_player_setup_input(SDL_Event& event);"
    },
    {
      "caller_function": null,
      "called_function": "get_controller_name",
      "location": {
        "file": "src/SettingsScreen.h",
        "line": 31,
        "column": 0
      },
      "context": "std::string get_controller_name(int controller_type);"
    },
    {
      "caller_function": null,
      "called_function": "get_team_name",
      "location": {
        "file": "src/SettingsScreen.h",
        "line": 32,
        "column": 0
      },
      "context": "std::string get_team_name(int team);"
    },
    {
      "caller_function": null,
      "called_function": "MapEntry",
      "location": {
        "file": "src/MapEntry.h",
        "line": 31,
        "column": 0
      },
      "context": "MapEntry(const std::string& filename);"
    },
    {
      "caller_function": null,
      "called_function": "MapEntry",
      "location": {
        "file": "src/MapEntry.h",
        "line": 32,
        "column": 0
      },
      "context": "~MapEntry();"
    },
    {
      "caller_function": null,
      "called_function": "load",
      "location": {
        "file": "src/MapEntry.h",
        "line": 34,
        "column": 0
      },
      "context": "bool load();"
    },
    {
      "caller_function": null,
      "called_function": "get_data",
      "location": {
        "file": "src/MapEntry.h",
        "line": 35,
        "column": 0
      },
      "context": "char get_data(int x, int y);"
    },
    {
      "caller_function": null,
      "called_function": "get_name",
      "location": {
        "file": "src/MapEntry.h",
        "line": 36,
        "column": 0
      },
      "context": "std::string get_name() const { return name; }"
    },
    {
      "caller_function": null,
      "called_function": "get_author",
      "location": {
        "file": "src/MapEntry.h",
        "line": 37,
        "column": 0
      },
      "context": "std::string get_author() const { return author; }"
    },
    {
      "caller_function": null,
      "called_function": "get_max_players",
      "location": {
        "file": "src/MapEntry.h",
        "line": 38,
        "column": 0
      },
      "context": "int get_max_players() const { return max_players; }"
    },
    {
      "caller_function": null,
      "called_function": "is_enabled",
      "location": {
        "file": "src/MapEntry.h",
        "line": 39,
        "column": 0
      },
      "context": "bool is_enabled() const { return enabled; }"
    },
    {
      "caller_function": "e",
      "called_function": "get_bomber_pos",
      "location": {
        "file": "src/MapEntry.h",
        "line": 43,
        "column": 0
      },
      "context": "CL_Vector get_bomber_pos(int nr);"
    },
    {
      "caller_function": "e",
      "called_function": "read_bomber_positions",
      "location": {
        "file": "src/MapEntry.h",
        "line": 44,
        "column": 0
      },
      "context": "void read_bomber_positions();"
    },
    {
      "caller_function": null,
      "called_function": "vec3_init",
      "location": {
        "file": "src/cglm_compat.h",
        "line": 15,
        "column": 0
      },
      "context": "#define vec3_init(x, y, z) {x, y, z}"
    },
    {
      "caller_function": null,
      "called_function": "vec4_init",
      "location": {
        "file": "src/cglm_compat.h",
        "line": 16,
        "column": 0
      },
      "context": "#define vec4_init(x, y, z, w) {x, y, z, w}"
    },
    {
      "caller_function": null,
      "called_function": "mat4_identity",
      "location": {
        "file": "src/cglm_compat.h",
        "line": 17,
        "column": 0
      },
      "context": "#define mat4_identity() GLM_MAT4_IDENTITY_INIT"
    },
    {
      "caller_function": null,
      "called_function": "MAT4_ZERO",
      "location": {
        "file": "src/cglm_compat.h",
        "line": 20,
        "column": 0
      },
      "context": "#define MAT4_ZERO (mat4){{0.0f}}"
    },
    {
      "caller_function": null,
      "called_function": "VEC3_ZERO",
      "location": {
        "file": "src/cglm_compat.h",
        "line": 22,
        "column": 0
      },
      "context": "#define VEC3_ZERO (vec3){0.0f, 0.0f, 0.0f}"
    },
    {
      "caller_function": null,
      "called_function": "VEC4_ZERO",
      "location": {
        "file": "src/cglm_compat.h",
        "line": 23,
        "column": 0
      },
      "context": "#define VEC4_ZERO (vec4){0.0f, 0.0f, 0.0f, 0.0f}"
    },
    {
      "caller_function": null,
      "called_function": "vec3_init",
      "location": {
        "file": "src/cglm_compat.h",
        "line": 25,
        "column": 0
      },
      "context": "#define vec3_init(x, y, z) (vec3){x, y, z}"
    },
    {
      "caller_function": null,
      "called_function": "vec4_init",
      "location": {
        "file": "src/cglm_compat.h",
        "line": 26,
        "column": 0
      },
      "context": "#define vec4_init(x, y, z, w) (vec4){x, y, z, w}"
    },
    {
      "caller_function": null,
      "called_function": "mat4_identity",
      "location": {
        "file": "src/cglm_compat.h",
        "line": 27,
        "column": 0
      },
      "context": "#define mat4_identity() GLM_MAT4_IDENTITY_INIT"
    },
    {
      "caller_function": null,
      "called_function": "Controller_AI_Smart",
      "location": {
        "file": "src/Controller_AI_Smart.h",
        "line": 33,
        "column": 0
      },
      "context": "Controller_AI_Smart(AIPersonality personality = AIPersonality::NORMAL);"
    },
    {
      "caller_function": null,
      "called_function": "Controller_AI_Smart",
      "location": {
        "file": "src/Controller_AI_Smart.h",
        "line": 34,
        "column": 0
      },
      "context": "virtual ~Controller_AI_Smart();"
    },
    {
      "caller_function": null,
      "called_function": "update",
      "location": {
        "file": "src/Controller_AI_Smart.h",
        "line": 36,
        "column": 0
      },
      "context": "void update() override;"
    },
    {
      "caller_function": null,
      "called_function": "reset",
      "location": {
        "file": "src/Controller_AI_Smart.h",
        "line": 37,
        "column": 0
      },
      "context": "void reset() override;"
    },
    {
      "caller_function": null,
      "called_function": "is_left",
      "location": {
        "file": "src/Controller_AI_Smart.h",
        "line": 39,
        "column": 0
      },
      "context": "bool is_left() override { return current_input.left; }"
    },
    {
      "caller_function": null,
      "called_function": "is_right",
      "location": {
        "file": "src/Controller_AI_Smart.h",
        "line": 40,
        "column": 0
      },
      "context": "bool is_right() override { return current_input.right; }"
    },
    {
      "caller_function": null,
      "called_function": "is_up",
      "location": {
        "file": "src/Controller_AI_Smart.h",
        "line": 41,
        "column": 0
      },
      "context": "bool is_up() override { return current_input.up; }"
    },
    {
      "caller_function": null,
      "called_function": "is_down",
      "location": {
        "file": "src/Controller_AI_Smart.h",
        "line": 42,
        "column": 0
      },
      "context": "bool is_down() override { return current_input.down; }"
    },
    {
      "caller_function": null,
      "called_function": "is_bomb",
      "location": {
        "file": "src/Controller_AI_Smart.h",
        "line": 43,
        "column": 0
      },
      "context": "bool is_bomb() override { return current_input.bomb; }"
    },
    {
      "caller_function": null,
      "called_function": "set_personality",
      "location": {
        "file": "src/Controller_AI_Smart.h",
        "line": 46,
        "column": 0
      },
      "context": "void set_personality(AIPersonality personality);"
    },
    {
      "caller_function": null,
      "called_function": "set_reaction_time",
      "location": {
        "file": "src/Controller_AI_Smart.h",
        "line": 47,
        "column": 0
      },
      "context": "void set_reaction_time(float seconds);"
    },
    {
      "caller_function": null,
      "called_function": "set_aggression_level",
      "location": {
        "file": "src/Controller_AI_Smart.h",
        "line": 48,
        "column": 0
      },
      "context": "void set_aggression_level(float level); // 0.0 = defensive, 1.0 = very aggressive"
    },
    {
      "caller_function": null,
      "called_function": "get_current_target",
      "location": {
        "file": "src/Controller_AI_Smart.h",
        "line": 51,
        "column": 0
      },
      "context": "CL_Vector get_current_target() const { return current_target; }"
    },
    {
      "caller_function": null,
      "called_function": "get_current_state",
      "location": {
        "file": "src/Controller_AI_Smart.h",
        "line": 52,
        "column": 0
      },
      "context": "std::string get_current_state() const { return current_state_name; }"
    },
    {
      "caller_function": null,
      "called_function": "think",
      "location": {
        "file": "src/Controller_AI_Smart.h",
        "line": 64,
        "column": 0
      },
      "context": "void think();"
    },
    {
      "caller_function": null,
      "called_function": "execute_behavior",
      "location": {
        "file": "src/Controller_AI_Smart.h",
        "line": 65,
        "column": 0
      },
      "context": "void execute_behavior();"
    },
    {
      "caller_function": null,
      "called_function": "find_path_to",
      "location": {
        "file": "src/Controller_AI_Smart.h",
        "line": 68,
        "column": 0
      },
      "context": "std::vector<CL_Vector> find_path_to(CL_Vector target);"
    },
    {
      "caller_function": null,
      "called_function": "is_position_safe",
      "location": {
        "file": "src/Controller_AI_Smart.h",
        "line": 69,
        "column": 0
      },
      "context": "bool is_position_safe(CL_Vector pos, float time_ahead = 2.0f);"
    },
    {
      "caller_function": null,
      "called_function": "calculate_danger_level",
      "location": {
        "file": "src/Controller_AI_Smart.h",
        "line": 70,
        "column": 0
      },
      "context": "float calculate_danger_level(CL_Vector pos);"
    },
    {
      "caller_function": null,
      "called_function": "find_safe_position",
      "location": {
        "file": "src/Controller_AI_Smart.h",
        "line": 71,
        "column": 0
      },
      "context": "CL_Vector find_safe_position();"
    },
    {
      "caller_function": null,
      "called_function": "scan_for_targets",
      "location": {
        "file": "src/Controller_AI_Smart.h",
        "line": 74,
        "column": 0
      },
      "context": "std::vector<AITarget> scan_for_targets();"
    },
    {
      "caller_function": null,
      "called_function": "select_best_target",
      "location": {
        "file": "src/Controller_AI_Smart.h",
        "line": 75,
        "column": 0
      },
      "context": "AITarget select_best_target(const std::vector<AITarget>& targets);"
    },
    {
      "caller_function": null,
      "called_function": "evaluate_powerup_value",
      "location": {
        "file": "src/Controller_AI_Smart.h",
        "line": 76,
        "column": 0
      },
      "context": "float evaluate_powerup_value(int powerup_type);"
    },
    {
      "caller_function": null,
      "called_function": "should_place_bomb",
      "location": {
        "file": "src/Controller_AI_Smart.h",
        "line": 79,
        "column": 0
      },
      "context": "bool should_place_bomb();"
    },
    {
      "caller_function": null,
      "called_function": "can_escape_from_bomb",
      "location": {
        "file": "src/Controller_AI_Smart.h",
        "line": 80,
        "column": 0
      },
      "context": "bool can_escape_from_bomb(CL_Vector bomb_pos);"
    },
    {
      "caller_function": null,
      "called_function": "predict_explosion_tiles",
      "location": {
        "file": "src/Controller_AI_Smart.h",
        "line": 81,
        "column": 0
      },
      "context": "std::vector<CL_Vector> predict_explosion_tiles(CL_Vector bomb_pos, int power);"
    },
    {
      "caller_function": null,
      "called_function": "would_hit_enemy",
      "location": {
        "file": "src/Controller_AI_Smart.h",
        "line": 82,
        "column": 0
      },
      "context": "bool would_hit_enemy(CL_Vector bomb_pos);"
    },
    {
      "caller_function": null,
      "called_function": "analyze_enemies",
      "location": {
        "file": "src/Controller_AI_Smart.h",
        "line": 85,
        "column": 0
      },
      "context": "void analyze_enemies();"
    },
    {
      "caller_function": null,
      "called_function": "predict_enemy_position",
      "location": {
        "file": "src/Controller_AI_Smart.h",
        "line": 86,
        "column": 0
      },
      "context": "CL_Vector predict_enemy_position(Bomber* enemy, float time_ahead);"
    },
    {
      "caller_function": null,
      "called_function": "is_enemy_dangerous",
      "location": {
        "file": "src/Controller_AI_Smart.h",
        "line": 87,
        "column": 0
      },
      "context": "bool is_enemy_dangerous(Bomber* enemy);"
    },
    {
      "caller_function": null,
      "called_function": "get_aggression_modifier",
      "location": {
        "file": "src/Controller_AI_Smart.h",
        "line": 90,
        "column": 0
      },
      "context": "float get_aggression_modifier();"
    },
    {
      "caller_function": null,
      "called_function": "get_reaction_delay",
      "location": {
        "file": "src/Controller_AI_Smart.h",
        "line": 91,
        "column": 0
      },
      "context": "float get_reaction_delay();"
    },
    {
      "caller_function": null,
      "called_function": "get_bomb_frequency_modifier",
      "location": {
        "file": "src/Controller_AI_Smart.h",
        "line": 92,
        "column": 0
      },
      "context": "float get_bomb_frequency_modifier();"
    },
    {
      "caller_function": null,
      "called_function": "should_hunt_enemies",
      "location": {
        "file": "src/Controller_AI_Smart.h",
        "line": 93,
        "column": 0
      },
      "context": "bool should_hunt_enemies();"
    },
    {
      "caller_function": null,
      "called_function": "transition_to_state",
      "location": {
        "file": "src/Controller_AI_Smart.h",
        "line": 105,
        "column": 0
      },
      "context": "void transition_to_state(AIState new_state);"
    },
    {
      "caller_function": null,
      "called_function": "update_current_state",
      "location": {
        "file": "src/Controller_AI_Smart.h",
        "line": 106,
        "column": 0
      },
      "context": "void update_current_state();"
    },
    {
      "caller_function": null,
      "called_function": "recalculates",
      "location": {
        "file": "src/Controller_AI_Smart.h",
        "line": 112,
        "column": 0
      },
      "context": "float thinking_frequency; // How often AI recalculates (performance)"
    },
    {
      "caller_function": null,
      "called_function": "Controller",
      "location": {
        "file": "src/Controller.h",
        "line": 27,
        "column": 0
      },
      "context": "Controller();"
    },
    {
      "caller_function": null,
      "called_function": "Controller",
      "location": {
        "file": "src/Controller.h",
        "line": 28,
        "column": 0
      },
      "context": "virtual ~Controller() {};"
    },
    {
      "caller_function": null,
      "called_function": "create",
      "location": {
        "file": "src/Controller.h",
        "line": 55,
        "column": 0
      },
      "context": "static Controller* create( CONTROLLER_TYPE _type );"
    },
    {
      "caller_function": null,
      "called_function": "attach",
      "location": {
        "file": "src/Controller.h",
        "line": 57,
        "column": 0
      },
      "context": "virtual void attach(Bomber* _bomber);"
    },
    {
      "caller_function": "e",
      "called_function": "reset",
      "location": {
        "file": "src/Controller.h",
        "line": 60,
        "column": 0
      },
      "context": "virtual void reset() = 0;"
    },
    {
      "caller_function": "e",
      "called_function": "is_left",
      "location": {
        "file": "src/Controller.h",
        "line": 61,
        "column": 0
      },
      "context": "virtual bool is_left() = 0;"
    },
    {
      "caller_function": "e",
      "called_function": "is_right",
      "location": {
        "file": "src/Controller.h",
        "line": 62,
        "column": 0
      },
      "context": "virtual bool is_right() = 0;"
    },
    {
      "caller_function": "e",
      "called_function": "is_up",
      "location": {
        "file": "src/Controller.h",
        "line": 63,
        "column": 0
      },
      "context": "virtual bool is_up() = 0;"
    },
    {
      "caller_function": "e",
      "called_function": "is_down",
      "location": {
        "file": "src/Controller.h",
        "line": 64,
        "column": 0
      },
      "context": "virtual bool is_down() = 0;"
    },
    {
      "caller_function": "e",
      "called_function": "is_bomb",
      "location": {
        "file": "src/Controller.h",
        "line": 65,
        "column": 0
      },
      "context": "virtual bool is_bomb() = 0;"
    },
    {
      "caller_function": "e",
      "called_function": "deactivate",
      "location": {
        "file": "src/Controller.h",
        "line": 66,
        "column": 0
      },
      "context": "void deactivate();"
    },
    {
      "caller_function": "e",
      "called_function": "activate",
      "location": {
        "file": "src/Controller.h",
        "line": 67,
        "column": 0
      },
      "context": "void activate();"
    },
    {
      "caller_function": "e",
      "called_function": "revert",
      "location": {
        "file": "src/Controller.h",
        "line": 68,
        "column": 0
      },
      "context": "void revert();"
    },
    {
      "caller_function": "e",
      "called_function": "bomb_always",
      "location": {
        "file": "src/Controller.h",
        "line": 70,
        "column": 0
      },
      "context": "void bomb_always();"
    },
    {
      "caller_function": "e",
      "called_function": "bomb_normal",
      "location": {
        "file": "src/Controller.h",
        "line": 71,
        "column": 0
      },
      "context": "void bomb_normal();"
    },
    {
      "caller_function": "e",
      "called_function": "get_type",
      "location": {
        "file": "src/Controller.h",
        "line": 78,
        "column": 0
      },
      "context": "CONTROLLER_TYPE get_type();"
    },
    {
      "caller_function": null,
      "called_function": "init",
      "location": {
        "file": "src/Resources.h",
        "line": 21,
        "column": 0
      },
      "context": "static void init();"
    },
    {
      "caller_function": null,
      "called_function": "shutdown",
      "location": {
        "file": "src/Resources.h",
        "line": 22,
        "column": 0
      },
      "context": "static void shutdown();"
    },
    {
      "caller_function": null,
      "called_function": "get_texture",
      "location": {
        "file": "src/Resources.h",
        "line": 24,
        "column": 0
      },
      "context": "static TextureInfo* get_texture(const std::string& name);"
    },
    {
      "caller_function": null,
      "called_function": "get_gl_texture",
      "location": {
        "file": "src/Resources.h",
        "line": 25,
        "column": 0
      },
      "context": "static GLuint get_gl_texture(const std::string& name);"
    },
    {
      "caller_function": null,
      "called_function": "get_font",
      "location": {
        "file": "src/Resources.h",
        "line": 26,
        "column": 0
      },
      "context": "static TTF_Font* get_font(const std::string& name);"
    },
    {
      "caller_function": null,
      "called_function": "load_shader_source",
      "location": {
        "file": "src/Resources.h",
        "line": 27,
        "column": 0
      },
      "context": "static std::string load_shader_source(const std::string& path);"
    },
    {
      "caller_function": null,
      "called_function": "register_gl_texture_metadata",
      "location": {
        "file": "src/Resources.h",
        "line": 28,
        "column": 0
      },
      "context": "static void register_gl_texture_metadata(const std::string& texture_name, class GPUAcceleratedRender"
    },
    {
      "caller_function": null,
      "called_function": "load_texture",
      "location": {
        "file": "src/Resources.h",
        "line": 35,
        "column": 0
      },
      "context": "static TextureInfo* load_texture(const std::string& path, int sprite_width = 0, int sprite_height = "
    },
    {
      "caller_function": null,
      "called_function": "load_font",
      "location": {
        "file": "src/Resources.h",
        "line": 36,
        "column": 0
      },
      "context": "static TTF_Font* load_font(const std::string& path, int size);"
    },
    {
      "caller_function": null,
      "called_function": "Game",
      "location": {
        "file": "src/Game.h",
        "line": 16,
        "column": 0
      },
      "context": "Game();"
    },
    {
      "caller_function": null,
      "called_function": "Game",
      "location": {
        "file": "src/Game.h",
        "line": 17,
        "column": 0
      },
      "context": "~Game();"
    },
    {
      "caller_function": null,
      "called_function": "run",
      "location": {
        "file": "src/Game.h",
        "line": 19,
        "column": 0
      },
      "context": "void run();"
    },
    {
      "caller_function": null,
      "called_function": "handle_events",
      "location": {
        "file": "src/Game.h",
        "line": 22,
        "column": 0
      },
      "context": "void handle_events();"
    },
    {
      "caller_function": null,
      "called_function": "update",
      "location": {
        "file": "src/Game.h",
        "line": 23,
        "column": 0
      },
      "context": "void update(float deltaTime);"
    },
    {
      "caller_function": null,
      "called_function": "render",
      "location": {
        "file": "src/Game.h",
        "line": 24,
        "column": 0
      },
      "context": "void render();"
    },
    {
      "caller_function": null,
      "called_function": "start_game",
      "location": {
        "file": "src/Game.h",
        "line": 26,
        "column": 0
      },
      "context": "void start_game();"
    },
    {
      "caller_function": null,
      "called_function": "change_screen",
      "location": {
        "file": "src/Game.h",
        "line": 27,
        "column": 0
      },
      "context": "void change_screen(GameState next_state);"
    },
    {
      "caller_function": null,
      "called_function": "EffectRequest",
      "location": {
        "file": "src/ParticleEffectsManager.h",
        "line": 23,
        "column": 0
      },
      "context": "EffectRequest(EffectType t, float x_pos, float y_pos, float intens = 1.0f, int tile = 0)"
    },
    {
      "caller_function": null,
      "called_function": "type",
      "location": {
        "file": "src/ParticleEffectsManager.h",
        "line": 24,
        "column": 0
      },
      "context": ": type(t), x(x_pos), y(y_pos), intensity(intens), tile_type(tile) {}"
    },
    {
      "caller_function": null,
      "called_function": "intensity",
      "location": {
        "file": "src/ParticleEffectsManager.h",
        "line": 24,
        "column": 0
      },
      "context": ": type(t), x(x_pos), y(y_pos), intensity(intens), tile_type(tile) {}"
    },
    {
      "caller_function": null,
      "called_function": "tile_type",
      "location": {
        "file": "src/ParticleEffectsManager.h",
        "line": 24,
        "column": 0
      },
      "context": ": type(t), x(x_pos), y(y_pos), intensity(intens), tile_type(tile) {}"
    },
    {
      "caller_function": null,
      "called_function": "ParticleEffectsManager",
      "location": {
        "file": "src/ParticleEffectsManager.h",
        "line": 29,
        "column": 0
      },
      "context": "ParticleEffectsManager(ClanBomberApplication* app);"
    },
    {
      "caller_function": null,
      "called_function": "ParticleEffectsManager",
      "location": {
        "file": "src/ParticleEffectsManager.h",
        "line": 30,
        "column": 0
      },
      "context": "~ParticleEffectsManager();"
    },
    {
      "caller_function": null,
      "called_function": "request_effect",
      "location": {
        "file": "src/ParticleEffectsManager.h",
        "line": 32,
        "column": 0
      },
      "context": "void request_effect(const EffectRequest& request);"
    },
    {
      "caller_function": null,
      "called_function": "update",
      "location": {
        "file": "src/ParticleEffectsManager.h",
        "line": 33,
        "column": 0
      },
      "context": "void update(float deltaTime);"
    },
    {
      "caller_function": null,
      "called_function": "render",
      "location": {
        "file": "src/ParticleEffectsManager.h",
        "line": 34,
        "column": 0
      },
      "context": "void render();"
    },
    {
      "caller_function": null,
      "called_function": "create_box_destruction_effect",
      "location": {
        "file": "src/ParticleEffectsManager.h",
        "line": 36,
        "column": 0
      },
      "context": "void create_box_destruction_effect(float x, float y, float intensity = 1.0f);"
    },
    {
      "caller_function": null,
      "called_function": "create_explosion_effect",
      "location": {
        "file": "src/ParticleEffectsManager.h",
        "line": 37,
        "column": 0
      },
      "context": "void create_explosion_effect(float x, float y, float intensity = 1.0f);"
    },
    {
      "caller_function": null,
      "called_function": "process_box_destruction",
      "location": {
        "file": "src/ParticleEffectsManager.h",
        "line": 43,
        "column": 0
      },
      "context": "void process_box_destruction(float x, float y, float intensity);"
    },
    {
      "caller_function": null,
      "called_function": "process_explosion",
      "location": {
        "file": "src/ParticleEffectsManager.h",
        "line": 44,
        "column": 0
      },
      "context": "void process_explosion(float x, float y, float intensity);"
    },
    {
      "caller_function": null,
      "called_function": "GameSystems",
      "location": {
        "file": "src/GameSystems.h",
        "line": 18,
        "column": 0
      },
      "context": "GameSystems(GameContext* context);"
    },
    {
      "caller_function": null,
      "called_function": "GameSystems",
      "location": {
        "file": "src/GameSystems.h",
        "line": 19,
        "column": 0
      },
      "context": "~GameSystems();"
    },
    {
      "caller_function": null,
      "called_function": "update_all_systems",
      "location": {
        "file": "src/GameSystems.h",
        "line": 22,
        "column": 0
      },
      "context": "void update_all_systems(float deltaTime);"
    },
    {
      "caller_function": null,
      "called_function": "render_all_systems",
      "location": {
        "file": "src/GameSystems.h",
        "line": 23,
        "column": 0
      },
      "context": "void render_all_systems();"
    },
    {
      "caller_function": null,
      "called_function": "register_object",
      "location": {
        "file": "src/GameSystems.h",
        "line": 26,
        "column": 0
      },
      "context": "void register_object(GameObject* obj);"
    },
    {
      "caller_function": null,
      "called_function": "register_bomber",
      "location": {
        "file": "src/GameSystems.h",
        "line": 27,
        "column": 0
      },
      "context": "void register_bomber(Bomber* bomber);"
    },
    {
      "caller_function": null,
      "called_function": "cleanup_destroyed_objects",
      "location": {
        "file": "src/GameSystems.h",
        "line": 28,
        "column": 0
      },
      "context": "void cleanup_destroyed_objects();"
    },
    {
      "caller_function": null,
      "called_function": "set_object_references",
      "location": {
        "file": "src/GameSystems.h",
        "line": 31,
        "column": 0
      },
      "context": "void set_object_references(std::list<GameObject*>* objects,"
    },
    {
      "caller_function": null,
      "called_function": "init_all_systems",
      "location": {
        "file": "src/GameSystems.h",
        "line": 35,
        "column": 0
      },
      "context": "void init_all_systems();"
    },
    {
      "caller_function": null,
      "called_function": "update_input_system",
      "location": {
        "file": "src/GameSystems.h",
        "line": 41,
        "column": 0
      },
      "context": "void update_input_system(float deltaTime);"
    },
    {
      "caller_function": null,
      "called_function": "update_physics_system",
      "location": {
        "file": "src/GameSystems.h",
        "line": 42,
        "column": 0
      },
      "context": "void update_physics_system(float deltaTime);"
    },
    {
      "caller_function": null,
      "called_function": "update_ai_system",
      "location": {
        "file": "src/GameSystems.h",
        "line": 43,
        "column": 0
      },
      "context": "void update_ai_system(float deltaTime);"
    },
    {
      "caller_function": null,
      "called_function": "update_animation_system",
      "location": {
        "file": "src/GameSystems.h",
        "line": 44,
        "column": 0
      },
      "context": "void update_animation_system(float deltaTime);"
    },
    {
      "caller_function": null,
      "called_function": "update_collision_system",
      "location": {
        "file": "src/GameSystems.h",
        "line": 45,
        "column": 0
      },
      "context": "void update_collision_system(float deltaTime);"
    },
    {
      "caller_function": null,
      "called_function": "render_world",
      "location": {
        "file": "src/GameSystems.h",
        "line": 47,
        "column": 0
      },
      "context": "void render_world();"
    },
    {
      "caller_function": null,
      "called_function": "render_effects",
      "location": {
        "file": "src/GameSystems.h",
        "line": 48,
        "column": 0
      },
      "context": "void render_effects();"
    },
    {
      "caller_function": null,
      "called_function": "render_ui",
      "location": {
        "file": "src/GameSystems.h",
        "line": 49,
        "column": 0
      },
      "context": "void render_ui();"
    },
    {
      "caller_function": null,
      "called_function": "Bomb",
      "location": {
        "file": "src/Bomb.h",
        "line": 11,
        "column": 0
      },
      "context": "Bomb(int _x, int _y, int _power, Bomber* _owner, GameContext* context);"
    },
    {
      "caller_function": null,
      "called_function": "Bomb",
      "location": {
        "file": "src/Bomb.h",
        "line": 13,
        "column": 0
      },
      "context": "~Bomb();"
    },
    {
      "caller_function": null,
      "called_function": "act",
      "location": {
        "file": "src/Bomb.h",
        "line": 15,
        "column": 0
      },
      "context": "void act(float deltaTime) override;"
    },
    {
      "caller_function": null,
      "called_function": "explode",
      "location": {
        "file": "src/Bomb.h",
        "line": 16,
        "column": 0
      },
      "context": "void explode();"
    },
    {
      "caller_function": null,
      "called_function": "explode_delayed",
      "location": {
        "file": "src/Bomb.h",
        "line": 17,
        "column": 0
      },
      "context": "void explode_delayed();"
    },
    {
      "caller_function": null,
      "called_function": "kick",
      "location": {
        "file": "src/Bomb.h",
        "line": 18,
        "column": 0
      },
      "context": "void kick(Direction dir);"
    },
    {
      "caller_function": null,
      "called_function": "stop",
      "location": {
        "file": "src/Bomb.h",
        "line": 19,
        "column": 0
      },
      "context": "void stop();"
    },
    {
      "caller_function": null,
      "called_function": "get_type",
      "location": {
        "file": "src/Bomb.h",
        "line": 21,
        "column": 0
      },
      "context": "ObjectType get_type() const override { return BOMB; }"
    },
    {
      "caller_function": null,
      "called_function": "ThrownBomb",
      "location": {
        "file": "src/ThrownBomb.h",
        "line": 8,
        "column": 0
      },
      "context": "ThrownBomb(int _x, int _y, int _power, Bomber* _owner,"
    },
    {
      "caller_function": null,
      "called_function": "act",
      "location": {
        "file": "src/ThrownBomb.h",
        "line": 11,
        "column": 0
      },
      "context": "void act(float deltaTime) override;"
    },
    {
      "caller_function": null,
      "called_function": "show",
      "location": {
        "file": "src/ThrownBomb.h",
        "line": 12,
        "column": 0
      },
      "context": "void show() override;"
    },
    {
      "caller_function": null,
      "called_function": "calculate_flight_path",
      "location": {
        "file": "src/ThrownBomb.h",
        "line": 22,
        "column": 0
      },
      "context": "void calculate_flight_path();"
    },
    {
      "caller_function": null,
      "called_function": "BomberCorpse",
      "location": {
        "file": "src/BomberCorpse.h",
        "line": 11,
        "column": 0
      },
      "context": "BomberCorpse(int _x, int _y, Bomber::COLOR bomber_color, GameContext* context);"
    },
    {
      "caller_function": null,
      "called_function": "BomberCorpse",
      "location": {
        "file": "src/BomberCorpse.h",
        "line": 12,
        "column": 0
      },
      "context": "~BomberCorpse();"
    },
    {
      "caller_function": null,
      "called_function": "act",
      "location": {
        "file": "src/BomberCorpse.h",
        "line": 14,
        "column": 0
      },
      "context": "void act(float deltaTime) override;"
    },
    {
      "caller_function": null,
      "called_function": "show",
      "location": {
        "file": "src/BomberCorpse.h",
        "line": 15,
        "column": 0
      },
      "context": "void show() override;"
    },
    {
      "caller_function": null,
      "called_function": "get_type",
      "location": {
        "file": "src/BomberCorpse.h",
        "line": 17,
        "column": 0
      },
      "context": "ObjectType get_type() const override { return BOMBER_CORPSE; }"
    },
    {
      "caller_function": null,
      "called_function": "explode",
      "location": {
        "file": "src/BomberCorpse.h",
        "line": 19,
        "column": 0
      },
      "context": "void explode(); // Called when explosion hits the corpse"
    },
    {
      "caller_function": null,
      "called_function": "is_exploded",
      "location": {
        "file": "src/BomberCorpse.h",
        "line": 20,
        "column": 0
      },
      "context": "bool is_exploded() const { return exploded; }"
    },
    {
      "caller_function": null,
      "called_function": "create_gore_explosion",
      "location": {
        "file": "src/BomberCorpse.h",
        "line": 29,
        "column": 0
      },
      "context": "void create_gore_explosion();"
    },
    {
      "caller_function": null,
      "called_function": "Map",
      "location": {
        "file": "src/Map.h",
        "line": 20,
        "column": 0
      },
      "context": "Map(GameContext* context);"
    },
    {
      "caller_function": null,
      "called_function": "Map",
      "location": {
        "file": "src/Map.h",
        "line": 21,
        "column": 0
      },
      "context": "~Map();"
    },
    {
      "caller_function": null,
      "called_function": "load",
      "location": {
        "file": "src/Map.h",
        "line": 23,
        "column": 0
      },
      "context": "void load();"
    },
    {
      "caller_function": null,
      "called_function": "load_random_valid",
      "location": {
        "file": "src/Map.h",
        "line": 24,
        "column": 0
      },
      "context": "void load_random_valid();"
    },
    {
      "caller_function": null,
      "called_function": "load_next_valid",
      "location": {
        "file": "src/Map.h",
        "line": 25,
        "column": 0
      },
      "context": "void load_next_valid(int map_nr = -1);"
    },
    {
      "caller_function": null,
      "called_function": "show",
      "location": {
        "file": "src/Map.h",
        "line": 26,
        "column": 0
      },
      "context": "void show();"
    },
    {
      "caller_function": null,
      "called_function": "act",
      "location": {
        "file": "src/Map.h",
        "line": 27,
        "column": 0
      },
      "context": "void act();"
    },
    {
      "caller_function": null,
      "called_function": "refresh_holes",
      "location": {
        "file": "src/Map.h",
        "line": 28,
        "column": 0
      },
      "context": "void refresh_holes();"
    },
    {
      "caller_function": null,
      "called_function": "randomize_bomber_positions",
      "location": {
        "file": "src/Map.h",
        "line": 29,
        "column": 0
      },
      "context": "void randomize_bomber_positions();"
    },
    {
      "caller_function": null,
      "called_function": "get_tile",
      "location": {
        "file": "src/Map.h",
        "line": 32,
        "column": 0
      },
      "context": "MapTile* get_tile(int tx, int ty);  // Legacy compatibility"
    },
    {
      "caller_function": null,
      "called_function": "get_tile_entity",
      "location": {
        "file": "src/Map.h",
        "line": 33,
        "column": 0
      },
      "context": "TileEntity* get_tile_entity(int tx, int ty);  // NEW: TileEntity access"
    },
    {
      "caller_function": null,
      "called_function": "set_tile",
      "location": {
        "file": "src/Map.h",
        "line": 34,
        "column": 0
      },
      "context": "void set_tile(int tx, int ty, MapTile* tile);  // Legacy compatibility"
    },
    {
      "caller_function": null,
      "called_function": "set_tile_entity",
      "location": {
        "file": "src/Map.h",
        "line": 35,
        "column": 0
      },
      "context": "void set_tile_entity(int tx, int ty, TileEntity* tile_entity);  // NEW: TileEntity support"
    },
    {
      "caller_function": null,
      "called_function": "clear_tile_entity_at",
      "location": {
        "file": "src/Map.h",
        "line": 36,
        "column": 0
      },
      "context": "void clear_tile_entity_at(int tx, int ty);  // NEW: Clear TileEntity pointer (for use-after-free fix"
    },
    {
      "caller_function": null,
      "called_function": "pointer",
      "location": {
        "file": "src/Map.h",
        "line": 36,
        "column": 0
      },
      "context": "void clear_tile_entity_at(int tx, int ty);  // NEW: Clear TileEntity pointer (for use-after-free fix"
    },
    {
      "caller_function": null,
      "called_function": "get_bomber_pos",
      "location": {
        "file": "src/Map.h",
        "line": 37,
        "column": 0
      },
      "context": "CL_Vector get_bomber_pos(int nr);"
    },
    {
      "caller_function": null,
      "called_function": "any_valid_map",
      "location": {
        "file": "src/Map.h",
        "line": 39,
        "column": 0
      },
      "context": "bool any_valid_map();"
    },
    {
      "caller_function": null,
      "called_function": "get_map_count",
      "location": {
        "file": "src/Map.h",
        "line": 40,
        "column": 0
      },
      "context": "int get_map_count();"
    },
    {
      "caller_function": null,
      "called_function": "get_name",
      "location": {
        "file": "src/Map.h",
        "line": 41,
        "column": 0
      },
      "context": "std::string get_name();"
    },
    {
      "caller_function": null,
      "called_function": "get_author",
      "location": {
        "file": "src/Map.h",
        "line": 42,
        "column": 0
      },
      "context": "std::string get_author();"
    },
    {
      "caller_function": null,
      "called_function": "enumerate_maps",
      "location": {
        "file": "src/Map.h",
        "line": 54,
        "column": 0
      },
      "context": "void enumerate_maps();"
    },
    {
      "caller_function": null,
      "called_function": "clear",
      "location": {
        "file": "src/Map.h",
        "line": 55,
        "column": 0
      },
      "context": "void clear();"
    },
    {
      "caller_function": null,
      "called_function": "reload",
      "location": {
        "file": "src/Map.h",
        "line": 56,
        "column": 0
      },
      "context": "void reload();"
    },
    {
      "caller_function": null,
      "called_function": "MapTile",
      "location": {
        "file": "src/MapTile.h",
        "line": 22,
        "column": 0
      },
      "context": "MapTile(int x, int y, GameContext* context);"
    },
    {
      "caller_function": null,
      "called_function": "MapTile",
      "location": {
        "file": "src/MapTile.h",
        "line": 23,
        "column": 0
      },
      "context": "virtual ~MapTile();"
    },
    {
      "caller_function": null,
      "called_function": "get_type",
      "location": {
        "file": "src/MapTile.h",
        "line": 26,
        "column": 0
      },
      "context": "ObjectType get_type() const override { return MAPTILE; }"
    },
    {
      "caller_function": null,
      "called_function": "create",
      "location": {
        "file": "src/MapTile.h",
        "line": 29,
        "column": 0
      },
      "context": "static MapTile* create(MAPTILE_TYPE type, int x, int y, GameContext* context);"
    },
    {
      "caller_function": null,
      "called_function": "act",
      "location": {
        "file": "src/MapTile.h",
        "line": 31,
        "column": 0
      },
      "context": "virtual void act();"
    },
    {
      "caller_function": null,
      "called_function": "show",
      "location": {
        "file": "src/MapTile.h",
        "line": 32,
        "column": 0
      },
      "context": "virtual void show() override;"
    },
    {
      "caller_function": null,
      "called_function": "destroy",
      "location": {
        "file": "src/MapTile.h",
        "line": 33,
        "column": 0
      },
      "context": "virtual void destroy();"
    },
    {
      "caller_function": null,
      "called_function": "is_blocking",
      "location": {
        "file": "src/MapTile.h",
        "line": 35,
        "column": 0
      },
      "context": "virtual bool is_blocking() const { return blocking; }"
    },
    {
      "caller_function": null,
      "called_function": "is_destructible",
      "location": {
        "file": "src/MapTile.h",
        "line": 36,
        "column": 0
      },
      "context": "virtual bool is_destructible() const { return destructible; }"
    },
    {
      "caller_function": null,
      "called_function": "is_burnable",
      "location": {
        "file": "src/MapTile.h",
        "line": 37,
        "column": 0
      },
      "context": "virtual bool is_burnable() const { return destructible; }"
    },
    {
      "caller_function": null,
      "called_function": "has_bomb",
      "location": {
        "file": "src/MapTile.h",
        "line": 38,
        "column": 0
      },
      "context": "virtual bool has_bomb() const { return bomb != nullptr; }"
    },
    {
      "caller_function": null,
      "called_function": "has_bomber",
      "location": {
        "file": "src/MapTile.h",
        "line": 39,
        "column": 0
      },
      "context": "virtual bool has_bomber() const { return bomber != nullptr; }"
    },
    {
      "caller_function": null,
      "called_function": "get_tile_type",
      "location": {
        "file": "src/MapTile.h",
        "line": 42,
        "column": 0
      },
      "context": "virtual int get_tile_type() const {"
    },
    {
      "caller_function": "r",
      "called_function": "spawn_extra",
      "location": {
        "file": "src/MapTile.h",
        "line": 55,
        "column": 0
      },
      "context": "void spawn_extra();"
    },
    {
      "caller_function": null,
      "called_function": "MapTile_Ground",
      "location": {
        "file": "src/MapTile_Ground.h",
        "line": 8,
        "column": 0
      },
      "context": "MapTile_Ground(int x, int y, GameContext* context);"
    },
    {
      "caller_function": null,
      "called_function": "MapTile_Ground",
      "location": {
        "file": "src/MapTile_Ground.h",
        "line": 9,
        "column": 0
      },
      "context": "~MapTile_Ground();"
    },
    {
      "caller_function": null,
      "called_function": "MapTile_Wall",
      "location": {
        "file": "src/MapTile_Wall.h",
        "line": 8,
        "column": 0
      },
      "context": "MapTile_Wall(int x, int y, GameContext* context);"
    },
    {
      "caller_function": null,
      "called_function": "MapTile_Wall",
      "location": {
        "file": "src/MapTile_Wall.h",
        "line": 9,
        "column": 0
      },
      "context": "~MapTile_Wall();"
    },
    {
      "caller_function": null,
      "called_function": "is_blocking",
      "location": {
        "file": "src/MapTile_Wall.h",
        "line": 11,
        "column": 0
      },
      "context": "bool is_blocking() const override { return true; }"
    },
    {
      "caller_function": null,
      "called_function": "MapTile_Box",
      "location": {
        "file": "src/MapTile_Box.h",
        "line": 8,
        "column": 0
      },
      "context": "MapTile_Box(int _x, int _y, GameContext* _context);"
    },
    {
      "caller_function": null,
      "called_function": "MapTile_Box",
      "location": {
        "file": "src/MapTile_Box.h",
        "line": 9,
        "column": 0
      },
      "context": "~MapTile_Box();"
    },
    {
      "caller_function": null,
      "called_function": "act",
      "location": {
        "file": "src/MapTile_Box.h",
        "line": 11,
        "column": 0
      },
      "context": "void act() override;"
    },
    {
      "caller_function": null,
      "called_function": "show",
      "location": {
        "file": "src/MapTile_Box.h",
        "line": 12,
        "column": 0
      },
      "context": "void show() override;"
    },
    {
      "caller_function": null,
      "called_function": "destroy",
      "location": {
        "file": "src/MapTile_Box.h",
        "line": 13,
        "column": 0
      },
      "context": "void destroy() override;"
    },
    {
      "caller_function": null,
      "called_function": "is_burnable",
      "location": {
        "file": "src/MapTile_Box.h",
        "line": 15,
        "column": 0
      },
      "context": "bool is_burnable() const override {"
    },
    {
      "caller_function": null,
      "called_function": "is_blocking",
      "location": {
        "file": "src/MapTile_Box.h",
        "line": 20,
        "column": 0
      },
      "context": "bool is_blocking() const override { return blocking && !destroyed; }"
    },
    {
      "caller_function": null,
      "called_function": "TileEntity",
      "location": {
        "file": "src/TileEntity.h",
        "line": 17,
        "column": 0
      },
      "context": "TileEntity(MapTile_Pure* tile_data, GameContext* context);"
    },
    {
      "caller_function": null,
      "called_function": "TileEntity",
      "location": {
        "file": "src/TileEntity.h",
        "line": 18,
        "column": 0
      },
      "context": "virtual ~TileEntity();"
    },
    {
      "caller_function": null,
      "called_function": "get_type",
      "location": {
        "file": "src/TileEntity.h",
        "line": 21,
        "column": 0
      },
      "context": "ObjectType get_type() const override { return MAPTILE; }"
    },
    {
      "caller_function": null,
      "called_function": "act",
      "location": {
        "file": "src/TileEntity.h",
        "line": 22,
        "column": 0
      },
      "context": "void act(float deltaTime) override;"
    },
    {
      "caller_function": null,
      "called_function": "show",
      "location": {
        "file": "src/TileEntity.h",
        "line": 23,
        "column": 0
      },
      "context": "void show() override;"
    },
    {
      "caller_function": null,
      "called_function": "get_tile_data",
      "location": {
        "file": "src/TileEntity.h",
        "line": 26,
        "column": 0
      },
      "context": "MapTile_Pure* get_tile_data() const { return tile_data; }"
    },
    {
      "caller_function": null,
      "called_function": "get_tile_type",
      "location": {
        "file": "src/TileEntity.h",
        "line": 27,
        "column": 0
      },
      "context": "MapTile_Pure::TILE_TYPE get_tile_type() const { return tile_data ? tile_data->get_type() : MapTile_P"
    },
    {
      "caller_function": null,
      "called_function": "get_type",
      "location": {
        "file": "src/TileEntity.h",
        "line": 27,
        "column": 0
      },
      "context": "MapTile_Pure::TILE_TYPE get_tile_type() const { return tile_data ? tile_data->get_type() : MapTile_P"
    },
    {
      "caller_function": null,
      "called_function": "is_blocking",
      "location": {
        "file": "src/TileEntity.h",
        "line": 30,
        "column": 0
      },
      "context": "bool is_blocking() const {"
    },
    {
      "caller_function": "f",
      "called_function": "TileEntity::is_blocking",
      "location": {
        "file": "src/TileEntity.h",
        "line": 32,
        "column": 0
      },
      "context": "SDL_Log(\"ERROR: TileEntity::is_blocking() - corrupted tile_data pointer: %p\", tile_data);"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/TileEntity.h",
        "line": 32,
        "column": 0
      },
      "context": "SDL_Log(\"ERROR: TileEntity::is_blocking() - corrupted tile_data pointer: %p\", tile_data);"
    },
    {
      "caller_function": "f",
      "called_function": "is_blocking",
      "location": {
        "file": "src/TileEntity.h",
        "line": 32,
        "column": 0
      },
      "context": "SDL_Log(\"ERROR: TileEntity::is_blocking() - corrupted tile_data pointer: %p\", tile_data);"
    },
    {
      "caller_function": "f",
      "called_function": "is_blocking",
      "location": {
        "file": "src/TileEntity.h",
        "line": 35,
        "column": 0
      },
      "context": "return tile_data->is_blocking();"
    },
    {
      "caller_function": "f",
      "called_function": "is_destructible",
      "location": {
        "file": "src/TileEntity.h",
        "line": 37,
        "column": 0
      },
      "context": "bool is_destructible() const {"
    },
    {
      "caller_function": "f",
      "called_function": "TileEntity::is_destructible",
      "location": {
        "file": "src/TileEntity.h",
        "line": 39,
        "column": 0
      },
      "context": "SDL_Log(\"ERROR: TileEntity::is_destructible() - corrupted tile_data pointer: %p (TileEntity at %p)\","
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/TileEntity.h",
        "line": 39,
        "column": 0
      },
      "context": "SDL_Log(\"ERROR: TileEntity::is_destructible() - corrupted tile_data pointer: %p (TileEntity at %p)\","
    },
    {
      "caller_function": "f",
      "called_function": "is_destructible",
      "location": {
        "file": "src/TileEntity.h",
        "line": 39,
        "column": 0
      },
      "context": "SDL_Log(\"ERROR: TileEntity::is_destructible() - corrupted tile_data pointer: %p (TileEntity at %p)\","
    },
    {
      "caller_function": "f",
      "called_function": "is_destructible",
      "location": {
        "file": "src/TileEntity.h",
        "line": 42,
        "column": 0
      },
      "context": "return tile_data->is_destructible();"
    },
    {
      "caller_function": "f",
      "called_function": "is_burnable",
      "location": {
        "file": "src/TileEntity.h",
        "line": 44,
        "column": 0
      },
      "context": "bool is_burnable() const {"
    },
    {
      "caller_function": "f",
      "called_function": "TileEntity::is_burnable",
      "location": {
        "file": "src/TileEntity.h",
        "line": 46,
        "column": 0
      },
      "context": "SDL_Log(\"ERROR: TileEntity::is_burnable() - corrupted tile_data pointer: %p\", tile_data);"
    },
    {
      "caller_function": "f",
      "called_function": "SDL_Log",
      "location": {
        "file": "src/TileEntity.h",
        "line": 46,
        "column": 0
      },
      "context": "SDL_Log(\"ERROR: TileEntity::is_burnable() - corrupted tile_data pointer: %p\", tile_data);"
    },
    {
      "caller_function": "f",
      "called_function": "is_burnable",
      "location": {
        "file": "src/TileEntity.h",
        "line": 46,
        "column": 0
      },
      "context": "SDL_Log(\"ERROR: TileEntity::is_burnable() - corrupted tile_data pointer: %p\", tile_data);"
    },
    {
      "caller_function": "f",
      "called_function": "is_burnable",
      "location": {
        "file": "src/TileEntity.h",
        "line": 49,
        "column": 0
      },
      "context": "return tile_data->is_burnable();"
    },
    {
      "caller_function": "f",
      "called_function": "has_bomb",
      "location": {
        "file": "src/TileEntity.h",
        "line": 51,
        "column": 0
      },
      "context": "bool has_bomb() const { return tile_data ? tile_data->has_bomb() : false; }"
    },
    {
      "caller_function": "f",
      "called_function": "has_bomb",
      "location": {
        "file": "src/TileEntity.h",
        "line": 51,
        "column": 0
      },
      "context": "bool has_bomb() const { return tile_data ? tile_data->has_bomb() : false; }"
    },
    {
      "caller_function": "f",
      "called_function": "has_bomber",
      "location": {
        "file": "src/TileEntity.h",
        "line": 52,
        "column": 0
      },
      "context": "bool has_bomber() const { return tile_data ? tile_data->has_bomber() : false; }"
    },
    {
      "caller_function": "f",
      "called_function": "has_bomber",
      "location": {
        "file": "src/TileEntity.h",
        "line": 52,
        "column": 0
      },
      "context": "bool has_bomber() const { return tile_data ? tile_data->has_bomber() : false; }"
    },
    {
      "caller_function": "b",
      "called_function": "get_bomb",
      "location": {
        "file": "src/TileEntity.h",
        "line": 56,
        "column": 0
      },
      "context": "Bomb* get_bomb() const { return tile_data ? tile_data->get_bomb() : nullptr; }"
    },
    {
      "caller_function": "b",
      "called_function": "get_bomb",
      "location": {
        "file": "src/TileEntity.h",
        "line": 56,
        "column": 0
      },
      "context": "Bomb* get_bomb() const { return tile_data ? tile_data->get_bomb() : nullptr; }"
    },
    {
      "caller_function": "r",
      "called_function": "get_bomber",
      "location": {
        "file": "src/TileEntity.h",
        "line": 58,
        "column": 0
      },
      "context": "Bomber* get_bomber() const { return tile_data ? tile_data->get_bomber() : nullptr; }"
    },
    {
      "caller_function": "r",
      "called_function": "get_bomber",
      "location": {
        "file": "src/TileEntity.h",
        "line": 58,
        "column": 0
      },
      "context": "Bomber* get_bomber() const { return tile_data ? tile_data->get_bomber() : nullptr; }"
    },
    {
      "caller_function": "r",
      "called_function": "destroy",
      "location": {
        "file": "src/TileEntity.h",
        "line": 61,
        "column": 0
      },
      "context": "virtual void destroy();"
    },
    {
      "caller_function": "r",
      "called_function": "spawn_extra",
      "location": {
        "file": "src/TileEntity.h",
        "line": 62,
        "column": 0
      },
      "context": "void spawn_extra();"
    },
    {
      "caller_function": "r",
      "called_function": "get_map_x",
      "location": {
        "file": "src/TileEntity.h",
        "line": 65,
        "column": 0
      },
      "context": "int get_map_x() const { return tile_data ? tile_data->get_grid_x() : 0; }"
    },
    {
      "caller_function": "r",
      "called_function": "get_grid_x",
      "location": {
        "file": "src/TileEntity.h",
        "line": 65,
        "column": 0
      },
      "context": "int get_map_x() const { return tile_data ? tile_data->get_grid_x() : 0; }"
    },
    {
      "caller_function": "r",
      "called_function": "get_map_y",
      "location": {
        "file": "src/TileEntity.h",
        "line": 66,
        "column": 0
      },
      "context": "int get_map_y() const { return tile_data ? tile_data->get_grid_y() : 0; }"
    },
    {
      "caller_function": "r",
      "called_function": "get_grid_y",
      "location": {
        "file": "src/TileEntity.h",
        "line": 66,
        "column": 0
      },
      "context": "int get_map_y() const { return tile_data ? tile_data->get_grid_y() : 0; }"
    },
    {
      "caller_function": "r",
      "called_function": "is_destroyed",
      "location": {
        "file": "src/TileEntity.h",
        "line": 69,
        "column": 0
      },
      "context": "bool is_destroyed() const { return destroyed; }"
    },
    {
      "caller_function": "r",
      "called_function": "update_destruction_animation",
      "location": {
        "file": "src/TileEntity.h",
        "line": 82,
        "column": 0
      },
      "context": "void update_destruction_animation(float deltaTime);"
    },
    {
      "caller_function": "r",
      "called_function": "render_destruction_effects",
      "location": {
        "file": "src/TileEntity.h",
        "line": 83,
        "column": 0
      },
      "context": "void render_destruction_effects();"
    },
    {
      "caller_function": "r",
      "called_function": "TileEntity_Box",
      "location": {
        "file": "src/TileEntity.h",
        "line": 90,
        "column": 0
      },
      "context": "TileEntity_Box(MapTile_Pure* tile_data, GameContext* context);"
    },
    {
      "caller_function": "r",
      "called_function": "act",
      "location": {
        "file": "src/TileEntity.h",
        "line": 92,
        "column": 0
      },
      "context": "void act(float deltaTime) override;"
    },
    {
      "caller_function": "r",
      "called_function": "show",
      "location": {
        "file": "src/TileEntity.h",
        "line": 93,
        "column": 0
      },
      "context": "void show() override;"
    },
    {
      "caller_function": "r",
      "called_function": "destroy",
      "location": {
        "file": "src/TileEntity.h",
        "line": 94,
        "column": 0
      },
      "context": "void destroy() override;"
    },
    {
      "caller_function": "r",
      "called_function": "render_fragmentation_effects",
      "location": {
        "file": "src/TileEntity.h",
        "line": 97,
        "column": 0
      },
      "context": "void render_fragmentation_effects();"
    },
    {
      "caller_function": "D",
      "called_function": "Vector2D",
      "location": {
        "file": "src/CorpsePart.h",
        "line": 11,
        "column": 0
      },
      "context": "Vector2D operator+(const Vector2D& v) const { return Vector2D(x + v.x, y + v.y); }"
    },
    {
      "caller_function": "D",
      "called_function": "Vector2D",
      "location": {
        "file": "src/CorpsePart.h",
        "line": 12,
        "column": 0
      },
      "context": "Vector2D operator-(const Vector2D& v) const { return Vector2D(x - v.x, y - v.y); }"
    },
    {
      "caller_function": "D",
      "called_function": "Vector2D",
      "location": {
        "file": "src/CorpsePart.h",
        "line": 13,
        "column": 0
      },
      "context": "Vector2D operator*(float s) const { return Vector2D(x * s, y * s); }"
    },
    {
      "caller_function": "D",
      "called_function": "std::sqrt",
      "location": {
        "file": "src/CorpsePart.h",
        "line": 14,
        "column": 0
      },
      "context": "float magnitude() const { return std::sqrt(x*x + y*y); }"
    },
    {
      "caller_function": "D",
      "called_function": "magnitude",
      "location": {
        "file": "src/CorpsePart.h",
        "line": 14,
        "column": 0
      },
      "context": "float magnitude() const { return std::sqrt(x*x + y*y); }"
    },
    {
      "caller_function": "D",
      "called_function": "sqrt",
      "location": {
        "file": "src/CorpsePart.h",
        "line": 14,
        "column": 0
      },
      "context": "float magnitude() const { return std::sqrt(x*x + y*y); }"
    },
    {
      "caller_function": "D",
      "called_function": "normalized",
      "location": {
        "file": "src/CorpsePart.h",
        "line": 15,
        "column": 0
      },
      "context": "Vector2D normalized() const { float m = magnitude(); return m > 0 ? *this * (1.0f/m) : Vector2D(); }"
    },
    {
      "caller_function": "D",
      "called_function": "magnitude",
      "location": {
        "file": "src/CorpsePart.h",
        "line": 15,
        "column": 0
      },
      "context": "Vector2D normalized() const { float m = magnitude(); return m > 0 ? *this * (1.0f/m) : Vector2D(); }"
    },
    {
      "caller_function": "D",
      "called_function": "Vector2D",
      "location": {
        "file": "src/CorpsePart.h",
        "line": 15,
        "column": 0
      },
      "context": "Vector2D normalized() const { float m = magnitude(); return m > 0 ? *this * (1.0f/m) : Vector2D(); }"
    },
    {
      "caller_function": "D",
      "called_function": "CorpsePart",
      "location": {
        "file": "src/CorpsePart.h",
        "line": 27,
        "column": 0
      },
      "context": "CorpsePart(int _x, int _y, int part_type, float velocity_x, float velocity_y, float explosion_force,"
    },
    {
      "caller_function": "D",
      "called_function": "CorpsePart",
      "location": {
        "file": "src/CorpsePart.h",
        "line": 28,
        "column": 0
      },
      "context": "~CorpsePart();"
    },
    {
      "caller_function": "D",
      "called_function": "act",
      "location": {
        "file": "src/CorpsePart.h",
        "line": 30,
        "column": 0
      },
      "context": "void act(float deltaTime) override;"
    },
    {
      "caller_function": "D",
      "called_function": "show",
      "location": {
        "file": "src/CorpsePart.h",
        "line": 31,
        "column": 0
      },
      "context": "void show() override;"
    },
    {
      "caller_function": "D",
      "called_function": "get_type",
      "location": {
        "file": "src/CorpsePart.h",
        "line": 33,
        "column": 0
      },
      "context": "ObjectType get_type() const override { return CORPSE_PART; }"
    },
    {
      "caller_function": "D",
      "called_function": "apply_force",
      "location": {
        "file": "src/CorpsePart.h",
        "line": 66,
        "column": 0
      },
      "context": "void apply_force(const Vector2D& force);"
    },
    {
      "caller_function": "D",
      "called_function": "apply_drag",
      "location": {
        "file": "src/CorpsePart.h",
        "line": 67,
        "column": 0
      },
      "context": "void apply_drag();"
    },
    {
      "caller_function": "D",
      "called_function": "apply_gravity",
      "location": {
        "file": "src/CorpsePart.h",
        "line": 68,
        "column": 0
      },
      "context": "void apply_gravity();"
    },
    {
      "caller_function": "D",
      "called_function": "handle_collisions",
      "location": {
        "file": "src/CorpsePart.h",
        "line": 69,
        "column": 0
      },
      "context": "void handle_collisions(float deltaTime);"
    },
    {
      "caller_function": "D",
      "called_function": "update_blood_trail",
      "location": {
        "file": "src/CorpsePart.h",
        "line": 70,
        "column": 0
      },
      "context": "void update_blood_trail(float deltaTime);"
    },
    {
      "caller_function": "D",
      "called_function": "emit_blood",
      "location": {
        "file": "src/CorpsePart.h",
        "line": 71,
        "column": 0
      },
      "context": "void emit_blood();"
    },
    {
      "caller_function": "D",
      "called_function": "render_blood_trails",
      "location": {
        "file": "src/CorpsePart.h",
        "line": 74,
        "column": 0
      },
      "context": "void render_blood_trails();"
    },
    {
      "caller_function": "D",
      "called_function": "get_part_mass",
      "location": {
        "file": "src/CorpsePart.h",
        "line": 75,
        "column": 0
      },
      "context": "float get_part_mass(int part_type);"
    },
    {
      "caller_function": "D",
      "called_function": "get_part_surface_area",
      "location": {
        "file": "src/CorpsePart.h",
        "line": 76,
        "column": 0
      },
      "context": "float get_part_surface_area(int part_type);"
    },
    {
      "caller_function": null,
      "called_function": "skates",
      "location": {
        "file": "src/Extra.h",
        "line": 14,
        "column": 0
      },
      "context": "SKATE = 5,        // Ice skates (slide on ice)"
    },
    {
      "caller_function": null,
      "called_function": "Extra",
      "location": {
        "file": "src/Extra.h",
        "line": 20,
        "column": 0
      },
      "context": "Extra(int _x, int _y, EXTRA_TYPE _type, GameContext* context);"
    },
    {
      "caller_function": null,
      "called_function": "Extra",
      "location": {
        "file": "src/Extra.h",
        "line": 21,
        "column": 0
      },
      "context": "~Extra();"
    },
    {
      "caller_function": null,
      "called_function": "act",
      "location": {
        "file": "src/Extra.h",
        "line": 23,
        "column": 0
      },
      "context": "void act(float deltaTime) override;"
    },
    {
      "caller_function": null,
      "called_function": "show",
      "location": {
        "file": "src/Extra.h",
        "line": 24,
        "column": 0
      },
      "context": "void show() override;"
    },
    {
      "caller_function": null,
      "called_function": "get_type",
      "location": {
        "file": "src/Extra.h",
        "line": 26,
        "column": 0
      },
      "context": "ObjectType get_type() const override { return EXTRA; }"
    },
    {
      "caller_function": null,
      "called_function": "get_extra_type",
      "location": {
        "file": "src/Extra.h",
        "line": 27,
        "column": 0
      },
      "context": "EXTRA_TYPE get_extra_type() const { return extra_type; }"
    },
    {
      "caller_function": null,
      "called_function": "is_collected",
      "location": {
        "file": "src/Extra.h",
        "line": 29,
        "column": 0
      },
      "context": "bool is_collected() const { return collected; }"
    },
    {
      "caller_function": null,
      "called_function": "collect",
      "location": {
        "file": "src/Extra.h",
        "line": 30,
        "column": 0
      },
      "context": "void collect();"
    },
    {
      "caller_function": null,
      "called_function": "apply_effect_to_bomber",
      "location": {
        "file": "src/Extra.h",
        "line": 33,
        "column": 0
      },
      "context": "void apply_effect_to_bomber(class Bomber* bomber);"
    },
    {
      "caller_function": null,
      "called_function": "death",
      "location": {
        "file": "src/Controller_AI_Modern.h",
        "line": 20,
        "column": 0
      },
      "context": "#define RATING_X         -666    // Absolute death (explosion, hole)"
    },
    {
      "caller_function": null,
      "called_function": "AIJob",
      "location": {
        "file": "src/Controller_AI_Modern.h",
        "line": 46,
        "column": 0
      },
      "context": "AIJob(Controller_AI_Modern* controller);"
    },
    {
      "caller_function": null,
      "called_function": "AIJob",
      "location": {
        "file": "src/Controller_AI_Modern.h",
        "line": 47,
        "column": 0
      },
      "context": "virtual ~AIJob();"
    },
    {
      "caller_function": null,
      "called_function": "is_finished",
      "location": {
        "file": "src/Controller_AI_Modern.h",
        "line": 49,
        "column": 0
      },
      "context": "bool is_finished() const { return finished; }"
    },
    {
      "caller_function": null,
      "called_function": "is_obsolete",
      "location": {
        "file": "src/Controller_AI_Modern.h",
        "line": 50,
        "column": 0
      },
      "context": "bool is_obsolete() const { return obsolete; }"
    },
    {
      "caller_function": null,
      "called_function": "execute",
      "location": {
        "file": "src/Controller_AI_Modern.h",
        "line": 52,
        "column": 0
      },
      "context": "virtual void execute() = 0;"
    },
    {
      "caller_function": "t",
      "called_function": "AIJob_Go",
      "location": {
        "file": "src/Controller_AI_Modern.h",
        "line": 67,
        "column": 0
      },
      "context": "AIJob_Go(Controller_AI_Modern* controller, int direction, int distance = 1);"
    },
    {
      "caller_function": "t",
      "called_function": "AIJob_Go",
      "location": {
        "file": "src/Controller_AI_Modern.h",
        "line": 68,
        "column": 0
      },
      "context": "virtual ~AIJob_Go();"
    },
    {
      "caller_function": "t",
      "called_function": "execute",
      "location": {
        "file": "src/Controller_AI_Modern.h",
        "line": 70,
        "column": 0
      },
      "context": "void execute() override;"
    },
    {
      "caller_function": "t",
      "called_function": "init",
      "location": {
        "file": "src/Controller_AI_Modern.h",
        "line": 71,
        "column": 0
      },
      "context": "void init() override;"
    },
    {
      "caller_function": "t",
      "called_function": "AIJob_PutBomb",
      "location": {
        "file": "src/Controller_AI_Modern.h",
        "line": 82,
        "column": 0
      },
      "context": "AIJob_PutBomb(Controller_AI_Modern* controller);"
    },
    {
      "caller_function": "t",
      "called_function": "AIJob_PutBomb",
      "location": {
        "file": "src/Controller_AI_Modern.h",
        "line": 83,
        "column": 0
      },
      "context": "virtual ~AIJob_PutBomb();"
    },
    {
      "caller_function": "t",
      "called_function": "execute",
      "location": {
        "file": "src/Controller_AI_Modern.h",
        "line": 85,
        "column": 0
      },
      "context": "void execute() override;"
    },
    {
      "caller_function": "t",
      "called_function": "AIJob_Wait",
      "location": {
        "file": "src/Controller_AI_Modern.h",
        "line": 91,
        "column": 0
      },
      "context": "AIJob_Wait(Controller_AI_Modern* controller, float duration);"
    },
    {
      "caller_function": "t",
      "called_function": "AIJob_Wait",
      "location": {
        "file": "src/Controller_AI_Modern.h",
        "line": 92,
        "column": 0
      },
      "context": "virtual ~AIJob_Wait();"
    },
    {
      "caller_function": "t",
      "called_function": "execute",
      "location": {
        "file": "src/Controller_AI_Modern.h",
        "line": 94,
        "column": 0
      },
      "context": "void execute() override;"
    },
    {
      "caller_function": "t",
      "called_function": "Controller_AI_Modern",
      "location": {
        "file": "src/Controller_AI_Modern.h",
        "line": 106,
        "column": 0
      },
      "context": "Controller_AI_Modern(ModernAIPersonality personality = ModernAIPersonality::NORMAL);"
    },
    {
      "caller_function": "t",
      "called_function": "Controller_AI_Modern",
      "location": {
        "file": "src/Controller_AI_Modern.h",
        "line": 107,
        "column": 0
      },
      "context": "virtual ~Controller_AI_Modern();"
    },
    {
      "caller_function": "t",
      "called_function": "update",
      "location": {
        "file": "src/Controller_AI_Modern.h",
        "line": 109,
        "column": 0
      },
      "context": "void update() override;"
    },
    {
      "caller_function": "t",
      "called_function": "reset",
      "location": {
        "file": "src/Controller_AI_Modern.h",
        "line": 110,
        "column": 0
      },
      "context": "void reset() override;"
    },
    {
      "caller_function": "t",
      "called_function": "attach",
      "location": {
        "file": "src/Controller_AI_Modern.h",
        "line": 111,
        "column": 0
      },
      "context": "void attach(Bomber* _bomber) override;"
    },
    {
      "caller_function": "t",
      "called_function": "is_left",
      "location": {
        "file": "src/Controller_AI_Modern.h",
        "line": 113,
        "column": 0
      },
      "context": "bool is_left() override { return current_dir == DIR_LEFT && active; }"
    },
    {
      "caller_function": "t",
      "called_function": "is_right",
      "location": {
        "file": "src/Controller_AI_Modern.h",
        "line": 114,
        "column": 0
      },
      "context": "bool is_right() override { return current_dir == DIR_RIGHT && active; }"
    },
    {
      "caller_function": "t",
      "called_function": "is_up",
      "location": {
        "file": "src/Controller_AI_Modern.h",
        "line": 115,
        "column": 0
      },
      "context": "bool is_up() override { return current_dir == DIR_UP && active; }"
    },
    {
      "caller_function": "t",
      "called_function": "is_down",
      "location": {
        "file": "src/Controller_AI_Modern.h",
        "line": 116,
        "column": 0
      },
      "context": "bool is_down() override { return current_dir == DIR_DOWN && active; }"
    },
    {
      "caller_function": "t",
      "called_function": "is_bomb",
      "location": {
        "file": "src/Controller_AI_Modern.h",
        "line": 117,
        "column": 0
      },
      "context": "bool is_bomb() override;"
    },
    {
      "caller_function": "t",
      "called_function": "set_personality",
      "location": {
        "file": "src/Controller_AI_Modern.h",
        "line": 120,
        "column": 0
      },
      "context": "void set_personality(ModernAIPersonality personality);"
    },
    {
      "caller_function": "t",
      "called_function": "get_current_state",
      "location": {
        "file": "src/Controller_AI_Modern.h",
        "line": 123,
        "column": 0
      },
      "context": "std::string get_current_state() const;"
    },
    {
      "caller_function": "t",
      "called_function": "get_personality",
      "location": {
        "file": "src/Controller_AI_Modern.h",
        "line": 124,
        "column": 0
      },
      "context": "ModernAIPersonality get_personality() const { return personality; }"
    },
    {
      "caller_function": "t",
      "called_function": "generate_rating_map",
      "location": {
        "file": "src/Controller_AI_Modern.h",
        "line": 132,
        "column": 0
      },
      "context": "void generate_rating_map();"
    },
    {
      "caller_function": "t",
      "called_function": "job_ready",
      "location": {
        "file": "src/Controller_AI_Modern.h",
        "line": 133,
        "column": 0
      },
      "context": "bool job_ready();"
    },
    {
      "caller_function": "t",
      "called_function": "do_job",
      "location": {
        "file": "src/Controller_AI_Modern.h",
        "line": 134,
        "column": 0
      },
      "context": "void do_job();"
    },
    {
      "caller_function": "t",
      "called_function": "find_new_jobs",
      "location": {
        "file": "src/Controller_AI_Modern.h",
        "line": 135,
        "column": 0
      },
      "context": "void find_new_jobs();"
    },
    {
      "caller_function": "t",
      "called_function": "clear_all_jobs",
      "location": {
        "file": "src/Controller_AI_Modern.h",
        "line": 136,
        "column": 0
      },
      "context": "void clear_all_jobs();"
    },
    {
      "caller_function": "t",
      "called_function": "find_way",
      "location": {
        "file": "src/Controller_AI_Modern.h",
        "line": 139,
        "column": 0
      },
      "context": "bool find_way(int dest_rating = 0, int avoid_rating = RATING_X, int max_distance = 999);"
    },
    {
      "caller_function": "t",
      "called_function": "avoid_bombs",
      "location": {
        "file": "src/Controller_AI_Modern.h",
        "line": 142,
        "column": 0
      },
      "context": "bool avoid_bombs();"
    },
    {
      "caller_function": "t",
      "called_function": "find_bombing_opportunities",
      "location": {
        "file": "src/Controller_AI_Modern.h",
        "line": 143,
        "column": 0
      },
      "context": "bool find_bombing_opportunities(int max_distance = 5);"
    },
    {
      "caller_function": "t",
      "called_function": "apply_bomb_rating",
      "location": {
        "file": "src/Controller_AI_Modern.h",
        "line": 144,
        "column": 0
      },
      "context": "void apply_bomb_rating(int x, int y, int power, float countdown, int dir);"
    },
    {
      "caller_function": "t",
      "called_function": "is_hotspot",
      "location": {
        "file": "src/Controller_AI_Modern.h",
        "line": 147,
        "column": 0
      },
      "context": "bool is_hotspot(int x, int y) const;"
    },
    {
      "caller_function": "t",
      "called_function": "is_death",
      "location": {
        "file": "src/Controller_AI_Modern.h",
        "line": 148,
        "column": 0
      },
      "context": "bool is_death(int x, int y) const;"
    },
    {
      "caller_function": "t",
      "called_function": "can_escape_from_bomb",
      "location": {
        "file": "src/Controller_AI_Modern.h",
        "line": 149,
        "column": 0
      },
      "context": "bool can_escape_from_bomb(int x, int y) const;"
    },
    {
      "caller_function": "t",
      "called_function": "is_starting_corner_position",
      "location": {
        "file": "src/Controller_AI_Modern.h",
        "line": 152,
        "column": 0
      },
      "context": "bool is_starting_corner_position(int x, int y) const;"
    },
    {
      "caller_function": "t",
      "called_function": "can_escape_from_bomb_safely",
      "location": {
        "file": "src/Controller_AI_Modern.h",
        "line": 153,
        "column": 0
      },
      "context": "bool can_escape_from_bomb_safely(int x, int y) const;"
    },
    {
      "caller_function": "t",
      "called_function": "bombing_is_beneficial",
      "location": {
        "file": "src/Controller_AI_Modern.h",
        "line": 154,
        "column": 0
      },
      "context": "bool bombing_is_beneficial(int x, int y) const;"
    },
    {
      "caller_function": "t",
      "called_function": "should_move_to_better_position",
      "location": {
        "file": "src/Controller_AI_Modern.h",
        "line": 155,
        "column": 0
      },
      "context": "bool should_move_to_better_position();"
    },
    {
      "caller_function": "t",
      "called_function": "count_active_bombs",
      "location": {
        "file": "src/Controller_AI_Modern.h",
        "line": 158,
        "column": 0
      },
      "context": "int count_active_bombs() const;"
    },
    {
      "caller_function": "t",
      "called_function": "get_max_bombs",
      "location": {
        "file": "src/Controller_AI_Modern.h",
        "line": 159,
        "column": 0
      },
      "context": "int get_max_bombs() const;"
    },
    {
      "caller_function": "t",
      "called_function": "add_escape_sequence",
      "location": {
        "file": "src/Controller_AI_Modern.h",
        "line": 160,
        "column": 0
      },
      "context": "void add_escape_sequence(int bomb_x, int bomb_y);"
    },
    {
      "caller_function": "t",
      "called_function": "find_best_escape_direction",
      "location": {
        "file": "src/Controller_AI_Modern.h",
        "line": 161,
        "column": 0
      },
      "context": "int find_best_escape_direction(int bomb_x, int bomb_y) const;"
    },
    {
      "caller_function": "t",
      "called_function": "evaluate_escape_direction",
      "location": {
        "file": "src/Controller_AI_Modern.h",
        "line": 162,
        "column": 0
      },
      "context": "int evaluate_escape_direction(int bomb_x, int bomb_y, int direction) const;"
    },
    {
      "caller_function": "t",
      "called_function": "count_nearby_threats",
      "location": {
        "file": "src/Controller_AI_Modern.h",
        "line": 163,
        "column": 0
      },
      "context": "int count_nearby_threats(int x, int y) const;"
    },
    {
      "caller_function": "t",
      "called_function": "bomber_rating",
      "location": {
        "file": "src/Controller_AI_Modern.h",
        "line": 166,
        "column": 0
      },
      "context": "int bomber_rating(int x, int y) const;"
    },
    {
      "caller_function": "t",
      "called_function": "extra_rating",
      "location": {
        "file": "src/Controller_AI_Modern.h",
        "line": 167,
        "column": 0
      },
      "context": "int extra_rating(int x, int y) const;"
    },
    {
      "caller_function": "t",
      "called_function": "get_aggression_modifier",
      "location": {
        "file": "src/Controller_AI_Modern.h",
        "line": 170,
        "column": 0
      },
      "context": "float get_aggression_modifier() const;"
    },
    {
      "caller_function": "t",
      "called_function": "get_reaction_delay",
      "location": {
        "file": "src/Controller_AI_Modern.h",
        "line": 171,
        "column": 0
      },
      "context": "float get_reaction_delay() const;"
    },
    {
      "caller_function": "t",
      "called_function": "should_hunt_enemies",
      "location": {
        "file": "src/Controller_AI_Modern.h",
        "line": 172,
        "column": 0
      },
      "context": "bool should_hunt_enemies() const;"
    },
    {
      "caller_function": null,
      "called_function": "GameLogic",
      "location": {
        "file": "src/GameLogic.h",
        "line": 25,
        "column": 0
      },
      "context": "explicit GameLogic(GameContext* context);"
    },
    {
      "caller_function": null,
      "called_function": "GameLogic",
      "location": {
        "file": "src/GameLogic.h",
        "line": 26,
        "column": 0
      },
      "context": "~GameLogic() = default;"
    },
    {
      "caller_function": null,
      "called_function": "update_frame",
      "location": {
        "file": "src/GameLogic.h",
        "line": 34,
        "column": 0
      },
      "context": "void update_frame(float deltaTime);"
    },
    {
      "caller_function": null,
      "called_function": "update_all_objects",
      "location": {
        "file": "src/GameLogic.h",
        "line": 40,
        "column": 0
      },
      "context": "void update_all_objects(float deltaTime);"
    },
    {
      "caller_function": null,
      "called_function": "render_all_objects",
      "location": {
        "file": "src/GameLogic.h",
        "line": 45,
        "column": 0
      },
      "context": "void render_all_objects();"
    },
    {
      "caller_function": null,
      "called_function": "cleanup_deleted_objects",
      "location": {
        "file": "src/GameLogic.h",
        "line": 50,
        "column": 0
      },
      "context": "void cleanup_deleted_objects();"
    },
    {
      "caller_function": null,
      "called_function": "find_object_by_id",
      "location": {
        "file": "src/GameLogic.h",
        "line": 59,
        "column": 0
      },
      "context": "GameObject* find_object_by_id(int object_id) const;"
    },
    {
      "caller_function": null,
      "called_function": "find_bomber_by_id",
      "location": {
        "file": "src/GameLogic.h",
        "line": 66,
        "column": 0
      },
      "context": "Bomber* find_bomber_by_id(int bomber_id) const;"
    },
    {
      "caller_function": null,
      "called_function": "count_active_objects",
      "location": {
        "file": "src/GameLogic.h",
        "line": 72,
        "column": 0
      },
      "context": "size_t count_active_objects() const;"
    },
    {
      "caller_function": null,
      "called_function": "clear_all_objects",
      "location": {
        "file": "src/GameLogic.h",
        "line": 77,
        "column": 0
      },
      "context": "void clear_all_objects();"
    },
    {
      "caller_function": "d",
      "called_function": "is_game_paused",
      "location": {
        "file": "src/GameLogic.h",
        "line": 91,
        "column": 0
      },
      "context": "bool is_game_paused() const { return is_paused; }"
    },
    {
      "caller_function": "d",
      "called_function": "reset_game_state",
      "location": {
        "file": "src/GameLogic.h",
        "line": 96,
        "column": 0
      },
      "context": "void reset_game_state();"
    },
    {
      "caller_function": "d",
      "called_function": "get_game_statistics",
      "location": {
        "file": "src/GameLogic.h",
        "line": 111,
        "column": 0
      },
      "context": "GameStats get_game_statistics() const;"
    },
    {
      "caller_function": "d",
      "called_function": "log_frame_statistics",
      "location": {
        "file": "src/GameLogic.h",
        "line": 121,
        "column": 0
      },
      "context": "void log_frame_statistics() const;"
    },
    {
      "caller_function": "d",
      "called_function": "should_skip_object_update",
      "location": {
        "file": "src/GameLogic.h",
        "line": 122,
        "column": 0
      },
      "context": "bool should_skip_object_update(GameObject* obj) const;"
    },
    {
      "caller_function": null,
      "called_function": "GameException",
      "location": {
        "file": "src/ErrorHandling.h",
        "line": 71,
        "column": 0
      },
      "context": "GameException(GameErrorType type, ErrorSeverity severity,"
    },
    {
      "caller_function": null,
      "called_function": "error_type",
      "location": {
        "file": "src/ErrorHandling.h",
        "line": 73,
        "column": 0
      },
      "context": ": error_type(type), severity(severity), error_message(message), error_context(context) {}"
    },
    {
      "caller_function": null,
      "called_function": "severity",
      "location": {
        "file": "src/ErrorHandling.h",
        "line": 73,
        "column": 0
      },
      "context": ": error_type(type), severity(severity), error_message(message), error_context(context) {}"
    },
    {
      "caller_function": null,
      "called_function": "error_message",
      "location": {
        "file": "src/ErrorHandling.h",
        "line": 73,
        "column": 0
      },
      "context": ": error_type(type), severity(severity), error_message(message), error_context(context) {}"
    },
    {
      "caller_function": null,
      "called_function": "error_context",
      "location": {
        "file": "src/ErrorHandling.h",
        "line": 73,
        "column": 0
      },
      "context": ": error_type(type), severity(severity), error_message(message), error_context(context) {}"
    },
    {
      "caller_function": null,
      "called_function": "what",
      "location": {
        "file": "src/ErrorHandling.h",
        "line": 75,
        "column": 0
      },
      "context": "const char* what() const noexcept override {"
    },
    {
      "caller_function": null,
      "called_function": "c_str",
      "location": {
        "file": "src/ErrorHandling.h",
        "line": 76,
        "column": 0
      },
      "context": "return error_message.c_str();"
    },
    {
      "caller_function": null,
      "called_function": "get_type",
      "location": {
        "file": "src/ErrorHandling.h",
        "line": 79,
        "column": 0
      },
      "context": "GameErrorType get_type() const { return error_type; }"
    },
    {
      "caller_function": null,
      "called_function": "get_severity",
      "location": {
        "file": "src/ErrorHandling.h",
        "line": 80,
        "column": 0
      },
      "context": "ErrorSeverity get_severity() const { return severity; }"
    },
    {
      "caller_function": null,
      "called_function": "get_context",
      "location": {
        "file": "src/ErrorHandling.h",
        "line": 81,
        "column": 0
      },
      "context": "const std::string& get_context() const { return error_context; }"
    },
    {
      "caller_function": "s",
      "called_function": "GameResult",
      "location": {
        "file": "src/ErrorHandling.h",
        "line": 99,
        "column": 0
      },
      "context": "return GameResult(std::forward<T>(value));"
    },
    {
      "caller_function": "s",
      "called_function": "GameResult",
      "location": {
        "file": "src/ErrorHandling.h",
        "line": 103,
        "column": 0
      },
      "context": "return GameResult(value);"
    },
    {
      "caller_function": "s",
      "called_function": "error",
      "location": {
        "file": "src/ErrorHandling.h",
        "line": 107,
        "column": 0
      },
      "context": "static GameResult error(GameErrorType type, ErrorSeverity severity,"
    },
    {
      "caller_function": "s",
      "called_function": "GameResult",
      "location": {
        "file": "src/ErrorHandling.h",
        "line": 109,
        "column": 0
      },
      "context": "return GameResult(type, severity, message, context);"
    },
    {
      "caller_function": "s",
      "called_function": "is_ok",
      "location": {
        "file": "src/ErrorHandling.h",
        "line": 113,
        "column": 0
      },
      "context": "bool is_ok() const { return has_value; }"
    },
    {
      "caller_function": "s",
      "called_function": "is_error",
      "location": {
        "file": "src/ErrorHandling.h",
        "line": 114,
        "column": 0
      },
      "context": "bool is_error() const { return !has_value; }"
    },
    {
      "caller_function": "s",
      "called_function": "get_value",
      "location": {
        "file": "src/ErrorHandling.h",
        "line": 117,
        "column": 0
      },
      "context": "const T& get_value() const {"
    },
    {
      "caller_function": "f",
      "called_function": "GameException",
      "location": {
        "file": "src/ErrorHandling.h",
        "line": 119,
        "column": 0
      },
      "context": "throw GameException(error_type, severity, error_message, error_context);"
    },
    {
      "caller_function": "f",
      "called_function": "GameException",
      "location": {
        "file": "src/ErrorHandling.h",
        "line": 126,
        "column": 0
      },
      "context": "throw GameException(error_type, severity, error_message, error_context);"
    },
    {
      "caller_function": "f",
      "called_function": "get_or_default",
      "location": {
        "file": "src/ErrorHandling.h",
        "line": 132,
        "column": 0
      },
      "context": "T get_or_default(const T& default_value) const {"
    },
    {
      "caller_function": "f",
      "called_function": "get_error_type",
      "location": {
        "file": "src/ErrorHandling.h",
        "line": 137,
        "column": 0
      },
      "context": "GameErrorType get_error_type() const { return error_type; }"
    },
    {
      "caller_function": "f",
      "called_function": "get_severity",
      "location": {
        "file": "src/ErrorHandling.h",
        "line": 138,
        "column": 0
      },
      "context": "ErrorSeverity get_severity() const { return severity; }"
    },
    {
      "caller_function": "f",
      "called_function": "get_error_message",
      "location": {
        "file": "src/ErrorHandling.h",
        "line": 139,
        "column": 0
      },
      "context": "const std::string& get_error_message() const { return error_message; }"
    },
    {
      "caller_function": "f",
      "called_function": "get_error_context",
      "location": {
        "file": "src/ErrorHandling.h",
        "line": 140,
        "column": 0
      },
      "context": "const std::string& get_error_context() const { return error_context; }"
    },
    {
      "caller_function": "t",
      "called_function": "GameResult",
      "location": {
        "file": "src/ErrorHandling.h",
        "line": 148,
        "column": 0
      },
      "context": "GameResult(GameErrorType type, ErrorSeverity sev, const std::string& msg, const std::string& ctx)"
    },
    {
      "caller_function": "t",
      "called_function": "has_value",
      "location": {
        "file": "src/ErrorHandling.h",
        "line": 149,
        "column": 0
      },
      "context": ": has_value(false), error_type(type), severity(sev), error_message(msg), error_context(ctx) {}"
    },
    {
      "caller_function": "t",
      "called_function": "error_type",
      "location": {
        "file": "src/ErrorHandling.h",
        "line": 149,
        "column": 0
      },
      "context": ": has_value(false), error_type(type), severity(sev), error_message(msg), error_context(ctx) {}"
    },
    {
      "caller_function": "t",
      "called_function": "severity",
      "location": {
        "file": "src/ErrorHandling.h",
        "line": 149,
        "column": 0
      },
      "context": ": has_value(false), error_type(type), severity(sev), error_message(msg), error_context(ctx) {}"
    },
    {
      "caller_function": "t",
      "called_function": "error_message",
      "location": {
        "file": "src/ErrorHandling.h",
        "line": 149,
        "column": 0
      },
      "context": ": has_value(false), error_type(type), severity(sev), error_message(msg), error_context(ctx) {}"
    },
    {
      "caller_function": "t",
      "called_function": "error_context",
      "location": {
        "file": "src/ErrorHandling.h",
        "line": 149,
        "column": 0
      },
      "context": ": has_value(false), error_type(type), severity(sev), error_message(msg), error_context(ctx) {}"
    },
    {
      "caller_function": "s",
      "called_function": "GameResult",
      "location": {
        "file": "src/ErrorHandling.h",
        "line": 166,
        "column": 0
      },
      "context": "return GameResult(true);"
    },
    {
      "caller_function": "s",
      "called_function": "error",
      "location": {
        "file": "src/ErrorHandling.h",
        "line": 169,
        "column": 0
      },
      "context": "static GameResult error(GameErrorType type, ErrorSeverity severity,"
    },
    {
      "caller_function": "s",
      "called_function": "GameResult",
      "location": {
        "file": "src/ErrorHandling.h",
        "line": 171,
        "column": 0
      },
      "context": "return GameResult(type, severity, message, context);"
    },
    {
      "caller_function": "s",
      "called_function": "is_ok",
      "location": {
        "file": "src/ErrorHandling.h",
        "line": 174,
        "column": 0
      },
      "context": "bool is_ok() const { return is_success; }"
    },
    {
      "caller_function": "s",
      "called_function": "is_error",
      "location": {
        "file": "src/ErrorHandling.h",
        "line": 175,
        "column": 0
      },
      "context": "bool is_error() const { return !is_success; }"
    },
    {
      "caller_function": "s",
      "called_function": "get_error_type",
      "location": {
        "file": "src/ErrorHandling.h",
        "line": 177,
        "column": 0
      },
      "context": "GameErrorType get_error_type() const { return error_type; }"
    },
    {
      "caller_function": "s",
      "called_function": "get_severity",
      "location": {
        "file": "src/ErrorHandling.h",
        "line": 178,
        "column": 0
      },
      "context": "ErrorSeverity get_severity() const { return severity; }"
    },
    {
      "caller_function": "s",
      "called_function": "get_error_message",
      "location": {
        "file": "src/ErrorHandling.h",
        "line": 179,
        "column": 0
      },
      "context": "const std::string& get_error_message() const { return error_message; }"
    },
    {
      "caller_function": "s",
      "called_function": "get_error_context",
      "location": {
        "file": "src/ErrorHandling.h",
        "line": 180,
        "column": 0
      },
      "context": "const std::string& get_error_context() const { return error_context; }"
    },
    {
      "caller_function": "t",
      "called_function": "GameResult",
      "location": {
        "file": "src/ErrorHandling.h",
        "line": 185,
        "column": 0
      },
      "context": "GameResult(GameErrorType type, ErrorSeverity sev, const std::string& msg, const std::string& ctx)"
    },
    {
      "caller_function": "t",
      "called_function": "is_success",
      "location": {
        "file": "src/ErrorHandling.h",
        "line": 186,
        "column": 0
      },
      "context": ": is_success(false), error_type(type), severity(sev), error_message(msg), error_context(ctx) {}"
    },
    {
      "caller_function": "t",
      "called_function": "error_type",
      "location": {
        "file": "src/ErrorHandling.h",
        "line": 186,
        "column": 0
      },
      "context": ": is_success(false), error_type(type), severity(sev), error_message(msg), error_context(ctx) {}"
    },
    {
      "caller_function": "t",
      "called_function": "severity",
      "location": {
        "file": "src/ErrorHandling.h",
        "line": 186,
        "column": 0
      },
      "context": ": is_success(false), error_type(type), severity(sev), error_message(msg), error_context(ctx) {}"
    },
    {
      "caller_function": "t",
      "called_function": "error_message",
      "location": {
        "file": "src/ErrorHandling.h",
        "line": 186,
        "column": 0
      },
      "context": ": is_success(false), error_type(type), severity(sev), error_message(msg), error_context(ctx) {}"
    },
    {
      "caller_function": "t",
      "called_function": "error_context",
      "location": {
        "file": "src/ErrorHandling.h",
        "line": 186,
        "column": 0
      },
      "context": ": is_success(false), error_type(type), severity(sev), error_message(msg), error_context(ctx) {}"
    },
    {
      "caller_function": "t",
      "called_function": "ErrorRecoveryStrategy",
      "location": {
        "file": "src/ErrorHandling.h",
        "line": 200,
        "column": 0
      },
      "context": "using ErrorCallback = std::function<ErrorRecoveryStrategy(const GameException&)>;"
    },
    {
      "caller_function": "e",
      "called_function": "handle_error",
      "location": {
        "file": "src/ErrorHandling.h",
        "line": 212,
        "column": 0
      },
      "context": "ErrorRecoveryStrategy handle_error(const GameException& error);"
    },
    {
      "caller_function": "e",
      "called_function": "register_error_handler",
      "location": {
        "file": "src/ErrorHandling.h",
        "line": 219,
        "column": 0
      },
      "context": "void register_error_handler(GameErrorType error_type, ErrorCallback callback);"
    },
    {
      "caller_function": "g",
      "called_function": "get_error_statistics",
      "location": {
        "file": "src/ErrorHandling.h",
        "line": 237,
        "column": 0
      },
      "context": "ErrorStats get_error_statistics() const;"
    },
    {
      "caller_function": "g",
      "called_function": "clear_error_statistics",
      "location": {
        "file": "src/ErrorHandling.h",
        "line": 242,
        "column": 0
      },
      "context": "void clear_error_statistics();"
    },
    {
      "caller_function": "g",
      "called_function": "ErrorHandler",
      "location": {
        "file": "src/ErrorHandling.h",
        "line": 245,
        "column": 0
      },
      "context": "ErrorHandler() = default;"
    },
    {
      "caller_function": "g",
      "called_function": "log_error",
      "location": {
        "file": "src/ErrorHandling.h",
        "line": 254,
        "column": 0
      },
      "context": "void log_error(const GameException& error);"
    },
    {
      "caller_function": "g",
      "called_function": "get_default_strategy",
      "location": {
        "file": "src/ErrorHandling.h",
        "line": 255,
        "column": 0
      },
      "context": "ErrorRecoveryStrategy get_default_strategy(GameErrorType type, ErrorSeverity severity);"
    },
    {
      "caller_function": "g",
      "called_function": "RETURN_ERROR",
      "location": {
        "file": "src/ErrorHandling.h",
        "line": 261,
        "column": 0
      },
      "context": "#define RETURN_ERROR(type, severity, message, context) \\"
    },
    {
      "caller_function": "g",
      "called_function": "decltype",
      "location": {
        "file": "src/ErrorHandling.h",
        "line": 262,
        "column": 0
      },
      "context": "return GameResult<decltype(type)>::error(type, severity, message, context)"
    },
    {
      "caller_function": "g",
      "called_function": "error",
      "location": {
        "file": "src/ErrorHandling.h",
        "line": 262,
        "column": 0
      },
      "context": "return GameResult<decltype(type)>::error(type, severity, message, context)"
    },
    {
      "caller_function": "g",
      "called_function": "RETURN_SUCCESS",
      "location": {
        "file": "src/ErrorHandling.h",
        "line": 264,
        "column": 0
      },
      "context": "#define RETURN_SUCCESS(value) \\"
    },
    {
      "caller_function": "g",
      "called_function": "decltype",
      "location": {
        "file": "src/ErrorHandling.h",
        "line": 265,
        "column": 0
      },
      "context": "return GameResult<decltype(value)>::success(value)"
    },
    {
      "caller_function": "g",
      "called_function": "success",
      "location": {
        "file": "src/ErrorHandling.h",
        "line": 265,
        "column": 0
      },
      "context": "return GameResult<decltype(value)>::success(value)"
    },
    {
      "caller_function": "g",
      "called_function": "HANDLE_ERROR_OR_RETURN",
      "location": {
        "file": "src/ErrorHandling.h",
        "line": 267,
        "column": 0
      },
      "context": "#define HANDLE_ERROR_OR_RETURN(result, recovery_action) \\"
    },
    {
      "caller_function": "f",
      "called_function": "GameException",
      "location": {
        "file": "src/ErrorHandling.h",
        "line": 269,
        "column": 0
      },
      "context": "auto exception = GameException((result).get_error_type(), (result).get_severity(), \\"
    },
    {
      "caller_function": "f",
      "called_function": "get_error_type",
      "location": {
        "file": "src/ErrorHandling.h",
        "line": 269,
        "column": 0
      },
      "context": "auto exception = GameException((result).get_error_type(), (result).get_severity(), \\"
    },
    {
      "caller_function": "f",
      "called_function": "get_severity",
      "location": {
        "file": "src/ErrorHandling.h",
        "line": 269,
        "column": 0
      },
      "context": "auto exception = GameException((result).get_error_type(), (result).get_severity(), \\"
    },
    {
      "caller_function": "f",
      "called_function": "get_error_message",
      "location": {
        "file": "src/ErrorHandling.h",
        "line": 270,
        "column": 0
      },
      "context": "(result).get_error_message(), (result).get_error_context()); \\"
    },
    {
      "caller_function": "f",
      "called_function": "get_error_context",
      "location": {
        "file": "src/ErrorHandling.h",
        "line": 270,
        "column": 0
      },
      "context": "(result).get_error_message(), (result).get_error_context()); \\"
    },
    {
      "caller_function": "f",
      "called_function": "ErrorHandler::getInstance",
      "location": {
        "file": "src/ErrorHandling.h",
        "line": 271,
        "column": 0
      },
      "context": "auto strategy = ErrorHandler::getInstance().handle_error(exception); \\"
    },
    {
      "caller_function": "f",
      "called_function": "getInstance",
      "location": {
        "file": "src/ErrorHandling.h",
        "line": 271,
        "column": 0
      },
      "context": "auto strategy = ErrorHandler::getInstance().handle_error(exception); \\"
    },
    {
      "caller_function": "f",
      "called_function": "handle_error",
      "location": {
        "file": "src/ErrorHandling.h",
        "line": 271,
        "column": 0
      },
      "context": "auto strategy = ErrorHandler::getInstance().handle_error(exception); \\"
    },
    {
      "caller_function": null,
      "called_function": "operator",
      "location": {
        "file": "src/SpatialPartitioning.h",
        "line": 32,
        "column": 0
      },
      "context": "size_t operator()(const GridCoord& coord) const {"
    },
    {
      "caller_function": "t",
      "called_function": "push_back",
      "location": {
        "file": "src/SpatialPartitioning.h",
        "line": 45,
        "column": 0
      },
      "context": "objects.push_back(obj);"
    },
    {
      "caller_function": "t",
      "called_function": "erase",
      "location": {
        "file": "src/SpatialPartitioning.h",
        "line": 49,
        "column": 0
      },
      "context": "objects.erase("
    },
    {
      "caller_function": "t",
      "called_function": "std::remove",
      "location": {
        "file": "src/SpatialPartitioning.h",
        "line": 50,
        "column": 0
      },
      "context": "std::remove(objects.begin(), objects.end(), obj),"
    },
    {
      "caller_function": "t",
      "called_function": "remove",
      "location": {
        "file": "src/SpatialPartitioning.h",
        "line": 50,
        "column": 0
      },
      "context": "std::remove(objects.begin(), objects.end(), obj),"
    },
    {
      "caller_function": "t",
      "called_function": "begin",
      "location": {
        "file": "src/SpatialPartitioning.h",
        "line": 50,
        "column": 0
      },
      "context": "std::remove(objects.begin(), objects.end(), obj),"
    },
    {
      "caller_function": "t",
      "called_function": "end",
      "location": {
        "file": "src/SpatialPartitioning.h",
        "line": 50,
        "column": 0
      },
      "context": "std::remove(objects.begin(), objects.end(), obj),"
    },
    {
      "caller_function": "t",
      "called_function": "end",
      "location": {
        "file": "src/SpatialPartitioning.h",
        "line": 51,
        "column": 0
      },
      "context": "objects.end());"
    },
    {
      "caller_function": "r",
      "called_function": "clear",
      "location": {
        "file": "src/SpatialPartitioning.h",
        "line": 55,
        "column": 0
      },
      "context": "objects.clear();"
    },
    {
      "caller_function": "r",
      "called_function": "object_count",
      "location": {
        "file": "src/SpatialPartitioning.h",
        "line": 58,
        "column": 0
      },
      "context": "size_t object_count() const {"
    },
    {
      "caller_function": "r",
      "called_function": "size",
      "location": {
        "file": "src/SpatialPartitioning.h",
        "line": 59,
        "column": 0
      },
      "context": "return objects.size();"
    },
    {
      "caller_function": "r",
      "called_function": "SpatialGrid",
      "location": {
        "file": "src/SpatialPartitioning.h",
        "line": 72,
        "column": 0
      },
      "context": "explicit SpatialGrid(int cell_size_pixels = CoordinateConfig::TILE_SIZE);"
    },
    {
      "caller_function": "r",
      "called_function": "clear",
      "location": {
        "file": "src/SpatialPartitioning.h",
        "line": 77,
        "column": 0
      },
      "context": "void clear();"
    },
    {
      "caller_function": "r",
      "called_function": "add_object",
      "location": {
        "file": "src/SpatialPartitioning.h",
        "line": 83,
        "column": 0
      },
      "context": "void add_object(GameObject* obj);"
    },
    {
      "caller_function": "r",
      "called_function": "remove_object",
      "location": {
        "file": "src/SpatialPartitioning.h",
        "line": 89,
        "column": 0
      },
      "context": "void remove_object(GameObject* obj);"
    },
    {
      "caller_function": "r",
      "called_function": "update_object_position",
      "location": {
        "file": "src/SpatialPartitioning.h",
        "line": 96,
        "column": 0
      },
      "context": "void update_object_position(GameObject* obj, const PixelCoord& old_position);"
    },
    {
      "caller_function": "r",
      "called_function": "rebuild_from_objects",
      "location": {
        "file": "src/SpatialPartitioning.h",
        "line": 102,
        "column": 0
      },
      "context": "void rebuild_from_objects(const std::list<GameObject*>& objects);"
    },
    {
      "caller_function": "r",
      "called_function": "get_objects_at_position",
      "location": {
        "file": "src/SpatialPartitioning.h",
        "line": 111,
        "column": 0
      },
      "context": "std::vector<GameObject*> get_objects_at_position(const PixelCoord& position) const;"
    },
    {
      "caller_function": "r",
      "called_function": "get_objects_of_type_near",
      "location": {
        "file": "src/SpatialPartitioning.h",
        "line": 120,
        "column": 0
      },
      "context": "std::vector<GameObject*> get_objects_of_type_near(const PixelCoord& position,"
    },
    {
      "caller_function": "r",
      "called_function": "get_bombers_near",
      "location": {
        "file": "src/SpatialPartitioning.h",
        "line": 130,
        "column": 0
      },
      "context": "std::vector<GameObject*> get_bombers_near(const PixelCoord& position, int radius = 1) const;"
    },
    {
      "caller_function": "r",
      "called_function": "get_bombs_near",
      "location": {
        "file": "src/SpatialPartitioning.h",
        "line": 138,
        "column": 0
      },
      "context": "std::vector<GameObject*> get_bombs_near(const PixelCoord& position, int radius = 1) const;"
    },
    {
      "caller_function": "r",
      "called_function": "get_extras_near",
      "location": {
        "file": "src/SpatialPartitioning.h",
        "line": 146,
        "column": 0
      },
      "context": "std::vector<GameObject*> get_extras_near(const PixelCoord& position, int radius = 1) const;"
    },
    {
      "caller_function": "r",
      "called_function": "get_objects_in_area",
      "location": {
        "file": "src/SpatialPartitioning.h",
        "line": 155,
        "column": 0
      },
      "context": "std::vector<GameObject*> get_objects_in_area(const PixelCoord& top_left,"
    },
    {
      "caller_function": "r",
      "called_function": "find_collisions",
      "location": {
        "file": "src/SpatialPartitioning.h",
        "line": 168,
        "column": 0
      },
      "context": "std::vector<GameObject*> find_collisions(GameObject* obj,"
    },
    {
      "caller_function": "r",
      "called_function": "has_object_at_position",
      "location": {
        "file": "src/SpatialPartitioning.h",
        "line": 178,
        "column": 0
      },
      "context": "bool has_object_at_position(const PixelCoord& position,"
    },
    {
      "caller_function": "r",
      "called_function": "get_statistics",
      "location": {
        "file": "src/SpatialPartitioning.h",
        "line": 195,
        "column": 0
      },
      "context": "GridStats get_statistics() const;"
    },
    {
      "caller_function": "r",
      "called_function": "print_debug_info",
      "location": {
        "file": "src/SpatialPartitioning.h",
        "line": 200,
        "column": 0
      },
      "context": "void print_debug_info() const;"
    },
    {
      "caller_function": "r",
      "called_function": "visualize_grid",
      "location": {
        "file": "src/SpatialPartitioning.h",
        "line": 205,
        "column": 0
      },
      "context": "std::string visualize_grid(int max_width = 20, int max_height = 15) const;"
    },
    {
      "caller_function": "r",
      "called_function": "pixel_to_grid_coord",
      "location": {
        "file": "src/SpatialPartitioning.h",
        "line": 218,
        "column": 0
      },
      "context": "GridCoord pixel_to_grid_coord(const PixelCoord& position) const;"
    },
    {
      "caller_function": "r",
      "called_function": "get_cells_in_radius",
      "location": {
        "file": "src/SpatialPartitioning.h",
        "line": 219,
        "column": 0
      },
      "context": "std::vector<GridCoord> get_cells_in_radius(const GridCoord& center, int radius) const;"
    },
    {
      "caller_function": "r",
      "called_function": "get_cells_in_area",
      "location": {
        "file": "src/SpatialPartitioning.h",
        "line": 220,
        "column": 0
      },
      "context": "std::vector<GridCoord> get_cells_in_area(const PixelCoord& top_left,"
    },
    {
      "caller_function": "r",
      "called_function": "get_or_create_cell",
      "location": {
        "file": "src/SpatialPartitioning.h",
        "line": 223,
        "column": 0
      },
      "context": "SpatialCell& get_or_create_cell(const GridCoord& coord);"
    },
    {
      "caller_function": "r",
      "called_function": "get_cell",
      "location": {
        "file": "src/SpatialPartitioning.h",
        "line": 224,
        "column": 0
      },
      "context": "const SpatialCell* get_cell(const GridCoord& coord) const;"
    },
    {
      "caller_function": "r",
      "called_function": "add_object_to_cell",
      "location": {
        "file": "src/SpatialPartitioning.h",
        "line": 226,
        "column": 0
      },
      "context": "void add_object_to_cell(GameObject* obj, const GridCoord& coord);"
    },
    {
      "caller_function": "r",
      "called_function": "remove_object_from_cell",
      "location": {
        "file": "src/SpatialPartitioning.h",
        "line": 227,
        "column": 0
      },
      "context": "void remove_object_from_cell(GameObject* obj, const GridCoord& coord);"
    },
    {
      "caller_function": "r",
      "called_function": "find_nearest_bomber",
      "location": {
        "file": "src/SpatialPartitioning.h",
        "line": 243,
        "column": 0
      },
      "context": "GameObject* find_nearest_bomber(const PixelCoord& extra_position, float max_distance = 20.0f);"
    },
    {
      "caller_function": "r",
      "called_function": "find_explosion_victims",
      "location": {
        "file": "src/SpatialPartitioning.h",
        "line": 250,
        "column": 0
      },
      "context": "std::vector<GameObject*> find_explosion_victims(const std::vector<GridCoord>& explosion_area);"
    },
    {
      "caller_function": "r",
      "called_function": "scan_ai_targets",
      "location": {
        "file": "src/SpatialPartitioning.h",
        "line": 264,
        "column": 0
      },
      "context": "AITargets scan_ai_targets(const PixelCoord& bomber_position, int scan_radius = 5);"
    },
    {
      "caller_function": null,
      "called_function": "GameplayScreen",
      "location": {
        "file": "src/GameplayScreen.h",
        "line": 14,
        "column": 0
      },
      "context": "GameplayScreen(ClanBomberApplication* app);"
    },
    {
      "caller_function": null,
      "called_function": "GameplayScreen",
      "location": {
        "file": "src/GameplayScreen.h",
        "line": 15,
        "column": 0
      },
      "context": "~GameplayScreen();"
    },
    {
      "caller_function": null,
      "called_function": "handle_events",
      "location": {
        "file": "src/GameplayScreen.h",
        "line": 17,
        "column": 0
      },
      "context": "void handle_events(SDL_Event& event) override;"
    },
    {
      "caller_function": null,
      "called_function": "update",
      "location": {
        "file": "src/GameplayScreen.h",
        "line": 18,
        "column": 0
      },
      "context": "void update(float deltaTime) override;"
    },
    {
      "caller_function": null,
      "called_function": "render",
      "location": {
        "file": "src/GameplayScreen.h",
        "line": 19,
        "column": 0
      },
      "context": "void render(SDL_Renderer* renderer) override;"
    },
    {
      "caller_function": null,
      "called_function": "get_next_state",
      "location": {
        "file": "src/GameplayScreen.h",
        "line": 21,
        "column": 0
      },
      "context": "GameState get_next_state();"
    },
    {
      "caller_function": null,
      "called_function": "init_game",
      "location": {
        "file": "src/GameplayScreen.h",
        "line": 24,
        "column": 0
      },
      "context": "void init_game();"
    },
    {
      "caller_function": null,
      "called_function": "deinit_game",
      "location": {
        "file": "src/GameplayScreen.h",
        "line": 25,
        "column": 0
      },
      "context": "void deinit_game();"
    },
    {
      "caller_function": null,
      "called_function": "act_all",
      "location": {
        "file": "src/GameplayScreen.h",
        "line": 26,
        "column": 0
      },
      "context": "void act_all();"
    },
    {
      "caller_function": null,
      "called_function": "show_all",
      "location": {
        "file": "src/GameplayScreen.h",
        "line": 27,
        "column": 0
      },
      "context": "void show_all();"
    },
    {
      "caller_function": null,
      "called_function": "delete_some",
      "location": {
        "file": "src/GameplayScreen.h",
        "line": 28,
        "column": 0
      },
      "context": "void delete_some();"
    },
    {
      "caller_function": null,
      "called_function": "update_audio_listener",
      "location": {
        "file": "src/GameplayScreen.h",
        "line": 29,
        "column": 0
      },
      "context": "void update_audio_listener();"
    },
    {
      "caller_function": null,
      "called_function": "check_victory_conditions",
      "location": {
        "file": "src/GameplayScreen.h",
        "line": 30,
        "column": 0
      },
      "context": "void check_victory_conditions();"
    },
    {
      "caller_function": null,
      "called_function": "render_victory_screen",
      "location": {
        "file": "src/GameplayScreen.h",
        "line": 31,
        "column": 0
      },
      "context": "void render_victory_screen();"
    },
    {
      "caller_function": null,
      "called_function": "__attribute__",
      "location": {
        "file": "src/GPUAcceleratedRenderer.h",
        "line": 29,
        "column": 0
      },
      "context": "struct __attribute__((packed)) SimpleVertex {"
    },
    {
      "caller_function": null,
      "called_function": "GPUAcceleratedRenderer",
      "location": {
        "file": "src/GPUAcceleratedRenderer.h",
        "line": 69,
        "column": 0
      },
      "context": "GPUAcceleratedRenderer();"
    },
    {
      "caller_function": null,
      "called_function": "GPUAcceleratedRenderer",
      "location": {
        "file": "src/GPUAcceleratedRenderer.h",
        "line": 70,
        "column": 0
      },
      "context": "~GPUAcceleratedRenderer();"
    },
    {
      "caller_function": null,
      "called_function": "initialize",
      "location": {
        "file": "src/GPUAcceleratedRenderer.h",
        "line": 73,
        "column": 0
      },
      "context": "GameResult<void> initialize(SDL_Window* window, int width = 800, int height = 600);"
    },
    {
      "caller_function": null,
      "called_function": "shutdown",
      "location": {
        "file": "src/GPUAcceleratedRenderer.h",
        "line": 74,
        "column": 0
      },
      "context": "void shutdown();"
    },
    {
      "caller_function": null,
      "called_function": "load_all_shaders",
      "location": {
        "file": "src/GPUAcceleratedRenderer.h",
        "line": 77,
        "column": 0
      },
      "context": "bool load_all_shaders();"
    },
    {
      "caller_function": null,
      "called_function": "compile_shader",
      "location": {
        "file": "src/GPUAcceleratedRenderer.h",
        "line": 78,
        "column": 0
      },
      "context": "GLuint compile_shader(const std::string& source, GLenum type, const std::string& name = \"\");"
    },
    {
      "caller_function": null,
      "called_function": "create_program",
      "location": {
        "file": "src/GPUAcceleratedRenderer.h",
        "line": 79,
        "column": 0
      },
      "context": "GLuint create_program(GLuint vertex, GLuint fragment, const std::string& name = \"\");"
    },
    {
      "caller_function": null,
      "called_function": "create_compute_program",
      "location": {
        "file": "src/GPUAcceleratedRenderer.h",
        "line": 80,
        "column": 0
      },
      "context": "GLuint create_compute_program(GLuint compute, const std::string& name = \"\");"
    },
    {
      "caller_function": null,
      "called_function": "begin_frame",
      "location": {
        "file": "src/GPUAcceleratedRenderer.h",
        "line": 83,
        "column": 0
      },
      "context": "void begin_frame();"
    },
    {
      "caller_function": null,
      "called_function": "end_frame",
      "location": {
        "file": "src/GPUAcceleratedRenderer.h",
        "line": 84,
        "column": 0
      },
      "context": "void end_frame();"
    },
    {
      "caller_function": null,
      "called_function": "present",
      "location": {
        "file": "src/GPUAcceleratedRenderer.h",
        "line": 85,
        "column": 0
      },
      "context": "void present();"
    },
    {
      "caller_function": null,
      "called_function": "begin_batch",
      "location": {
        "file": "src/GPUAcceleratedRenderer.h",
        "line": 88,
        "column": 0
      },
      "context": "void begin_batch(EffectType effect = NORMAL);"
    },
    {
      "caller_function": null,
      "called_function": "add_sprite",
      "location": {
        "file": "src/GPUAcceleratedRenderer.h",
        "line": 89,
        "column": 0
      },
      "context": "void add_sprite(float x, float y, float w, float h, GLuint texture,"
    },
    {
      "caller_function": null,
      "called_function": "add_animated_sprite",
      "location": {
        "file": "src/GPUAcceleratedRenderer.h",
        "line": 91,
        "column": 0
      },
      "context": "void add_animated_sprite(float x, float y, float w, float h, GLuint texture,"
    },
    {
      "caller_function": null,
      "called_function": "end_batch",
      "location": {
        "file": "src/GPUAcceleratedRenderer.h",
        "line": 93,
        "column": 0
      },
      "context": "void end_batch();"
    },
    {
      "caller_function": null,
      "called_function": "set_explosion_info",
      "location": {
        "file": "src/GPUAcceleratedRenderer.h",
        "line": 96,
        "column": 0
      },
      "context": "void set_explosion_info(float center_x, float center_y, float age, int up, int down, int left, int r"
    },
    {
      "caller_function": null,
      "called_function": "clear_explosion_info",
      "location": {
        "file": "src/GPUAcceleratedRenderer.h",
        "line": 97,
        "column": 0
      },
      "context": "void clear_explosion_info();"
    },
    {
      "caller_function": null,
      "called_function": "init_particle_system",
      "location": {
        "file": "src/GPUAcceleratedRenderer.h",
        "line": 100,
        "column": 0
      },
      "context": "bool init_particle_system(int max_particles = 100000);"
    },
    {
      "caller_function": null,
      "called_function": "update_particles_gpu",
      "location": {
        "file": "src/GPUAcceleratedRenderer.h",
        "line": 101,
        "column": 0
      },
      "context": "void update_particles_gpu(float deltaTime);"
    },
    {
      "caller_function": null,
      "called_function": "emit_particles",
      "location": {
        "file": "src/GPUAcceleratedRenderer.h",
        "line": 102,
        "column": 0
      },
      "context": "void emit_particles(float x, float y, int count, ParticleType type,"
    },
    {
      "caller_function": null,
      "called_function": "render_particles",
      "location": {
        "file": "src/GPUAcceleratedRenderer.h",
        "line": 104,
        "column": 0
      },
      "context": "void render_particles();"
    },
    {
      "caller_function": null,
      "called_function": "set_camera",
      "location": {
        "file": "src/GPUAcceleratedRenderer.h",
        "line": 107,
        "column": 0
      },
      "context": "void set_camera(const float* position, float zoom = 1.0f);"
    },
    {
      "caller_function": null,
      "called_function": "set_explosion_effect",
      "location": {
        "file": "src/GPUAcceleratedRenderer.h",
        "line": 108,
        "column": 0
      },
      "context": "void set_explosion_effect(float center_x, float center_y, float radius, float strength);"
    },
    {
      "caller_function": null,
      "called_function": "set_vortex_effect",
      "location": {
        "file": "src/GPUAcceleratedRenderer.h",
        "line": 109,
        "column": 0
      },
      "context": "void set_vortex_effect(float center_x, float center_y, float radius, float strength);"
    },
    {
      "caller_function": null,
      "called_function": "set_environmental_effects",
      "location": {
        "file": "src/GPUAcceleratedRenderer.h",
        "line": 110,
        "column": 0
      },
      "context": "void set_environmental_effects(float air_density, const float* magnetic_field);"
    },
    {
      "caller_function": null,
      "called_function": "clear_effects",
      "location": {
        "file": "src/GPUAcceleratedRenderer.h",
        "line": 111,
        "column": 0
      },
      "context": "void clear_effects(); // Reset all special effects"
    },
    {
      "caller_function": null,
      "called_function": "set_global_effect_params",
      "location": {
        "file": "src/GPUAcceleratedRenderer.h",
        "line": 112,
        "column": 0
      },
      "context": "void set_global_effect_params(const float* params);"
    },
    {
      "caller_function": "d",
      "called_function": "create_texture_from_surface",
      "location": {
        "file": "src/GPUAcceleratedRenderer.h",
        "line": 116,
        "column": 0
      },
      "context": "GLuint create_texture_from_surface(SDL_Surface* surface);"
    },
    {
      "caller_function": "d",
      "called_function": "register_texture_metadata",
      "location": {
        "file": "src/GPUAcceleratedRenderer.h",
        "line": 117,
        "column": 0
      },
      "context": "void register_texture_metadata(GLuint texture_id, int width, int height, int sprite_width = 40, int "
    },
    {
      "caller_function": "y",
      "called_function": "print_performance_stats",
      "location": {
        "file": "src/GPUAcceleratedRenderer.h",
        "line": 121,
        "column": 0
      },
      "context": "void print_performance_stats();"
    },
    {
      "caller_function": "y",
      "called_function": "is_ready",
      "location": {
        "file": "src/GPUAcceleratedRenderer.h",
        "line": 124,
        "column": 0
      },
      "context": "bool is_ready() const { return gl_context && main_program && sprite_vao && sprite_vbo; }"
    },
    {
      "caller_function": "y",
      "called_function": "setup_matrices",
      "location": {
        "file": "src/GPUAcceleratedRenderer.h",
        "line": 215,
        "column": 0
      },
      "context": "void setup_matrices();"
    },
    {
      "caller_function": "y",
      "called_function": "setup_sprite_rendering",
      "location": {
        "file": "src/GPUAcceleratedRenderer.h",
        "line": 216,
        "column": 0
      },
      "context": "void setup_sprite_rendering();"
    },
    {
      "caller_function": "y",
      "called_function": "setup_particle_rendering",
      "location": {
        "file": "src/GPUAcceleratedRenderer.h",
        "line": 217,
        "column": 0
      },
      "context": "void setup_particle_rendering();"
    },
    {
      "caller_function": "y",
      "called_function": "update_uniforms",
      "location": {
        "file": "src/GPUAcceleratedRenderer.h",
        "line": 218,
        "column": 0
      },
      "context": "void update_uniforms();"
    },
    {
      "caller_function": "y",
      "called_function": "flush_batch",
      "location": {
        "file": "src/GPUAcceleratedRenderer.h",
        "line": 219,
        "column": 0
      },
      "context": "void flush_batch();"
    },
    {
      "caller_function": "y",
      "called_function": "check_gl_error",
      "location": {
        "file": "src/GPUAcceleratedRenderer.h",
        "line": 220,
        "column": 0
      },
      "context": "void check_gl_error(const std::string& operation);"
    },
    {
      "caller_function": "y",
      "called_function": "calculate_sprite_uv",
      "location": {
        "file": "src/GPUAcceleratedRenderer.h",
        "line": 221,
        "column": 0
      },
      "context": "void calculate_sprite_uv(GLuint texture, int sprite_number, float& u_start, float& u_end, float& v_s"
    },
    {
      "caller_function": "y",
      "called_function": "preprocess_shader_includes",
      "location": {
        "file": "src/GPUAcceleratedRenderer.h",
        "line": 222,
        "column": 0
      },
      "context": "std::string preprocess_shader_includes(const std::string& source);"
    },
    {
      "caller_function": null,
      "called_function": "ClanBomberApplication",
      "location": {
        "file": "src/ClanBomber.h",
        "line": 121,
        "column": 0
      },
      "context": "ClanBomberApplication();"
    },
    {
      "caller_function": null,
      "called_function": "ClanBomberApplication",
      "location": {
        "file": "src/ClanBomber.h",
        "line": 122,
        "column": 0
      },
      "context": "~ClanBomberApplication();"
    },
    {
      "caller_function": null,
      "called_function": "main",
      "location": {
        "file": "src/ClanBomber.h",
        "line": 123,
        "column": 0
      },
      "context": "int main();"
    },
    {
      "caller_function": null,
      "called_function": "init_server_game",
      "location": {
        "file": "src/ClanBomber.h",
        "line": 134,
        "column": 0
      },
      "context": "bool init_server_game();"
    },
    {
      "caller_function": null,
      "called_function": "init_client_game",
      "location": {
        "file": "src/ClanBomber.h",
        "line": 135,
        "column": 0
      },
      "context": "bool init_client_game();"
    },
    {
      "caller_function": null,
      "called_function": "get_server_status",
      "location": {
        "file": "src/ClanBomber.h",
        "line": 136,
        "column": 0
      },
      "context": "int get_server_status();"
    },
    {
      "caller_function": null,
      "called_function": "initialize_game_context",
      "location": {
        "file": "src/ClanBomber.h",
        "line": 139,
        "column": 0
      },
      "context": "void initialize_game_context();"
    },
    {
      "caller_function": null,
      "called_function": "run_server_with_players",
      "location": {
        "file": "src/ClanBomber.h",
        "line": 140,
        "column": 0
      },
      "context": "static int run_server_with_players();"
    },
    {
      "caller_function": null,
      "called_function": "is_server",
      "location": {
        "file": "src/ClanBomber.h",
        "line": 146,
        "column": 0
      },
      "context": "static bool is_server();"
    },
    {
      "caller_function": null,
      "called_function": "is_client",
      "location": {
        "file": "src/ClanBomber.h",
        "line": 152,
        "column": 0
      },
      "context": "static bool is_client();"
    },
    {
      "caller_function": null,
      "called_function": "get_server",
      "location": {
        "file": "src/ClanBomber.h",
        "line": 154,
        "column": 0
      },
      "context": "static Server* get_server();"
    },
    {
      "caller_function": null,
      "called_function": "get_client",
      "location": {
        "file": "src/ClanBomber.h",
        "line": 155,
        "column": 0
      },
      "context": "static Client* get_client();"
    },
    {
      "caller_function": null,
      "called_function": "get_server_setup",
      "location": {
        "file": "src/ClanBomber.h",
        "line": 156,
        "column": 0
      },
      "context": "static ServerSetup* get_server_setup();"
    },
    {
      "caller_function": null,
      "called_function": "get_client_setup",
      "location": {
        "file": "src/ClanBomber.h",
        "line": 157,
        "column": 0
      },
      "context": "static ClientSetup* get_client_setup();"
    },
    {
      "caller_function": null,
      "called_function": "get_chat",
      "location": {
        "file": "src/ClanBomber.h",
        "line": 158,
        "column": 0
      },
      "context": "static Chat* get_chat();"
    },
    {
      "caller_function": null,
      "called_function": "get_menu",
      "location": {
        "file": "src/ClanBomber.h",
        "line": 159,
        "column": 0
      },
      "context": "static Menu* get_menu();"
    },
    {
      "caller_function": null,
      "called_function": "set_client_disconnected_from_server",
      "location": {
        "file": "src/ClanBomber.h",
        "line": 161,
        "column": 0
      },
      "context": "void set_client_disconnected_from_server(bool d);"
    },
    {
      "caller_function": null,
      "called_function": "is_client_disconnected_from_server",
      "location": {
        "file": "src/ClanBomber.h",
        "line": 162,
        "column": 0
      },
      "context": "bool is_client_disconnected_from_server();"
    },
    {
      "caller_function": null,
      "called_function": "set_client_connecting_to_new_server",
      "location": {
        "file": "src/ClanBomber.h",
        "line": 163,
        "column": 0
      },
      "context": "void set_client_connecting_to_new_server(bool c);"
    },
    {
      "caller_function": null,
      "called_function": "is_client_connecting_to_new_server",
      "location": {
        "file": "src/ClanBomber.h",
        "line": 164,
        "column": 0
      },
      "context": "bool is_client_connecting_to_new_server();"
    },
    {
      "caller_function": null,
      "called_function": "client_to_server",
      "location": {
        "file": "src/ClanBomber.h",
        "line": 165,
        "column": 0
      },
      "context": "void client_to_server();"
    },
    {
      "caller_function": null,
      "called_function": "make_observer",
      "location": {
        "file": "src/ClanBomber.h",
        "line": 166,
        "column": 0
      },
      "context": "void make_observer();"
    },
    {
      "caller_function": null,
      "called_function": "make_map",
      "location": {
        "file": "src/ClanBomber.h",
        "line": 167,
        "column": 0
      },
      "context": "void make_map();"
    },
    {
      "caller_function": null,
      "called_function": "get_observer",
      "location": {
        "file": "src/ClanBomber.h",
        "line": 168,
        "column": 0
      },
      "context": "Observer* get_observer();"
    },
    {
      "caller_function": null,
      "called_function": "get_map",
      "location": {
        "file": "src/ClanBomber.h",
        "line": 169,
        "column": 0
      },
      "context": "Map* get_map();"
    },
    {
      "caller_function": null,
      "called_function": "paused_game",
      "location": {
        "file": "src/ClanBomber.h",
        "line": 170,
        "column": 0
      },
      "context": "bool paused_game();"
    },
    {
      "caller_function": null,
      "called_function": "set_pause_game",
      "location": {
        "file": "src/ClanBomber.h",
        "line": 171,
        "column": 0
      },
      "context": "void set_pause_game(bool paused);"
    },
    {
      "caller_function": null,
      "called_function": "reload_map",
      "location": {
        "file": "src/ClanBomber.h",
        "line": 172,
        "column": 0
      },
      "context": "void reload_map();"
    },
    {
      "caller_function": null,
      "called_function": "delete_all_game_objects",
      "location": {
        "file": "src/ClanBomber.h",
        "line": 173,
        "column": 0
      },
      "context": "void delete_all_game_objects();"
    },
    {
      "caller_function": null,
      "called_function": "get_object_by_id",
      "location": {
        "file": "src/ClanBomber.h",
        "line": 175,
        "column": 0
      },
      "context": "GameObject* get_object_by_id(int object_id);"
    },
    {
      "caller_function": null,
      "called_function": "activate_suspended_client_bomb_by_id",
      "location": {
        "file": "src/ClanBomber.h",
        "line": 176,
        "column": 0
      },
      "context": "Bomb* activate_suspended_client_bomb_by_id(int object_id);"
    },
    {
      "caller_function": null,
      "called_function": "get_next_object_id",
      "location": {
        "file": "src/ClanBomber.h",
        "line": 178,
        "column": 0
      },
      "context": "static unsigned short get_next_object_id();"
    },
    {
      "caller_function": null,
      "called_function": "get_map_path",
      "location": {
        "file": "src/ClanBomber.h",
        "line": 180,
        "column": 0
      },
      "context": "static std::filesystem::path get_map_path();"
    },
    {
      "caller_function": null,
      "called_function": "get_local_map_path",
      "location": {
        "file": "src/ClanBomber.h",
        "line": 181,
        "column": 0
      },
      "context": "static std::filesystem::path get_local_map_path();"
    },
    {
      "caller_function": null,
      "called_function": "lock",
      "location": {
        "file": "src/ClanBomber.h",
        "line": 182,
        "column": 0
      },
      "context": "static void lock();"
    },
    {
      "caller_function": null,
      "called_function": "unlock",
      "location": {
        "file": "src/ClanBomber.h",
        "line": 183,
        "column": 0
      },
      "context": "static void unlock();"
    },
    {
      "caller_function": null,
      "called_function": "wait",
      "location": {
        "file": "src/ClanBomber.h",
        "line": 184,
        "column": 0
      },
      "context": "static void wait();"
    },
    {
      "caller_function": null,
      "called_function": "signal",
      "location": {
        "file": "src/ClanBomber.h",
        "line": 185,
        "column": 0
      },
      "context": "static void signal();"
    },
    {
      "caller_function": null,
      "called_function": "get_server_frame_counter",
      "location": {
        "file": "src/ClanBomber.h",
        "line": 188,
        "column": 0
      },
      "context": "static int get_server_frame_counter();"
    },
    {
      "caller_function": null,
      "called_function": "inc_server_frame_counter",
      "location": {
        "file": "src/ClanBomber.h",
        "line": 189,
        "column": 0
      },
      "context": "static void inc_server_frame_counter();"
    },
    {
      "caller_function": null,
      "called_function": "init_SDL",
      "location": {
        "file": "src/ClanBomber.h",
        "line": 193,
        "column": 0
      },
      "context": "int init_SDL();"
    },
    {
      "caller_function": null,
      "called_function": "init_audio",
      "location": {
        "file": "src/ClanBomber.h",
        "line": 194,
        "column": 0
      },
      "context": "void init_audio();"
    },
    {
      "caller_function": null,
      "called_function": "init_game",
      "location": {
        "file": "src/ClanBomber.h",
        "line": 195,
        "column": 0
      },
      "context": "bool init_game(); // single player init"
    },
    {
      "caller_function": null,
      "called_function": "deinit_game",
      "location": {
        "file": "src/ClanBomber.h",
        "line": 196,
        "column": 0
      },
      "context": "void deinit_game();"
    },
    {
      "caller_function": null,
      "called_function": "show_tutorial",
      "location": {
        "file": "src/ClanBomber.h",
        "line": 197,
        "column": 0
      },
      "context": "void show_tutorial();"
    },
    {
      "caller_function": null,
      "called_function": "run_game",
      "location": {
        "file": "src/ClanBomber.h",
        "line": 199,
        "column": 0
      },
      "context": "void run_game();"
    },
    {
      "caller_function": null,
      "called_function": "show_all",
      "location": {
        "file": "src/ClanBomber.h",
        "line": 200,
        "column": 0
      },
      "context": "void show_all();"
    },
    {
      "caller_function": null,
      "called_function": "act_all",
      "location": {
        "file": "src/ClanBomber.h",
        "line": 201,
        "column": 0
      },
      "context": "void act_all();"
    },
    {
      "caller_function": null,
      "called_function": "delete_some",
      "location": {
        "file": "src/ClanBomber.h",
        "line": 202,
        "column": 0
      },
      "context": "void delete_some();"
    },
    {
      "caller_function": null,
      "called_function": "start_net_game",
      "location": {
        "file": "src/ClanBomber.h",
        "line": 204,
        "column": 0
      },
      "context": "void start_net_game();"
    },
    {
      "caller_function": null,
      "called_function": "init_net_game",
      "location": {
        "file": "src/ClanBomber.h",
        "line": 205,
        "column": 0
      },
      "context": "void init_net_game();"
    },
    {
      "caller_function": null,
      "called_function": "dout",
      "location": {
        "file": "src/ClanBomber.h",
        "line": 237,
        "column": 0
      },
      "context": "# define dout(dstring) std::cout << std::endl << \"__ \" << __FILE__ << \":\" << __LINE__ << \" __\" << st"
    },
    {
      "caller_function": null,
      "called_function": "dout",
      "location": {
        "file": "src/ClanBomber.h",
        "line": 241,
        "column": 0
      },
      "context": "#  define dout(dstring) std::cout << dstring << std::endl"
    },
    {
      "caller_function": null,
      "called_function": "dout",
      "location": {
        "file": "src/ClanBomber.h",
        "line": 243,
        "column": 0
      },
      "context": "#  define dout(dstring)"
    },
    {
      "caller_function": "e",
      "called_function": "TextTexture",
      "location": {
        "file": "src/TextRenderer.h",
        "line": 23,
        "column": 0
      },
      "context": "~TextTexture();"
    },
    {
      "caller_function": "e",
      "called_function": "TextRenderer",
      "location": {
        "file": "src/TextRenderer.h",
        "line": 28,
        "column": 0
      },
      "context": "TextRenderer();"
    },
    {
      "caller_function": "e",
      "called_function": "TextRenderer",
      "location": {
        "file": "src/TextRenderer.h",
        "line": 29,
        "column": 0
      },
      "context": "~TextRenderer();"
    },
    {
      "caller_function": "e",
      "called_function": "initialize",
      "location": {
        "file": "src/TextRenderer.h",
        "line": 31,
        "column": 0
      },
      "context": "bool initialize();"
    },
    {
      "caller_function": "e",
      "called_function": "shutdown",
      "location": {
        "file": "src/TextRenderer.h",
        "line": 32,
        "column": 0
      },
      "context": "void shutdown();"
    },
    {
      "caller_function": "e",
      "called_function": "load_font",
      "location": {
        "file": "src/TextRenderer.h",
        "line": 35,
        "column": 0
      },
      "context": "bool load_font(const std::string& name, const std::string& path, int size);"
    },
    {
      "caller_function": "e",
      "called_function": "get_font",
      "location": {
        "file": "src/TextRenderer.h",
        "line": 36,
        "column": 0
      },
      "context": "TTF_Font* get_font(const std::string& name);"
    },
    {
      "caller_function": "e",
      "called_function": "render_text",
      "location": {
        "file": "src/TextRenderer.h",
        "line": 39,
        "column": 0
      },
      "context": "std::shared_ptr<TextTexture> render_text(const std::string& text, const std::string& font_name, SDL_"
    },
    {
      "caller_function": "e",
      "called_function": "draw_text",
      "location": {
        "file": "src/TextRenderer.h",
        "line": 42,
        "column": 0
      },
      "context": "void draw_text(RenderingFacade* rendering_facade, const std::string& text,"
    },
    {
      "caller_function": "e",
      "called_function": "draw_text_centered",
      "location": {
        "file": "src/TextRenderer.h",
        "line": 46,
        "column": 0
      },
      "context": "void draw_text_centered(RenderingFacade* rendering_facade, const std::string& text,"
    },
    {
      "caller_function": "e",
      "called_function": "create_gl_texture_from_surface",
      "location": {
        "file": "src/TextRenderer.h",
        "line": 53,
        "column": 0
      },
      "context": "GLuint create_gl_texture_from_surface(SDL_Surface* surface);"
    },
    {
      "caller_function": "e",
      "called_function": "make_cache_key",
      "location": {
        "file": "src/TextRenderer.h",
        "line": 54,
        "column": 0
      },
      "context": "std::string make_cache_key(const std::string& text, const std::string& font_name, SDL_Color color);"
    },
    {
      "caller_function": null,
      "called_function": "RenderingFacade",
      "location": {
        "file": "src/RenderingFacade.h",
        "line": 76,
        "column": 0
      },
      "context": "explicit RenderingFacade(RenderingConfig config = RenderingConfig{});"
    },
    {
      "caller_function": null,
      "called_function": "RenderingFacade",
      "location": {
        "file": "src/RenderingFacade.h",
        "line": 77,
        "column": 0
      },
      "context": "~RenderingFacade();"
    },
    {
      "caller_function": null,
      "called_function": "initialize",
      "location": {
        "file": "src/RenderingFacade.h",
        "line": 88,
        "column": 0
      },
      "context": "GameResult<void> initialize(SDL_Window* window, int width, int height);"
    },
    {
      "caller_function": null,
      "called_function": "shutdown",
      "location": {
        "file": "src/RenderingFacade.h",
        "line": 93,
        "column": 0
      },
      "context": "void shutdown();"
    },
    {
      "caller_function": null,
      "called_function": "is_ready",
      "location": {
        "file": "src/RenderingFacade.h",
        "line": 98,
        "column": 0
      },
      "context": "bool is_ready() const { return initialized; }"
    },
    {
      "caller_function": null,
      "called_function": "begin_frame",
      "location": {
        "file": "src/RenderingFacade.h",
        "line": 106,
        "column": 0
      },
      "context": "GameResult<void> begin_frame();"
    },
    {
      "caller_function": null,
      "called_function": "end_frame",
      "location": {
        "file": "src/RenderingFacade.h",
        "line": 112,
        "column": 0
      },
      "context": "GameResult<void> end_frame();"
    },
    {
      "caller_function": null,
      "called_function": "clear_screen",
      "location": {
        "file": "src/RenderingFacade.h",
        "line": 117,
        "column": 0
      },
      "context": "void clear_screen(uint8_t r = 0, uint8_t g = 0, uint8_t b = 0, uint8_t a = 255);"
    },
    {
      "caller_function": null,
      "called_function": "render_sprite",
      "location": {
        "file": "src/RenderingFacade.h",
        "line": 130,
        "column": 0
      },
      "context": "GameResult<void> render_sprite(const std::string& texture_name,"
    },
    {
      "caller_function": null,
      "called_function": "render_sprite_at_grid",
      "location": {
        "file": "src/RenderingFacade.h",
        "line": 139,
        "column": 0
      },
      "context": "GameResult<void> render_sprite_at_grid(const std::string& texture_name,"
    },
    {
      "caller_function": null,
      "called_function": "render_sprite_batch",
      "location": {
        "file": "src/RenderingFacade.h",
        "line": 148,
        "column": 0
      },
      "context": "GameResult<void> render_sprite_batch(const std::string& texture_name,"
    },
    {
      "caller_function": null,
      "called_function": "render_text",
      "location": {
        "file": "src/RenderingFacade.h",
        "line": 161,
        "column": 0
      },
      "context": "GameResult<void> render_text(const std::string& text,"
    },
    {
      "caller_function": null,
      "called_function": "render_particle_effect",
      "location": {
        "file": "src/RenderingFacade.h",
        "line": 175,
        "column": 0
      },
      "context": "GameResult<void> render_particle_effect(const std::string& effect_type,"
    },
    {
      "caller_function": null,
      "called_function": "screen_to_world",
      "location": {
        "file": "src/RenderingFacade.h",
        "line": 184,
        "column": 0
      },
      "context": "PixelCoord screen_to_world(const PixelCoord& screen_coord) const;"
    },
    {
      "caller_function": null,
      "called_function": "world_to_screen",
      "location": {
        "file": "src/RenderingFacade.h",
        "line": 189,
        "column": 0
      },
      "context": "PixelCoord world_to_screen(const PixelCoord& world_coord) const;"
    },
    {
      "caller_function": null,
      "called_function": "is_position_visible",
      "location": {
        "file": "src/RenderingFacade.h",
        "line": 194,
        "column": 0
      },
      "context": "bool is_position_visible(const PixelCoord& position) const;"
    },
    {
      "caller_function": null,
      "called_function": "get_viewport_bounds",
      "location": {
        "file": "src/RenderingFacade.h",
        "line": 202,
        "column": 0
      },
      "context": "ViewportBounds get_viewport_bounds() const;"
    },
    {
      "caller_function": null,
      "called_function": "update_config",
      "location": {
        "file": "src/RenderingFacade.h",
        "line": 209,
        "column": 0
      },
      "context": "void update_config(const RenderingConfig& config);"
    },
    {
      "caller_function": null,
      "called_function": "get_config",
      "location": {
        "file": "src/RenderingFacade.h",
        "line": 214,
        "column": 0
      },
      "context": "const RenderingConfig& get_config() const { return config; }"
    },
    {
      "caller_function": null,
      "called_function": "set_debug_mode",
      "location": {
        "file": "src/RenderingFacade.h",
        "line": 219,
        "column": 0
      },
      "context": "void set_debug_mode(bool enabled);"
    },
    {
      "caller_function": null,
      "called_function": "get_frame_statistics",
      "location": {
        "file": "src/RenderingFacade.h",
        "line": 226,
        "column": 0
      },
      "context": "const RenderingStats& get_frame_statistics() const { return stats; }"
    },
    {
      "caller_function": null,
      "called_function": "reset_statistics",
      "location": {
        "file": "src/RenderingFacade.h",
        "line": 231,
        "column": 0
      },
      "context": "void reset_statistics();"
    },
    {
      "caller_function": null,
      "called_function": "render_debug_info",
      "location": {
        "file": "src/RenderingFacade.h",
        "line": 236,
        "column": 0
      },
      "context": "void render_debug_info();"
    },
    {
      "caller_function": null,
      "called_function": "preload_texture",
      "location": {
        "file": "src/RenderingFacade.h",
        "line": 245,
        "column": 0
      },
      "context": "GameResult<void> preload_texture(const std::string& texture_name);"
    },
    {
      "caller_function": null,
      "called_function": "unload_texture",
      "location": {
        "file": "src/RenderingFacade.h",
        "line": 251,
        "column": 0
      },
      "context": "void unload_texture(const std::string& texture_name);"
    },
    {
      "caller_function": null,
      "called_function": "get_texture_info",
      "location": {
        "file": "src/RenderingFacade.h",
        "line": 261,
        "column": 0
      },
      "context": "TextureInfo get_texture_info(const std::string& texture_name) const;"
    },
    {
      "caller_function": null,
      "called_function": "get_gpu_renderer",
      "location": {
        "file": "src/RenderingFacade.h",
        "line": 267,
        "column": 0
      },
      "context": "GPUAcceleratedRenderer* get_gpu_renderer() const {"
    },
    {
      "caller_function": null,
      "called_function": "get",
      "location": {
        "file": "src/RenderingFacade.h",
        "line": 268,
        "column": 0
      },
      "context": "return gpu_renderer.get();"
    },
    {
      "caller_function": null,
      "called_function": "initialize_gpu_renderer",
      "location": {
        "file": "src/RenderingFacade.h",
        "line": 288,
        "column": 0
      },
      "context": "GameResult<void> initialize_gpu_renderer(SDL_Window* window);"
    },
    {
      "caller_function": null,
      "called_function": "initialize_text_renderer",
      "location": {
        "file": "src/RenderingFacade.h",
        "line": 289,
        "column": 0
      },
      "context": "GameResult<void> initialize_text_renderer();"
    },
    {
      "caller_function": null,
      "called_function": "initialize_particle_manager",
      "location": {
        "file": "src/RenderingFacade.h",
        "line": 290,
        "column": 0
      },
      "context": "GameResult<void> initialize_particle_manager();"
    },
    {
      "caller_function": null,
      "called_function": "update_statistics",
      "location": {
        "file": "src/RenderingFacade.h",
        "line": 292,
        "column": 0
      },
      "context": "void update_statistics();"
    },
    {
      "caller_function": null,
      "called_function": "validate_rendering_state",
      "location": {
        "file": "src/RenderingFacade.h",
        "line": 293,
        "column": 0
      },
      "context": "void validate_rendering_state() const;"
    },
    {
      "caller_function": null,
      "called_function": "handle_gpu_error",
      "location": {
        "file": "src/RenderingFacade.h",
        "line": 296,
        "column": 0
      },
      "context": "GameResult<void> handle_gpu_error(const std::string& operation) const;"
    },
    {
      "caller_function": null,
      "called_function": "handle_text_error",
      "location": {
        "file": "src/RenderingFacade.h",
        "line": 297,
        "column": 0
      },
      "context": "GameResult<void> handle_text_error(const std::string& operation) const;"
    },
    {
      "caller_function": null,
      "called_function": "handle_particle_error",
      "location": {
        "file": "src/RenderingFacade.h",
        "line": 298,
        "column": 0
      },
      "context": "GameResult<void> handle_particle_error(const std::string& operation) const;"
    },
    {
      "caller_function": null,
      "called_function": "MainMenuScreen",
      "location": {
        "file": "src/MainMenuScreen.h",
        "line": 16,
        "column": 0
      },
      "context": "MainMenuScreen(TextRenderer* text_renderer, GameContext* game_context = nullptr);"
    },
    {
      "caller_function": null,
      "called_function": "MainMenuScreen",
      "location": {
        "file": "src/MainMenuScreen.h",
        "line": 17,
        "column": 0
      },
      "context": "~MainMenuScreen();"
    },
    {
      "caller_function": null,
      "called_function": "handle_events",
      "location": {
        "file": "src/MainMenuScreen.h",
        "line": 19,
        "column": 0
      },
      "context": "void handle_events(SDL_Event& event) override;"
    },
    {
      "caller_function": null,
      "called_function": "update",
      "location": {
        "file": "src/MainMenuScreen.h",
        "line": 20,
        "column": 0
      },
      "context": "void update(float deltaTime) override;"
    },
    {
      "caller_function": null,
      "called_function": "render",
      "location": {
        "file": "src/MainMenuScreen.h",
        "line": 21,
        "column": 0
      },
      "context": "void render(SDL_Renderer* renderer = nullptr) override;"
    },
    {
      "caller_function": null,
      "called_function": "get_next_state",
      "location": {
        "file": "src/MainMenuScreen.h",
        "line": 23,
        "column": 0
      },
      "context": "GameState get_next_state() const;"
    },
    {
      "caller_function": null,
      "called_function": "Explosion",
      "location": {
        "file": "src/Explosion.h",
        "line": 21,
        "column": 0
      },
      "context": "Explosion(int _x, int _y, int _power, Bomber* _owner, GameContext* context);"
    },
    {
      "caller_function": null,
      "called_function": "act",
      "location": {
        "file": "src/Explosion.h",
        "line": 23,
        "column": 0
      },
      "context": "void act(float deltaTime) override;"
    },
    {
      "caller_function": null,
      "called_function": "show",
      "location": {
        "file": "src/Explosion.h",
        "line": 24,
        "column": 0
      },
      "context": "void show() override;"
    },
    {
      "caller_function": null,
      "called_function": "get_type",
      "location": {
        "file": "src/Explosion.h",
        "line": 26,
        "column": 0
      },
      "context": "ObjectType get_type() const override { return EXPLOSION; }"
    },
    {
      "caller_function": null,
      "called_function": "draw_explosion_tile",
      "location": {
        "file": "src/Explosion.h",
        "line": 29,
        "column": 0
      },
      "context": "void draw_explosion_tile(float tile_x, float tile_y);"
    },
    {
      "caller_function": null,
      "called_function": "get_dummy_white_texture",
      "location": {
        "file": "src/Explosion.h",
        "line": 30,
        "column": 0
      },
      "context": "static GLuint get_dummy_white_texture();"
    },
    {
      "caller_function": null,
      "called_function": "show_single_quad",
      "location": {
        "file": "src/Explosion.h",
        "line": 31,
        "column": 0
      },
      "context": "void show_single_quad(); // Alternativa"
    },
    {
      "caller_function": null,
      "called_function": "detonate_other_bombs",
      "location": {
        "file": "src/Explosion.h",
        "line": 32,
        "column": 0
      },
      "context": "void detonate_other_bombs();"
    },
    {
      "caller_function": null,
      "called_function": "kill_bombers",
      "location": {
        "file": "src/Explosion.h",
        "line": 33,
        "column": 0
      },
      "context": "void kill_bombers();"
    },
    {
      "caller_function": null,
      "called_function": "explode_corpses",
      "location": {
        "file": "src/Explosion.h",
        "line": 34,
        "column": 0
      },
      "context": "void explode_corpses();"
    },
    {
      "caller_function": null,
      "called_function": "notify_explosion_haptics",
      "location": {
        "file": "src/Explosion.h",
        "line": 35,
        "column": 0
      },
      "context": "void notify_explosion_haptics();"
    },
    {
      "caller_function": null,
      "called_function": "destroy_tile_at",
      "location": {
        "file": "src/Explosion.h",
        "line": 38,
        "column": 0
      },
      "context": "void destroy_tile_at(int map_x, int map_y);"
    },
    {
      "caller_function": null,
      "called_function": "is_tile_blocking_at",
      "location": {
        "file": "src/Explosion.h",
        "line": 39,
        "column": 0
      },
      "context": "bool is_tile_blocking_at(int map_x, int map_y);  // Check if tile is blocking in both architectures"
    },
    {
      "caller_function": null,
      "called_function": "Controller_Joystick",
      "location": {
        "file": "src/Controller_Joystick.h",
        "line": 21,
        "column": 0
      },
      "context": "Controller_Joystick(int joystick_index);"
    },
    {
      "caller_function": null,
      "called_function": "Controller_Joystick",
      "location": {
        "file": "src/Controller_Joystick.h",
        "line": 22,
        "column": 0
      },
      "context": "virtual ~Controller_Joystick();"
    },
    {
      "caller_function": null,
      "called_function": "update",
      "location": {
        "file": "src/Controller_Joystick.h",
        "line": 25,
        "column": 0
      },
      "context": "void update() override;"
    },
    {
      "caller_function": null,
      "called_function": "reset",
      "location": {
        "file": "src/Controller_Joystick.h",
        "line": 26,
        "column": 0
      },
      "context": "void reset() override;"
    },
    {
      "caller_function": null,
      "called_function": "is_left",
      "location": {
        "file": "src/Controller_Joystick.h",
        "line": 27,
        "column": 0
      },
      "context": "bool is_left() override;"
    },
    {
      "caller_function": null,
      "called_function": "is_right",
      "location": {
        "file": "src/Controller_Joystick.h",
        "line": 28,
        "column": 0
      },
      "context": "bool is_right() override;"
    },
    {
      "caller_function": null,
      "called_function": "is_up",
      "location": {
        "file": "src/Controller_Joystick.h",
        "line": 29,
        "column": 0
      },
      "context": "bool is_up() override;"
    },
    {
      "caller_function": null,
      "called_function": "is_down",
      "location": {
        "file": "src/Controller_Joystick.h",
        "line": 30,
        "column": 0
      },
      "context": "bool is_down() override;"
    },
    {
      "caller_function": null,
      "called_function": "is_bomb",
      "location": {
        "file": "src/Controller_Joystick.h",
        "line": 31,
        "column": 0
      },
      "context": "bool is_bomb() override;"
    },
    {
      "caller_function": null,
      "called_function": "initialize_joystick_system",
      "location": {
        "file": "src/Controller_Joystick.h",
        "line": 34,
        "column": 0
      },
      "context": "static void initialize_joystick_system();"
    },
    {
      "caller_function": null,
      "called_function": "shutdown_joystick_system",
      "location": {
        "file": "src/Controller_Joystick.h",
        "line": 35,
        "column": 0
      },
      "context": "static void shutdown_joystick_system();"
    },
    {
      "caller_function": null,
      "called_function": "update_all_joysticks",
      "location": {
        "file": "src/Controller_Joystick.h",
        "line": 36,
        "column": 0
      },
      "context": "static void update_all_joysticks();"
    },
    {
      "caller_function": null,
      "called_function": "get_joystick_count",
      "location": {
        "file": "src/Controller_Joystick.h",
        "line": 37,
        "column": 0
      },
      "context": "static int get_joystick_count();"
    },
    {
      "caller_function": null,
      "called_function": "trigger_explosion_vibration",
      "location": {
        "file": "src/Controller_Joystick.h",
        "line": 40,
        "column": 0
      },
      "context": "void trigger_explosion_vibration(float explosion_x, float explosion_y, float explosion_power, float "
    },
    {
      "caller_function": null,
      "called_function": "update_haptic",
      "location": {
        "file": "src/Controller_Joystick.h",
        "line": 41,
        "column": 0
      },
      "context": "void update_haptic(float deltaTime);"
    },
    {
      "caller_function": null,
      "called_function": "stop_vibration",
      "location": {
        "file": "src/Controller_Joystick.h",
        "line": 42,
        "column": 0
      },
      "context": "void stop_vibration();"
    },
    {
      "caller_function": null,
      "called_function": "instead",
      "location": {
        "file": "src/Controller_Joystick.h",
        "line": 46,
        "column": 0
      },
      "context": "SDL_Gamepad* gamepad;                // Use Gamepad API instead (SDL3 naming)"
    },
    {
      "caller_function": null,
      "called_function": "intensity",
      "location": {
        "file": "src/Controller_Joystick.h",
        "line": 57,
        "column": 0
      },
      "context": "float intensity;         // Current vibration intensity (0.0 - 1.0)"
    },
    {
      "caller_function": "e",
      "called_function": "threshold",
      "location": {
        "file": "src/Controller_Joystick.h",
        "line": 73,
        "column": 0
      },
      "context": "static constexpr Sint16 AXIS_THRESHOLD = 10000;  // SDL axis threshold (-32768 to 32767)"
    },
    {
      "caller_function": "e",
      "called_function": "button",
      "location": {
        "file": "src/Controller_Joystick.h",
        "line": 77,
        "column": 0
      },
      "context": "int button_bomb = 0;      // A button (Xbox) / X button (PlayStation)"
    },
    {
      "caller_function": "e",
      "called_function": "button",
      "location": {
        "file": "src/Controller_Joystick.h",
        "line": 77,
        "column": 0
      },
      "context": "int button_bomb = 0;      // A button (Xbox) / X button (PlayStation)"
    },
    {
      "caller_function": "e",
      "called_function": "button",
      "location": {
        "file": "src/Controller_Joystick.h",
        "line": 78,
        "column": 0
      },
      "context": "int button_alt_bomb = 1;  // B button (Xbox) / Circle button (PlayStation)"
    },
    {
      "caller_function": "e",
      "called_function": "button",
      "location": {
        "file": "src/Controller_Joystick.h",
        "line": 78,
        "column": 0
      },
      "context": "int button_alt_bomb = 1;  // B button (Xbox) / Circle button (PlayStation)"
    },
    {
      "caller_function": "e",
      "called_function": "initialize_joystick",
      "location": {
        "file": "src/Controller_Joystick.h",
        "line": 88,
        "column": 0
      },
      "context": "bool initialize_joystick();"
    },
    {
      "caller_function": "e",
      "called_function": "cleanup_joystick",
      "location": {
        "file": "src/Controller_Joystick.h",
        "line": 89,
        "column": 0
      },
      "context": "void cleanup_joystick();"
    },
    {
      "caller_function": "e",
      "called_function": "is_joystick_connected",
      "location": {
        "file": "src/Controller_Joystick.h",
        "line": 90,
        "column": 0
      },
      "context": "bool is_joystick_connected() const;"
    },
    {
      "caller_function": "e",
      "called_function": "update_input_state",
      "location": {
        "file": "src/Controller_Joystick.h",
        "line": 91,
        "column": 0
      },
      "context": "void update_input_state();"
    },
    {
      "caller_function": "e",
      "called_function": "initialize_haptic",
      "location": {
        "file": "src/Controller_Joystick.h",
        "line": 94,
        "column": 0
      },
      "context": "void initialize_haptic();"
    },
    {
      "caller_function": "e",
      "called_function": "cleanup_haptic",
      "location": {
        "file": "src/Controller_Joystick.h",
        "line": 95,
        "column": 0
      },
      "context": "void cleanup_haptic();"
    },
    {
      "caller_function": "e",
      "called_function": "apply_vibration",
      "location": {
        "file": "src/Controller_Joystick.h",
        "line": 96,
        "column": 0
      },
      "context": "void apply_vibration(float intensity);"
    },
    {
      "caller_function": "e",
      "called_function": "calculate_explosion_intensity",
      "location": {
        "file": "src/Controller_Joystick.h",
        "line": 99,
        "column": 0
      },
      "context": "float calculate_explosion_intensity(float explosion_x, float explosion_y, float explosion_power,"
    },
    {
      "caller_function": "e",
      "called_function": "get_analog_left",
      "location": {
        "file": "src/Controller_Joystick.h",
        "line": 103,
        "column": 0
      },
      "context": "bool get_analog_left() const;"
    },
    {
      "caller_function": "e",
      "called_function": "get_analog_right",
      "location": {
        "file": "src/Controller_Joystick.h",
        "line": 104,
        "column": 0
      },
      "context": "bool get_analog_right() const;"
    },
    {
      "caller_function": "e",
      "called_function": "get_analog_up",
      "location": {
        "file": "src/Controller_Joystick.h",
        "line": 105,
        "column": 0
      },
      "context": "bool get_analog_up() const;"
    },
    {
      "caller_function": "e",
      "called_function": "get_analog_down",
      "location": {
        "file": "src/Controller_Joystick.h",
        "line": 106,
        "column": 0
      },
      "context": "bool get_analog_down() const;"
    },
    {
      "caller_function": "e",
      "called_function": "get_button_bomb",
      "location": {
        "file": "src/Controller_Joystick.h",
        "line": 107,
        "column": 0
      },
      "context": "bool get_button_bomb() const;"
    },
    {
      "caller_function": "e",
      "called_function": "get_dpad_left",
      "location": {
        "file": "src/Controller_Joystick.h",
        "line": 110,
        "column": 0
      },
      "context": "bool get_dpad_left() const;"
    },
    {
      "caller_function": "e",
      "called_function": "get_dpad_right",
      "location": {
        "file": "src/Controller_Joystick.h",
        "line": 111,
        "column": 0
      },
      "context": "bool get_dpad_right() const;"
    },
    {
      "caller_function": "e",
      "called_function": "get_dpad_up",
      "location": {
        "file": "src/Controller_Joystick.h",
        "line": 112,
        "column": 0
      },
      "context": "bool get_dpad_up() const;"
    },
    {
      "caller_function": "e",
      "called_function": "get_dpad_down",
      "location": {
        "file": "src/Controller_Joystick.h",
        "line": 113,
        "column": 0
      },
      "context": "bool get_dpad_down() const;"
    },
    {
      "caller_function": null,
      "called_function": "ManagedObject",
      "location": {
        "file": "src/LifecycleManager.h",
        "line": 33,
        "column": 0
      },
      "context": "ManagedObject(GameObject* obj)"
    },
    {
      "caller_function": null,
      "called_function": "object",
      "location": {
        "file": "src/LifecycleManager.h",
        "line": 34,
        "column": 0
      },
      "context": ": object(obj), state(ObjectState::ACTIVE), state_timer(0.0f) {}"
    },
    {
      "caller_function": null,
      "called_function": "state",
      "location": {
        "file": "src/LifecycleManager.h",
        "line": 34,
        "column": 0
      },
      "context": ": object(obj), state(ObjectState::ACTIVE), state_timer(0.0f) {}"
    },
    {
      "caller_function": null,
      "called_function": "state_timer",
      "location": {
        "file": "src/LifecycleManager.h",
        "line": 34,
        "column": 0
      },
      "context": ": object(obj), state(ObjectState::ACTIVE), state_timer(0.0f) {}"
    },
    {
      "caller_function": null,
      "called_function": "ManagedTile",
      "location": {
        "file": "src/LifecycleManager.h",
        "line": 44,
        "column": 0
      },
      "context": "ManagedTile(MapTile* t, int x, int y)"
    },
    {
      "caller_function": null,
      "called_function": "tile",
      "location": {
        "file": "src/LifecycleManager.h",
        "line": 45,
        "column": 0
      },
      "context": ": tile(t), map_x(x), map_y(y), state(ObjectState::ACTIVE),"
    },
    {
      "caller_function": null,
      "called_function": "map_x",
      "location": {
        "file": "src/LifecycleManager.h",
        "line": 45,
        "column": 0
      },
      "context": ": tile(t), map_x(x), map_y(y), state(ObjectState::ACTIVE),"
    },
    {
      "caller_function": null,
      "called_function": "map_y",
      "location": {
        "file": "src/LifecycleManager.h",
        "line": 45,
        "column": 0
      },
      "context": ": tile(t), map_x(x), map_y(y), state(ObjectState::ACTIVE),"
    },
    {
      "caller_function": null,
      "called_function": "state",
      "location": {
        "file": "src/LifecycleManager.h",
        "line": 45,
        "column": 0
      },
      "context": ": tile(t), map_x(x), map_y(y), state(ObjectState::ACTIVE),"
    },
    {
      "caller_function": "r",
      "called_function": "LifecycleManager",
      "location": {
        "file": "src/LifecycleManager.h",
        "line": 50,
        "column": 0
      },
      "context": "LifecycleManager();"
    },
    {
      "caller_function": "r",
      "called_function": "LifecycleManager",
      "location": {
        "file": "src/LifecycleManager.h",
        "line": 51,
        "column": 0
      },
      "context": "~LifecycleManager();"
    },
    {
      "caller_function": "t",
      "called_function": "register_object",
      "location": {
        "file": "src/LifecycleManager.h",
        "line": 57,
        "column": 0
      },
      "context": "void register_object(GameObject* obj);"
    },
    {
      "caller_function": "t",
      "called_function": "register_tile",
      "location": {
        "file": "src/LifecycleManager.h",
        "line": 58,
        "column": 0
      },
      "context": "void register_tile(MapTile* tile, int map_x, int map_y);"
    },
    {
      "caller_function": "t",
      "called_function": "register_tile_entity",
      "location": {
        "file": "src/LifecycleManager.h",
        "line": 59,
        "column": 0
      },
      "context": "void register_tile_entity(TileEntity* tile_entity);  // NEW: TileEntity support"
    },
    {
      "caller_function": "t",
      "called_function": "mark_for_destruction",
      "location": {
        "file": "src/LifecycleManager.h",
        "line": 62,
        "column": 0
      },
      "context": "void mark_for_destruction(GameObject* obj);"
    },
    {
      "caller_function": "t",
      "called_function": "mark_tile_for_destruction",
      "location": {
        "file": "src/LifecycleManager.h",
        "line": 63,
        "column": 0
      },
      "context": "void mark_tile_for_destruction(MapTile* tile, MapTile* replacement = nullptr);"
    },
    {
      "caller_function": "t",
      "called_function": "mark_tile_entity_for_destruction",
      "location": {
        "file": "src/LifecycleManager.h",
        "line": 64,
        "column": 0
      },
      "context": "void mark_tile_entity_for_destruction(TileEntity* tile_entity);  // NEW: TileEntity support"
    },
    {
      "caller_function": "t",
      "called_function": "update_states",
      "location": {
        "file": "src/LifecycleManager.h",
        "line": 67,
        "column": 0
      },
      "context": "void update_states(float deltaTime);"
    },
    {
      "caller_function": "t",
      "called_function": "cleanup_dead_objects",
      "location": {
        "file": "src/LifecycleManager.h",
        "line": 68,
        "column": 0
      },
      "context": "void cleanup_dead_objects();"
    },
    {
      "caller_function": "t",
      "called_function": "get_object_state",
      "location": {
        "file": "src/LifecycleManager.h",
        "line": 71,
        "column": 0
      },
      "context": "ObjectState get_object_state(GameObject* obj) const;"
    },
    {
      "caller_function": "t",
      "called_function": "get_tile_state",
      "location": {
        "file": "src/LifecycleManager.h",
        "line": 72,
        "column": 0
      },
      "context": "ObjectState get_tile_state(MapTile* tile) const;"
    },
    {
      "caller_function": "t",
      "called_function": "get_tile_entity_state",
      "location": {
        "file": "src/LifecycleManager.h",
        "line": 73,
        "column": 0
      },
      "context": "ObjectState get_tile_entity_state(TileEntity* tile_entity) const;  // NEW: TileEntity support"
    },
    {
      "caller_function": "t",
      "called_function": "is_dying_or_dead",
      "location": {
        "file": "src/LifecycleManager.h",
        "line": 74,
        "column": 0
      },
      "context": "bool is_dying_or_dead(GameObject* obj) const;"
    },
    {
      "caller_function": "t",
      "called_function": "is_dying_or_dead",
      "location": {
        "file": "src/LifecycleManager.h",
        "line": 75,
        "column": 0
      },
      "context": "bool is_dying_or_dead(MapTile* tile) const;"
    },
    {
      "caller_function": "t",
      "called_function": "is_dying_or_dead",
      "location": {
        "file": "src/LifecycleManager.h",
        "line": 76,
        "column": 0
      },
      "context": "bool is_dying_or_dead(TileEntity* tile_entity) const;  // NEW: TileEntity support"
    },
    {
      "caller_function": "t",
      "called_function": "clear_all",
      "location": {
        "file": "src/LifecycleManager.h",
        "line": 79,
        "column": 0
      },
      "context": "void clear_all();"
    },
    {
      "caller_function": "t",
      "called_function": "get_active_object_count",
      "location": {
        "file": "src/LifecycleManager.h",
        "line": 80,
        "column": 0
      },
      "context": "size_t get_active_object_count() const;"
    },
    {
      "caller_function": "t",
      "called_function": "get_active_tile_count",
      "location": {
        "file": "src/LifecycleManager.h",
        "line": 81,
        "column": 0
      },
      "context": "size_t get_active_tile_count() const;"
    },
    {
      "caller_function": "t",
      "called_function": "find_managed_object",
      "location": {
        "file": "src/LifecycleManager.h",
        "line": 89,
        "column": 0
      },
      "context": "ManagedObject* find_managed_object(GameObject* obj);"
    },
    {
      "caller_function": "t",
      "called_function": "find_managed_tile",
      "location": {
        "file": "src/LifecycleManager.h",
        "line": 90,
        "column": 0
      },
      "context": "ManagedTile* find_managed_tile(MapTile* tile);"
    },
    {
      "caller_function": "t",
      "called_function": "find_managed_object",
      "location": {
        "file": "src/LifecycleManager.h",
        "line": 91,
        "column": 0
      },
      "context": "const ManagedObject* find_managed_object(GameObject* obj) const;"
    },
    {
      "caller_function": "t",
      "called_function": "find_managed_tile",
      "location": {
        "file": "src/LifecycleManager.h",
        "line": 92,
        "column": 0
      },
      "context": "const ManagedTile* find_managed_tile(MapTile* tile) const;"
    },
    {
      "caller_function": "t",
      "called_function": "update_object_state",
      "location": {
        "file": "src/LifecycleManager.h",
        "line": 94,
        "column": 0
      },
      "context": "void update_object_state(ManagedObject& managed, float deltaTime);"
    },
    {
      "caller_function": "t",
      "called_function": "update_tile_state",
      "location": {
        "file": "src/LifecycleManager.h",
        "line": 95,
        "column": 0
      },
      "context": "void update_tile_state(ManagedTile& managed, float deltaTime);"
    },
    {
      "caller_function": null,
      "called_function": "GameContext",
      "location": {
        "file": "src/GameContext.h",
        "line": 24,
        "column": 0
      },
      "context": "GameContext(LifecycleManager* lifecycle,"
    },
    {
      "caller_function": null,
      "called_function": "GameContext",
      "location": {
        "file": "src/GameContext.h",
        "line": 32,
        "column": 0
      },
      "context": "~GameContext();"
    },
    {
      "caller_function": null,
      "called_function": "set_object_lists",
      "location": {
        "file": "src/GameContext.h",
        "line": 35,
        "column": 0
      },
      "context": "void set_object_lists(std::list<GameObject*>* objects);"
    },
    {
      "caller_function": null,
      "called_function": "get_object_lists",
      "location": {
        "file": "src/GameContext.h",
        "line": 39,
        "column": 0
      },
      "context": "const std::list<GameObject*>& get_object_lists() const {"
    },
    {
      "caller_function": "f",
      "called_function": "get_lifecycle_manager",
      "location": {
        "file": "src/GameContext.h",
        "line": 48,
        "column": 0
      },
      "context": "LifecycleManager* get_lifecycle_manager() const { return lifecycle_manager; }"
    },
    {
      "caller_function": "f",
      "called_function": "get_tile_manager",
      "location": {
        "file": "src/GameContext.h",
        "line": 49,
        "column": 0
      },
      "context": "TileManager* get_tile_manager() const { return tile_manager; }"
    },
    {
      "caller_function": "f",
      "called_function": "get_particle_effects",
      "location": {
        "file": "src/GameContext.h",
        "line": 50,
        "column": 0
      },
      "context": "ParticleEffectsManager* get_particle_effects() const { return particle_effects; }"
    },
    {
      "caller_function": "f",
      "called_function": "get_map",
      "location": {
        "file": "src/GameContext.h",
        "line": 51,
        "column": 0
      },
      "context": "Map* get_map() const { return map; }"
    },
    {
      "caller_function": "f",
      "called_function": "get_renderer",
      "location": {
        "file": "src/GameContext.h",
        "line": 52,
        "column": 0
      },
      "context": "GPUAcceleratedRenderer* get_renderer() const { return nullptr; } // REMOVED: Legacy renderer"
    },
    {
      "caller_function": "f",
      "called_function": "get_text_renderer",
      "location": {
        "file": "src/GameContext.h",
        "line": 53,
        "column": 0
      },
      "context": "TextRenderer* get_text_renderer() const { return text_renderer; }"
    },
    {
      "caller_function": "f",
      "called_function": "get_spatial_grid",
      "location": {
        "file": "src/GameContext.h",
        "line": 54,
        "column": 0
      },
      "context": "SpatialGrid* get_spatial_grid() const { return spatial_grid; }"
    },
    {
      "caller_function": "f",
      "called_function": "get_rendering_facade",
      "location": {
        "file": "src/GameContext.h",
        "line": 55,
        "column": 0
      },
      "context": "RenderingFacade* get_rendering_facade() const { return rendering_facade; }"
    },
    {
      "caller_function": "f",
      "called_function": "is_position_blocked",
      "location": {
        "file": "src/GameContext.h",
        "line": 58,
        "column": 0
      },
      "context": "bool is_position_blocked(int map_x, int map_y) const;"
    },
    {
      "caller_function": "f",
      "called_function": "has_bomb_at",
      "location": {
        "file": "src/GameContext.h",
        "line": 59,
        "column": 0
      },
      "context": "bool has_bomb_at(int map_x, int map_y) const;"
    },
    {
      "caller_function": "f",
      "called_function": "is_position_walkable",
      "location": {
        "file": "src/GameContext.h",
        "line": 60,
        "column": 0
      },
      "context": "bool is_position_walkable(int map_x, int map_y) const;"
    },
    {
      "caller_function": "f",
      "called_function": "request_destruction_effect",
      "location": {
        "file": "src/GameContext.h",
        "line": 62,
        "column": 0
      },
      "context": "void request_destruction_effect(float x, float y, float intensity = 1.0f) const;"
    },
    {
      "caller_function": "f",
      "called_function": "mark_for_destruction",
      "location": {
        "file": "src/GameContext.h",
        "line": 63,
        "column": 0
      },
      "context": "void mark_for_destruction(class GameObject* obj) const;"
    },
    {
      "caller_function": "f",
      "called_function": "register_object",
      "location": {
        "file": "src/GameContext.h",
        "line": 66,
        "column": 0
      },
      "context": "void register_object(class GameObject* obj) const;"
    },
    {
      "caller_function": "f",
      "called_function": "remove_from_spatial_systems",
      "location": {
        "file": "src/GameContext.h",
        "line": 69,
        "column": 0
      },
      "context": "void remove_from_spatial_systems(class GameObject* obj) const;"
    },
    {
      "caller_function": "f",
      "called_function": "update_object_position_in_spatial_grid",
      "location": {
        "file": "src/GameContext.h",
        "line": 72,
        "column": 0
      },
      "context": "void update_object_position_in_spatial_grid(GameObject* obj, float old_x, float old_y) const;"
    },
    {
      "caller_function": "f",
      "called_function": "set_map",
      "location": {
        "file": "src/GameContext.h",
        "line": 75,
        "column": 0
      },
      "context": "void set_map(Map* new_map);"
    },
    {
      "caller_function": null,
      "called_function": "Bomber",
      "location": {
        "file": "src/Bomber.h",
        "line": 37,
        "column": 0
      },
      "context": "Bomber(int _x, int _y, COLOR _color, Controller* _controller, GameContext& context);"
    },
    {
      "caller_function": null,
      "called_function": "Bomber",
      "location": {
        "file": "src/Bomber.h",
        "line": 38,
        "column": 0
      },
      "context": "~Bomber();"
    },
    {
      "caller_function": null,
      "called_function": "act",
      "location": {
        "file": "src/Bomber.h",
        "line": 40,
        "column": 0
      },
      "context": "void act(float deltaTime) override;"
    },
    {
      "caller_function": null,
      "called_function": "show",
      "location": {
        "file": "src/Bomber.h",
        "line": 41,
        "column": 0
      },
      "context": "void show() override; // Override to handle invincibility flickering"
    },
    {
      "caller_function": null,
      "called_function": "get_color",
      "location": {
        "file": "src/Bomber.h",
        "line": 43,
        "column": 0
      },
      "context": "COLOR get_color() const { return color; }"
    },
    {
      "caller_function": null,
      "called_function": "get_type",
      "location": {
        "file": "src/Bomber.h",
        "line": 44,
        "column": 0
      },
      "context": "ObjectType get_type() const override { return BOMBER; }"
    },
    {
      "caller_function": null,
      "called_function": "die",
      "location": {
        "file": "src/Bomber.h",
        "line": 49,
        "column": 0
      },
      "context": "void die();"
    },
    {
      "caller_function": null,
      "called_function": "is_dead",
      "location": {
        "file": "src/Bomber.h",
        "line": 50,
        "column": 0
      },
      "context": "bool is_dead() const;"
    },
    {
      "caller_function": null,
      "called_function": "set_lives",
      "location": {
        "file": "src/Bomber.h",
        "line": 53,
        "column": 0
      },
      "context": "void set_lives(int lives);"
    },
    {
      "caller_function": null,
      "called_function": "get_lives",
      "location": {
        "file": "src/Bomber.h",
        "line": 54,
        "column": 0
      },
      "context": "int get_lives() const;"
    },
    {
      "caller_function": null,
      "called_function": "lose_life",
      "location": {
        "file": "src/Bomber.h",
        "line": 55,
        "column": 0
      },
      "context": "void lose_life();"
    },
    {
      "caller_function": null,
      "called_function": "has_lives",
      "location": {
        "file": "src/Bomber.h",
        "line": 56,
        "column": 0
      },
      "context": "bool has_lives() const;"
    },
    {
      "caller_function": null,
      "called_function": "respawn",
      "location": {
        "file": "src/Bomber.h",
        "line": 59,
        "column": 0
      },
      "context": "void respawn();"
    },
    {
      "caller_function": null,
      "called_function": "is_respawning",
      "location": {
        "file": "src/Bomber.h",
        "line": 60,
        "column": 0
      },
      "context": "bool is_respawning() const;"
    },
    {
      "caller_function": null,
      "called_function": "set_invincible",
      "location": {
        "file": "src/Bomber.h",
        "line": 61,
        "column": 0
      },
      "context": "void set_invincible(bool inv);"
    },
    {
      "caller_function": null,
      "called_function": "is_invincible",
      "location": {
        "file": "src/Bomber.h",
        "line": 62,
        "column": 0
      },
      "context": "bool is_invincible() const;"
    },
    {
      "caller_function": null,
      "called_function": "set_team",
      "location": {
        "file": "src/Bomber.h",
        "line": 65,
        "column": 0
      },
      "context": "void set_team(int team);"
    },
    {
      "caller_function": null,
      "called_function": "get_team",
      "location": {
        "file": "src/Bomber.h",
        "line": 66,
        "column": 0
      },
      "context": "int get_team() const;"
    },
    {
      "caller_function": null,
      "called_function": "set_name",
      "location": {
        "file": "src/Bomber.h",
        "line": 69,
        "column": 0
      },
      "context": "void set_name(const std::string& name);"
    },
    {
      "caller_function": null,
      "called_function": "get_name",
      "location": {
        "file": "src/Bomber.h",
        "line": 70,
        "column": 0
      },
      "context": "std::string get_name() const;"
    },
    {
      "caller_function": null,
      "called_function": "set_number",
      "location": {
        "file": "src/Bomber.h",
        "line": 73,
        "column": 0
      },
      "context": "void set_number(int number);"
    },
    {
      "caller_function": null,
      "called_function": "get_number",
      "location": {
        "file": "src/Bomber.h",
        "line": 74,
        "column": 0
      },
      "context": "int get_number() const;"
    },
    {
      "caller_function": "r",
      "called_function": "fly_to",
      "location": {
        "file": "src/Bomber.h",
        "line": 80,
        "column": 0
      },
      "context": "void fly_to(int target_x, int target_y, float duration_ms);"
    },
    {
      "caller_function": "r",
      "called_function": "can_move",
      "location": {
        "file": "src/Bomber.h",
        "line": 81,
        "column": 0
      },
      "context": "bool can_move() const;"
    },
    {
      "caller_function": "r",
      "called_function": "place_bomb",
      "location": {
        "file": "src/Bomber.h",
        "line": 85,
        "column": 0
      },
      "context": "void place_bomb();"
    },
    {
      "caller_function": "r",
      "called_function": "throw_bomb",
      "location": {
        "file": "src/Bomber.h",
        "line": 86,
        "column": 0
      },
      "context": "void throw_bomb();"
    },
    {
      "caller_function": "r",
      "called_function": "can_place_bomb",
      "location": {
        "file": "src/Bomber.h",
        "line": 87,
        "column": 0
      },
      "context": "bool can_place_bomb() const;"
    },
    {
      "caller_function": "r",
      "called_function": "inc_speed",
      "location": {
        "file": "src/Bomber.h",
        "line": 90,
        "column": 0
      },
      "context": "void inc_speed(int amount);"
    },
    {
      "caller_function": "r",
      "called_function": "dec_speed",
      "location": {
        "file": "src/Bomber.h",
        "line": 91,
        "column": 0
      },
      "context": "void dec_speed(int amount);"
    },
    {
      "caller_function": "r",
      "called_function": "get_power",
      "location": {
        "file": "src/Bomber.h",
        "line": 92,
        "column": 0
      },
      "context": "int get_power() const;"
    },
    {
      "caller_function": "r",
      "called_function": "inc_power",
      "location": {
        "file": "src/Bomber.h",
        "line": 93,
        "column": 0
      },
      "context": "void inc_power(int amount);"
    },
    {
      "caller_function": "r",
      "called_function": "get_max_bombs",
      "location": {
        "file": "src/Bomber.h",
        "line": 96,
        "column": 0
      },
      "context": "int get_max_bombs() const;"
    },
    {
      "caller_function": "r",
      "called_function": "inc_max_bombs",
      "location": {
        "file": "src/Bomber.h",
        "line": 97,
        "column": 0
      },
      "context": "void inc_max_bombs(int amount);"
    },
    {
      "caller_function": "r",
      "called_function": "get_current_bombs",
      "location": {
        "file": "src/Bomber.h",
        "line": 98,
        "column": 0
      },
      "context": "int get_current_bombs() const;"
    },
    {
      "caller_function": "r",
      "called_function": "inc_current_bombs",
      "location": {
        "file": "src/Bomber.h",
        "line": 99,
        "column": 0
      },
      "context": "void inc_current_bombs();"
    },
    {
      "caller_function": "r",
      "called_function": "dec_current_bombs",
      "location": {
        "file": "src/Bomber.h",
        "line": 100,
        "column": 0
      },
      "context": "void dec_current_bombs();"
    },
    {
      "caller_function": "r",
      "called_function": "can_kick",
      "location": {
        "file": "src/Bomber.h",
        "line": 103,
        "column": 0
      },
      "context": "bool can_kick() const;"
    },
    {
      "caller_function": "r",
      "called_function": "can_throw",
      "location": {
        "file": "src/Bomber.h",
        "line": 104,
        "column": 0
      },
      "context": "bool can_throw() const;"
    },
    {
      "caller_function": "r",
      "called_function": "set_can_kick",
      "location": {
        "file": "src/Bomber.h",
        "line": 105,
        "column": 0
      },
      "context": "void set_can_kick(bool kick);"
    },
    {
      "caller_function": "r",
      "called_function": "set_can_throw",
      "location": {
        "file": "src/Bomber.h",
        "line": 106,
        "column": 0
      },
      "context": "void set_can_throw(bool throw_ability);"
    },
    {
      "caller_function": "r",
      "called_function": "can_ignore_bomb_collision",
      "location": {
        "file": "src/Bomber.h",
        "line": 112,
        "column": 0
      },
      "context": "bool can_ignore_bomb_collision(Bomb* bomb) const;"
    },
    {
      "caller_function": null,
      "called_function": "BomberMovementComponent",
      "location": {
        "file": "src/BomberComponents.h",
        "line": 28,
        "column": 0
      },
      "context": "BomberMovementComponent(GameObject* owner, GameContext* context);"
    },
    {
      "caller_function": null,
      "called_function": "update",
      "location": {
        "file": "src/BomberComponents.h",
        "line": 31,
        "column": 0
      },
      "context": "void update(float deltaTime);"
    },
    {
      "caller_function": null,
      "called_function": "handle_controller_input",
      "location": {
        "file": "src/BomberComponents.h",
        "line": 32,
        "column": 0
      },
      "context": "void handle_controller_input(Controller* controller, float deltaTime);"
    },
    {
      "caller_function": "d",
      "called_function": "get_speed",
      "location": {
        "file": "src/BomberComponents.h",
        "line": 36,
        "column": 0
      },
      "context": "int get_speed() const { return speed; }"
    },
    {
      "caller_function": "d",
      "called_function": "fly_to",
      "location": {
        "file": "src/BomberComponents.h",
        "line": 39,
        "column": 0
      },
      "context": "void fly_to(int target_x, int target_y, float duration_ms);"
    },
    {
      "caller_function": "d",
      "called_function": "is_flying",
      "location": {
        "file": "src/BomberComponents.h",
        "line": 40,
        "column": 0
      },
      "context": "bool is_flying() const { return flying; }"
    },
    {
      "caller_function": "d",
      "called_function": "can_move",
      "location": {
        "file": "src/BomberComponents.h",
        "line": 43,
        "column": 0
      },
      "context": "bool can_move() const;"
    },
    {
      "caller_function": "d",
      "called_function": "deltaTime",
      "location": {
        "file": "src/BomberComponents.h",
        "line": 50,
        "column": 0
      },
      "context": "int speed = 60; // Reduced from 90 - calibrated for deltaTime (was designed for ~60fps frame-based)"
    },
    {
      "caller_function": "d",
      "called_function": "update_flight_animation",
      "location": {
        "file": "src/BomberComponents.h",
        "line": 61,
        "column": 0
      },
      "context": "void update_flight_animation(float deltaTime);"
    },
    {
      "caller_function": "d",
      "called_function": "BomberCombatComponent",
      "location": {
        "file": "src/BomberComponents.h",
        "line": 68,
        "column": 0
      },
      "context": "BomberCombatComponent(GameObject* owner, GameContext* context);"
    },
    {
      "caller_function": "d",
      "called_function": "update",
      "location": {
        "file": "src/BomberComponents.h",
        "line": 71,
        "column": 0
      },
      "context": "void update(float deltaTime);"
    },
    {
      "caller_function": "d",
      "called_function": "handle_controller_input",
      "location": {
        "file": "src/BomberComponents.h",
        "line": 72,
        "column": 0
      },
      "context": "void handle_controller_input(Controller* controller, float deltaTime);"
    },
    {
      "caller_function": "d",
      "called_function": "place_bomb",
      "location": {
        "file": "src/BomberComponents.h",
        "line": 75,
        "column": 0
      },
      "context": "void place_bomb();"
    },
    {
      "caller_function": "d",
      "called_function": "throw_bomb",
      "location": {
        "file": "src/BomberComponents.h",
        "line": 76,
        "column": 0
      },
      "context": "void throw_bomb();"
    },
    {
      "caller_function": "d",
      "called_function": "can_place_bomb",
      "location": {
        "file": "src/BomberComponents.h",
        "line": 77,
        "column": 0
      },
      "context": "bool can_place_bomb() const;"
    },
    {
      "caller_function": "d",
      "called_function": "get_power",
      "location": {
        "file": "src/BomberComponents.h",
        "line": 80,
        "column": 0
      },
      "context": "int get_power() const { return power; }"
    },
    {
      "caller_function": "r",
      "called_function": "get_max_bombs",
      "location": {
        "file": "src/BomberComponents.h",
        "line": 85,
        "column": 0
      },
      "context": "int get_max_bombs() const { return max_bombs; }"
    },
    {
      "caller_function": "s",
      "called_function": "get_current_bombs",
      "location": {
        "file": "src/BomberComponents.h",
        "line": 89,
        "column": 0
      },
      "context": "int get_current_bombs() const { return current_bombs; }"
    },
    {
      "caller_function": "s",
      "called_function": "die",
      "location": {
        "file": "src/BomberComponents.h",
        "line": 98,
        "column": 0
      },
      "context": "void die();"
    },
    {
      "caller_function": "s",
      "called_function": "is_dead",
      "location": {
        "file": "src/BomberComponents.h",
        "line": 99,
        "column": 0
      },
      "context": "bool is_dead() const { return dead; }"
    },
    {
      "caller_function": "s",
      "called_function": "can_ignore_bomb_collision",
      "location": {
        "file": "src/BomberComponents.h",
        "line": 102,
        "column": 0
      },
      "context": "bool can_ignore_bomb_collision(Bomb* bomb) const;"
    },
    {
      "caller_function": "s",
      "called_function": "update_bomb_cooldown",
      "location": {
        "file": "src/BomberComponents.h",
        "line": 127,
        "column": 0
      },
      "context": "void update_bomb_cooldown(float deltaTime);"
    },
    {
      "caller_function": "s",
      "called_function": "update_bomb_throwing",
      "location": {
        "file": "src/BomberComponents.h",
        "line": 128,
        "column": 0
      },
      "context": "void update_bomb_throwing(float deltaTime);"
    },
    {
      "caller_function": "s",
      "called_function": "update_bomb_escape_status",
      "location": {
        "file": "src/BomberComponents.h",
        "line": 129,
        "column": 0
      },
      "context": "void update_bomb_escape_status(); // Track bomber position relative to bomb"
    },
    {
      "caller_function": "s",
      "called_function": "BomberAnimationComponent",
      "location": {
        "file": "src/BomberComponents.h",
        "line": 136,
        "column": 0
      },
      "context": "BomberAnimationComponent(GameObject* owner, GameContext* context);"
    },
    {
      "caller_function": "s",
      "called_function": "update",
      "location": {
        "file": "src/BomberComponents.h",
        "line": 139,
        "column": 0
      },
      "context": "void update(float deltaTime);"
    },
    {
      "caller_function": "s",
      "called_function": "set_texture_from_color",
      "location": {
        "file": "src/BomberComponents.h",
        "line": 142,
        "column": 0
      },
      "context": "void set_texture_from_color(int color);"
    },
    {
      "caller_function": "s",
      "called_function": "update_animation_frame",
      "location": {
        "file": "src/BomberComponents.h",
        "line": 143,
        "column": 0
      },
      "context": "void update_animation_frame(float deltaTime, Direction direction);"
    },
    {
      "caller_function": "s",
      "called_function": "set_standing_sprite",
      "location": {
        "file": "src/BomberComponents.h",
        "line": 144,
        "column": 0
      },
      "context": "void set_standing_sprite(Direction direction); // Set sprite for standing still"
    },
    {
      "caller_function": "e",
      "called_function": "is_invincible",
      "location": {
        "file": "src/BomberComponents.h",
        "line": 148,
        "column": 0
      },
      "context": "bool is_invincible() const { return invincible; }"
    },
    {
      "caller_function": "e",
      "called_function": "update_invincibility_effects",
      "location": {
        "file": "src/BomberComponents.h",
        "line": 149,
        "column": 0
      },
      "context": "void update_invincibility_effects(float deltaTime);"
    },
    {
      "caller_function": "e",
      "called_function": "choose_texture_for_color",
      "location": {
        "file": "src/BomberComponents.h",
        "line": 167,
        "column": 0
      },
      "context": "void choose_texture_for_color(int color);"
    },
    {
      "caller_function": "e",
      "called_function": "BomberLifecycleComponent",
      "location": {
        "file": "src/BomberComponents.h",
        "line": 174,
        "column": 0
      },
      "context": "BomberLifecycleComponent(GameObject* owner, GameContext* context);"
    },
    {
      "caller_function": "e",
      "called_function": "update",
      "location": {
        "file": "src/BomberComponents.h",
        "line": 177,
        "column": 0
      },
      "context": "void update(float deltaTime);"
    },
    {
      "caller_function": "s",
      "called_function": "get_lives",
      "location": {
        "file": "src/BomberComponents.h",
        "line": 181,
        "column": 0
      },
      "context": "int get_lives() const { return remaining_lives; }"
    },
    {
      "caller_function": "e",
      "called_function": "has_lives",
      "location": {
        "file": "src/BomberComponents.h",
        "line": 183,
        "column": 0
      },
      "context": "bool has_lives() const { return remaining_lives > 0; }"
    },
    {
      "caller_function": "e",
      "called_function": "respawn",
      "location": {
        "file": "src/BomberComponents.h",
        "line": 186,
        "column": 0
      },
      "context": "void respawn();"
    },
    {
      "caller_function": "e",
      "called_function": "is_respawning",
      "location": {
        "file": "src/BomberComponents.h",
        "line": 187,
        "column": 0
      },
      "context": "bool is_respawning() const { return respawning; }"
    },
    {
      "caller_function": "m",
      "called_function": "get_team",
      "location": {
        "file": "src/BomberComponents.h",
        "line": 191,
        "column": 0
      },
      "context": "int get_team() const { return bomber_team; }"
    },
    {
      "caller_function": "e",
      "called_function": "get_name",
      "location": {
        "file": "src/BomberComponents.h",
        "line": 193,
        "column": 0
      },
      "context": "std::string get_name() const { return bomber_name; }"
    },
    {
      "caller_function": "r",
      "called_function": "get_number",
      "location": {
        "file": "src/BomberComponents.h",
        "line": 195,
        "column": 0
      },
      "context": "int get_number() const { return bomber_number; }"
    },
    {
      "caller_function": "r",
      "called_function": "update_respawn_timer",
      "location": {
        "file": "src/BomberComponents.h",
        "line": 212,
        "column": 0
      },
      "context": "void update_respawn_timer(float deltaTime);"
    },
    {
      "caller_function": null,
      "called_function": "MapTile_Pure",
      "location": {
        "file": "src/MapTile_Pure.h",
        "line": 28,
        "column": 0
      },
      "context": "MapTile_Pure(TILE_TYPE type, int grid_x, int grid_y);"
    },
    {
      "caller_function": null,
      "called_function": "MapTile_Pure",
      "location": {
        "file": "src/MapTile_Pure.h",
        "line": 29,
        "column": 0
      },
      "context": "virtual ~MapTile_Pure();"
    },
    {
      "caller_function": null,
      "called_function": "create",
      "location": {
        "file": "src/MapTile_Pure.h",
        "line": 32,
        "column": 0
      },
      "context": "static MapTile_Pure* create(TILE_TYPE type, int grid_x, int grid_y);"
    },
    {
      "caller_function": null,
      "called_function": "get_type",
      "location": {
        "file": "src/MapTile_Pure.h",
        "line": 35,
        "column": 0
      },
      "context": "TILE_TYPE get_type() const { return type; }"
    },
    {
      "caller_function": null,
      "called_function": "is_blocking",
      "location": {
        "file": "src/MapTile_Pure.h",
        "line": 36,
        "column": 0
      },
      "context": "bool is_blocking() const { return blocking; }"
    },
    {
      "caller_function": null,
      "called_function": "is_destructible",
      "location": {
        "file": "src/MapTile_Pure.h",
        "line": 37,
        "column": 0
      },
      "context": "bool is_destructible() const { return destructible; }"
    },
    {
      "caller_function": null,
      "called_function": "is_burnable",
      "location": {
        "file": "src/MapTile_Pure.h",
        "line": 38,
        "column": 0
      },
      "context": "bool is_burnable() const { return destructible; }"
    },
    {
      "caller_function": null,
      "called_function": "get_grid_x",
      "location": {
        "file": "src/MapTile_Pure.h",
        "line": 41,
        "column": 0
      },
      "context": "int get_grid_x() const { return grid_x; }"
    },
    {
      "caller_function": null,
      "called_function": "get_grid_y",
      "location": {
        "file": "src/MapTile_Pure.h",
        "line": 42,
        "column": 0
      },
      "context": "int get_grid_y() const { return grid_y; }"
    },
    {
      "caller_function": null,
      "called_function": "get_pixel_x",
      "location": {
        "file": "src/MapTile_Pure.h",
        "line": 43,
        "column": 0
      },
      "context": "int get_pixel_x() const { return grid_x * 40; }"
    },
    {
      "caller_function": null,
      "called_function": "get_pixel_y",
      "location": {
        "file": "src/MapTile_Pure.h",
        "line": 44,
        "column": 0
      },
      "context": "int get_pixel_y() const { return grid_y * 40; }"
    },
    {
      "caller_function": "b",
      "called_function": "get_bomb",
      "location": {
        "file": "src/MapTile_Pure.h",
        "line": 48,
        "column": 0
      },
      "context": "Bomb* get_bomb() const { return bomb; }"
    },
    {
      "caller_function": "b",
      "called_function": "has_bomb",
      "location": {
        "file": "src/MapTile_Pure.h",
        "line": 49,
        "column": 0
      },
      "context": "bool has_bomb() const { return bomb != nullptr; }"
    },
    {
      "caller_function": "r",
      "called_function": "get_bomber",
      "location": {
        "file": "src/MapTile_Pure.h",
        "line": 52,
        "column": 0
      },
      "context": "Bomber* get_bomber() const { return bomber; }"
    },
    {
      "caller_function": "r",
      "called_function": "has_bomber",
      "location": {
        "file": "src/MapTile_Pure.h",
        "line": 53,
        "column": 0
      },
      "context": "bool has_bomber() const { return bomber != nullptr; }"
    },
    {
      "caller_function": "r",
      "called_function": "get_sprite_number",
      "location": {
        "file": "src/MapTile_Pure.h",
        "line": 56,
        "column": 0
      },
      "context": "int get_sprite_number() const { return sprite_nr; }"
    },
    {
      "caller_function": "r",
      "called_function": "can_be_destroyed",
      "location": {
        "file": "src/MapTile_Pure.h",
        "line": 60,
        "column": 0
      },
      "context": "virtual bool can_be_destroyed() const { return destructible; }"
    },
    {
      "caller_function": "t",
      "called_function": "get_tile_type",
      "location": {
        "file": "src/MapTile_Pure.h",
        "line": 64,
        "column": 0
      },
      "context": "int get_tile_type() const {"
    },
    {
      "caller_function": "h",
      "called_function": "MapTile_Ground_Pure",
      "location": {
        "file": "src/MapTile_Pure.h",
        "line": 90,
        "column": 0
      },
      "context": "MapTile_Ground_Pure(int grid_x, int grid_y);"
    },
    {
      "caller_function": "h",
      "called_function": "MapTile_Wall_Pure",
      "location": {
        "file": "src/MapTile_Pure.h",
        "line": 95,
        "column": 0
      },
      "context": "MapTile_Wall_Pure(int grid_x, int grid_y);"
    },
    {
      "caller_function": "h",
      "called_function": "MapTile_Box_Pure",
      "location": {
        "file": "src/MapTile_Pure.h",
        "line": 100,
        "column": 0
      },
      "context": "MapTile_Box_Pure(int grid_x, int grid_y);"
    },
    {
      "caller_function": "h",
      "called_function": "can_be_destroyed",
      "location": {
        "file": "src/MapTile_Pure.h",
        "line": 101,
        "column": 0
      },
      "context": "bool can_be_destroyed() const override { return true; }"
    },
    {
      "caller_function": "h",
      "called_function": "on_destruction_request",
      "location": {
        "file": "src/MapTile_Pure.h",
        "line": 102,
        "column": 0
      },
      "context": "void on_destruction_request() override;"
    },
    {
      "caller_function": "d",
      "called_function": "to_string",
      "location": {
        "file": "src/CoordinateSystem.h",
        "line": 46,
        "column": 0
      },
      "context": "std::string to_string() const {"
    },
    {
      "caller_function": "d",
      "called_function": "std::to_string",
      "location": {
        "file": "src/CoordinateSystem.h",
        "line": 47,
        "column": 0
      },
      "context": "return \"Grid(\" + std::to_string(grid_x) + \",\" + std::to_string(grid_y) + \")\";"
    },
    {
      "caller_function": "d",
      "called_function": "std::to_string",
      "location": {
        "file": "src/CoordinateSystem.h",
        "line": 47,
        "column": 0
      },
      "context": "return \"Grid(\" + std::to_string(grid_x) + \",\" + std::to_string(grid_y) + \")\";"
    },
    {
      "caller_function": "d",
      "called_function": "Grid",
      "location": {
        "file": "src/CoordinateSystem.h",
        "line": 47,
        "column": 0
      },
      "context": "return \"Grid(\" + std::to_string(grid_x) + \",\" + std::to_string(grid_y) + \")\";"
    },
    {
      "caller_function": "d",
      "called_function": "to_string",
      "location": {
        "file": "src/CoordinateSystem.h",
        "line": 47,
        "column": 0
      },
      "context": "return \"Grid(\" + std::to_string(grid_x) + \",\" + std::to_string(grid_y) + \")\";"
    },
    {
      "caller_function": "d",
      "called_function": "to_string",
      "location": {
        "file": "src/CoordinateSystem.h",
        "line": 47,
        "column": 0
      },
      "context": "return \"Grid(\" + std::to_string(grid_x) + \",\" + std::to_string(grid_y) + \")\";"
    },
    {
      "caller_function": "d",
      "called_function": "is_valid",
      "location": {
        "file": "src/CoordinateSystem.h",
        "line": 53,
        "column": 0
      },
      "context": "bool is_valid() const {"
    },
    {
      "caller_function": "d",
      "called_function": "std::abs",
      "location": {
        "file": "src/CoordinateSystem.h",
        "line": 72,
        "column": 0
      },
      "context": "return std::abs(pixel_x - other.pixel_x) < epsilon &&"
    },
    {
      "caller_function": "d",
      "called_function": "abs",
      "location": {
        "file": "src/CoordinateSystem.h",
        "line": 72,
        "column": 0
      },
      "context": "return std::abs(pixel_x - other.pixel_x) < epsilon &&"
    },
    {
      "caller_function": "d",
      "called_function": "std::abs",
      "location": {
        "file": "src/CoordinateSystem.h",
        "line": 73,
        "column": 0
      },
      "context": "std::abs(pixel_y - other.pixel_y) < epsilon;"
    },
    {
      "caller_function": "d",
      "called_function": "abs",
      "location": {
        "file": "src/CoordinateSystem.h",
        "line": 73,
        "column": 0
      },
      "context": "std::abs(pixel_y - other.pixel_y) < epsilon;"
    },
    {
      "caller_function": "d",
      "called_function": "to_string",
      "location": {
        "file": "src/CoordinateSystem.h",
        "line": 80,
        "column": 0
      },
      "context": "std::string to_string() const {"
    },
    {
      "caller_function": "d",
      "called_function": "std::to_string",
      "location": {
        "file": "src/CoordinateSystem.h",
        "line": 81,
        "column": 0
      },
      "context": "return \"Pixel(\" + std::to_string(pixel_x) + \",\" + std::to_string(pixel_y) + \")\";"
    },
    {
      "caller_function": "d",
      "called_function": "std::to_string",
      "location": {
        "file": "src/CoordinateSystem.h",
        "line": 81,
        "column": 0
      },
      "context": "return \"Pixel(\" + std::to_string(pixel_x) + \",\" + std::to_string(pixel_y) + \")\";"
    },
    {
      "caller_function": "d",
      "called_function": "Pixel",
      "location": {
        "file": "src/CoordinateSystem.h",
        "line": 81,
        "column": 0
      },
      "context": "return \"Pixel(\" + std::to_string(pixel_x) + \",\" + std::to_string(pixel_y) + \")\";"
    },
    {
      "caller_function": "d",
      "called_function": "to_string",
      "location": {
        "file": "src/CoordinateSystem.h",
        "line": 81,
        "column": 0
      },
      "context": "return \"Pixel(\" + std::to_string(pixel_x) + \",\" + std::to_string(pixel_y) + \")\";"
    },
    {
      "caller_function": "d",
      "called_function": "to_string",
      "location": {
        "file": "src/CoordinateSystem.h",
        "line": 81,
        "column": 0
      },
      "context": "return \"Pixel(\" + std::to_string(pixel_x) + \",\" + std::to_string(pixel_y) + \")\";"
    },
    {
      "caller_function": "d",
      "called_function": "distance_to",
      "location": {
        "file": "src/CoordinateSystem.h",
        "line": 87,
        "column": 0
      },
      "context": "float distance_to(const PixelCoord& other) const {"
    },
    {
      "caller_function": "d",
      "called_function": "std::sqrt",
      "location": {
        "file": "src/CoordinateSystem.h",
        "line": 90,
        "column": 0
      },
      "context": "return std::sqrt(dx * dx + dy * dy);"
    },
    {
      "caller_function": "d",
      "called_function": "sqrt",
      "location": {
        "file": "src/CoordinateSystem.h",
        "line": 90,
        "column": 0
      },
      "context": "return std::sqrt(dx * dx + dy * dy);"
    },
    {
      "caller_function": "d",
      "called_function": "manhattan_distance_to",
      "location": {
        "file": "src/CoordinateSystem.h",
        "line": 96,
        "column": 0
      },
      "context": "float manhattan_distance_to(const PixelCoord& other) const {"
    },
    {
      "caller_function": "d",
      "called_function": "std::abs",
      "location": {
        "file": "src/CoordinateSystem.h",
        "line": 97,
        "column": 0
      },
      "context": "return std::abs(pixel_x - other.pixel_x) + std::abs(pixel_y - other.pixel_y);"
    },
    {
      "caller_function": "d",
      "called_function": "std::abs",
      "location": {
        "file": "src/CoordinateSystem.h",
        "line": 97,
        "column": 0
      },
      "context": "return std::abs(pixel_x - other.pixel_x) + std::abs(pixel_y - other.pixel_y);"
    },
    {
      "caller_function": "d",
      "called_function": "abs",
      "location": {
        "file": "src/CoordinateSystem.h",
        "line": 97,
        "column": 0
      },
      "context": "return std::abs(pixel_x - other.pixel_x) + std::abs(pixel_y - other.pixel_y);"
    },
    {
      "caller_function": "d",
      "called_function": "abs",
      "location": {
        "file": "src/CoordinateSystem.h",
        "line": 97,
        "column": 0
      },
      "context": "return std::abs(pixel_x - other.pixel_x) + std::abs(pixel_y - other.pixel_y);"
    },
    {
      "caller_function": "l",
      "called_function": "PixelCoord",
      "location": {
        "file": "src/CoordinateSystem.h",
        "line": 118,
        "column": 0
      },
      "context": "return PixelCoord(pixel_x, pixel_y);"
    },
    {
      "caller_function": "d",
      "called_function": "GridCoord",
      "location": {
        "file": "src/CoordinateSystem.h",
        "line": 129,
        "column": 0
      },
      "context": "return GridCoord(grid_x, grid_y);"
    },
    {
      "caller_function": "r",
      "called_function": "PixelCoord",
      "location": {
        "file": "src/CoordinateSystem.h",
        "line": 140,
        "column": 0
      },
      "context": "return PixelCoord(pixel_x, pixel_y);"
    },
    {
      "caller_function": "d",
      "called_function": "is_valid",
      "location": {
        "file": "src/CoordinateSystem.h",
        "line": 149,
        "column": 0
      },
      "context": "return grid.is_valid();"
    },
    {
      "caller_function": "s",
      "called_function": "pixel_to_grid",
      "location": {
        "file": "src/CoordinateSystem.h",
        "line": 156,
        "column": 0
      },
      "context": "GridCoord grid = pixel_to_grid(pixel);"
    },
    {
      "caller_function": "s",
      "called_function": "is_grid_valid",
      "location": {
        "file": "src/CoordinateSystem.h",
        "line": 157,
        "column": 0
      },
      "context": "return is_grid_valid(grid);"
    },
    {
      "caller_function": "d",
      "called_function": "std::max",
      "location": {
        "file": "src/CoordinateSystem.h",
        "line": 164,
        "column": 0
      },
      "context": "int clamped_x = std::max(0, std::min(grid.grid_x, CoordinateConfig::MAX_GRID_WIDTH - 1));"
    },
    {
      "caller_function": "d",
      "called_function": "std::min",
      "location": {
        "file": "src/CoordinateSystem.h",
        "line": 164,
        "column": 0
      },
      "context": "int clamped_x = std::max(0, std::min(grid.grid_x, CoordinateConfig::MAX_GRID_WIDTH - 1));"
    },
    {
      "caller_function": "d",
      "called_function": "max",
      "location": {
        "file": "src/CoordinateSystem.h",
        "line": 164,
        "column": 0
      },
      "context": "int clamped_x = std::max(0, std::min(grid.grid_x, CoordinateConfig::MAX_GRID_WIDTH - 1));"
    },
    {
      "caller_function": "d",
      "called_function": "min",
      "location": {
        "file": "src/CoordinateSystem.h",
        "line": 164,
        "column": 0
      },
      "context": "int clamped_x = std::max(0, std::min(grid.grid_x, CoordinateConfig::MAX_GRID_WIDTH - 1));"
    },
    {
      "caller_function": "d",
      "called_function": "std::max",
      "location": {
        "file": "src/CoordinateSystem.h",
        "line": 165,
        "column": 0
      },
      "context": "int clamped_y = std::max(0, std::min(grid.grid_y, CoordinateConfig::MAX_GRID_HEIGHT - 1));"
    },
    {
      "caller_function": "d",
      "called_function": "std::min",
      "location": {
        "file": "src/CoordinateSystem.h",
        "line": 165,
        "column": 0
      },
      "context": "int clamped_y = std::max(0, std::min(grid.grid_y, CoordinateConfig::MAX_GRID_HEIGHT - 1));"
    },
    {
      "caller_function": "d",
      "called_function": "max",
      "location": {
        "file": "src/CoordinateSystem.h",
        "line": 165,
        "column": 0
      },
      "context": "int clamped_y = std::max(0, std::min(grid.grid_y, CoordinateConfig::MAX_GRID_HEIGHT - 1));"
    },
    {
      "caller_function": "d",
      "called_function": "min",
      "location": {
        "file": "src/CoordinateSystem.h",
        "line": 165,
        "column": 0
      },
      "context": "int clamped_y = std::max(0, std::min(grid.grid_y, CoordinateConfig::MAX_GRID_HEIGHT - 1));"
    },
    {
      "caller_function": "d",
      "called_function": "GridCoord",
      "location": {
        "file": "src/CoordinateSystem.h",
        "line": 166,
        "column": 0
      },
      "context": "return GridCoord(clamped_x, clamped_y);"
    },
    {
      "caller_function": "e",
      "called_function": "std::sqrt",
      "location": {
        "file": "src/CoordinateSystem.h",
        "line": 177,
        "column": 0
      },
      "context": "return std::sqrt(dx * dx + dy * dy);"
    },
    {
      "caller_function": "e",
      "called_function": "sqrt",
      "location": {
        "file": "src/CoordinateSystem.h",
        "line": 177,
        "column": 0
      },
      "context": "return std::sqrt(dx * dx + dy * dy);"
    },
    {
      "caller_function": "e",
      "called_function": "std::abs",
      "location": {
        "file": "src/CoordinateSystem.h",
        "line": 184,
        "column": 0
      },
      "context": "return std::abs(a.grid_x - b.grid_x) + std::abs(a.grid_y - b.grid_y);"
    },
    {
      "caller_function": "e",
      "called_function": "std::abs",
      "location": {
        "file": "src/CoordinateSystem.h",
        "line": 184,
        "column": 0
      },
      "context": "return std::abs(a.grid_x - b.grid_x) + std::abs(a.grid_y - b.grid_y);"
    },
    {
      "caller_function": "e",
      "called_function": "abs",
      "location": {
        "file": "src/CoordinateSystem.h",
        "line": 184,
        "column": 0
      },
      "context": "return std::abs(a.grid_x - b.grid_x) + std::abs(a.grid_y - b.grid_y);"
    },
    {
      "caller_function": "e",
      "called_function": "abs",
      "location": {
        "file": "src/CoordinateSystem.h",
        "line": 184,
        "column": 0
      },
      "context": "return std::abs(a.grid_x - b.grid_x) + std::abs(a.grid_y - b.grid_y);"
    },
    {
      "caller_function": "t",
      "called_function": "grid_manhattan_distance",
      "location": {
        "file": "src/CoordinateSystem.h",
        "line": 191,
        "column": 0
      },
      "context": "return grid_manhattan_distance(a, b) == 1;"
    },
    {
      "caller_function": "f",
      "called_function": "coord",
      "location": {
        "file": "src/CoordinateSystem.h",
        "line": 208,
        "column": 0
      },
      "context": "GridCoord coord(center.grid_x + dx, center.grid_y + dy);"
    },
    {
      "caller_function": "f",
      "called_function": "push_back",
      "location": {
        "file": "src/CoordinateSystem.h",
        "line": 210,
        "column": 0
      },
      "context": "result.push_back(coord);"
    },
    {
      "caller_function": "r",
      "called_function": "std::ceil",
      "location": {
        "file": "src/CoordinateSystem.h",
        "line": 225,
        "column": 0
      },
      "context": "int int_radius = static_cast<int>(std::ceil(radius));"
    },
    {
      "caller_function": "r",
      "called_function": "ceil",
      "location": {
        "file": "src/CoordinateSystem.h",
        "line": 225,
        "column": 0
      },
      "context": "int int_radius = static_cast<int>(std::ceil(radius));"
    },
    {
      "caller_function": "r",
      "called_function": "std::sqrt",
      "location": {
        "file": "src/CoordinateSystem.h",
        "line": 229,
        "column": 0
      },
      "context": "float distance = std::sqrt(static_cast<float>(dx * dx + dy * dy));"
    },
    {
      "caller_function": "r",
      "called_function": "sqrt",
      "location": {
        "file": "src/CoordinateSystem.h",
        "line": 229,
        "column": 0
      },
      "context": "float distance = std::sqrt(static_cast<float>(dx * dx + dy * dy));"
    },
    {
      "caller_function": "f",
      "called_function": "coord",
      "location": {
        "file": "src/CoordinateSystem.h",
        "line": 231,
        "column": 0
      },
      "context": "GridCoord coord(center.grid_x + dx, center.grid_y + dy);"
    },
    {
      "caller_function": "f",
      "called_function": "push_back",
      "location": {
        "file": "src/CoordinateSystem.h",
        "line": 233,
        "column": 0
      },
      "context": "result.push_back(coord);"
    },
    {
      "caller_function": "l",
      "called_function": "PixelCoord",
      "location": {
        "file": "src/CoordinateSystem.h",
        "line": 248,
        "column": 0
      },
      "context": "return PixelCoord(static_cast<float>(x), static_cast<float>(y));"
    },
    {
      "caller_function": "y",
      "called_function": "std::round",
      "location": {
        "file": "src/CoordinateSystem.h",
        "line": 255,
        "column": 0
      },
      "context": "x = static_cast<int>(std::round(pixel.pixel_x));"
    },
    {
      "caller_function": "y",
      "called_function": "round",
      "location": {
        "file": "src/CoordinateSystem.h",
        "line": 255,
        "column": 0
      },
      "context": "x = static_cast<int>(std::round(pixel.pixel_x));"
    },
    {
      "caller_function": "y",
      "called_function": "std::round",
      "location": {
        "file": "src/CoordinateSystem.h",
        "line": 256,
        "column": 0
      },
      "context": "y = static_cast<int>(std::round(pixel.pixel_y));"
    },
    {
      "caller_function": "y",
      "called_function": "round",
      "location": {
        "file": "src/CoordinateSystem.h",
        "line": 256,
        "column": 0
      },
      "context": "y = static_cast<int>(std::round(pixel.pixel_y));"
    },
    {
      "caller_function": "n",
      "called_function": "grid_to_pixel",
      "location": {
        "file": "src/CoordinateSystem.h",
        "line": 265,
        "column": 0
      },
      "context": "PixelCoord pixel = grid_to_pixel(grid);"
    },
    {
      "caller_function": "n",
      "called_function": "grid_to_pixel_corner",
      "location": {
        "file": "src/CoordinateSystem.h",
        "line": 266,
        "column": 0
      },
      "context": "PixelCoord corner = grid_to_pixel_corner(grid);"
    },
    {
      "caller_function": "n",
      "called_function": "to_string",
      "location": {
        "file": "src/CoordinateSystem.h",
        "line": 268,
        "column": 0
      },
      "context": "return grid.to_string() + \" -> \" + pixel.to_string() +"
    },
    {
      "caller_function": "n",
      "called_function": "to_string",
      "location": {
        "file": "src/CoordinateSystem.h",
        "line": 268,
        "column": 0
      },
      "context": "return grid.to_string() + \" -> \" + pixel.to_string() +"
    },
    {
      "caller_function": "n",
      "called_function": "to_string",
      "location": {
        "file": "src/CoordinateSystem.h",
        "line": 269,
        "column": 0
      },
      "context": "\" (corner: \" + corner.to_string() + \")\";"
    },
    {
      "caller_function": null,
      "called_function": "TileManager",
      "location": {
        "file": "src/TileManager.h",
        "line": 28,
        "column": 0
      },
      "context": "TileManager(GameContext* context = nullptr);"
    },
    {
      "caller_function": null,
      "called_function": "TileManager",
      "location": {
        "file": "src/TileManager.h",
        "line": 29,
        "column": 0
      },
      "context": "~TileManager();"
    },
    {
      "caller_function": null,
      "called_function": "update_tiles",
      "location": {
        "file": "src/TileManager.h",
        "line": 32,
        "column": 0
      },
      "context": "void update_tiles(float deltaTime);"
    },
    {
      "caller_function": null,
      "called_function": "handle_tile_updates",
      "location": {
        "file": "src/TileManager.h",
        "line": 33,
        "column": 0
      },
      "context": "void handle_tile_updates();"
    },
    {
      "caller_function": null,
      "called_function": "request_tile_destruction",
      "location": {
        "file": "src/TileManager.h",
        "line": 36,
        "column": 0
      },
      "context": "void request_tile_destruction(int map_x, int map_y);"
    },
    {
      "caller_function": null,
      "called_function": "replace_tile_when_ready",
      "location": {
        "file": "src/TileManager.h",
        "line": 37,
        "column": 0
      },
      "context": "void replace_tile_when_ready(int map_x, int map_y, int new_tile_type);"
    },
    {
      "caller_function": null,
      "called_function": "is_tile_ready_for_replacement",
      "location": {
        "file": "src/TileManager.h",
        "line": 38,
        "column": 0
      },
      "context": "bool is_tile_ready_for_replacement(MapTile* tile);"
    },
    {
      "caller_function": null,
      "called_function": "is_position_walkable",
      "location": {
        "file": "src/TileManager.h",
        "line": 41,
        "column": 0
      },
      "context": "bool is_position_walkable(int map_x, int map_y);"
    },
    {
      "caller_function": null,
      "called_function": "is_position_blocked",
      "location": {
        "file": "src/TileManager.h",
        "line": 42,
        "column": 0
      },
      "context": "bool is_position_blocked(int map_x, int map_y);"
    },
    {
      "caller_function": null,
      "called_function": "get_tile_at",
      "location": {
        "file": "src/TileManager.h",
        "line": 43,
        "column": 0
      },
      "context": "MapTile* get_tile_at(int map_x, int map_y);"
    },
    {
      "caller_function": null,
      "called_function": "is_tile_blocking_at",
      "location": {
        "file": "src/TileManager.h",
        "line": 46,
        "column": 0
      },
      "context": "bool is_tile_blocking_at(int map_x, int map_y);"
    },
    {
      "caller_function": null,
      "called_function": "has_bomb_at",
      "location": {
        "file": "src/TileManager.h",
        "line": 47,
        "column": 0
      },
      "context": "bool has_bomb_at(int map_x, int map_y);"
    },
    {
      "caller_function": null,
      "called_function": "is_tile_destructible_at",
      "location": {
        "file": "src/TileManager.h",
        "line": 48,
        "column": 0
      },
      "context": "bool is_tile_destructible_at(int map_x, int map_y);"
    },
    {
      "caller_function": null,
      "called_function": "register_bomb_at",
      "location": {
        "file": "src/TileManager.h",
        "line": 51,
        "column": 0
      },
      "context": "void register_bomb_at(int map_x, int map_y, Bomb* bomb);"
    },
    {
      "caller_function": null,
      "called_function": "unregister_bomb_at",
      "location": {
        "file": "src/TileManager.h",
        "line": 52,
        "column": 0
      },
      "context": "void unregister_bomb_at(int map_x, int map_y);"
    },
    {
      "caller_function": null,
      "called_function": "unregister_bomb_at",
      "location": {
        "file": "src/TileManager.h",
        "line": 53,
        "column": 0
      },
      "context": "void unregister_bomb_at(int map_x, int map_y, Bomb* bomb);  // Overload for safety check"
    },
    {
      "caller_function": null,
      "called_function": "get_bomb_at",
      "location": {
        "file": "src/TileManager.h",
        "line": 54,
        "column": 0
      },
      "context": "Bomb* get_bomb_at(int map_x, int map_y);"
    },
    {
      "caller_function": null,
      "called_function": "register_bomber_at",
      "location": {
        "file": "src/TileManager.h",
        "line": 56,
        "column": 0
      },
      "context": "void register_bomber_at(int map_x, int map_y, Bomber* bomber);"
    },
    {
      "caller_function": null,
      "called_function": "unregister_bomber_at",
      "location": {
        "file": "src/TileManager.h",
        "line": 57,
        "column": 0
      },
      "context": "void unregister_bomber_at(int map_x, int map_y);"
    },
    {
      "caller_function": null,
      "called_function": "get_bomber_at",
      "location": {
        "file": "src/TileManager.h",
        "line": 58,
        "column": 0
      },
      "context": "Bomber* get_bomber_at(int map_x, int map_y);"
    },
    {
      "caller_function": null,
      "called_function": "has_bomber_at",
      "location": {
        "file": "src/TileManager.h",
        "line": 59,
        "column": 0
      },
      "context": "bool has_bomber_at(int map_x, int map_y);"
    },
    {
      "caller_function": null,
      "called_function": "coordinate_with_lifecycle_manager",
      "location": {
        "file": "src/TileManager.h",
        "line": 62,
        "column": 0
      },
      "context": "void coordinate_with_lifecycle_manager();"
    },
    {
      "caller_function": null,
      "called_function": "process_dying_tiles",
      "location": {
        "file": "src/TileManager.h",
        "line": 63,
        "column": 0
      },
      "context": "void process_dying_tiles();"
    },
    {
      "caller_function": null,
      "called_function": "process_dead_tiles",
      "location": {
        "file": "src/TileManager.h",
        "line": 64,
        "column": 0
      },
      "context": "void process_dead_tiles();"
    },
    {
      "caller_function": null,
      "called_function": "iterate_all_tiles",
      "location": {
        "file": "src/TileManager.h",
        "line": 67,
        "column": 0
      },
      "context": "void iterate_all_tiles(std::function<void(MapTile*, int, int)> callback);"
    },
    {
      "caller_function": null,
      "called_function": "get_destructible_tiles_in_radius",
      "location": {
        "file": "src/TileManager.h",
        "line": 68,
        "column": 0
      },
      "context": "std::vector<MapTile*> get_destructible_tiles_in_radius(int center_x, int center_y, int radius);"
    },
    {
      "caller_function": null,
      "called_function": "set_context",
      "location": {
        "file": "src/TileManager.h",
        "line": 71,
        "column": 0
      },
      "context": "void set_context(GameContext* context);"
    },
    {
      "caller_function": null,
      "called_function": "update_single_tile",
      "location": {
        "file": "src/TileManager.h",
        "line": 77,
        "column": 0
      },
      "context": "void update_single_tile(MapTile* tile, int map_x, int map_y);"
    },
    {
      "caller_function": null,
      "called_function": "handle_tile_destruction_request",
      "location": {
        "file": "src/TileManager.h",
        "line": 78,
        "column": 0
      },
      "context": "void handle_tile_destruction_request(int map_x, int map_y);"
    },
    {
      "caller_function": null,
      "called_function": "perform_tile_replacement",
      "location": {
        "file": "src/TileManager.h",
        "line": 79,
        "column": 0
      },
      "context": "void perform_tile_replacement(int map_x, int map_y, int new_tile_type);"
    },
    {
      "caller_function": null,
      "called_function": "is_valid_position",
      "location": {
        "file": "src/TileManager.h",
        "line": 82,
        "column": 0
      },
      "context": "bool is_valid_position(int map_x, int map_y) const;"
    },
    {
      "caller_function": "n",
      "called_function": "init",
      "location": {
        "file": "src/AudioMixer.h",
        "line": 35,
        "column": 0
      },
      "context": "static void init();"
    },
    {
      "caller_function": "n",
      "called_function": "shutdown",
      "location": {
        "file": "src/AudioMixer.h",
        "line": 36,
        "column": 0
      },
      "context": "static void shutdown();"
    },
    {
      "caller_function": "n",
      "called_function": "play_sound",
      "location": {
        "file": "src/AudioMixer.h",
        "line": 38,
        "column": 0
      },
      "context": "static bool play_sound(const std::string& name);"
    },
    {
      "caller_function": "n",
      "called_function": "play_sound_3d",
      "location": {
        "file": "src/AudioMixer.h",
        "line": 39,
        "column": 0
      },
      "context": "static bool play_sound_3d(const std::string& name, const AudioPosition& pos, float max_distance = 80"
    },
    {
      "caller_function": "n",
      "called_function": "load_sound",
      "location": {
        "file": "src/AudioMixer.h",
        "line": 40,
        "column": 0
      },
      "context": "static MixerAudio* load_sound(const std::string& path);"
    },
    {
      "caller_function": "n",
      "called_function": "add_sound",
      "location": {
        "file": "src/AudioMixer.h",
        "line": 41,
        "column": 0
      },
      "context": "static void add_sound(const std::string& name, MixerAudio* audio);"
    },
    {
      "caller_function": "n",
      "called_function": "set_listener_position",
      "location": {
        "file": "src/AudioMixer.h",
        "line": 43,
        "column": 0
      },
      "context": "static void set_listener_position(const AudioPosition& pos);"
    },
    {
      "caller_function": "n",
      "called_function": "audio_callback",
      "location": {
        "file": "src/AudioMixer.h",
        "line": 48,
        "column": 0
      },
      "context": "static void audio_callback(void* userdata, SDL_AudioStream* stream, int additional_amount, int total"
    },
    {
      "caller_function": null,
      "called_function": "GameObject",
      "location": {
        "file": "src/GameObject.h",
        "line": 58,
        "column": 0
      },
      "context": "GameObject( int _x, int _y, class GameContext* context );"
    },
    {
      "caller_function": null,
      "called_function": "GameObject",
      "location": {
        "file": "src/GameObject.h",
        "line": 60,
        "column": 0
      },
      "context": "virtual ~GameObject();"
    },
    {
      "caller_function": null,
      "called_function": "get_context",
      "location": {
        "file": "src/GameObject.h",
        "line": 63,
        "column": 0
      },
      "context": "class GameContext* get_context() const;"
    },
    {
      "caller_function": null,
      "called_function": "get_object_id",
      "location": {
        "file": "src/GameObject.h",
        "line": 70,
        "column": 0
      },
      "context": "int get_object_id();"
    },
    {
      "caller_function": null,
      "called_function": "set_object_id",
      "location": {
        "file": "src/GameObject.h",
        "line": 76,
        "column": 0
      },
      "context": "void set_object_id(int obj_id);"
    },
    {
      "caller_function": null,
      "called_function": "get_server_x",
      "location": {
        "file": "src/GameObject.h",
        "line": 77,
        "column": 0
      },
      "context": "int get_server_x();"
    },
    {
      "caller_function": null,
      "called_function": "get_server_y",
      "location": {
        "file": "src/GameObject.h",
        "line": 78,
        "column": 0
      },
      "context": "int get_server_y();"
    },
    {
      "caller_function": null,
      "called_function": "get_orig_x",
      "location": {
        "file": "src/GameObject.h",
        "line": 85,
        "column": 0
      },
      "context": "int get_orig_x();"
    },
    {
      "caller_function": null,
      "called_function": "get_orig_y",
      "location": {
        "file": "src/GameObject.h",
        "line": 92,
        "column": 0
      },
      "context": "int get_orig_y();"
    },
    {
      "caller_function": null,
      "called_function": "output_object_info",
      "location": {
        "file": "src/GameObject.h",
        "line": 94,
        "column": 0
      },
      "context": "void output_object_info();"
    },
    {
      "caller_function": null,
      "called_function": "get_server_dir",
      "location": {
        "file": "src/GameObject.h",
        "line": 96,
        "column": 0
      },
      "context": "Direction get_server_dir();"
    },
    {
      "caller_function": null,
      "called_function": "get_client_dir",
      "location": {
        "file": "src/GameObject.h",
        "line": 97,
        "column": 0
      },
      "context": "Direction get_client_dir();"
    },
    {
      "caller_function": null,
      "called_function": "set_server_x",
      "location": {
        "file": "src/GameObject.h",
        "line": 98,
        "column": 0
      },
      "context": "void set_server_x(int sx);"
    },
    {
      "caller_function": null,
      "called_function": "set_server_y",
      "location": {
        "file": "src/GameObject.h",
        "line": 99,
        "column": 0
      },
      "context": "void set_server_y(int sy);"
    },
    {
      "caller_function": null,
      "called_function": "set_server_dir",
      "location": {
        "file": "src/GameObject.h",
        "line": 100,
        "column": 0
      },
      "context": "void set_server_dir(int sd);"
    },
    {
      "caller_function": null,
      "called_function": "set_client_dir",
      "location": {
        "file": "src/GameObject.h",
        "line": 101,
        "column": 0
      },
      "context": "void set_client_dir(int cd);"
    },
    {
      "caller_function": null,
      "called_function": "set_local_dir",
      "location": {
        "file": "src/GameObject.h",
        "line": 102,
        "column": 0
      },
      "context": "void set_local_dir(int ld);"
    },
    {
      "caller_function": null,
      "called_function": "set_cur_dir",
      "location": {
        "file": "src/GameObject.h",
        "line": 103,
        "column": 0
      },
      "context": "void set_cur_dir(int cd);"
    },
    {
      "caller_function": null,
      "called_function": "set_offset",
      "location": {
        "file": "src/GameObject.h",
        "line": 104,
        "column": 0
      },
      "context": "void set_offset(int _x, int _y);"
    },
    {
      "caller_function": null,
      "called_function": "set_pos",
      "location": {
        "file": "src/GameObject.h",
        "line": 106,
        "column": 0
      },
      "context": "void set_pos( int _x, int _y );"
    },
    {
      "caller_function": null,
      "called_function": "set_dir",
      "location": {
        "file": "src/GameObject.h",
        "line": 107,
        "column": 0
      },
      "context": "void set_dir (Direction _dir);"
    },
    {
      "caller_function": null,
      "called_function": "set_orig",
      "location": {
        "file": "src/GameObject.h",
        "line": 115,
        "column": 0
      },
      "context": "void set_orig( int _x, int _y );"
    },
    {
      "caller_function": null,
      "called_function": "move_pos",
      "location": {
        "file": "src/GameObject.h",
        "line": 116,
        "column": 0
      },
      "context": "void move_pos( int _x, int _y );"
    },
    {
      "caller_function": null,
      "called_function": "snap",
      "location": {
        "file": "src/GameObject.h",
        "line": 117,
        "column": 0
      },
      "context": "void snap();"
    },
    {
      "caller_function": null,
      "called_function": "move_dist",
      "location": {
        "file": "src/GameObject.h",
        "line": 118,
        "column": 0
      },
      "context": "bool move_dist(float distance, Direction dir);"
    },
    {
      "caller_function": null,
      "called_function": "inc_speed",
      "location": {
        "file": "src/GameObject.h",
        "line": 119,
        "column": 0
      },
      "context": "void inc_speed( int _c=1 );"
    },
    {
      "caller_function": null,
      "called_function": "dec_speed",
      "location": {
        "file": "src/GameObject.h",
        "line": 120,
        "column": 0
      },
      "context": "void dec_speed( int _c=1 );"
    },
    {
      "caller_function": null,
      "called_function": "set_speed",
      "location": {
        "file": "src/GameObject.h",
        "line": 121,
        "column": 0
      },
      "context": "void set_speed( int _speed );"
    },
    {
      "caller_function": null,
      "called_function": "fall",
      "location": {
        "file": "src/GameObject.h",
        "line": 122,
        "column": 0
      },
      "context": "virtual void fall();"
    },
    {
      "caller_function": null,
      "called_function": "get_x",
      "location": {
        "file": "src/GameObject.h",
        "line": 124,
        "column": 0
      },
      "context": "int get_x() const;"
    },
    {
      "caller_function": null,
      "called_function": "get_y",
      "location": {
        "file": "src/GameObject.h",
        "line": 125,
        "column": 0
      },
      "context": "int get_y() const;"
    },
    {
      "caller_function": null,
      "called_function": "get_z",
      "location": {
        "file": "src/GameObject.h",
        "line": 126,
        "column": 0
      },
      "context": "int get_z() const;"
    },
    {
      "caller_function": null,
      "called_function": "get_map_x",
      "location": {
        "file": "src/GameObject.h",
        "line": 127,
        "column": 0
      },
      "context": "int get_map_x() const;"
    },
    {
      "caller_function": null,
      "called_function": "get_map_y",
      "location": {
        "file": "src/GameObject.h",
        "line": 128,
        "column": 0
      },
      "context": "int get_map_y() const;"
    },
    {
      "caller_function": null,
      "called_function": "get_speed",
      "location": {
        "file": "src/GameObject.h",
        "line": 130,
        "column": 0
      },
      "context": "int get_speed() const;"
    },
    {
      "caller_function": null,
      "called_function": "GameContext::is_position_blocked",
      "location": {
        "file": "src/GameObject.h",
        "line": 132,
        "column": 0
      },
      "context": "[[deprecated(\"Use GameContext::is_position_blocked() or TileManager instead\")]]"
    },
    {
      "caller_function": null,
      "called_function": "deprecated",
      "location": {
        "file": "src/GameObject.h",
        "line": 132,
        "column": 0
      },
      "context": "[[deprecated(\"Use GameContext::is_position_blocked() or TileManager instead\")]]"
    },
    {
      "caller_function": null,
      "called_function": "is_position_blocked",
      "location": {
        "file": "src/GameObject.h",
        "line": 132,
        "column": 0
      },
      "context": "[[deprecated(\"Use GameContext::is_position_blocked() or TileManager instead\")]]"
    },
    {
      "caller_function": null,
      "called_function": "get_tile",
      "location": {
        "file": "src/GameObject.h",
        "line": 133,
        "column": 0
      },
      "context": "MapTile* get_tile() const;          // Legacy compatibility - returns MapTile"
    },
    {
      "caller_function": null,
      "called_function": "get_legacy_tile",
      "location": {
        "file": "src/GameObject.h",
        "line": 136,
        "column": 0
      },
      "context": "MapTile* get_legacy_tile() const;   // Get legacy MapTile"
    },
    {
      "caller_function": null,
      "called_function": "get_tile_entity",
      "location": {
        "file": "src/GameObject.h",
        "line": 137,
        "column": 0
      },
      "context": "class TileEntity* get_tile_entity() const;  // Get new TileEntity"
    },
    {
      "caller_function": null,
      "called_function": "get_tile_type_at",
      "location": {
        "file": "src/GameObject.h",
        "line": 140,
        "column": 0
      },
      "context": "int get_tile_type_at(int pixel_x, int pixel_y) const;   // Get tile type at pixel position"
    },
    {
      "caller_function": null,
      "called_function": "is_tile_blocking_at",
      "location": {
        "file": "src/GameObject.h",
        "line": 141,
        "column": 0
      },
      "context": "bool is_tile_blocking_at(int pixel_x, int pixel_y) const; // Check if tile is blocking at pixel posi"
    },
    {
      "caller_function": null,
      "called_function": "has_bomb_at",
      "location": {
        "file": "src/GameObject.h",
        "line": 142,
        "column": 0
      },
      "context": "bool has_bomb_at(int pixel_x, int pixel_y) const;       // Check if tile has bomb at pixel position"
    },
    {
      "caller_function": null,
      "called_function": "has_bomber_at",
      "location": {
        "file": "src/GameObject.h",
        "line": 143,
        "column": 0
      },
      "context": "bool has_bomber_at(int pixel_x, int pixel_y) const;     // Check if tile has bomber at pixel positio"
    },
    {
      "caller_function": null,
      "called_function": "pixel_to_map_x",
      "location": {
        "file": "src/GameObject.h",
        "line": 148,
        "column": 0
      },
      "context": "int pixel_to_map_x(int pixel_x) const {"
    },
    {
      "caller_function": null,
      "called_function": "CoordinateSystem::pixel_to_grid",
      "location": {
        "file": "src/GameObject.h",
        "line": 149,
        "column": 0
      },
      "context": "return CoordinateSystem::pixel_to_grid(PixelCoord(pixel_x, 0)).grid_x;"
    },
    {
      "caller_function": null,
      "called_function": "pixel_to_grid",
      "location": {
        "file": "src/GameObject.h",
        "line": 149,
        "column": 0
      },
      "context": "return CoordinateSystem::pixel_to_grid(PixelCoord(pixel_x, 0)).grid_x;"
    },
    {
      "caller_function": null,
      "called_function": "PixelCoord",
      "location": {
        "file": "src/GameObject.h",
        "line": 149,
        "column": 0
      },
      "context": "return CoordinateSystem::pixel_to_grid(PixelCoord(pixel_x, 0)).grid_x;"
    },
    {
      "caller_function": null,
      "called_function": "pixel_to_map_y",
      "location": {
        "file": "src/GameObject.h",
        "line": 151,
        "column": 0
      },
      "context": "int pixel_to_map_y(int pixel_y) const {"
    },
    {
      "caller_function": null,
      "called_function": "CoordinateSystem::pixel_to_grid",
      "location": {
        "file": "src/GameObject.h",
        "line": 152,
        "column": 0
      },
      "context": "return CoordinateSystem::pixel_to_grid(PixelCoord(0, pixel_y)).grid_y;"
    },
    {
      "caller_function": null,
      "called_function": "pixel_to_grid",
      "location": {
        "file": "src/GameObject.h",
        "line": 152,
        "column": 0
      },
      "context": "return CoordinateSystem::pixel_to_grid(PixelCoord(0, pixel_y)).grid_y;"
    },
    {
      "caller_function": null,
      "called_function": "PixelCoord",
      "location": {
        "file": "src/GameObject.h",
        "line": 152,
        "column": 0
      },
      "context": "return CoordinateSystem::pixel_to_grid(PixelCoord(0, pixel_y)).grid_y;"
    },
    {
      "caller_function": null,
      "called_function": "map_to_pixel_x",
      "location": {
        "file": "src/GameObject.h",
        "line": 154,
        "column": 0
      },
      "context": "int map_to_pixel_x(int map_x) const {"
    },
    {
      "caller_function": null,
      "called_function": "CoordinateSystem::grid_to_pixel",
      "location": {
        "file": "src/GameObject.h",
        "line": 155,
        "column": 0
      },
      "context": "return static_cast<int>(CoordinateSystem::grid_to_pixel(GridCoord(map_x, 0)).pixel_x);"
    },
    {
      "caller_function": null,
      "called_function": "grid_to_pixel",
      "location": {
        "file": "src/GameObject.h",
        "line": 155,
        "column": 0
      },
      "context": "return static_cast<int>(CoordinateSystem::grid_to_pixel(GridCoord(map_x, 0)).pixel_x);"
    },
    {
      "caller_function": null,
      "called_function": "GridCoord",
      "location": {
        "file": "src/GameObject.h",
        "line": 155,
        "column": 0
      },
      "context": "return static_cast<int>(CoordinateSystem::grid_to_pixel(GridCoord(map_x, 0)).pixel_x);"
    },
    {
      "caller_function": null,
      "called_function": "map_to_pixel_y",
      "location": {
        "file": "src/GameObject.h",
        "line": 157,
        "column": 0
      },
      "context": "int map_to_pixel_y(int map_y) const {"
    },
    {
      "caller_function": null,
      "called_function": "CoordinateSystem::grid_to_pixel",
      "location": {
        "file": "src/GameObject.h",
        "line": 158,
        "column": 0
      },
      "context": "return static_cast<int>(CoordinateSystem::grid_to_pixel(GridCoord(0, map_y)).pixel_y);"
    },
    {
      "caller_function": null,
      "called_function": "grid_to_pixel",
      "location": {
        "file": "src/GameObject.h",
        "line": 158,
        "column": 0
      },
      "context": "return static_cast<int>(CoordinateSystem::grid_to_pixel(GridCoord(0, map_y)).pixel_y);"
    },
    {
      "caller_function": null,
      "called_function": "GridCoord",
      "location": {
        "file": "src/GameObject.h",
        "line": 158,
        "column": 0
      },
      "context": "return static_cast<int>(CoordinateSystem::grid_to_pixel(GridCoord(0, map_y)).pixel_y);"
    },
    {
      "caller_function": null,
      "called_function": "get_center_map_x",
      "location": {
        "file": "src/GameObject.h",
        "line": 162,
        "column": 0
      },
      "context": "int get_center_map_x() const {"
    },
    {
      "caller_function": null,
      "called_function": "CoordinateSystem::pixel_to_grid",
      "location": {
        "file": "src/GameObject.h",
        "line": 163,
        "column": 0
      },
      "context": "return CoordinateSystem::pixel_to_grid(PixelCoord(x, y)).grid_x;"
    },
    {
      "caller_function": null,
      "called_function": "pixel_to_grid",
      "location": {
        "file": "src/GameObject.h",
        "line": 163,
        "column": 0
      },
      "context": "return CoordinateSystem::pixel_to_grid(PixelCoord(x, y)).grid_x;"
    },
    {
      "caller_function": null,
      "called_function": "PixelCoord",
      "location": {
        "file": "src/GameObject.h",
        "line": 163,
        "column": 0
      },
      "context": "return CoordinateSystem::pixel_to_grid(PixelCoord(x, y)).grid_x;"
    },
    {
      "caller_function": null,
      "called_function": "get_center_map_y",
      "location": {
        "file": "src/GameObject.h",
        "line": 165,
        "column": 0
      },
      "context": "int get_center_map_y() const {"
    },
    {
      "caller_function": null,
      "called_function": "CoordinateSystem::pixel_to_grid",
      "location": {
        "file": "src/GameObject.h",
        "line": 166,
        "column": 0
      },
      "context": "return CoordinateSystem::pixel_to_grid(PixelCoord(x, y)).grid_y;"
    },
    {
      "caller_function": null,
      "called_function": "pixel_to_grid",
      "location": {
        "file": "src/GameObject.h",
        "line": 166,
        "column": 0
      },
      "context": "return CoordinateSystem::pixel_to_grid(PixelCoord(x, y)).grid_y;"
    },
    {
      "caller_function": null,
      "called_function": "PixelCoord",
      "location": {
        "file": "src/GameObject.h",
        "line": 166,
        "column": 0
      },
      "context": "return CoordinateSystem::pixel_to_grid(PixelCoord(x, y)).grid_y;"
    },
    {
      "caller_function": null,
      "called_function": "set_bomb_on_tile",
      "location": {
        "file": "src/GameObject.h",
        "line": 170,
        "column": 0
      },
      "context": "void set_bomb_on_tile(class Bomb* bomb) const;   // Sets bomb on both MapTile and TileEntity"
    },
    {
      "caller_function": null,
      "called_function": "remove_bomb_from_tile",
      "location": {
        "file": "src/GameObject.h",
        "line": 171,
        "column": 0
      },
      "context": "void remove_bomb_from_tile(class Bomb* bomb) const; // Removes bomb from both architectures"
    },
    {
      "caller_function": null,
      "called_function": "is_flying",
      "location": {
        "file": "src/GameObject.h",
        "line": 173,
        "column": 0
      },
      "context": "bool is_flying() const;"
    },
    {
      "caller_function": null,
      "called_function": "is_stopped",
      "location": {
        "file": "src/GameObject.h",
        "line": 174,
        "column": 0
      },
      "context": "bool is_stopped() const;"
    },
    {
      "caller_function": null,
      "called_function": "set_fly_over_walls",
      "location": {
        "file": "src/GameObject.h",
        "line": 176,
        "column": 0
      },
      "context": "void set_fly_over_walls(bool val)"
    },
    {
      "caller_function": null,
      "called_function": "get_cur_dir",
      "location": {
        "file": "src/GameObject.h",
        "line": 181,
        "column": 0
      },
      "context": "Direction get_cur_dir() const;"
    },
    {
      "caller_function": null,
      "called_function": "objecttype2string",
      "location": {
        "file": "src/GameObject.h",
        "line": 196,
        "column": 0
      },
      "context": "static const char* objecttype2string(ObjectType t);"
    },
    {
      "caller_function": null,
      "called_function": "get_type",
      "location": {
        "file": "src/GameObject.h",
        "line": 198,
        "column": 0
      },
      "context": "virtual ObjectType\tget_type() const = 0;"
    },
    {
      "caller_function": null,
      "called_function": "stop",
      "location": {
        "file": "src/GameObject.h",
        "line": 199,
        "column": 0
      },
      "context": "virtual void\t\tstop(bool by_arrow = false);"
    },
    {
      "caller_function": null,
      "called_function": "show",
      "location": {
        "file": "src/GameObject.h",
        "line": 200,
        "column": 0
      },
      "context": "virtual void\t\tshow();"
    },
    {
      "caller_function": null,
      "called_function": "act",
      "location": {
        "file": "src/GameObject.h",
        "line": 201,
        "column": 0
      },
      "context": "virtual void\t\tact(float deltaTime);"
    },
    {
      "caller_function": "l",
      "called_function": "show",
      "location": {
        "file": "src/GameObject.h",
        "line": 208,
        "column": 0
      },
      "context": "void show(int _x, int _y) const;"
    },
    {
      "caller_function": "l",
      "called_function": "show",
      "location": {
        "file": "src/GameObject.h",
        "line": 209,
        "column": 0
      },
      "context": "void show(int _x, int _y, float _scale) const;"
    },
    {
      "caller_function": "l",
      "called_function": "fly_to",
      "location": {
        "file": "src/GameObject.h",
        "line": 210,
        "column": 0
      },
      "context": "void fly_to(int _x, int _y, int _speed=0);"
    },
    {
      "caller_function": "l",
      "called_function": "fly_to",
      "location": {
        "file": "src/GameObject.h",
        "line": 211,
        "column": 0
      },
      "context": "void fly_to(MapTile*, int _speed=0);"
    },
    {
      "caller_function": "l",
      "called_function": "gain_kick",
      "location": {
        "file": "src/GameObject.h",
        "line": 212,
        "column": 0
      },
      "context": "void gain_kick();"
    },
    {
      "caller_function": "l",
      "called_function": "loose_kick",
      "location": {
        "file": "src/GameObject.h",
        "line": 213,
        "column": 0
      },
      "context": "void loose_kick();"
    },
    {
      "caller_function": "l",
      "called_function": "is_falling",
      "location": {
        "file": "src/GameObject.h",
        "line": 215,
        "column": 0
      },
      "context": "bool is_falling();"
    },
    {
      "caller_function": "l",
      "called_function": "is_able_to_kick",
      "location": {
        "file": "src/GameObject.h",
        "line": 216,
        "column": 0
      },
      "context": "bool is_able_to_kick() const"
    },
    {
      "caller_function": "l",
      "called_function": "set_next_fly_job",
      "location": {
        "file": "src/GameObject.h",
        "line": 226,
        "column": 0
      },
      "context": "void set_next_fly_job(int flyjobx, int flyjoby, int flyjobspeed);"
    },
    {
      "caller_function": "r",
      "called_function": "get_sprite_nr",
      "location": {
        "file": "src/GameObject.h",
        "line": 231,
        "column": 0
      },
      "context": "int get_sprite_nr() const { return sprite_nr; }"
    },
    {
      "caller_function": "r",
      "called_function": "move",
      "location": {
        "file": "src/GameObject.h",
        "line": 268,
        "column": 0
      },
      "context": "bool move(float deltaTime);"
    },
    {
      "caller_function": "r",
      "called_function": "whats_left",
      "location": {
        "file": "src/GameObject.h",
        "line": 270,
        "column": 0
      },
      "context": "int whats_left();"
    },
    {
      "caller_function": "r",
      "called_function": "whats_right",
      "location": {
        "file": "src/GameObject.h",
        "line": 271,
        "column": 0
      },
      "context": "int whats_right();"
    },
    {
      "caller_function": "r",
      "called_function": "whats_up",
      "location": {
        "file": "src/GameObject.h",
        "line": 272,
        "column": 0
      },
      "context": "int whats_up();"
    },
    {
      "caller_function": "r",
      "called_function": "whats_down",
      "location": {
        "file": "src/GameObject.h",
        "line": 273,
        "column": 0
      },
      "context": "int whats_down();"
    },
    {
      "caller_function": "r",
      "called_function": "continue_flying",
      "location": {
        "file": "src/GameObject.h",
        "line": 275,
        "column": 0
      },
      "context": "void continue_flying(float deltaTime);"
    },
    {
      "caller_function": "r",
      "called_function": "continue_falling",
      "location": {
        "file": "src/GameObject.h",
        "line": 276,
        "column": 0
      },
      "context": "void continue_falling(float deltaTime);"
    },
    {
      "caller_function": "r",
      "called_function": "reset_next_fly_job",
      "location": {
        "file": "src/GameObject.h",
        "line": 301,
        "column": 0
      },
      "context": "void reset_next_fly_job();"
    },
    {
      "caller_function": "r",
      "called_function": "is_blocked",
      "location": {
        "file": "src/GameObject.h",
        "line": 303,
        "column": 0
      },
      "context": "bool is_blocked(float check_x, float check_y);"
    },
    {
      "caller_function": "r",
      "called_function": "is_next_fly_job",
      "location": {
        "file": "src/GameObject.h",
        "line": 304,
        "column": 0
      },
      "context": "bool is_next_fly_job();"
    },
    {
      "caller_function": null,
      "called_function": "ParticleSystem",
      "location": {
        "file": "src/ParticleSystem.h",
        "line": 27,
        "column": 0
      },
      "context": "ParticleSystem(int _x, int _y, ParticleType type, GameContext* context);"
    },
    {
      "caller_function": null,
      "called_function": "ParticleSystem",
      "location": {
        "file": "src/ParticleSystem.h",
        "line": 28,
        "column": 0
      },
      "context": "~ParticleSystem();"
    },
    {
      "caller_function": null,
      "called_function": "act",
      "location": {
        "file": "src/ParticleSystem.h",
        "line": 30,
        "column": 0
      },
      "context": "void act(float deltaTime) override;"
    },
    {
      "caller_function": null,
      "called_function": "show",
      "location": {
        "file": "src/ParticleSystem.h",
        "line": 31,
        "column": 0
      },
      "context": "void show() override;"
    },
    {
      "caller_function": null,
      "called_function": "get_type",
      "location": {
        "file": "src/ParticleSystem.h",
        "line": 32,
        "column": 0
      },
      "context": "ObjectType get_type() const override { return EXPLOSION; } // Reuse explosion type"
    },
    {
      "caller_function": null,
      "called_function": "reset_for_pool",
      "location": {
        "file": "src/ParticleSystem.h",
        "line": 33,
        "column": 0
      },
      "context": "void reset_for_pool() override;"
    },
    {
      "caller_function": null,
      "called_function": "emit_explosion_sparks",
      "location": {
        "file": "src/ParticleSystem.h",
        "line": 35,
        "column": 0
      },
      "context": "void emit_explosion_sparks(int count = 30);"
    },
    {
      "caller_function": null,
      "called_function": "emit_dust_cloud",
      "location": {
        "file": "src/ParticleSystem.h",
        "line": 36,
        "column": 0
      },
      "context": "void emit_dust_cloud(int count = 20);"
    },
    {
      "caller_function": null,
      "called_function": "emit_fire_particles",
      "location": {
        "file": "src/ParticleSystem.h",
        "line": 37,
        "column": 0
      },
      "context": "void emit_fire_particles(int count = 25);"
    },
    {
      "caller_function": null,
      "called_function": "emit_smoke_trail",
      "location": {
        "file": "src/ParticleSystem.h",
        "line": 38,
        "column": 0
      },
      "context": "void emit_smoke_trail(int count = 15);"
    },
    {
      "caller_function": null,
      "called_function": "update_particles",
      "location": {
        "file": "src/ParticleSystem.h",
        "line": 52,
        "column": 0
      },
      "context": "void update_particles(float deltaTime);"
    },
    {
      "caller_function": null,
      "called_function": "render_particles",
      "location": {
        "file": "src/ParticleSystem.h",
        "line": 53,
        "column": 0
      },
      "context": "void render_particles();"
    },
    {
      "caller_function": null,
      "called_function": "create_particle",
      "location": {
        "file": "src/ParticleSystem.h",
        "line": 54,
        "column": 0
      },
      "context": "void create_particle(float x, float y, float vel_x, float vel_y,"
    },
    {
      "caller_function": null,
      "called_function": "ownership",
      "location": {
        "file": "src/MemoryManagement.h",
        "line": 40,
        "column": 0
      },
      "context": "BORROWED    // raw pointer - NO ownership (lifetime gestionado externamente)"
    },
    {
      "caller_function": "l",
      "called_function": "reserve",
      "location": {
        "file": "src/MemoryManagement.h",
        "line": 83,
        "column": 0
      },
      "context": "pool.reserve(initial_size);"
    },
    {
      "caller_function": "r",
      "called_function": "push_back",
      "location": {
        "file": "src/MemoryManagement.h",
        "line": 85,
        "column": 0
      },
      "context": "pool.push_back(std::make_unique<T>());"
    },
    {
      "caller_function": "f",
      "called_function": "std::move",
      "location": {
        "file": "src/MemoryManagement.h",
        "line": 94,
        "column": 0
      },
      "context": "auto obj = std::move(pool.back());"
    },
    {
      "caller_function": "f",
      "called_function": "move",
      "location": {
        "file": "src/MemoryManagement.h",
        "line": 94,
        "column": 0
      },
      "context": "auto obj = std::move(pool.back());"
    },
    {
      "caller_function": "f",
      "called_function": "back",
      "location": {
        "file": "src/MemoryManagement.h",
        "line": 94,
        "column": 0
      },
      "context": "auto obj = std::move(pool.back());"
    },
    {
      "caller_function": "f",
      "called_function": "pop_back",
      "location": {
        "file": "src/MemoryManagement.h",
        "line": 95,
        "column": 0
      },
      "context": "pool.pop_back();"
    },
    {
      "caller_function": "r",
      "called_function": "reset_for_pool",
      "location": {
        "file": "src/MemoryManagement.h",
        "line": 108,
        "column": 0
      },
      "context": "obj->reset_for_pool();"
    },
    {
      "caller_function": "r",
      "called_function": "std::move",
      "location": {
        "file": "src/MemoryManagement.h",
        "line": 110,
        "column": 0
      },
      "context": "pool.push_back(std::move(obj));"
    },
    {
      "caller_function": "r",
      "called_function": "push_back",
      "location": {
        "file": "src/MemoryManagement.h",
        "line": 110,
        "column": 0
      },
      "context": "pool.push_back(std::move(obj));"
    },
    {
      "caller_function": "r",
      "called_function": "move",
      "location": {
        "file": "src/MemoryManagement.h",
        "line": 110,
        "column": 0
      },
      "context": "pool.push_back(std::move(obj));"
    },
    {
      "caller_function": "r",
      "called_function": "size",
      "location": {
        "file": "src/MemoryManagement.h",
        "line": 114,
        "column": 0
      },
      "context": "size_t size() const { return pool.size(); }"
    },
    {
      "caller_function": "r",
      "called_function": "size",
      "location": {
        "file": "src/MemoryManagement.h",
        "line": 114,
        "column": 0
      },
      "context": "size_t size() const { return pool.size(); }"
    },
    {
      "caller_function": "e",
      "called_function": "static_assert",
      "location": {
        "file": "src/MemoryManagement.h",
        "line": 137,
        "column": 0
      },
      "context": "static_assert(std::is_base_of_v<GameObject, T>, \"T must derive from GameObject\");"
    },
    {
      "caller_function": "d",
      "called_function": "static_assert",
      "location": {
        "file": "src/MemoryManagement.h",
        "line": 143,
        "column": 0
      },
      "context": "static_assert(std::is_base_of_v<GameObject, T>, \"T must derive from GameObject\");"
    },
    {
      "caller_function": "m",
      "called_function": "release",
      "location": {
        "file": "src/MemoryManagement.h",
        "line": 154,
        "column": 0
      },
      "context": "auto* raw_ptr = particle_system.release(); // Transfer ownership to GameContext"
    },
    {
      "caller_function": "m",
      "called_function": "register_object",
      "location": {
        "file": "src/MemoryManagement.h",
        "line": 155,
        "column": 0
      },
      "context": "context->register_object(raw_ptr);"
    },
    {
      "caller_function": "m",
      "called_function": "get_memory_statistics",
      "location": {
        "file": "src/MemoryManagement.h",
        "line": 168,
        "column": 0
      },
      "context": "MemoryStats get_memory_statistics() const;"
    },
    {
      "caller_function": "m",
      "called_function": "SDLResource",
      "location": {
        "file": "src/MemoryManagement.h",
        "line": 181,
        "column": 0
      },
      "context": "explicit SDLResource(T* resource, std::function<void(T*)> deleter)"
    },
    {
      "caller_function": "m",
      "called_function": "resource_",
      "location": {
        "file": "src/MemoryManagement.h",
        "line": 182,
        "column": 0
      },
      "context": ": resource_(resource), deleter_(deleter) {}"
    },
    {
      "caller_function": "m",
      "called_function": "deleter_",
      "location": {
        "file": "src/MemoryManagement.h",
        "line": 182,
        "column": 0
      },
      "context": ": resource_(resource), deleter_(deleter) {}"
    },
    {
      "caller_function": "m",
      "called_function": "SDLResource",
      "location": {
        "file": "src/MemoryManagement.h",
        "line": 184,
        "column": 0
      },
      "context": "~SDLResource() {"
    },
    {
      "caller_function": "f",
      "called_function": "deleter_",
      "location": {
        "file": "src/MemoryManagement.h",
        "line": 186,
        "column": 0
      },
      "context": "deleter_(resource_);"
    },
    {
      "caller_function": "f",
      "called_function": "SDLResource",
      "location": {
        "file": "src/MemoryManagement.h",
        "line": 191,
        "column": 0
      },
      "context": "SDLResource(const SDLResource&) = delete;"
    },
    {
      "caller_function": "f",
      "called_function": "SDLResource",
      "location": {
        "file": "src/MemoryManagement.h",
        "line": 194,
        "column": 0
      },
      "context": "SDLResource(SDLResource&& other) noexcept"
    },
    {
      "caller_function": "f",
      "called_function": "std::move",
      "location": {
        "file": "src/MemoryManagement.h",
        "line": 195,
        "column": 0
      },
      "context": ": resource_(other.resource_), deleter_(std::move(other.deleter_)) {"
    },
    {
      "caller_function": "f",
      "called_function": "resource_",
      "location": {
        "file": "src/MemoryManagement.h",
        "line": 195,
        "column": 0
      },
      "context": ": resource_(other.resource_), deleter_(std::move(other.deleter_)) {"
    },
    {
      "caller_function": "f",
      "called_function": "deleter_",
      "location": {
        "file": "src/MemoryManagement.h",
        "line": 195,
        "column": 0
      },
      "context": ": resource_(other.resource_), deleter_(std::move(other.deleter_)) {"
    },
    {
      "caller_function": "f",
      "called_function": "move",
      "location": {
        "file": "src/MemoryManagement.h",
        "line": 195,
        "column": 0
      },
      "context": ": resource_(other.resource_), deleter_(std::move(other.deleter_)) {"
    },
    {
      "caller_function": "f",
      "called_function": "deleter_",
      "location": {
        "file": "src/MemoryManagement.h",
        "line": 202,
        "column": 0
      },
      "context": "deleter_(resource_);"
    },
    {
      "caller_function": "f",
      "called_function": "std::move",
      "location": {
        "file": "src/MemoryManagement.h",
        "line": 205,
        "column": 0
      },
      "context": "deleter_ = std::move(other.deleter_);"
    },
    {
      "caller_function": "f",
      "called_function": "move",
      "location": {
        "file": "src/MemoryManagement.h",
        "line": 205,
        "column": 0
      },
      "context": "deleter_ = std::move(other.deleter_);"
    },
    {
      "caller_function": "f",
      "called_function": "get",
      "location": {
        "file": "src/MemoryManagement.h",
        "line": 211,
        "column": 0
      },
      "context": "T* get() const { return resource_; }"
    },
    {
      "caller_function": "e",
      "called_function": "MAKE_SDL_SURFACE",
      "location": {
        "file": "src/MemoryManagement.h",
        "line": 228,
        "column": 0
      },
      "context": "#define MAKE_SDL_SURFACE(surface) \\"
    },
    {
      "caller_function": "e",
      "called_function": "SDL_DestroySurface",
      "location": {
        "file": "src/MemoryManagement.h",
        "line": 229,
        "column": 0
      },
      "context": "SDLResource<SDL_Surface>(surface, [](SDL_Surface* s) { if(s) SDL_DestroySurface(s); })"
    },
    {
      "caller_function": "e",
      "called_function": "MAKE_SDL_TEXTURE",
      "location": {
        "file": "src/MemoryManagement.h",
        "line": 231,
        "column": 0
      },
      "context": "#define MAKE_SDL_TEXTURE(texture) \\"
    },
    {
      "caller_function": "e",
      "called_function": "SDL_DestroyTexture",
      "location": {
        "file": "src/MemoryManagement.h",
        "line": 232,
        "column": 0
      },
      "context": "SDLResource<SDL_Texture>(texture, [](SDL_Texture* t) { if(t) SDL_DestroyTexture(t); })"
    },
    {
      "caller_function": "e",
      "called_function": "static_assert",
      "location": {
        "file": "src/MemoryManagement.h",
        "line": 239,
        "column": 0
      },
      "context": "static_assert(std::is_base_of_v<GameObject, T>, \"T must derive from GameObject\");"
    },
    {
      "caller_function": "e",
      "called_function": "ManagedGameObject",
      "location": {
        "file": "src/MemoryManagement.h",
        "line": 243,
        "column": 0
      },
      "context": "ManagedGameObject(GameContext* context, Args&&... args)"
    },
    {
      "caller_function": "e",
      "called_function": "context_",
      "location": {
        "file": "src/MemoryManagement.h",
        "line": 244,
        "column": 0
      },
      "context": ": context_(context), object_(std::make_unique<T>(std::forward<Args>(args)...)) {"
    },
    {
      "caller_function": "e",
      "called_function": "object_",
      "location": {
        "file": "src/MemoryManagement.h",
        "line": 244,
        "column": 0
      },
      "context": ": context_(context), object_(std::make_unique<T>(std::forward<Args>(args)...)) {"
    },
    {
      "caller_function": "f",
      "called_function": "register_object",
      "location": {
        "file": "src/MemoryManagement.h",
        "line": 246,
        "column": 0
      },
      "context": "context_->register_object(object_.get());"
    },
    {
      "caller_function": "f",
      "called_function": "get",
      "location": {
        "file": "src/MemoryManagement.h",
        "line": 246,
        "column": 0
      },
      "context": "context_->register_object(object_.get());"
    },
    {
      "caller_function": "f",
      "called_function": "ManagedGameObject",
      "location": {
        "file": "src/MemoryManagement.h",
        "line": 250,
        "column": 0
      },
      "context": "~ManagedGameObject() {"
    },
    {
      "caller_function": "f",
      "called_function": "get",
      "location": {
        "file": "src/MemoryManagement.h",
        "line": 254,
        "column": 0
      },
      "context": "T* get() const { return object_.get(); }"
    },
    {
      "caller_function": "f",
      "called_function": "get",
      "location": {
        "file": "src/MemoryManagement.h",
        "line": 254,
        "column": 0
      },
      "context": "T* get() const { return object_.get(); }"
    },
    {
      "caller_function": "f",
      "called_function": "get",
      "location": {
        "file": "src/MemoryManagement.h",
        "line": 256,
        "column": 0
      },
      "context": "T* operator->() const { return object_.get(); }"
    },
    {
      "caller_function": "e",
      "called_function": "std::move",
      "location": {
        "file": "src/MemoryManagement.h",
        "line": 259,
        "column": 0
      },
      "context": "return std::move(object_);"
    },
    {
      "caller_function": "e",
      "called_function": "move",
      "location": {
        "file": "src/MemoryManagement.h",
        "line": 259,
        "column": 0
      },
      "context": "return std::move(object_);"
    }
  ],
  "magic_numbers": [
    {
      "value": 8,
      "location": {
        "file": "src/MapEntry.cpp",
        "line": 26,
        "column": 18
      },
      "context": "max_players = 8;",
      "suggested_constant": "TILE_SIZE",
      "category": null,
      "usage_count": 1
    },
    {
      "value": 7,
      "location": {
        "file": "src/MapEntry.cpp",
        "line": 99,
        "column": 40
      },
      "context": "if (tile >= '0' && tile <= '7') {",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 10,
      "location": {
        "file": "src/MapTile_Pure.cpp",
        "line": 63,
        "column": 16
      },
      "context": "sprite_nr = 10; // Box sprite",
      "suggested_constant": "GRID_SIZE",
      "category": null,
      "usage_count": 1
    },
    {
      "value": 30,
      "location": {
        "file": "src/GameSystems.cpp",
        "line": 26,
        "column": 35
      },
      "context": "const float max_delta = 1.0f / 30.0f; // 30 FPS minimum",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 30,
      "location": {
        "file": "src/GameSystems.cpp",
        "line": 26,
        "column": 45
      },
      "context": "const float max_delta = 1.0f / 30.0f; // 30 FPS minimum",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 60,
      "location": {
        "file": "src/GameSystems.cpp",
        "line": 32,
        "column": 36
      },
      "context": "static float avg_delta = 1.0f / 60.0f;",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 20,
      "location": {
        "file": "src/CorpsePart.cpp",
        "line": 29,
        "column": 26
      },
      "context": "blood_emission_rate = 20.0f; // Drops per second",
      "suggested_constant": "DEFAULT_SPEED",
      "category": null,
      "usage_count": 1
    },
    {
      "value": 4,
      "location": {
        "file": "src/CorpsePart.cpp",
        "line": 38,
        "column": 30
      },
      "context": "part_sprite = part_type % 4;",
      "suggested_constant": "PLAYER_COUNT",
      "category": null,
      "usage_count": 1
    },
    {
      "value": 3600,
      "location": {
        "file": "src/CorpsePart.cpp",
        "line": 90,
        "column": 73
      },
      "context": "if (std::isfinite(rotation) && rotation > -3600.0f && rotation < 3600.0f) {",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 360,
      "location": {
        "file": "src/CorpsePart.cpp",
        "line": 93,
        "column": 30
      },
      "context": "while (rotation > 360.0f && safety_counter < 100) {",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 100,
      "location": {
        "file": "src/CorpsePart.cpp",
        "line": 93,
        "column": 57
      },
      "context": "while (rotation > 360.0f && safety_counter < 100) {",
      "suggested_constant": "SCORE_INCREMENT",
      "category": null,
      "usage_count": 1
    },
    {
      "value": 100,
      "location": {
        "file": "src/CorpsePart.cpp",
        "line": 98,
        "column": 55
      },
      "context": "while (rotation < 0.0f && safety_counter < 100) {",
      "suggested_constant": "SCORE_INCREMENT",
      "category": null,
      "usage_count": 1
    },
    {
      "value": 100,
      "location": {
        "file": "src/CorpsePart.cpp",
        "line": 104,
        "column": 34
      },
      "context": "if (safety_counter >= 100) {",
      "suggested_constant": "SCORE_INCREMENT",
      "category": null,
      "usage_count": 1
    },
    {
      "value": 5,
      "location": {
        "file": "src/CorpsePart.cpp",
        "line": 124,
        "column": 35
      },
      "context": "if (velocity.magnitude() < 5.0f && std::abs(angular_velocity) < 10.0f) {",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 10,
      "location": {
        "file": "src/CorpsePart.cpp",
        "line": 124,
        "column": 72
      },
      "context": "if (velocity.magnitude() < 5.0f && std::abs(angular_velocity) < 10.0f) {",
      "suggested_constant": "GRID_SIZE",
      "category": null,
      "usage_count": 1
    },
    {
      "value": 50,
      "location": {
        "file": "src/CorpsePart.cpp",
        "line": 140,
        "column": 31
      },
      "context": "if (velocity.magnitude() > 50.0f && lifetime < 2.0f) {",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 980,
      "location": {
        "file": "src/CorpsePart.cpp",
        "line": 181,
        "column": 52
      },
      "context": "Vector2D gravity_force(0.0f, mass * 980.0f); // 980 pixels/s\u00b2 \u2248 9.8 m/s\u00b2",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 9,
      "location": {
        "file": "src/CorpsePart.cpp",
        "line": 181,
        "column": 68
      },
      "context": "Vector2D gravity_force(0.0f, mass * 980.0f); // 980 pixels/s\u00b2 \u2248 9.8 m/s\u00b2",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 8,
      "location": {
        "file": "src/CorpsePart.cpp",
        "line": 181,
        "column": 70
      },
      "context": "Vector2D gravity_force(0.0f, mass * 980.0f); // 980 pixels/s\u00b2 \u2248 9.8 m/s\u00b2",
      "suggested_constant": "TILE_SIZE",
      "category": null,
      "usage_count": 1
    },
    {
      "value": 560,
      "location": {
        "file": "src/CorpsePart.cpp",
        "line": 186,
        "column": 27
      },
      "context": "const float ground_y = 560.0f;",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 760,
      "location": {
        "file": "src/CorpsePart.cpp",
        "line": 188,
        "column": 29
      },
      "context": "const float right_wall = 760.0f;",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 50,
      "location": {
        "file": "src/CorpsePart.cpp",
        "line": 207,
        "column": 56
      },
      "context": "angular_velocity += (tangent_velocity / mass) * 50.0f; // Conversion factor",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 100,
      "location": {
        "file": "src/CorpsePart.cpp",
        "line": 210,
        "column": 27
      },
      "context": "if (impact_force > 100.0f) {",
      "suggested_constant": "SCORE_INCREMENT",
      "category": null,
      "usage_count": 1
    },
    {
      "value": 50,
      "location": {
        "file": "src/CorpsePart.cpp",
        "line": 245,
        "column": 30
      },
      "context": "if (blood_trails.size() < 50) { // Limit blood drops for performance",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 255,
      "location": {
        "file": "src/CorpsePart.cpp",
        "line": 255,
        "column": 21
      },
      "context": "drop.alpha = 255;",
      "suggested_constant": "COLOR_MAX",
      "category": null,
      "usage_count": 1
    },
    {
      "value": 4,
      "location": {
        "file": "src/CorpsePart.cpp",
        "line": 270,
        "column": 24
      },
      "context": "switch (part_type % 4) {",
      "suggested_constant": "PLAYER_COUNT",
      "category": null,
      "usage_count": 1
    },
    {
      "value": 4,
      "location": {
        "file": "src/CorpsePart.cpp",
        "line": 272,
        "column": 23
      },
      "context": "case 1: return 4.0f; // Torso - heaviest",
      "suggested_constant": "PLAYER_COUNT",
      "category": null,
      "usage_count": 1
    },
    {
      "value": 3,
      "location": {
        "file": "src/CorpsePart.cpp",
        "line": 274,
        "column": 13
      },
      "context": "case 3: return 2.2f; // Leg - medium",
      "suggested_constant": "RGB_COMPONENTS",
      "category": null,
      "usage_count": 1
    },
    {
      "value": 4,
      "location": {
        "file": "src/CorpsePart.cpp",
        "line": 281,
        "column": 24
      },
      "context": "switch (part_type % 4) {",
      "suggested_constant": "PLAYER_COUNT",
      "category": null,
      "usage_count": 1
    },
    {
      "value": 3,
      "location": {
        "file": "src/CorpsePart.cpp",
        "line": 285,
        "column": 13
      },
      "context": "case 3: return 1.0f; // Leg - medium",
      "suggested_constant": "RGB_COMPONENTS",
      "category": null,
      "usage_count": 1
    },
    {
      "value": 600,
      "location": {
        "file": "src/GameLogic.cpp",
        "line": 31,
        "column": 24
      },
      "context": "if (frame_counter % 600 == 0) {",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 3,
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 50,
        "column": 47
      },
      "context": "SDL_Log(\"Attempting fallback to OpenGL 3.3...\");",
      "suggested_constant": "RGB_COMPONENTS",
      "category": null,
      "usage_count": 1
    },
    {
      "value": 3,
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 50,
        "column": 49
      },
      "context": "SDL_Log(\"Attempting fallback to OpenGL 3.3...\");",
      "suggested_constant": "RGB_COMPONENTS",
      "category": null,
      "usage_count": 1
    },
    {
      "value": 3,
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 56,
        "column": 66
      },
      "context": "std::string fallback_error = \"Failed to create OpenGL 3.3 context: \" + std::string(SDL_GetError());",
      "suggested_constant": "RGB_COMPONENTS",
      "category": null,
      "usage_count": 1
    },
    {
      "value": 3,
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 56,
        "column": 68
      },
      "context": "std::string fallback_error = \"Failed to create OpenGL 3.3 context: \" + std::string(SDL_GetError());",
      "suggested_constant": "RGB_COMPONENTS",
      "category": null,
      "usage_count": 1
    },
    {
      "value": 3,
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 111,
        "column": 20
      },
      "context": "\"OpenGL 3.3 not supported! GPU renderer requires at least OpenGL 3.3\",",
      "suggested_constant": "RGB_COMPONENTS",
      "category": null,
      "usage_count": 1
    },
    {
      "value": 3,
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 111,
        "column": 22
      },
      "context": "\"OpenGL 3.3 not supported! GPU renderer requires at least OpenGL 3.3\",",
      "suggested_constant": "RGB_COMPONENTS",
      "category": null,
      "usage_count": 1
    },
    {
      "value": 4,
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 117,
        "column": 24
      },
      "context": "SDL_Log(\"OpenGL 4.6 supported - using advanced features\");",
      "suggested_constant": "PLAYER_COUNT",
      "category": null,
      "usage_count": 1
    },
    {
      "value": 6,
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 117,
        "column": 26
      },
      "context": "SDL_Log(\"OpenGL 4.6 supported - using advanced features\");",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 4,
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 119,
        "column": 24
      },
      "context": "SDL_Log(\"OpenGL 4.0 supported - using most features\");",
      "suggested_constant": "PLAYER_COUNT",
      "category": null,
      "usage_count": 1
    },
    {
      "value": 3,
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 121,
        "column": 24
      },
      "context": "SDL_Log(\"OpenGL 3.3 supported - using basic features\");",
      "suggested_constant": "RGB_COMPONENTS",
      "category": null,
      "usage_count": 1
    },
    {
      "value": 3,
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 121,
        "column": 26
      },
      "context": "SDL_Log(\"OpenGL 3.3 supported - using basic features\");",
      "suggested_constant": "RGB_COMPONENTS",
      "category": null,
      "usage_count": 1
    },
    {
      "value": 100000,
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 154,
        "column": 30
      },
      "context": "if (!init_particle_system(100000)) { // 100K particles!",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 4,
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 418,
        "column": 37
      },
      "context": "size_t buffer_size = MAX_QUADS * 4 * sizeof(SimpleVertex);",
      "suggested_constant": "PLAYER_COUNT",
      "category": null,
      "usage_count": 1
    },
    {
      "value": 6,
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 433,
        "column": 32
      },
      "context": "indices.reserve(MAX_QUADS * 6);",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 4,
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 435,
        "column": 26
      },
      "context": "GLuint base = i * 4;",
      "suggested_constant": "PLAYER_COUNT",
      "category": null,
      "usage_count": 1
    },
    {
      "value": 3,
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 462,
        "column": 30
      },
      "context": "glEnableVertexAttribArray(3);",
      "suggested_constant": "RGB_COMPONENTS",
      "category": null,
      "usage_count": 1
    },
    {
      "value": 4,
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 467,
        "column": 30
      },
      "context": "glEnableVertexAttribArray(4);",
      "suggested_constant": "PLAYER_COUNT",
      "category": null,
      "usage_count": 1
    },
    {
      "value": 5,
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 472,
        "column": 30
      },
      "context": "glEnableVertexAttribArray(5);",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 4,
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 474,
        "column": 39
      },
      "context": "batch_vertices.reserve(MAX_QUADS * 4);",
      "suggested_constant": "PLAYER_COUNT",
      "category": null,
      "usage_count": 1
    },
    {
      "value": 6,
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 475,
        "column": 38
      },
      "context": "batch_indices.reserve(MAX_QUADS * 6);",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 1000,
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 531,
        "column": 36
      },
      "context": "current_time = SDL_GetTicks() / 1000.0f;",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 4,
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 642,
        "column": 54
      },
      "context": "if (batch_vertices.size() != current_quad_count * 4) {",
      "suggested_constant": "PLAYER_COUNT",
      "category": null,
      "usage_count": 1
    },
    {
      "value": 4,
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 667,
        "column": 50
      },
      "context": "size_t expected_buffer_size = MAX_QUADS * 4 * sizeof(SimpleVertex);",
      "suggested_constant": "PLAYER_COUNT",
      "category": null,
      "usage_count": 1
    },
    {
      "value": 6,
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 745,
        "column": 46
      },
      "context": "int triangle_count = current_quad_count * 6;",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 4,
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 754,
        "column": 57
      },
      "context": "perf_stats.vertices_rendered += current_quad_count * 4;",
      "suggested_constant": "PLAYER_COUNT",
      "category": null,
      "usage_count": 1
    },
    {
      "value": 128,
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 988,
        "column": 61
      },
      "context": "GLuint num_groups = (max_gpu_particles + 127) / 128;  // 128 is the new workgroup size",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 100,
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 1035,
        "column": 48
      },
      "context": "particles[i].mass = 1.0f + (gen() % 100) / 100.0f; // 1.0 to 2.0",
      "suggested_constant": "SCORE_INCREMENT",
      "category": null,
      "usage_count": 1
    },
    {
      "value": 100,
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 1035,
        "column": 55
      },
      "context": "particles[i].mass = 1.0f + (gen() % 100) / 100.0f; // 1.0 to 2.0",
      "suggested_constant": "SCORE_INCREMENT",
      "category": null,
      "usage_count": 1
    },
    {
      "value": 3,
      "location": {
        "file": "src/Controller.cpp",
        "line": 92,
        "column": 34
      },
      "context": "return new Controller_Joystick(3);",
      "suggested_constant": "RGB_COMPONENTS",
      "category": null,
      "usage_count": 1
    },
    {
      "value": 4,
      "location": {
        "file": "src/Controller.cpp",
        "line": 94,
        "column": 34
      },
      "context": "return new Controller_Joystick(4);",
      "suggested_constant": "PLAYER_COUNT",
      "category": null,
      "usage_count": 1
    },
    {
      "value": 5,
      "location": {
        "file": "src/Controller.cpp",
        "line": 96,
        "column": 34
      },
      "context": "return new Controller_Joystick(5);",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 6,
      "location": {
        "file": "src/Controller.cpp",
        "line": 98,
        "column": 34
      },
      "context": "return new Controller_Joystick(6);",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 7,
      "location": {
        "file": "src/Controller.cpp",
        "line": 100,
        "column": 34
      },
      "context": "return new Controller_Joystick(7);",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 3,
      "location": {
        "file": "src/MainMenuScreen.cpp",
        "line": 55,
        "column": 25
      },
      "context": "case 3: // Graphics Options",
      "suggested_constant": "RGB_COMPONENTS",
      "category": null,
      "usage_count": 1
    },
    {
      "value": 4,
      "location": {
        "file": "src/MainMenuScreen.cpp",
        "line": 58,
        "column": 25
      },
      "context": "case 4: // Help",
      "suggested_constant": "PLAYER_COUNT",
      "category": null,
      "usage_count": 1
    },
    {
      "value": 5,
      "location": {
        "file": "src/MainMenuScreen.cpp",
        "line": 61,
        "column": 25
      },
      "context": "case 5: // Credits",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 6,
      "location": {
        "file": "src/MainMenuScreen.cpp",
        "line": 64,
        "column": 25
      },
      "context": "case 6: // Quit",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 3,
      "location": {
        "file": "src/MainMenuScreen.cpp",
        "line": 111,
        "column": 25
      },
      "context": "case 3: // Graphics Options",
      "suggested_constant": "RGB_COMPONENTS",
      "category": null,
      "usage_count": 1
    },
    {
      "value": 4,
      "location": {
        "file": "src/MainMenuScreen.cpp",
        "line": 114,
        "column": 25
      },
      "context": "case 4: // Help",
      "suggested_constant": "PLAYER_COUNT",
      "category": null,
      "usage_count": 1
    },
    {
      "value": 5,
      "location": {
        "file": "src/MainMenuScreen.cpp",
        "line": 117,
        "column": 25
      },
      "context": "case 5: // Credits",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 6,
      "location": {
        "file": "src/MainMenuScreen.cpp",
        "line": 120,
        "column": 25
      },
      "context": "case 6: // Quit",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 220,
      "location": {
        "file": "src/MainMenuScreen.cpp",
        "line": 151,
        "column": 14
      },
      "context": "float y = 220;",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 90,
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 37,
        "column": 31
      },
      "context": "int\tGameConfig::round_time\t\t\t= 90;",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 5,
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 39,
        "column": 35
      },
      "context": "int\tGameConfig::max_skateboards\t\t= 5;",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 12,
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 40,
        "column": 30
      },
      "context": "int\tGameConfig::max_power\t\t\t= 12;",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 9,
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 41,
        "column": 30
      },
      "context": "int\tGameConfig::max_bombs\t\t\t= 9;",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 10,
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 68,
        "column": 32
      },
      "context": "int\tGameConfig::corpse_parts\t\t= 10;",
      "suggested_constant": "GRID_SIZE",
      "category": null,
      "usage_count": 1
    },
    {
      "value": 3000,
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 70,
        "column": 34
      },
      "context": "int\tGameConfig::bomb_countdown\t\t= 3000;",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 10,
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 71,
        "column": 31
      },
      "context": "int\tGameConfig::bomb_delay\t\t\t= 10;",
      "suggested_constant": "GRID_SIZE",
      "category": null,
      "usage_count": 1
    },
    {
      "value": 160,
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 72,
        "column": 31
      },
      "context": "int\tGameConfig::bomb_speed\t\t\t= 160;",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 5,
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 74,
        "column": 33
      },
      "context": "int\tGameConfig::points_to_win\t\t= 5;",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 5,
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 124,
        "column": 14
      },
      "context": "team = _team%5;",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 6,
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 586,
        "column": 27
      },
      "context": "bomber[1].set_controller(6); // JOYSTICK_1 (value 6 in enum)",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 6,
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 586,
        "column": 52
      },
      "context": "bomber[1].set_controller(6); // JOYSTICK_1 (value 6 in enum)",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 50000,
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 416,
        "column": 40
      },
      "context": "low_freq = (Uint16)(intensity * 50000);  // Strong low rumble",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 35000,
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 417,
        "column": 41
      },
      "context": "high_freq = (Uint16)(intensity * 35000); // Sharp high buzz",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 45000,
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 420,
        "column": 40
      },
      "context": "low_freq = (Uint16)(intensity * 45000);",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 20000,
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 421,
        "column": 41
      },
      "context": "high_freq = (Uint16)(intensity * 20000);",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 30000,
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 424,
        "column": 40
      },
      "context": "low_freq = (Uint16)(intensity * 30000);",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 8000,
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 425,
        "column": 41
      },
      "context": "high_freq = (Uint16)(intensity * 8000);",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 15000,
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 428,
        "column": 40
      },
      "context": "low_freq = (Uint16)(intensity * 15000);",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 2000,
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 429,
        "column": 41
      },
      "context": "high_freq = (Uint16)(intensity * 2000);",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 30,
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 455,
        "column": 20
      },
      "context": "if (distance <= 30.0f) {",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 60,
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 457,
        "column": 39
      },
      "context": "intensity = 1.0f - (distance / 60.0f); // 0px = 1.0, 30px = 0.5, clamped to 0.8+",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 80,
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 459,
        "column": 27
      },
      "context": "} else if (distance <= 80.0f) {",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 50,
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 461,
        "column": 39
      },
      "context": "float t = (distance - 30.0f) / 50.0f; // 0 to 1",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 8,
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 462,
        "column": 44
      },
      "context": "intensity = 0.8f - (0.3f * t); // 0.8 down to 0.5",
      "suggested_constant": "TILE_SIZE",
      "category": null,
      "usage_count": 1
    },
    {
      "value": 5,
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 462,
        "column": 56
      },
      "context": "intensity = 0.8f - (0.3f * t); // 0.8 down to 0.5",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 150,
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 463,
        "column": 27
      },
      "context": "} else if (distance <= 150.0f) {",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 70,
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 465,
        "column": 39
      },
      "context": "float t = (distance - 80.0f) / 70.0f; // 0 to 1",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 5,
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 466,
        "column": 45
      },
      "context": "intensity = 0.5f - (0.25f * t); // 0.5 down to 0.25",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 25,
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 466,
        "column": 57
      },
      "context": "intensity = 0.5f - (0.25f * t); // 0.5 down to 0.25",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 250,
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 467,
        "column": 27
      },
      "context": "} else if (distance <= 250.0f) {",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 100,
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 469,
        "column": 40
      },
      "context": "float t = (distance - 150.0f) / 100.0f; // 0 to 1",
      "suggested_constant": "SCORE_INCREMENT",
      "category": null,
      "usage_count": 1
    },
    {
      "value": 25,
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 470,
        "column": 46
      },
      "context": "intensity = 0.25f - (0.15f * t); // 0.25 down to 0.1",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 400,
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 471,
        "column": 27
      },
      "context": "} else if (distance <= 400.0f) {",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 150,
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 473,
        "column": 40
      },
      "context": "float t = (distance - 250.0f) / 150.0f; // 0 to 1",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 5,
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 474,
        "column": 57
      },
      "context": "intensity = 0.1f - (0.05f * t); // 0.1 down to 0.05",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 600,
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 475,
        "column": 27
      },
      "context": "} else if (distance <= 600.0f) {",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 200,
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 477,
        "column": 40
      },
      "context": "float t = (distance - 400.0f) / 200.0f; // 0 to 1",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 5,
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 478,
        "column": 46
      },
      "context": "intensity = 0.05f - (0.03f * t); // 0.05 down to 0.02",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 200,
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 481,
        "column": 66
      },
      "context": "intensity = 0.01f * std::fmax(0.0f, (800.0f - distance) / 200.0f);",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 5,
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 524,
        "column": 52
      },
      "context": "vibration_state.duration_left = 1.5f;  // 1.5 seconds",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 50000,
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 539,
        "column": 44
      },
      "context": "low_freq = (Uint16)(intensity * 50000);",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 35000,
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 540,
        "column": 45
      },
      "context": "high_freq = (Uint16)(intensity * 35000);",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 600,
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 541,
        "column": 23
      },
      "context": "duration = 600;",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 45000,
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 544,
        "column": 44
      },
      "context": "low_freq = (Uint16)(intensity * 45000);",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 20000,
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 545,
        "column": 45
      },
      "context": "high_freq = (Uint16)(intensity * 20000);",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 400,
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 546,
        "column": 23
      },
      "context": "duration = 400;",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 30000,
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 549,
        "column": 44
      },
      "context": "low_freq = (Uint16)(intensity * 30000);",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 8000,
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 550,
        "column": 45
      },
      "context": "high_freq = (Uint16)(intensity * 8000);",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 300,
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 551,
        "column": 23
      },
      "context": "duration = 300;",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 15000,
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 554,
        "column": 44
      },
      "context": "low_freq = (Uint16)(intensity * 15000);",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 2000,
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 555,
        "column": 45
      },
      "context": "high_freq = (Uint16)(intensity * 2000);",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 200,
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 556,
        "column": 23
      },
      "context": "duration = 200;",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 1000,
      "location": {
        "file": "src/Bomb.cpp",
        "line": 16,
        "column": 51
      },
      "context": "countdown = GameConfig::get_bomb_countdown() / 1000.0f;",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 3000,
      "location": {
        "file": "src/Bomb.cpp",
        "line": 23,
        "column": 49
      },
      "context": "z = Z_BOMB;  // Bombs should be above tiles (3000 > 0)",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 4,
      "location": {
        "file": "src/Bomb.cpp",
        "line": 27,
        "column": 39
      },
      "context": "base_sprite = owner->get_color() * 4; // 4 frames per color",
      "suggested_constant": "PLAYER_COUNT",
      "category": null,
      "usage_count": 1
    },
    {
      "value": 4,
      "location": {
        "file": "src/Bomb.cpp",
        "line": 27,
        "column": 45
      },
      "context": "base_sprite = owner->get_color() * 4; // 4 frames per color",
      "suggested_constant": "PLAYER_COUNT",
      "category": null,
      "usage_count": 1
    },
    {
      "value": 4,
      "location": {
        "file": "src/Bomb.cpp",
        "line": 42,
        "column": 37
      },
      "context": "const int num_animation_frames = 4;",
      "suggested_constant": "PLAYER_COUNT",
      "category": null,
      "usage_count": 1
    },
    {
      "value": 3,
      "location": {
        "file": "src/Bomb.cpp",
        "line": 43,
        "column": 34
      },
      "context": "const float animation_speed = 3.0f; // Reduced from 10.0f for deltaTime calibration",
      "suggested_constant": "RGB_COMPONENTS",
      "category": null,
      "usage_count": 1
    },
    {
      "value": 10,
      "location": {
        "file": "src/Bomb.cpp",
        "line": 43,
        "column": 56
      },
      "context": "const float animation_speed = 3.0f; // Reduced from 10.0f for deltaTime calibration",
      "suggested_constant": "GRID_SIZE",
      "category": null,
      "usage_count": 1
    },
    {
      "value": 100,
      "location": {
        "file": "src/Bomb.cpp",
        "line": 82,
        "column": 49
      },
      "context": "float delay = GameConfig::get_bomb_delay() / 100.0f;",
      "suggested_constant": "SCORE_INCREMENT",
      "category": null,
      "usage_count": 1
    },
    {
      "value": 120,
      "location": {
        "file": "src/Bomb.cpp",
        "line": 94,
        "column": 16
      },
      "context": "speed = 120; // Reduced from 240 for deltaTime calibration - kicked bomb speed",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 240,
      "location": {
        "file": "src/Bomb.cpp",
        "line": 94,
        "column": 37
      },
      "context": "speed = 120; // Reduced from 240 for deltaTime calibration - kicked bomb speed",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 255,
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 134,
        "column": 32
      },
      "context": "static_cast<float>(a) / 255.0f",
      "suggested_constant": "COLOR_MAX",
      "category": null,
      "usage_count": 1
    },
    {
      "value": 300,
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 267,
        "column": 17
      },
      "context": "if (x >= 300 && x <= 500) {",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 500,
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 267,
        "column": 29
      },
      "context": "if (x >= 300 && x <= 500) {",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 100,
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 322,
        "column": 51
      },
      "context": "int estimated_particles = static_cast<int>(100 * intensity);",
      "suggested_constant": "SCORE_INCREMENT",
      "category": null,
      "usage_count": 1
    },
    {
      "value": 1000,
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 382,
        "column": 54
      },
      "context": "std::string debug_text = \"FPS: \" + std::to_string(1000.0f / std::max(stats.frame_time_ms, 0.001f)) +",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 64,
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 428,
        "column": 17
      },
      "context": "info.width = 64;  // Default tile size",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 64,
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 429,
        "column": 18
      },
      "context": "info.height = 64;",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 64,
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 430,
        "column": 24
      },
      "context": "info.memory_usage = 64 * 64 * 4; // Assume 32-bit RGBA",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 64,
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 430,
        "column": 29
      },
      "context": "info.memory_usage = 64 * 64 * 4; // Assume 32-bit RGBA",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 4,
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 430,
        "column": 34
      },
      "context": "info.memory_usage = 64 * 64 * 4; // Assume 32-bit RGBA",
      "suggested_constant": "PLAYER_COUNT",
      "category": null,
      "usage_count": 1
    },
    {
      "value": 4096,
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 536,
        "column": 58
      },
      "context": "stats.texture_memory_usage = stats.sprites_rendered * 4096; // Rough estimate",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 10,
      "location": {
        "file": "src/Bomber.cpp",
        "line": 76,
        "column": 45
      },
      "context": "if (static_cast<int>(flicker_timer * 10) % 2 == 0) {",
      "suggested_constant": "GRID_SIZE",
      "category": null,
      "usage_count": 1
    },
    {
      "value": 3,
      "location": {
        "file": "src/GameplayScreen.cpp",
        "line": 132,
        "column": 30
      },
      "context": "bomber->set_lives(3); // Start with 3 lives",
      "suggested_constant": "RGB_COMPONENTS",
      "category": null,
      "usage_count": 1
    },
    {
      "value": 3,
      "location": {
        "file": "src/GameplayScreen.cpp",
        "line": 132,
        "column": 48
      },
      "context": "bomber->set_lives(3); // Start with 3 lives",
      "suggested_constant": "RGB_COMPONENTS",
      "category": null,
      "usage_count": 1
    },
    {
      "value": 8,
      "location": {
        "file": "src/GameplayScreen.cpp",
        "line": 317,
        "column": 30
      },
      "context": "if (game_over_timer > 8.0f) {",
      "suggested_constant": "TILE_SIZE",
      "category": null,
      "usage_count": 1
    },
    {
      "value": 30,
      "location": {
        "file": "src/GameplayScreen.cpp",
        "line": 385,
        "column": 35
      },
      "context": "const float max_delta = 1.0f / 30.0f; // 30 FPS minimum",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 30,
      "location": {
        "file": "src/GameplayScreen.cpp",
        "line": 385,
        "column": 45
      },
      "context": "const float max_delta = 1.0f / 30.0f; // 30 FPS minimum",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 60,
      "location": {
        "file": "src/GameplayScreen.cpp",
        "line": 391,
        "column": 36
      },
      "context": "static float avg_delta = 1.0f / 60.0f;",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 30,
      "location": {
        "file": "src/ThrownBomb.cpp",
        "line": 20,
        "column": 17
      },
      "context": "arc_height = 30.0f; // Pixels high for the arc",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 200,
      "location": {
        "file": "src/ThrownBomb.cpp",
        "line": 34,
        "column": 48
      },
      "context": "flight_duration = std::max(0.5f, distance / 200.0f);",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 4,
      "location": {
        "file": "src/ThrownBomb.cpp",
        "line": 70,
        "column": 33
      },
      "context": "float arc_progress = 4.0f * progress * (1.0f - progress); // Parabola: peaks at 0.5",
      "suggested_constant": "PLAYER_COUNT",
      "category": null,
      "usage_count": 1
    },
    {
      "value": 5,
      "location": {
        "file": "src/ThrownBomb.cpp",
        "line": 70,
        "column": 94
      },
      "context": "float arc_progress = 4.0f * progress * (1.0f - progress); // Parabola: peaks at 0.5",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 4,
      "location": {
        "file": "src/ThrownBomb.cpp",
        "line": 85,
        "column": 29
      },
      "context": "float arc_progress = 4.0f * progress * (1.0f - progress); // Parabola",
      "suggested_constant": "PLAYER_COUNT",
      "category": null,
      "usage_count": 1
    },
    {
      "value": 30,
      "location": {
        "file": "src/ThrownBomb.cpp",
        "line": 93,
        "column": 75
      },
      "context": "float scale = 1.0f + (visual_offset / arc_height) * 0.3f; // Up to 30% bigger at peak",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 12,
      "location": {
        "file": "src/MapTile.cpp",
        "line": 74,
        "column": 34
      },
      "context": "case 1: // Bomb capacity (12.5% chance)",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 5,
      "location": {
        "file": "src/MapTile.cpp",
        "line": 74,
        "column": 37
      },
      "context": "case 1: // Bomb capacity (12.5% chance)",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 12,
      "location": {
        "file": "src/MapTile.cpp",
        "line": 77,
        "column": 26
      },
      "context": "case 2: // Speed (12.5% chance)",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 5,
      "location": {
        "file": "src/MapTile.cpp",
        "line": 77,
        "column": 29
      },
      "context": "case 2: // Speed (12.5% chance)",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 3,
      "location": {
        "file": "src/MapTile.cpp",
        "line": 80,
        "column": 13
      },
      "context": "case 3: { // Special abilities (12.5% chance - kick or glove)",
      "suggested_constant": "RGB_COMPONENTS",
      "category": null,
      "usage_count": 1
    },
    {
      "value": 12,
      "location": {
        "file": "src/MapTile.cpp",
        "line": 80,
        "column": 40
      },
      "context": "case 3: { // Special abilities (12.5% chance - kick or glove)",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 4,
      "location": {
        "file": "src/MapTile.cpp",
        "line": 85,
        "column": 13
      },
      "context": "case 4: { // Negative effects (12.5% chance)",
      "suggested_constant": "PLAYER_COUNT",
      "category": null,
      "usage_count": 1
    },
    {
      "value": 12,
      "location": {
        "file": "src/MapTile.cpp",
        "line": 85,
        "column": 39
      },
      "context": "case 4: { // Negative effects (12.5% chance)",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 5,
      "location": {
        "file": "src/MapTile.cpp",
        "line": 85,
        "column": 42
      },
      "context": "case 4: { // Negative effects (12.5% chance)",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 25,
      "location": {
        "file": "src/MapTile.cpp",
        "line": 89,
        "column": 62
      },
      "context": "extra_type = Extra::DISEASE; // Constipation (25% of this case)",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 3,
      "location": {
        "file": "src/MapTile.cpp",
        "line": 90,
        "column": 52
      },
      "context": "} else if (neg_roll == 2 || neg_roll == 3) {",
      "suggested_constant": "RGB_COMPONENTS",
      "category": null,
      "usage_count": 1
    },
    {
      "value": 25,
      "location": {
        "file": "src/MapTile.cpp",
        "line": 91,
        "column": 61
      },
      "context": "extra_type = Extra::VIAGRA; // Sticky bombs (25% of this case)",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 4,
      "location": {
        "file": "src/MapTile.cpp",
        "line": 92,
        "column": 35
      },
      "context": "} else if (neg_roll == 4 || neg_roll == 5) {",
      "suggested_constant": "PLAYER_COUNT",
      "category": null,
      "usage_count": 1
    },
    {
      "value": 5,
      "location": {
        "file": "src/MapTile.cpp",
        "line": 92,
        "column": 52
      },
      "context": "} else if (neg_roll == 4 || neg_roll == 5) {",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 25,
      "location": {
        "file": "src/MapTile.cpp",
        "line": 93,
        "column": 67
      },
      "context": "extra_type = Extra::KOKS; // Uncontrollable speed (25% of this case)",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 25,
      "location": {
        "file": "src/MapTile.cpp",
        "line": 95,
        "column": 45
      },
      "context": "return; // No extra spawned (25% of this case)",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 5,
      "location": {
        "file": "src/MapTile.cpp",
        "line": 99,
        "column": 13
      },
      "context": "case 5: // Skate (rare, 6.25% chance)",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 6,
      "location": {
        "file": "src/MapTile.cpp",
        "line": 106,
        "column": 13
      },
      "context": "case 6:",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 7,
      "location": {
        "file": "src/MapTile.cpp",
        "line": 107,
        "column": 13
      },
      "context": "case 7:",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 3,
      "location": {
        "file": "src/Map.cpp",
        "line": 111,
        "column": 52
      },
      "context": "case '0': case '1': case '2': case '3':",
      "suggested_constant": "RGB_COMPONENTS",
      "category": null,
      "usage_count": 1
    },
    {
      "value": 4,
      "location": {
        "file": "src/Map.cpp",
        "line": 112,
        "column": 22
      },
      "context": "case '4': case '5': case '6': case '7':",
      "suggested_constant": "PLAYER_COUNT",
      "category": null,
      "usage_count": 1
    },
    {
      "value": 5,
      "location": {
        "file": "src/Map.cpp",
        "line": 112,
        "column": 32
      },
      "context": "case '4': case '5': case '6': case '7':",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 6,
      "location": {
        "file": "src/Map.cpp",
        "line": 112,
        "column": 42
      },
      "context": "case '4': case '5': case '6': case '7':",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 7,
      "location": {
        "file": "src/Map.cpp",
        "line": 112,
        "column": 52
      },
      "context": "case '4': case '5': case '6': case '7':",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 3,
      "location": {
        "file": "src/Map.cpp",
        "line": 125,
        "column": 42
      },
      "context": "tile_type = (rand() % 3) ? MapTile_Pure::BOX : MapTile_Pure::GROUND;",
      "suggested_constant": "RGB_COMPONENTS",
      "category": null,
      "usage_count": 1
    },
    {
      "value": 3,
      "location": {
        "file": "src/Map.cpp",
        "line": 287,
        "column": 13
      },
      "context": "case 3: return CL_Vector(17, 12);",
      "suggested_constant": "RGB_COMPONENTS",
      "category": null,
      "usage_count": 1
    },
    {
      "value": 4,
      "location": {
        "file": "src/Map.cpp",
        "line": 288,
        "column": 13
      },
      "context": "case 4: return CL_Vector(9, 2);",
      "suggested_constant": "PLAYER_COUNT",
      "category": null,
      "usage_count": 1
    },
    {
      "value": 5,
      "location": {
        "file": "src/Map.cpp",
        "line": 289,
        "column": 13
      },
      "context": "case 5: return CL_Vector(9, 12);",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 6,
      "location": {
        "file": "src/Map.cpp",
        "line": 290,
        "column": 13
      },
      "context": "case 6: return CL_Vector(2, 7);",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 7,
      "location": {
        "file": "src/Map.cpp",
        "line": 291,
        "column": 13
      },
      "context": "case 7: return CL_Vector(17, 7);",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 1000,
      "location": {
        "file": "src/BomberComponents.cpp",
        "line": 80,
        "column": 36
      },
      "context": "flight_duration = duration_ms / 1000.0f; // Convert to seconds",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 80,
      "location": {
        "file": "src/BomberComponents.cpp",
        "line": 226,
        "column": 25
      },
      "context": "int throw_distance = 80; // 2 tiles",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 10,
      "location": {
        "file": "src/BomberComponents.cpp",
        "line": 353,
        "column": 38
      },
      "context": "case DIR_LEFT:  base_sprite = 10; break;  // Left-facing sprites: 2-3",
      "suggested_constant": "GRID_SIZE",
      "category": null,
      "usage_count": 1
    },
    {
      "value": 30,
      "location": {
        "file": "src/BomberComponents.cpp",
        "line": 354,
        "column": 38
      },
      "context": "case DIR_RIGHT: base_sprite = 30; break;  // Right-facing sprites: 4-5",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 20,
      "location": {
        "file": "src/BomberComponents.cpp",
        "line": 355,
        "column": 38
      },
      "context": "case DIR_UP:    base_sprite = 20; break;  // Up-facing sprites: 6-7",
      "suggested_constant": "DEFAULT_SPEED",
      "category": null,
      "usage_count": 1
    },
    {
      "value": 8,
      "location": {
        "file": "src/BomberComponents.cpp",
        "line": 366,
        "column": 30
      },
      "context": "anim_count += deltaTime * 8.0f; // Reduced from 20.0f for deltaTime calibration",
      "suggested_constant": "TILE_SIZE",
      "category": null,
      "usage_count": 1
    },
    {
      "value": 20,
      "location": {
        "file": "src/BomberComponents.cpp",
        "line": 366,
        "column": 52
      },
      "context": "anim_count += deltaTime * 8.0f; // Reduced from 20.0f for deltaTime calibration",
      "suggested_constant": "DEFAULT_SPEED",
      "category": null,
      "usage_count": 1
    },
    {
      "value": 9,
      "location": {
        "file": "src/BomberComponents.cpp",
        "line": 367,
        "column": 22
      },
      "context": "if (anim_count >= 9.0f) {",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 10,
      "location": {
        "file": "src/BomberComponents.cpp",
        "line": 386,
        "column": 38
      },
      "context": "case DIR_LEFT:  base_sprite = 10; break;  // Left-facing sprites: 10-19",
      "suggested_constant": "GRID_SIZE",
      "category": null,
      "usage_count": 1
    },
    {
      "value": 30,
      "location": {
        "file": "src/BomberComponents.cpp",
        "line": 387,
        "column": 38
      },
      "context": "case DIR_RIGHT: base_sprite = 30; break;  // Right-facing sprites: 30-39",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 20,
      "location": {
        "file": "src/BomberComponents.cpp",
        "line": 388,
        "column": 38
      },
      "context": "case DIR_UP:    base_sprite = 20; break;  // Up-facing sprites: 20-29",
      "suggested_constant": "DEFAULT_SPEED",
      "category": null,
      "usage_count": 1
    },
    {
      "value": 3,
      "location": {
        "file": "src/BomberComponents.cpp",
        "line": 435,
        "column": 20
      },
      "context": "respawn_timer = 3.0f; // 3 seconds respawn delay",
      "suggested_constant": "RGB_COMPONENTS",
      "category": null,
      "usage_count": 1
    },
    {
      "value": 3,
      "location": {
        "file": "src/BomberComponents.cpp",
        "line": 435,
        "column": 29
      },
      "context": "respawn_timer = 3.0f; // 3 seconds respawn delay",
      "suggested_constant": "RGB_COMPONENTS",
      "category": null,
      "usage_count": 1
    },
    {
      "value": 5,
      "location": {
        "file": "src/SpatialPartitioning.cpp",
        "line": 271,
        "column": 47
      },
      "context": "} else if (cell->object_count() <= 5) {",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 240,
      "location": {
        "file": "src/GameObject.cpp",
        "line": 82,
        "column": 9
      },
      "context": "speed = 240;",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 30,
      "location": {
        "file": "src/GameObject.cpp",
        "line": 219,
        "column": 34
      },
      "context": "const float ADAPTIVE_HITBOX = 30.0f; // 75% of 40px = 30px, works for all sprite sizes",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 75,
      "location": {
        "file": "src/GameObject.cpp",
        "line": 219,
        "column": 44
      },
      "context": "const float ADAPTIVE_HITBOX = 30.0f; // 75% of 40px = 30px, works for all sprite sizes",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 5,
      "location": {
        "file": "src/GameObject.cpp",
        "line": 520,
        "column": 53
      },
      "context": "while( abs((int)(time_step*fly_speed*fly_dist_x)) > 5  ||  abs((int)(time_step*fly_speed*fly_dist_y)) > 5 ) {",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 5,
      "location": {
        "file": "src/GameObject.cpp",
        "line": 520,
        "column": 105
      },
      "context": "while( abs((int)(time_step*fly_speed*fly_dist_x)) > 5  ||  abs((int)(time_step*fly_speed*fly_dist_y)) > 5 ) {",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 60,
      "location": {
        "file": "src/GameObject.cpp",
        "line": 589,
        "column": 30
      },
      "context": "speed = (int)(fall_countdown*60);",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 255,
      "location": {
        "file": "src/GameObject.cpp",
        "line": 595,
        "column": 43
      },
      "context": "opacity_scaled = (Uint8)(fall_countdown * 255);",
      "suggested_constant": "COLOR_MAX",
      "category": null,
      "usage_count": 1
    },
    {
      "value": 15,
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 70,
        "column": 38
      },
      "context": "const float ALIGNMENT_THRESHOLD = 15.0f;",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 20,
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 203,
        "column": 35
      },
      "context": ", ai_update_interval(0.05f) // 20 FPS AI thinking",
      "suggested_constant": "DEFAULT_SPEED",
      "category": null,
      "usage_count": 1
    },
    {
      "value": 40,
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 378,
        "column": 27
      },
      "context": "} else if (countdown < 40.0f / (float)bomber->get_speed()) {",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 5,
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 446,
        "column": 35
      },
      "context": "if (find_bombing_opportunities(5)) {",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 4,
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 560,
        "column": 33
      },
      "context": "int a = rand() % 4;",
      "suggested_constant": "PLAYER_COUNT",
      "category": null,
      "usage_count": 1
    },
    {
      "value": 4,
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 561,
        "column": 33
      },
      "context": "int b = rand() % 4;",
      "suggested_constant": "PLAYER_COUNT",
      "category": null,
      "usage_count": 1
    },
    {
      "value": 100,
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 682,
        "column": 45
      },
      "context": "return reaction_time * (0.5f + (rand() % 100) / 200.0f);",
      "suggested_constant": "SCORE_INCREMENT",
      "category": null,
      "usage_count": 1
    },
    {
      "value": 200,
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 682,
        "column": 52
      },
      "context": "return reaction_time * (0.5f + (rand() % 100) / 200.0f);",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 5,
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 801,
        "column": 72
      },
      "context": "int min_benefit = (personality == ModernAIPersonality::NIGHTMARE) ? 5 :",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 8,
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 802,
        "column": 66
      },
      "context": "(personality == ModernAIPersonality::HARD) ? 8 :",
      "suggested_constant": "TILE_SIZE",
      "category": null,
      "usage_count": 1
    },
    {
      "value": 10,
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 803,
        "column": 68
      },
      "context": "(personality == ModernAIPersonality::NORMAL) ? 10 : 15;",
      "suggested_constant": "GRID_SIZE",
      "category": null,
      "usage_count": 1
    },
    {
      "value": 15,
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 803,
        "column": 73
      },
      "context": "(personality == ModernAIPersonality::NORMAL) ? 10 : 15;",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 3,
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 875,
        "column": 52
      },
      "context": "case ModernAIPersonality::NIGHTMARE: return 3;",
      "suggested_constant": "RGB_COMPONENTS",
      "category": null,
      "usage_count": 1
    },
    {
      "value": 3,
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 955,
        "column": 16
      },
      "context": "int range = 3; // Check in 3x3 area around position",
      "suggested_constant": "RGB_COMPONENTS",
      "category": null,
      "usage_count": 1
    },
    {
      "value": 3,
      "location": {
        "file": "src/SettingsScreen.cpp",
        "line": 36,
        "column": 25
      },
      "context": "case 3: // Back to Main Menu",
      "suggested_constant": "RGB_COMPONENTS",
      "category": null,
      "usage_count": 1
    },
    {
      "value": 120,
      "location": {
        "file": "src/SettingsScreen.cpp",
        "line": 58,
        "column": 12
      },
      "context": "int y = 120;",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 300,
      "location": {
        "file": "src/SettingsScreen.cpp",
        "line": 105,
        "column": 12
      },
      "context": "int y = 300;",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 4,
      "location": {
        "file": "src/SettingsScreen.cpp",
        "line": 106,
        "column": 48
      },
      "context": "for (int i = 0; i < 4; i++) { // Show first 4 players for now",
      "suggested_constant": "PLAYER_COUNT",
      "category": null,
      "usage_count": 1
    },
    {
      "value": 300,
      "location": {
        "file": "src/SettingsScreen.cpp",
        "line": 153,
        "column": 12
      },
      "context": "int y = 300;",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 3,
      "location": {
        "file": "src/SettingsScreen.cpp",
        "line": 187,
        "column": 53
      },
      "context": "selected_player = (selected_player < 3) ? selected_player + 1 : 0;",
      "suggested_constant": "RGB_COMPONENTS",
      "category": null,
      "usage_count": 1
    },
    {
      "value": 3,
      "location": {
        "file": "src/SettingsScreen.cpp",
        "line": 215,
        "column": 13
      },
      "context": "case 3: return \"Green Team\";",
      "suggested_constant": "RGB_COMPONENTS",
      "category": null,
      "usage_count": 1
    },
    {
      "value": 4,
      "location": {
        "file": "src/SettingsScreen.cpp",
        "line": 216,
        "column": 13
      },
      "context": "case 4: return \"Yellow Team\";",
      "suggested_constant": "PLAYER_COUNT",
      "category": null,
      "usage_count": 1
    },
    {
      "value": 60,
      "location": {
        "file": "src/TileManager.cpp",
        "line": 65,
        "column": 65
      },
      "context": "context->get_lifecycle_manager()->update_states(0.016f); // ~60 FPS delta",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 44100,
      "location": {
        "file": "src/AudioMixer.cpp",
        "line": 43,
        "column": 23
      },
      "context": "device_spec.freq = 44100;",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 5,
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 78,
        "column": 23
      },
      "context": ", memory_fade_time(5.0f)",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 20,
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 79,
        "column": 35
      },
      "context": ", ai_update_interval(0.05f) // 20 FPS AI thinking",
      "suggested_constant": "DEFAULT_SPEED",
      "category": null,
      "usage_count": 1
    },
    {
      "value": 5,
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 159,
        "column": 54
      },
      "context": "if (vector_distance(current_pos, last_position) < 5.0f) {",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 100,
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 176,
        "column": 63
      },
      "context": "[fade_factor](const CL_Vector&) { return (rand() % 100) < (fade_factor * 100); }),",
      "suggested_constant": "SCORE_INCREMENT",
      "category": null,
      "usage_count": 1
    },
    {
      "value": 4,
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 317,
        "column": 41
      },
      "context": "int direction = rand() % 4;",
      "suggested_constant": "PLAYER_COUNT",
      "category": null,
      "usage_count": 1
    },
    {
      "value": 3,
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 322,
        "column": 25
      },
      "context": "case 3: current_input.right = true; break;",
      "suggested_constant": "RGB_COMPONENTS",
      "category": null,
      "usage_count": 1
    },
    {
      "value": 120,
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 416,
        "column": 19
      },
      "context": "if (dist < 120.0f) { // 3 tiles radius",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 3,
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 416,
        "column": 32
      },
      "context": "if (dist < 120.0f) { // 3 tiles radius",
      "suggested_constant": "RGB_COMPONENTS",
      "category": null,
      "usage_count": 1
    },
    {
      "value": 200,
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 433,
        "column": 27
      },
      "context": "if (dist < 200.0f) { // 5 tiles explosion radius",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 5,
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 433,
        "column": 40
      },
      "context": "if (dist < 200.0f) { // 5 tiles explosion radius",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 80,
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 448,
        "column": 31
      },
      "context": "if (dist < 80.0f) { // Close proximity to enemies",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 200,
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 461,
        "column": 27
      },
      "context": "if (dist < 200.0f) { // 5 tiles explosion radius",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 5,
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 461,
        "column": 40
      },
      "context": "if (dist < 200.0f) { // 5 tiles explosion radius",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 80,
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 475,
        "column": 27
      },
      "context": "if (dist < 80.0f) { // Close proximity to enemies",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 4,
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 493,
        "column": 65
      },
      "context": "float tile_size_f = static_cast<float>(TILE_SIZE);  // Phase 4: Local tile size constant",
      "suggested_constant": "PLAYER_COUNT",
      "category": null,
      "usage_count": 1
    },
    {
      "value": 80,
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 674,
        "column": 55
      },
      "context": "if (vector_distance(my_pos, recent_bomb) < 80.0f) {",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 100,
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 678,
        "column": 25
      },
      "context": "return (rand() % 100) < (aggression_level * 30); // Random strategic bombing",
      "suggested_constant": "SCORE_INCREMENT",
      "category": null,
      "usage_count": 1
    },
    {
      "value": 30,
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 678,
        "column": 52
      },
      "context": "return (rand() % 100) < (aggression_level * 30); // Random strategic bombing",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 90,
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 688,
        "column": 74
      },
      "context": "float escape_time = escape_distance / (bomber ? bomber->get_speed() : 90.0f);",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 3,
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 690,
        "column": 52
      },
      "context": "return escape_time < 2.5f; // Bomb explodes in ~3 seconds",
      "suggested_constant": "RGB_COMPONENTS",
      "category": null,
      "usage_count": 1
    },
    {
      "value": 40,
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 772,
        "column": 63
      },
      "context": "if (vector_distance(bomb_pos, dangerous_pos) < 40.0f) {",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 120,
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 800,
        "column": 48
      },
      "context": "return vector_distance(my_pos, enemy_pos) < 120.0f; // Close proximity = dangerous",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 100,
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 815,
        "column": 45
      },
      "context": "return reaction_time * (0.5f + (rand() % 100) / 200.0f); // Add some randomness",
      "suggested_constant": "SCORE_INCREMENT",
      "category": null,
      "usage_count": 1
    },
    {
      "value": 200,
      "location": {
        "file": "src/Controller_AI_Smart.cpp",
        "line": 815,
        "column": 52
      },
      "context": "return reaction_time * (0.5f + (rand() % 100) / 200.0f); // Add some randomness",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 60,
      "location": {
        "file": "src/ParticleSystem.cpp",
        "line": 12,
        "column": 20
      },
      "context": "emission_rate = 60.0f; // 60 particles per second",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 60,
      "location": {
        "file": "src/ParticleSystem.cpp",
        "line": 12,
        "column": 30
      },
      "context": "emission_rate = 60.0f; // 60 particles per second",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 3,
      "location": {
        "file": "src/ParticleSystem.cpp",
        "line": 15,
        "column": 19
      },
      "context": "max_lifetime = 3.0f; // System lasts 3 seconds",
      "suggested_constant": "RGB_COMPONENTS",
      "category": null,
      "usage_count": 1
    },
    {
      "value": 3,
      "location": {
        "file": "src/ParticleSystem.cpp",
        "line": 15,
        "column": 41
      },
      "context": "max_lifetime = 3.0f; // System lasts 3 seconds",
      "suggested_constant": "RGB_COMPONENTS",
      "category": null,
      "usage_count": 1
    },
    {
      "value": 30,
      "location": {
        "file": "src/ParticleSystem.cpp",
        "line": 28,
        "column": 28
      },
      "context": "emission_rate = 30.0f;",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 40,
      "location": {
        "file": "src/ParticleSystem.cpp",
        "line": 34,
        "column": 28
      },
      "context": "emission_rate = 40.0f;",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 20,
      "location": {
        "file": "src/ParticleSystem.cpp",
        "line": 40,
        "column": 28
      },
      "context": "emission_rate = 20.0f;",
      "suggested_constant": "DEFAULT_SPEED",
      "category": null,
      "usage_count": 1
    },
    {
      "value": 3,
      "location": {
        "file": "src/ParticleSystem.cpp",
        "line": 41,
        "column": 27
      },
      "context": "max_lifetime = 3.0f;",
      "suggested_constant": "RGB_COMPONENTS",
      "category": null,
      "usage_count": 1
    },
    {
      "value": 3,
      "location": {
        "file": "src/ParticleSystem.cpp",
        "line": 72,
        "column": 36
      },
      "context": "emit_dust_cloud(3);",
      "suggested_constant": "RGB_COMPONENTS",
      "category": null,
      "usage_count": 1
    },
    {
      "value": 4,
      "location": {
        "file": "src/ParticleSystem.cpp",
        "line": 75,
        "column": 40
      },
      "context": "emit_fire_particles(4);",
      "suggested_constant": "PLAYER_COUNT",
      "category": null,
      "usage_count": 1
    },
    {
      "value": 255,
      "location": {
        "file": "src/ParticleSystem.cpp",
        "line": 122,
        "column": 22
      },
      "context": "p.a = (Uint8)(255.0f * life_ratio);",
      "suggested_constant": "COLOR_MAX",
      "category": null,
      "usage_count": 1
    },
    {
      "value": 200,
      "location": {
        "file": "src/ParticleSystem.cpp",
        "line": 139,
        "column": 27
      },
      "context": "if (particles.size() < 200) { // Limit for performance",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 255,
      "location": {
        "file": "src/ParticleSystem.cpp",
        "line": 151,
        "column": 14
      },
      "context": "p.a = 255;",
      "suggested_constant": "COLOR_MAX",
      "category": null,
      "usage_count": 1
    },
    {
      "value": 200,
      "location": {
        "file": "src/ParticleSystem.cpp",
        "line": 152,
        "column": 20
      },
      "context": "p.gravity = 200.0f; // Default gravity",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 150,
      "location": {
        "file": "src/ParticleSystem.cpp",
        "line": 162,
        "column": 60
      },
      "context": "float velocity = 100.0f + random_dist(random_gen) * 150.0f;",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 10,
      "location": {
        "file": "src/ParticleSystem.cpp",
        "line": 167,
        "column": 51
      },
      "context": "float offset_x = random_dist(random_gen) * 10.0f;",
      "suggested_constant": "GRID_SIZE",
      "category": null,
      "usage_count": 1
    },
    {
      "value": 10,
      "location": {
        "file": "src/ParticleSystem.cpp",
        "line": 168,
        "column": 51
      },
      "context": "float offset_y = random_dist(random_gen) * 10.0f;",
      "suggested_constant": "GRID_SIZE",
      "category": null,
      "usage_count": 1
    },
    {
      "value": 255,
      "location": {
        "file": "src/ParticleSystem.cpp",
        "line": 171,
        "column": 18
      },
      "context": "Uint8 r = 255;",
      "suggested_constant": "COLOR_MAX",
      "category": null,
      "usage_count": 1
    },
    {
      "value": 105,
      "location": {
        "file": "src/ParticleSystem.cpp",
        "line": 172,
        "column": 50
      },
      "context": "Uint8 g = 150 + random_dist(random_gen) * 105;",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 40,
      "location": {
        "file": "src/ParticleSystem.cpp",
        "line": 184,
        "column": 59
      },
      "context": "float velocity = 30.0f + random_dist(random_gen) * 40.0f;",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 15,
      "location": {
        "file": "src/ParticleSystem.cpp",
        "line": 189,
        "column": 51
      },
      "context": "float offset_x = random_dist(random_gen) * 15.0f;",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 15,
      "location": {
        "file": "src/ParticleSystem.cpp",
        "line": 190,
        "column": 51
      },
      "context": "float offset_y = random_dist(random_gen) * 15.0f;",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 50,
      "location": {
        "file": "src/ParticleSystem.cpp",
        "line": 193,
        "column": 53
      },
      "context": "Uint8 gray = 100 + random_dist(random_gen) * 50;",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 255,
      "location": {
        "file": "src/ParticleSystem.cpp",
        "line": 206,
        "column": 14
      },
      "context": "p.a = 255;",
      "suggested_constant": "COLOR_MAX",
      "category": null,
      "usage_count": 1
    },
    {
      "value": 50,
      "location": {
        "file": "src/ParticleSystem.cpp",
        "line": 207,
        "column": 20
      },
      "context": "p.gravity = 50.0f; // Less gravity for dust",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 80,
      "location": {
        "file": "src/ParticleSystem.cpp",
        "line": 217,
        "column": 59
      },
      "context": "float velocity = 60.0f + random_dist(random_gen) * 80.0f;",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 8,
      "location": {
        "file": "src/ParticleSystem.cpp",
        "line": 222,
        "column": 51
      },
      "context": "float offset_x = random_dist(random_gen) * 8.0f;",
      "suggested_constant": "TILE_SIZE",
      "category": null,
      "usage_count": 1
    },
    {
      "value": 8,
      "location": {
        "file": "src/ParticleSystem.cpp",
        "line": 223,
        "column": 51
      },
      "context": "float offset_y = random_dist(random_gen) * 8.0f;",
      "suggested_constant": "TILE_SIZE",
      "category": null,
      "usage_count": 1
    },
    {
      "value": 255,
      "location": {
        "file": "src/ParticleSystem.cpp",
        "line": 226,
        "column": 18
      },
      "context": "Uint8 r = 255;",
      "suggested_constant": "COLOR_MAX",
      "category": null,
      "usage_count": 1
    },
    {
      "value": 155,
      "location": {
        "file": "src/ParticleSystem.cpp",
        "line": 227,
        "column": 50
      },
      "context": "Uint8 g = 100 + random_dist(random_gen) * 155;",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 50,
      "location": {
        "file": "src/ParticleSystem.cpp",
        "line": 228,
        "column": 44
      },
      "context": "Uint8 b = random_dist(random_gen) * 50;",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 255,
      "location": {
        "file": "src/ParticleSystem.cpp",
        "line": 241,
        "column": 14
      },
      "context": "p.a = 255;",
      "suggested_constant": "COLOR_MAX",
      "category": null,
      "usage_count": 1
    },
    {
      "value": 30,
      "location": {
        "file": "src/ParticleSystem.cpp",
        "line": 252,
        "column": 59
      },
      "context": "float velocity = 20.0f + random_dist(random_gen) * 30.0f;",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 12,
      "location": {
        "file": "src/ParticleSystem.cpp",
        "line": 257,
        "column": 51
      },
      "context": "float offset_x = random_dist(random_gen) * 12.0f;",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 12,
      "location": {
        "file": "src/ParticleSystem.cpp",
        "line": 258,
        "column": 51
      },
      "context": "float offset_y = random_dist(random_gen) * 12.0f;",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 40,
      "location": {
        "file": "src/ParticleSystem.cpp",
        "line": 261,
        "column": 52
      },
      "context": "Uint8 gray = 60 + random_dist(random_gen) * 40;",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 3,
      "location": {
        "file": "src/ParticleSystem.cpp",
        "line": 270,
        "column": 50
      },
      "context": "p.size = 4.0f + random_dist(random_gen) * 3.0f;",
      "suggested_constant": "RGB_COMPONENTS",
      "category": null,
      "usage_count": 1
    },
    {
      "value": 255,
      "location": {
        "file": "src/ParticleSystem.cpp",
        "line": 274,
        "column": 14
      },
      "context": "p.a = 255;",
      "suggested_constant": "COLOR_MAX",
      "category": null,
      "usage_count": 1
    },
    {
      "value": 2000,
      "location": {
        "file": "src/Explosion.cpp",
        "line": 31,
        "column": 59
      },
      "context": "z = Z_EXPLOSION;  // Explosions should be above tiles (2000 > 0) and bombs (2000 < 3000)",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 2000,
      "location": {
        "file": "src/Explosion.cpp",
        "line": 31,
        "column": 80
      },
      "context": "z = Z_EXPLOSION;  // Explosions should be above tiles (2000 > 0) and bombs (2000 < 3000)",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 3000,
      "location": {
        "file": "src/Explosion.cpp",
        "line": 31,
        "column": 87
      },
      "context": "z = Z_EXPLOSION;  // Explosions should be above tiles (2000 > 0) and bombs (2000 < 3000)",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 60,
      "location": {
        "file": "src/Explosion.cpp",
        "line": 38,
        "column": 45
      },
      "context": "float explosion_radius = power * 60.0f; // Radius based on power",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 3000,
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 34,
        "column": 73
      },
      "context": "z = Z_GROUND;  // Tiles should be at ground level (0), behind bombs (3000)",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 12,
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 126,
        "column": 34
      },
      "context": "case 1: // Bomb capacity (12.5% chance)",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 5,
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 126,
        "column": 37
      },
      "context": "case 1: // Bomb capacity (12.5% chance)",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 12,
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 129,
        "column": 26
      },
      "context": "case 2: // Speed (12.5% chance)",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 5,
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 129,
        "column": 29
      },
      "context": "case 2: // Speed (12.5% chance)",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 3,
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 132,
        "column": 13
      },
      "context": "case 3: { // Special abilities (12.5% chance - kick or glove)",
      "suggested_constant": "RGB_COMPONENTS",
      "category": null,
      "usage_count": 1
    },
    {
      "value": 12,
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 132,
        "column": 40
      },
      "context": "case 3: { // Special abilities (12.5% chance - kick or glove)",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 4,
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 137,
        "column": 13
      },
      "context": "case 4: { // Negative effects (12.5% chance)",
      "suggested_constant": "PLAYER_COUNT",
      "category": null,
      "usage_count": 1
    },
    {
      "value": 12,
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 137,
        "column": 39
      },
      "context": "case 4: { // Negative effects (12.5% chance)",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 5,
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 137,
        "column": 42
      },
      "context": "case 4: { // Negative effects (12.5% chance)",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 25,
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 141,
        "column": 62
      },
      "context": "extra_type = Extra::DISEASE; // Constipation (25% of this case)",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 3,
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 142,
        "column": 52
      },
      "context": "} else if (neg_roll == 2 || neg_roll == 3) {",
      "suggested_constant": "RGB_COMPONENTS",
      "category": null,
      "usage_count": 1
    },
    {
      "value": 25,
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 143,
        "column": 61
      },
      "context": "extra_type = Extra::VIAGRA; // Sticky bombs (25% of this case)",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 4,
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 144,
        "column": 35
      },
      "context": "} else if (neg_roll == 4 || neg_roll == 5) {",
      "suggested_constant": "PLAYER_COUNT",
      "category": null,
      "usage_count": 1
    },
    {
      "value": 5,
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 144,
        "column": 52
      },
      "context": "} else if (neg_roll == 4 || neg_roll == 5) {",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 25,
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 145,
        "column": 67
      },
      "context": "extra_type = Extra::KOKS; // Uncontrollable speed (25% of this case)",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 25,
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 147,
        "column": 45
      },
      "context": "return; // No extra spawned (25% of this case)",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 5,
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 151,
        "column": 13
      },
      "context": "case 5: // Skate (rare, 6.25% chance)",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 6,
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 158,
        "column": 13
      },
      "context": "case 6:",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 7,
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 159,
        "column": 13
      },
      "context": "case 7:",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 18,
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 283,
        "column": 42
      },
      "context": "const int num_fragments = 18;  // More small pieces for realistic debris",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 6,
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 290,
        "column": 66
      },
      "context": "float base_angle = (float)i / num_fragments * 6.28318f;",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 10,
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 296,
        "column": 67
      },
      "context": "float base_explosion_force = 45.0f + (i % 7) * 10.0f; // 45-105 force range",
      "suggested_constant": "GRID_SIZE",
      "category": null,
      "usage_count": 1
    },
    {
      "value": 4,
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 306,
        "column": 72
      },
      "context": "float scale_y = fragment_scale * (0.6f + ((i * 7) % 4) * 0.3f); // 0.6x to 1.8x height",
      "suggested_constant": "PLAYER_COUNT",
      "category": null,
      "usage_count": 1
    },
    {
      "value": 8,
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 314,
        "column": 65
      },
      "context": "float initial_z_velocity = 25.0f + (i % 6) * 8.0f; // Initial upward velocity 25-65",
      "suggested_constant": "TILE_SIZE",
      "category": null,
      "usage_count": 1
    },
    {
      "value": 120,
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 318,
        "column": 38
      },
      "context": "float gravity_z = 120.0f; // Gravity pulling down in Z",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 73,
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 352,
        "column": 53
      },
      "context": "float impact_angle_offset = (i * 73) % 360; // Random impact angle per fragment",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 360,
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 352,
        "column": 59
      },
      "context": "float impact_angle_offset = (i * 73) % 360; // Random impact angle per fragment",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 300,
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 357,
        "column": 73
      },
      "context": "float initial_angular_velocity = (800.0f + (i % 9) * 300.0f) * impact_force / fragment_inertia;",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 3,
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 361,
        "column": 29
      },
      "context": "if ((i % 3) == 0) spin_direction *= -1.0f; // More chaos",
      "suggested_constant": "RGB_COMPONENTS",
      "category": null,
      "usage_count": 1
    },
    {
      "value": 150,
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 369,
        "column": 84
      },
      "context": "float tumble_factor = animation_progress * animation_progress * 150.0f;",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 3,
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 384,
        "column": 35
      },
      "context": "SPLINTER = 3         // Small splinters (very light)",
      "suggested_constant": "RGB_COMPONENTS",
      "category": null,
      "usage_count": 1
    },
    {
      "value": 4,
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 387,
        "column": 64
      },
      "context": "FragmentType frag_type = (FragmentType)(i % 4);",
      "suggested_constant": "PLAYER_COUNT",
      "category": null,
      "usage_count": 1
    },
    {
      "value": 7,
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 407,
        "column": 43
      },
      "context": "float color_var = (i % 7) * 0.05f - 0.025f; // -0.025 to +0.025",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 8,
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 420,
        "column": 78
      },
      "context": "case CORNER_PIECE:  fragment_size = 20.0f + (i % 2) * 8.0f; break; // 20-28px",
      "suggested_constant": "TILE_SIZE",
      "category": null,
      "usage_count": 1
    },
    {
      "value": 6,
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 421,
        "column": 78
      },
      "context": "case EDGE_PLANK:    fragment_size = 16.0f + (i % 3) * 6.0f; break; // 16-28px",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 4,
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 422,
        "column": 78
      },
      "context": "case INNER_WOOD:    fragment_size = 14.0f + (i % 2) * 4.0f; break; // 14-18px",
      "suggested_constant": "PLAYER_COUNT",
      "category": null,
      "usage_count": 1
    },
    {
      "value": 4,
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 423,
        "column": 77
      },
      "context": "case SPLINTER:      fragment_size = 8.0f + (i % 3) * 4.0f; break;  // 8-16px",
      "suggested_constant": "PLAYER_COUNT",
      "category": null,
      "usage_count": 1
    },
    {
      "value": 4,
      "location": {
        "file": "src/Extra.cpp",
        "line": 49,
        "column": 32
      },
      "context": "bounce_timer += deltaTime * 4.0f; // 4x speed for nice bounce",
      "suggested_constant": "PLAYER_COUNT",
      "category": null,
      "usage_count": 1
    },
    {
      "value": 3,
      "location": {
        "file": "src/Extra.cpp",
        "line": 50,
        "column": 45
      },
      "context": "bounce_offset = std::sin(bounce_timer) * 3.0f; // 3 pixel bounce",
      "suggested_constant": "RGB_COMPONENTS",
      "category": null,
      "usage_count": 1
    },
    {
      "value": 3,
      "location": {
        "file": "src/Extra.cpp",
        "line": 50,
        "column": 54
      },
      "context": "bounce_offset = std::sin(bounce_timer) * 3.0f; // 3 pixel bounce",
      "suggested_constant": "RGB_COMPONENTS",
      "category": null,
      "usage_count": 1
    },
    {
      "value": 30,
      "location": {
        "file": "src/Extra.cpp",
        "line": 94,
        "column": 31
      },
      "context": "if (distance < 30.0f) {",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 20,
      "location": {
        "file": "src/Extra.cpp",
        "line": 162,
        "column": 30
      },
      "context": "bomber->inc_speed(20);",
      "suggested_constant": "DEFAULT_SPEED",
      "category": null,
      "usage_count": 1
    },
    {
      "value": 10,
      "location": {
        "file": "src/Extra.cpp",
        "line": 180,
        "column": 30
      },
      "context": "bomber->inc_speed(10);",
      "suggested_constant": "GRID_SIZE",
      "category": null,
      "usage_count": 1
    },
    {
      "value": 40,
      "location": {
        "file": "src/Extra.cpp",
        "line": 186,
        "column": 30
      },
      "context": "bomber->dec_speed(40);",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 50,
      "location": {
        "file": "src/Extra.cpp",
        "line": 193,
        "column": 30
      },
      "context": "bomber->inc_speed(50);",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 20,
      "location": {
        "file": "src/Extra.cpp",
        "line": 200,
        "column": 30
      },
      "context": "bomber->dec_speed(20);",
      "suggested_constant": "DEFAULT_SPEED",
      "category": null,
      "usage_count": 1
    },
    {
      "value": 40,
      "location": {
        "file": "src/BomberCorpse.cpp",
        "line": 34,
        "column": 16
      },
      "context": "sprite_nr = 40; // Dead pose sprite (assuming it exists)",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 10,
      "location": {
        "file": "src/BomberCorpse.cpp",
        "line": 60,
        "column": 45
      },
      "context": "if (!exploded && death_animation_timer > 10.0f) {",
      "suggested_constant": "GRID_SIZE",
      "category": null,
      "usage_count": 1
    },
    {
      "value": 10,
      "location": {
        "file": "src/MapTile_Box.cpp",
        "line": 16,
        "column": 16
      },
      "context": "sprite_nr = 10; // Box tile",
      "suggested_constant": "GRID_SIZE",
      "category": null,
      "usage_count": 1
    },
    {
      "value": 18,
      "location": {
        "file": "src/MapTile_Box.cpp",
        "line": 70,
        "column": 50
      },
      "context": "const int num_fragments = 18;  // More small pieces for realistic debris",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 6,
      "location": {
        "file": "src/MapTile_Box.cpp",
        "line": 77,
        "column": 74
      },
      "context": "float base_angle = (float)i / num_fragments * 6.28318f;",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 10,
      "location": {
        "file": "src/MapTile_Box.cpp",
        "line": 83,
        "column": 75
      },
      "context": "float base_explosion_force = 45.0f + (i % 7) * 10.0f; // 45-105 force range",
      "suggested_constant": "GRID_SIZE",
      "category": null,
      "usage_count": 1
    },
    {
      "value": 4,
      "location": {
        "file": "src/MapTile_Box.cpp",
        "line": 93,
        "column": 80
      },
      "context": "float scale_y = fragment_scale * (0.6f + ((i * 7) % 4) * 0.3f); // 0.6x to 1.8x height",
      "suggested_constant": "PLAYER_COUNT",
      "category": null,
      "usage_count": 1
    },
    {
      "value": 8,
      "location": {
        "file": "src/MapTile_Box.cpp",
        "line": 101,
        "column": 73
      },
      "context": "float initial_z_velocity = 25.0f + (i % 6) * 8.0f; // Initial upward velocity 25-65",
      "suggested_constant": "TILE_SIZE",
      "category": null,
      "usage_count": 1
    },
    {
      "value": 120,
      "location": {
        "file": "src/MapTile_Box.cpp",
        "line": 105,
        "column": 46
      },
      "context": "float gravity_z = 120.0f; // Gravity pulling down in Z",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 73,
      "location": {
        "file": "src/MapTile_Box.cpp",
        "line": 139,
        "column": 61
      },
      "context": "float impact_angle_offset = (i * 73) % 360; // Random impact angle per fragment",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 360,
      "location": {
        "file": "src/MapTile_Box.cpp",
        "line": 139,
        "column": 67
      },
      "context": "float impact_angle_offset = (i * 73) % 360; // Random impact angle per fragment",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 300,
      "location": {
        "file": "src/MapTile_Box.cpp",
        "line": 144,
        "column": 81
      },
      "context": "float initial_angular_velocity = (800.0f + (i % 9) * 300.0f) * impact_force / fragment_inertia;",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 3,
      "location": {
        "file": "src/MapTile_Box.cpp",
        "line": 148,
        "column": 37
      },
      "context": "if ((i % 3) == 0) spin_direction *= -1.0f; // More chaos",
      "suggested_constant": "RGB_COMPONENTS",
      "category": null,
      "usage_count": 1
    },
    {
      "value": 150,
      "location": {
        "file": "src/MapTile_Box.cpp",
        "line": 156,
        "column": 92
      },
      "context": "float tumble_factor = animation_progress * animation_progress * 150.0f;",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 3,
      "location": {
        "file": "src/MapTile_Box.cpp",
        "line": 171,
        "column": 43
      },
      "context": "SPLINTER = 3         // Small splinters (very light)",
      "suggested_constant": "RGB_COMPONENTS",
      "category": null,
      "usage_count": 1
    },
    {
      "value": 4,
      "location": {
        "file": "src/MapTile_Box.cpp",
        "line": 174,
        "column": 72
      },
      "context": "FragmentType frag_type = (FragmentType)(i % 4);",
      "suggested_constant": "PLAYER_COUNT",
      "category": null,
      "usage_count": 1
    },
    {
      "value": 7,
      "location": {
        "file": "src/MapTile_Box.cpp",
        "line": 194,
        "column": 51
      },
      "context": "float color_var = (i % 7) * 0.05f - 0.025f; // -0.025 to +0.025",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 8,
      "location": {
        "file": "src/MapTile_Box.cpp",
        "line": 207,
        "column": 86
      },
      "context": "case CORNER_PIECE:  fragment_size = 20.0f + (i % 2) * 8.0f; break; // 20-28px",
      "suggested_constant": "TILE_SIZE",
      "category": null,
      "usage_count": 1
    },
    {
      "value": 6,
      "location": {
        "file": "src/MapTile_Box.cpp",
        "line": 208,
        "column": 86
      },
      "context": "case EDGE_PLANK:    fragment_size = 16.0f + (i % 3) * 6.0f; break; // 16-28px",
      "suggested_constant": null,
      "category": null,
      "usage_count": 1
    },
    {
      "value": 4,
      "location": {
        "file": "src/MapTile_Box.cpp",
        "line": 209,
        "column": 86
      },
      "context": "case INNER_WOOD:    fragment_size = 14.0f + (i % 2) * 4.0f; break; // 14-18px",
      "suggested_constant": "PLAYER_COUNT",
      "category": null,
      "usage_count": 1
    },
    {
      "value": 4,
      "location": {
        "file": "src/MapTile_Box.cpp",
        "line": 210,
        "column": 85
      },
      "context": "case SPLINTER:      fragment_size = 8.0f + (i % 3) * 4.0f; break;  // 8-16px",
      "suggested_constant": "PLAYER_COUNT",
      "category": null,
      "usage_count": 1
    }
  ],
  "commented_blocks": [
    {
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 393,
        "column": 0
      },
      "end_line": 394,
      "lines": [
        "// SDL: (0,0) = top-left, Y increases downward",
        "// OpenGL: We flip Y so (0,0) maps to top-left in the final image"
      ],
      "confidence": 0.2,
      "suggested_action": "remove"
    },
    {
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 443,
        "column": 0
      },
      "end_line": 444,
      "lines": [
        "// Setup vertex attributes for advanced vertex structure",
        "// Position (location 0)"
      ],
      "confidence": 0.2,
      "suggested_action": "remove"
    },
    {
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 773,
        "column": 0
      },
      "end_line": 776,
      "lines": [
        "// if (u_model >= 0) {",
        "//     glUniformMatrix4fv(u_model, 1, GL_FALSE, (float*)model_matrix);",
        "//     check_gl_error(\"uniform model\");",
        "// }"
      ],
      "confidence": 0.4,
      "suggested_action": "remove"
    },
    {
      "location": {
        "file": "src/Game.cpp",
        "line": 128,
        "column": 0
      },
      "end_line": 131,
      "lines": [
        "// font = Resources::get_font(\"big\");",
        "// if (!font) {",
        "//     SDL_Log(\"Failed to load font\");",
        "// }"
      ],
      "confidence": 0.4,
      "suggested_action": "remove"
    },
    {
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 408,
        "column": 0
      },
      "end_line": 409,
      "lines": [
        "// Low freq (left motor): Deep bass-like rumble for powerful explosions",
        "// High freq (right motor): Sharp high-frequency buzz for detailed effects"
      ],
      "confidence": 0.2,
      "suggested_action": "remove"
    },
    {
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 516,
        "column": 0
      },
      "end_line": 517,
      "lines": [
        "// particle_manager = std::make_unique<ParticleEffectsManager>();",
        "// return particle_manager->initialize(config.max_particles);"
      ],
      "confidence": 0.2,
      "suggested_action": "remove"
    },
    {
      "location": {
        "file": "src/GameplayScreen.cpp",
        "line": 207,
        "column": 0
      },
      "end_line": 210,
      "lines": [
        "// if (observer) {",
        "//     delete observer;",
        "//     observer = nullptr;",
        "// }"
      ],
      "confidence": 0.4,
      "suggested_action": "remove"
    },
    {
      "location": {
        "file": "src/GameplayScreen.cpp",
        "line": 255,
        "column": 0
      },
      "end_line": 257,
      "lines": [
        "// observer->act();",
        "// if (observer->end_of_game_requested()) {",
        "// }"
      ],
      "confidence": 0.3,
      "suggested_action": "remove"
    },
    {
      "location": {
        "file": "src/GameplayScreen.cpp",
        "line": 395,
        "column": 0
      },
      "end_line": 396,
      "lines": [
        "// Map is now a PURE GRID MANAGER - no act() needed!",
        "// TileManager handles all coordination in update() above"
      ],
      "confidence": 0.2,
      "suggested_action": "remove"
    },
    {
      "location": {
        "file": "src/BomberComponents.cpp",
        "line": 364,
        "column": 0
      },
      "end_line": 365,
      "lines": [
        "// CALIBRATED FOR DELTATIME: Reduced animation speed factor for smooth deltaTime-based animation",
        "// Original was 20.0f for frame-based system, now calibrated for real deltaTime"
      ],
      "confidence": 0.2,
      "suggested_action": "remove"
    },
    {
      "location": {
        "file": "src/GameObject.cpp",
        "line": 254,
        "column": 0
      },
      "end_line": 255,
      "lines": [
        "// MODERN COLLISION: Check dynamic objects (bombs, bombers) using SpatialGrid",
        "// Get current position tiles using SAME adaptive hitbox for consistency"
      ],
      "confidence": 0.2,
      "suggested_action": "remove"
    },
    {
      "location": {
        "file": "src/GameObject.cpp",
        "line": 332,
        "column": 0
      },
      "end_line": 333,
      "lines": [
        "// SDL_Log(\"\ud83d\udeb6 MOVE: Trying to move distance=%.2f direction=%d from (%.1f,%.1f)\",",
        "//         distance, (int)dir, x, y);"
      ],
      "confidence": 0.2,
      "suggested_action": "remove"
    },
    {
      "location": {
        "file": "src/SettingsScreen.cpp",
        "line": 75,
        "column": 0
      },
      "end_line": 76,
      "lines": [
        "// SDL_Surface* instructions_surface = TTF_RenderText_Solid(font, \"UP/DOWN: Navigate | ENTER: Select | ESC: Back\", strlen(\"UP/DOWN: Navigate | ENTER: Select | ESC: Back\"), instructions_color);",
        "// SDL_Texture* instructions_texture = SDL_CreateTextureFromSurface(renderer, instructions_surface);"
      ],
      "confidence": 0.2,
      "suggested_action": "remove"
    },
    {
      "location": {
        "file": "src/SettingsScreen.cpp",
        "line": 78,
        "column": 0
      },
      "end_line": 81,
      "lines": [
        "// float inst_width, inst_height;",
        "// SDL_GetTextureSize(instructions_texture, &inst_width, &inst_height);",
        "// SDL_FRect inst_rect = {400 - inst_width / 2.0f, 550, inst_width, inst_height};",
        "// SDL_RenderTexture(renderer, instructions_texture, NULL, &inst_rect);"
      ],
      "confidence": 0.4,
      "suggested_action": "remove"
    },
    {
      "location": {
        "file": "src/SettingsScreen.cpp",
        "line": 83,
        "column": 0
      },
      "end_line": 84,
      "lines": [
        "// SDL_DestroySurface(instructions_surface);",
        "// SDL_DestroyTexture(instructions_texture);"
      ],
      "confidence": 0.2,
      "suggested_action": "remove"
    },
    {
      "location": {
        "file": "src/SettingsScreen.cpp",
        "line": 93,
        "column": 0
      },
      "end_line": 94,
      "lines": [
        "// SDL_Surface* header_surface = TTF_RenderText_Solid(font, \"PLAYER SETUP\", strlen(\"PLAYER SETUP\"), header_color);",
        "// SDL_Texture* header_texture = SDL_CreateTextureFromSurface(renderer, header_surface);"
      ],
      "confidence": 0.2,
      "suggested_action": "remove"
    },
    {
      "location": {
        "file": "src/SettingsScreen.cpp",
        "line": 96,
        "column": 0
      },
      "end_line": 99,
      "lines": [
        "// float header_width, header_height;",
        "// SDL_GetTextureSize(header_texture, &header_width, &header_height);",
        "// SDL_FRect header_rect = {400 - header_width / 2.0f, 260, header_width, header_height};",
        "// SDL_RenderTexture(renderer, header_texture, NULL, &header_rect);"
      ],
      "confidence": 0.4,
      "suggested_action": "remove"
    },
    {
      "location": {
        "file": "src/SettingsScreen.cpp",
        "line": 101,
        "column": 0
      },
      "end_line": 102,
      "lines": [
        "// SDL_DestroySurface(header_surface);",
        "// SDL_DestroyTexture(header_texture);"
      ],
      "confidence": 0.2,
      "suggested_action": "remove"
    },
    {
      "location": {
        "file": "src/SettingsScreen.cpp",
        "line": 124,
        "column": 0
      },
      "end_line": 125,
      "lines": [
        "// SDL_Surface* player_surface = TTF_RenderText_Solid(font, player_text.c_str(), strlen(player_text.c_str()), player_color);",
        "// SDL_Texture* player_texture = SDL_CreateTextureFromSurface(renderer, player_surface);"
      ],
      "confidence": 0.2,
      "suggested_action": "remove"
    },
    {
      "location": {
        "file": "src/SettingsScreen.cpp",
        "line": 127,
        "column": 0
      },
      "end_line": 130,
      "lines": [
        "// float player_width, player_height;",
        "// SDL_GetTextureSize(player_texture, &player_width, &player_height);",
        "// SDL_FRect player_rect = {50, (float)y, player_width, player_height};",
        "// SDL_RenderTexture(renderer, player_texture, NULL, &player_rect);"
      ],
      "confidence": 0.4,
      "suggested_action": "remove"
    },
    {
      "location": {
        "file": "src/SettingsScreen.cpp",
        "line": 132,
        "column": 0
      },
      "end_line": 133,
      "lines": [
        "// SDL_DestroySurface(player_surface);",
        "// SDL_DestroyTexture(player_texture);"
      ],
      "confidence": 0.2,
      "suggested_action": "remove"
    },
    {
      "location": {
        "file": "src/SettingsScreen.cpp",
        "line": 141,
        "column": 0
      },
      "end_line": 142,
      "lines": [
        "// SDL_Surface* header_surface = TTF_RenderText_Solid(font, \"GAME OPTIONS\", strlen(\"GAME OPTIONS\"), header_color);",
        "// SDL_Texture* header_texture = SDL_CreateTextureFromSurface(renderer, header_surface);"
      ],
      "confidence": 0.2,
      "suggested_action": "remove"
    },
    {
      "location": {
        "file": "src/SettingsScreen.cpp",
        "line": 144,
        "column": 0
      },
      "end_line": 147,
      "lines": [
        "// float header_width, header_height;",
        "// SDL_GetTextureSize(header_texture, &header_width, &header_height);",
        "// SDL_FRect header_rect = {400 - header_width / 2.0f, 260, header_width, header_height};",
        "// SDL_RenderTexture(renderer, header_texture, NULL, &header_rect);"
      ],
      "confidence": 0.4,
      "suggested_action": "remove"
    },
    {
      "location": {
        "file": "src/SettingsScreen.cpp",
        "line": 149,
        "column": 0
      },
      "end_line": 150,
      "lines": [
        "// SDL_DestroySurface(header_surface);",
        "// SDL_DestroyTexture(header_texture);"
      ],
      "confidence": 0.2,
      "suggested_action": "remove"
    },
    {
      "location": {
        "file": "src/SettingsScreen.cpp",
        "line": 163,
        "column": 0
      },
      "end_line": 164,
      "lines": [
        "// SDL_Surface* option_surface = TTF_RenderText_Solid(font, option.c_str(), strlen(option.c_str()), option_color);",
        "// SDL_Texture* option_texture = SDL_CreateTextureFromSurface(renderer, option_surface);"
      ],
      "confidence": 0.2,
      "suggested_action": "remove"
    },
    {
      "location": {
        "file": "src/SettingsScreen.cpp",
        "line": 166,
        "column": 0
      },
      "end_line": 169,
      "lines": [
        "// float option_width, option_height;",
        "// SDL_GetTextureSize(option_texture, &option_width, &option_height);",
        "// SDL_FRect option_rect = {50, (float)y, option_width, option_height};",
        "// SDL_RenderTexture(renderer, option_texture, NULL, &option_rect);"
      ],
      "confidence": 0.4,
      "suggested_action": "remove"
    },
    {
      "location": {
        "file": "src/SettingsScreen.cpp",
        "line": 171,
        "column": 0
      },
      "end_line": 172,
      "lines": [
        "// SDL_DestroySurface(option_surface);",
        "// SDL_DestroyTexture(option_texture);"
      ],
      "confidence": 0.2,
      "suggested_action": "remove"
    },
    {
      "location": {
        "file": "src/Explosion.cpp",
        "line": 125,
        "column": 0
      },
      "end_line": 128,
      "lines": [
        "// void Explosion::show() {",
        "//     // Calculate explosion age (0.0 = just exploded, 0.5 = expired)",
        "//     float explosion_age = 0.5f - detonation_period;",
        "//     float normalized_time = explosion_age / 0.5f; // 0.0 to 1.0"
      ],
      "confidence": 0.4,
      "suggested_action": "remove"
    },
    {
      "location": {
        "file": "src/Explosion.cpp",
        "line": 130,
        "column": 0
      },
      "end_line": 133,
      "lines": [
        "//     // Only render if explosion is still active",
        "//     if (normalized_time >= 1.0f) {",
        "//         return;",
        "//     }"
      ],
      "confidence": 0.4,
      "suggested_action": "remove"
    },
    {
      "location": {
        "file": "src/Explosion.cpp",
        "line": 137,
        "column": 0
      },
      "end_line": 140,
      "lines": [
        "//     if (app && get_context()->get_renderer()) {",
        "//         float tile_size = static_cast<float>(TILE_SIZE);",
        "//         int map_x = get_map_x();",
        "//         int map_y = get_map_y();"
      ],
      "confidence": 0.4,
      "suggested_action": "remove"
    },
    {
      "location": {
        "file": "src/Explosion.cpp",
        "line": 143,
        "column": 0
      },
      "end_line": 144,
      "lines": [
        "//         float aligned_x = map_x * tile_size + tile_size / 2.0f;  // Center of tile",
        "//         float aligned_y = map_y * tile_size + tile_size / 2.0f;  // Center of tile"
      ],
      "confidence": 0.2,
      "suggested_action": "remove"
    },
    {
      "location": {
        "file": "src/Explosion.cpp",
        "line": 146,
        "column": 0
      },
      "end_line": 147,
      "lines": [
        "//         SDL_Log(\"DEBUG: Explosion center - original:(%.1f,%.1f) map:(%d,%d) aligned:(%.1f,%.1f)\",",
        "//                 x, y, map_x, map_y, aligned_x, aligned_y);"
      ],
      "confidence": 0.2,
      "suggested_action": "remove"
    },
    {
      "location": {
        "file": "src/Explosion.cpp",
        "line": 153,
        "column": 0
      },
      "end_line": 155,
      "lines": [
        "//         // Set explosion information for shader",
        "//         get_context()->get_renderer()->set_explosion_info(",
        "//         );"
      ],
      "confidence": 0.3,
      "suggested_action": "remove"
    },
    {
      "location": {
        "file": "src/Explosion.cpp",
        "line": 167,
        "column": 0
      },
      "end_line": 169,
      "lines": [
        "//         for (int i = 1; i <= length_up; i++) {",
        "//             draw_explosion_tile(aligned_x, aligned_y - i * tile_size);",
        "//         }"
      ],
      "confidence": 0.3,
      "suggested_action": "remove"
    },
    {
      "location": {
        "file": "src/Explosion.cpp",
        "line": 172,
        "column": 0
      },
      "end_line": 174,
      "lines": [
        "//         for (int i = 1; i <= length_down; i++) {",
        "//             draw_explosion_tile(aligned_x, aligned_y + i * tile_size);",
        "//         }"
      ],
      "confidence": 0.3,
      "suggested_action": "remove"
    },
    {
      "location": {
        "file": "src/Explosion.cpp",
        "line": 177,
        "column": 0
      },
      "end_line": 179,
      "lines": [
        "//         for (int i = 1; i <= length_left; i++) {",
        "//             draw_explosion_tile(aligned_x - i * tile_size, aligned_y);",
        "//         }"
      ],
      "confidence": 0.3,
      "suggested_action": "remove"
    },
    {
      "location": {
        "file": "src/Explosion.cpp",
        "line": 182,
        "column": 0
      },
      "end_line": 184,
      "lines": [
        "//         for (int i = 1; i <= length_right; i++) {",
        "//             draw_explosion_tile(aligned_x + i * tile_size, aligned_y);",
        "//         }"
      ],
      "confidence": 0.3,
      "suggested_action": "remove"
    },
    {
      "location": {
        "file": "src/Explosion.cpp",
        "line": 189,
        "column": 0
      },
      "end_line": 191,
      "lines": [
        "//         get_context()->get_renderer()->clear_explosion_info();",
        "//     }",
        "// }"
      ],
      "confidence": 0.3,
      "suggested_action": "remove"
    },
    {
      "location": {
        "file": "src/TileEntity.cpp",
        "line": 73,
        "column": 0
      },
      "end_line": 74,
      "lines": [
        "// Just render if not destroyed - LifecycleManager will handle cleanup later",
        "// This fixes the black map issue caused by null context during show()"
      ],
      "confidence": 0.2,
      "suggested_action": "remove"
    },
    {
      "location": {
        "file": "src/MapTile_Box.cpp",
        "line": 217,
        "column": 0
      },
      "end_line": 218,
      "lines": [
        "// Optional: Use slight sprite variations for different fragment types",
        "// (This would require additional sprites in the atlas for fragment textures)"
      ],
      "confidence": 0.2,
      "suggested_action": "remove"
    },
    {
      "location": {
        "file": "src/MapTile_Box.h",
        "line": 16,
        "column": 0
      },
      "end_line": 17,
      "lines": [
        "// SDL_Log(\"MapTile_Box::is_burnable() - destructible=%d, destroyed=%d, result=%d\",",
        "//         destructible, destroyed, (destructible && !destroyed));"
      ],
      "confidence": 0.2,
      "suggested_action": "remove"
    }
  ],
  "findings": [
    {
      "id": "5d6a7ca6",
      "type": "functions",
      "severity": "medium",
      "title": "Unused function: set_error_logging",
      "description": "Function 'set_error_logging' appears to be unused (confidence: 80.0%)",
      "location": {
        "file": "src/ErrorHandling.h",
        "line": 225,
        "column": 0
      },
      "suggestions": [
        "Remove the function if confirmed unused",
        "Add unit tests if the function should be used",
        "Mark as static if only used internally"
      ],
      "metadata": {
        "function_name": "set_error_logging",
        "confidence": 0.8,
        "evidence": [
          "No calls found"
        ]
      }
    },
    {
      "id": "04dd163d",
      "type": "functions",
      "severity": "medium",
      "title": "Unused function: set_wind",
      "description": "Function 'set_wind' appears to be unused (confidence: 80.0%)",
      "location": {
        "file": "src/GPUAcceleratedRenderer.h",
        "line": 113,
        "column": 0
      },
      "suggestions": [
        "Remove the function if confirmed unused",
        "Add unit tests if the function should be used",
        "Mark as static if only used internally"
      ],
      "metadata": {
        "function_name": "set_wind",
        "confidence": 0.8,
        "evidence": [
          "No calls found"
        ]
      }
    },
    {
      "id": "5ffc2be4",
      "type": "functions",
      "severity": "medium",
      "title": "Unused function: enable_debug_overlay",
      "description": "Function 'enable_debug_overlay' appears to be unused (confidence: 80.0%)",
      "location": {
        "file": "src/GPUAcceleratedRenderer.h",
        "line": 120,
        "column": 0
      },
      "suggestions": [
        "Remove the function if confirmed unused",
        "Add unit tests if the function should be used",
        "Mark as static if only used internally"
      ],
      "metadata": {
        "function_name": "enable_debug_overlay",
        "confidence": 0.8,
        "evidence": [
          "No calls found"
        ]
      }
    },
    {
      "id": "c4ba2d6b",
      "type": "functions",
      "severity": "medium",
      "title": "Unused function: set_sprite_number",
      "description": "Function 'set_sprite_number' appears to be unused (confidence: 80.0%)",
      "location": {
        "file": "src/MapTile_Pure.h",
        "line": 57,
        "column": 0
      },
      "suggestions": [
        "Remove the function if confirmed unused",
        "Add unit tests if the function should be used",
        "Mark as static if only used internally"
      ],
      "metadata": {
        "function_name": "set_sprite_number",
        "confidence": 0.8,
        "evidence": [
          "No calls found"
        ]
      }
    },
    {
      "id": "d6f065c8",
      "type": "functions",
      "severity": "medium",
      "title": "Unused function: is_pixel_in_map_bounds",
      "description": "Function 'is_pixel_in_map_bounds' appears to be unused (confidence: 80.0%)",
      "location": {
        "file": "src/CoordinateSystem.h",
        "line": 155,
        "column": 0
      },
      "suggestions": [
        "Remove the function if confirmed unused",
        "Add unit tests if the function should be used",
        "Mark as static if only used internally"
      ],
      "metadata": {
        "function_name": "is_pixel_in_map_bounds",
        "confidence": 0.8,
        "evidence": [
          "No calls found"
        ]
      }
    },
    {
      "id": "d40c7a1d",
      "type": "functions",
      "severity": "medium",
      "title": "Unused function: clamp_grid",
      "description": "Function 'clamp_grid' appears to be unused (confidence: 80.0%)",
      "location": {
        "file": "src/CoordinateSystem.h",
        "line": 163,
        "column": 0
      },
      "suggestions": [
        "Remove the function if confirmed unused",
        "Add unit tests if the function should be used",
        "Mark as static if only used internally"
      ],
      "metadata": {
        "function_name": "clamp_grid",
        "confidence": 0.8,
        "evidence": [
          "No calls found"
        ]
      }
    },
    {
      "id": "6baf6b38",
      "type": "functions",
      "severity": "medium",
      "title": "Unused function: are_grid_adjacent",
      "description": "Function 'are_grid_adjacent' appears to be unused (confidence: 80.0%)",
      "location": {
        "file": "src/CoordinateSystem.h",
        "line": 190,
        "column": 0
      },
      "suggestions": [
        "Remove the function if confirmed unused",
        "Add unit tests if the function should be used",
        "Mark as static if only used internally"
      ],
      "metadata": {
        "function_name": "are_grid_adjacent",
        "confidence": 0.8,
        "evidence": [
          "No calls found"
        ]
      }
    },
    {
      "id": "0ee508c8",
      "type": "functions",
      "severity": "medium",
      "title": "Unused function: get_grid_area_manhattan",
      "description": "Function 'get_grid_area_manhattan' appears to be unused (confidence: 80.0%)",
      "location": {
        "file": "src/CoordinateSystem.h",
        "line": 202,
        "column": 0
      },
      "suggestions": [
        "Remove the function if confirmed unused",
        "Add unit tests if the function should be used",
        "Mark as static if only used internally"
      ],
      "metadata": {
        "function_name": "get_grid_area_manhattan",
        "confidence": 0.8,
        "evidence": [
          "No calls found"
        ]
      }
    },
    {
      "id": "c5cfbdbd",
      "type": "functions",
      "severity": "medium",
      "title": "Unused function: get_grid_area_circular",
      "description": "Function 'get_grid_area_circular' appears to be unused (confidence: 80.0%)",
      "location": {
        "file": "src/CoordinateSystem.h",
        "line": 222,
        "column": 0
      },
      "suggestions": [
        "Remove the function if confirmed unused",
        "Add unit tests if the function should be used",
        "Mark as static if only used internally"
      ],
      "metadata": {
        "function_name": "get_grid_area_circular",
        "confidence": 0.8,
        "evidence": [
          "No calls found"
        ]
      }
    },
    {
      "id": "fe877752",
      "type": "functions",
      "severity": "medium",
      "title": "Unused function: legacy_to_pixel",
      "description": "Function 'legacy_to_pixel' appears to be unused (confidence: 80.0%)",
      "location": {
        "file": "src/CoordinateSystem.h",
        "line": 247,
        "column": 0
      },
      "suggestions": [
        "Remove the function if confirmed unused",
        "Add unit tests if the function should be used",
        "Mark as static if only used internally"
      ],
      "metadata": {
        "function_name": "legacy_to_pixel",
        "confidence": 0.8,
        "evidence": [
          "No calls found"
        ]
      }
    },
    {
      "id": "a100d9e4",
      "type": "functions",
      "severity": "medium",
      "title": "Unused function: pixel_to_legacy",
      "description": "Function 'pixel_to_legacy' appears to be unused (confidence: 80.0%)",
      "location": {
        "file": "src/CoordinateSystem.h",
        "line": 254,
        "column": 0
      },
      "suggestions": [
        "Remove the function if confirmed unused",
        "Add unit tests if the function should be used",
        "Mark as static if only used internally"
      ],
      "metadata": {
        "function_name": "pixel_to_legacy",
        "confidence": 0.8,
        "evidence": [
          "No calls found"
        ]
      }
    },
    {
      "id": "a5645a0d",
      "type": "functions",
      "severity": "medium",
      "title": "Unused function: debug_conversion",
      "description": "Function 'debug_conversion' appears to be unused (confidence: 80.0%)",
      "location": {
        "file": "src/CoordinateSystem.h",
        "line": 264,
        "column": 0
      },
      "suggestions": [
        "Remove the function if confirmed unused",
        "Add unit tests if the function should be used",
        "Mark as static if only used internally"
      ],
      "metadata": {
        "function_name": "debug_conversion",
        "confidence": 0.8,
        "evidence": [
          "No calls found"
        ]
      }
    },
    {
      "id": "ae7cdfd9",
      "type": "functions",
      "severity": "medium",
      "title": "Unused function: ObjectPool",
      "description": "Function 'ObjectPool' appears to be unused (confidence: 80.0%)",
      "location": {
        "file": "src/MemoryManagement.h",
        "line": 82,
        "column": 0
      },
      "suggestions": [
        "Remove the function if confirmed unused",
        "Add unit tests if the function should be used",
        "Mark as static if only used internally"
      ],
      "metadata": {
        "function_name": "ObjectPool",
        "confidence": 0.8,
        "evidence": [
          "No calls found"
        ]
      }
    },
    {
      "id": "2baeed5e",
      "type": "functions",
      "severity": "medium",
      "title": "Unused function: acquire",
      "description": "Function 'acquire' appears to be unused (confidence: 80.0%)",
      "location": {
        "file": "src/MemoryManagement.h",
        "line": 92,
        "column": 0
      },
      "suggestions": [
        "Remove the function if confirmed unused",
        "Add unit tests if the function should be used",
        "Mark as static if only used internally"
      ],
      "metadata": {
        "function_name": "acquire",
        "confidence": 0.8,
        "evidence": [
          "No calls found"
        ]
      }
    },
    {
      "id": "0d77393d",
      "type": "functions",
      "severity": "medium",
      "title": "Unused function: constexpr",
      "description": "Function 'constexpr' appears to be unused (confidence: 80.0%)",
      "location": {
        "file": "src/MemoryManagement.h",
        "line": 107,
        "column": 0
      },
      "suggestions": [
        "Remove the function if confirmed unused",
        "Add unit tests if the function should be used",
        "Mark as static if only used internally"
      ],
      "metadata": {
        "function_name": "constexpr",
        "confidence": 0.8,
        "evidence": [
          "No calls found"
        ]
      }
    },
    {
      "id": "16dd2549",
      "type": "functions",
      "severity": "medium",
      "title": "Unused function: set_max_size",
      "description": "Function 'set_max_size' appears to be unused (confidence: 80.0%)",
      "location": {
        "file": "src/MemoryManagement.h",
        "line": 115,
        "column": 0
      },
      "suggestions": [
        "Remove the function if confirmed unused",
        "Add unit tests if the function should be used",
        "Mark as static if only used internally"
      ],
      "metadata": {
        "function_name": "set_max_size",
        "confidence": 0.8,
        "evidence": [
          "No calls found"
        ]
      }
    },
    {
      "id": "e5af5cfc",
      "type": "functions",
      "severity": "medium",
      "title": "Unused function: create_unique",
      "description": "Function 'create_unique' appears to be unused (confidence: 80.0%)",
      "location": {
        "file": "src/MemoryManagement.h",
        "line": 136,
        "column": 0
      },
      "suggestions": [
        "Remove the function if confirmed unused",
        "Add unit tests if the function should be used",
        "Mark as static if only used internally"
      ],
      "metadata": {
        "function_name": "create_unique",
        "confidence": 0.8,
        "evidence": [
          "No calls found"
        ]
      }
    },
    {
      "id": "ecf34d54",
      "type": "functions",
      "severity": "medium",
      "title": "Unused function: create_shared",
      "description": "Function 'create_shared' appears to be unused (confidence: 80.0%)",
      "location": {
        "file": "src/MemoryManagement.h",
        "line": 142,
        "column": 0
      },
      "suggestions": [
        "Remove the function if confirmed unused",
        "Add unit tests if the function should be used",
        "Mark as static if only used internally"
      ],
      "metadata": {
        "function_name": "create_shared",
        "confidence": 0.8,
        "evidence": [
          "No calls found"
        ]
      }
    },
    {
      "id": "d9935a75",
      "type": "functions",
      "severity": "medium",
      "title": "Unused function: bool",
      "description": "Function 'bool' appears to be unused (confidence: 80.0%)",
      "location": {
        "file": "src/MemoryManagement.h",
        "line": 218,
        "column": 0
      },
      "suggestions": [
        "Remove the function if confirmed unused",
        "Add unit tests if the function should be used",
        "Mark as static if only used internally"
      ],
      "metadata": {
        "function_name": "bool",
        "confidence": 0.8,
        "evidence": [
          "No calls found"
        ]
      }
    },
    {
      "id": "c637f8cd",
      "type": "functions",
      "severity": "medium",
      "title": "Unused function: get_ownership_guideline",
      "description": "Function 'get_ownership_guideline' appears to be unused (confidence: 80.0%)",
      "location": {
        "file": "src/MemoryManagement.h",
        "line": 295,
        "column": 0
      },
      "suggestions": [
        "Remove the function if confirmed unused",
        "Add unit tests if the function should be used",
        "Mark as static if only used internally"
      ],
      "metadata": {
        "function_name": "get_ownership_guideline",
        "confidence": 0.8,
        "evidence": [
          "No calls found"
        ]
      }
    },
    {
      "id": "6639b5b0",
      "type": "magic_numbers",
      "severity": "medium",
      "title": "Magic number: 8 (used 12 times)",
      "description": "Number 8 appears 12 times and should be replaced with a named constant",
      "location": {
        "file": "src/MapEntry.cpp",
        "line": 26,
        "column": 18
      },
      "suggestions": [
        "Create constant: const int CONSTANT_NAME = 8;",
        "Add to GameConstants.h",
        "Replace all occurrences with the named constant"
      ],
      "metadata": {
        "value": 8,
        "count": 12,
        "suggested_constant": "TILE_SIZE",
        "locations": [
          "src/MapEntry.cpp:26",
          "src/CorpsePart.cpp:181",
          "src/Controller_Joystick.cpp:462"
        ]
      }
    },
    {
      "id": "9b44997e",
      "type": "magic_numbers",
      "severity": "medium",
      "title": "Magic number: 7 (used 8 times)",
      "description": "Number 7 appears 8 times and should be replaced with a named constant",
      "location": {
        "file": "src/MapEntry.cpp",
        "line": 99,
        "column": 40
      },
      "suggestions": [
        "Create constant: const int CONSTANT_NAME = 7;",
        "Add to GameConstants.h",
        "Replace all occurrences with the named constant"
      ],
      "metadata": {
        "value": 7,
        "count": 8,
        "suggested_constant": null,
        "locations": [
          "src/MapEntry.cpp:99",
          "src/Controller.cpp:100",
          "src/MapTile.cpp:107"
        ]
      }
    },
    {
      "id": "48d1ef3f",
      "type": "magic_numbers",
      "severity": "medium",
      "title": "Magic number: 10 (used 16 times)",
      "description": "Number 10 appears 16 times and should be replaced with a named constant",
      "location": {
        "file": "src/MapTile_Pure.cpp",
        "line": 63,
        "column": 16
      },
      "suggestions": [
        "Create constant: const int CONSTANT_NAME = 10;",
        "Add to GameConstants.h",
        "Replace all occurrences with the named constant"
      ],
      "metadata": {
        "value": 10,
        "count": 16,
        "suggested_constant": "GRID_SIZE",
        "locations": [
          "src/MapTile_Pure.cpp:63",
          "src/CorpsePart.cpp:124",
          "src/GameConfig.cpp:68"
        ]
      }
    },
    {
      "id": "c6185bd6",
      "type": "magic_numbers",
      "severity": "medium",
      "title": "Magic number: 30 (used 14 times)",
      "description": "Number 30 appears 14 times and should be replaced with a named constant",
      "location": {
        "file": "src/GameSystems.cpp",
        "line": 26,
        "column": 35
      },
      "suggestions": [
        "Create constant: const int CONSTANT_NAME = 30;",
        "Add to GameConstants.h",
        "Replace all occurrences with the named constant"
      ],
      "metadata": {
        "value": 30,
        "count": 14,
        "suggested_constant": null,
        "locations": [
          "src/GameSystems.cpp:26",
          "src/GameSystems.cpp:26",
          "src/Controller_Joystick.cpp:455"
        ]
      }
    },
    {
      "id": "69b40097",
      "type": "magic_numbers",
      "severity": "medium",
      "title": "Magic number: 60 (used 8 times)",
      "description": "Number 60 appears 8 times and should be replaced with a named constant",
      "location": {
        "file": "src/GameSystems.cpp",
        "line": 32,
        "column": 36
      },
      "suggestions": [
        "Create constant: const int CONSTANT_NAME = 60;",
        "Add to GameConstants.h",
        "Replace all occurrences with the named constant"
      ],
      "metadata": {
        "value": 60,
        "count": 8,
        "suggested_constant": null,
        "locations": [
          "src/GameSystems.cpp:32",
          "src/Controller_Joystick.cpp:457",
          "src/GameplayScreen.cpp:391"
        ]
      }
    },
    {
      "id": "1d06f2b0",
      "type": "magic_numbers",
      "severity": "medium",
      "title": "Magic number: 20 (used 9 times)",
      "description": "Number 20 appears 9 times and should be replaced with a named constant",
      "location": {
        "file": "src/CorpsePart.cpp",
        "line": 29,
        "column": 26
      },
      "suggestions": [
        "Create constant: const int CONSTANT_NAME = 20;",
        "Add to GameConstants.h",
        "Replace all occurrences with the named constant"
      ],
      "metadata": {
        "value": 20,
        "count": 9,
        "suggested_constant": "DEFAULT_SPEED",
        "locations": [
          "src/CorpsePart.cpp:29",
          "src/BomberComponents.cpp:355",
          "src/BomberComponents.cpp:366"
        ]
      }
    },
    {
      "id": "decf3648",
      "type": "magic_numbers",
      "severity": "medium",
      "title": "Magic number: 4 (used 44 times)",
      "description": "Number 4 appears 44 times and should be replaced with a named constant",
      "location": {
        "file": "src/CorpsePart.cpp",
        "line": 38,
        "column": 30
      },
      "suggestions": [
        "Create constant: const int CONSTANT_NAME = 4;",
        "Add to GameConstants.h",
        "Replace all occurrences with the named constant"
      ],
      "metadata": {
        "value": 4,
        "count": 44,
        "suggested_constant": "PLAYER_COUNT",
        "locations": [
          "src/CorpsePart.cpp:38",
          "src/CorpsePart.cpp:270",
          "src/CorpsePart.cpp:272"
        ]
      }
    },
    {
      "id": "8d2112e3",
      "type": "magic_numbers",
      "severity": "low",
      "title": "Magic number: 360 (used 3 times)",
      "description": "Number 360 appears 3 times and should be replaced with a named constant",
      "location": {
        "file": "src/CorpsePart.cpp",
        "line": 93,
        "column": 30
      },
      "suggestions": [
        "Create constant: const int CONSTANT_NAME = 360;",
        "Add to GameConstants.h",
        "Replace all occurrences with the named constant"
      ],
      "metadata": {
        "value": 360,
        "count": 3,
        "suggested_constant": null,
        "locations": [
          "src/CorpsePart.cpp:93",
          "src/TileEntity.cpp:352",
          "src/MapTile_Box.cpp:139"
        ]
      }
    },
    {
      "id": "0d294f9b",
      "type": "magic_numbers",
      "severity": "medium",
      "title": "Magic number: 100 (used 13 times)",
      "description": "Number 100 appears 13 times and should be replaced with a named constant",
      "location": {
        "file": "src/CorpsePart.cpp",
        "line": 93,
        "column": 57
      },
      "suggestions": [
        "Create constant: const int CONSTANT_NAME = 100;",
        "Add to GameConstants.h",
        "Replace all occurrences with the named constant"
      ],
      "metadata": {
        "value": 100,
        "count": 13,
        "suggested_constant": "SCORE_INCREMENT",
        "locations": [
          "src/CorpsePart.cpp:93",
          "src/CorpsePart.cpp:98",
          "src/CorpsePart.cpp:104"
        ]
      }
    },
    {
      "id": "a89d2b8e",
      "type": "magic_numbers",
      "severity": "medium",
      "title": "Magic number: 5 (used 35 times)",
      "description": "Number 5 appears 35 times and should be replaced with a named constant",
      "location": {
        "file": "src/CorpsePart.cpp",
        "line": 124,
        "column": 35
      },
      "suggestions": [
        "Create constant: const int CONSTANT_NAME = 5;",
        "Add to GameConstants.h",
        "Replace all occurrences with the named constant"
      ],
      "metadata": {
        "value": 5,
        "count": 35,
        "suggested_constant": null,
        "locations": [
          "src/CorpsePart.cpp:124",
          "src/GPUAcceleratedRenderer.cpp:472",
          "src/Controller.cpp:96"
        ]
      }
    },
    {
      "id": "c5e55ebe",
      "type": "magic_numbers",
      "severity": "medium",
      "title": "Magic number: 50 (used 8 times)",
      "description": "Number 50 appears 8 times and should be replaced with a named constant",
      "location": {
        "file": "src/CorpsePart.cpp",
        "line": 140,
        "column": 31
      },
      "suggestions": [
        "Create constant: const int CONSTANT_NAME = 50;",
        "Add to GameConstants.h",
        "Replace all occurrences with the named constant"
      ],
      "metadata": {
        "value": 50,
        "count": 8,
        "suggested_constant": null,
        "locations": [
          "src/CorpsePart.cpp:140",
          "src/CorpsePart.cpp:207",
          "src/CorpsePart.cpp:245"
        ]
      }
    },
    {
      "id": "6c6f441b",
      "type": "magic_numbers",
      "severity": "low",
      "title": "Magic number: 9 (used 3 times)",
      "description": "Number 9 appears 3 times and should be replaced with a named constant",
      "location": {
        "file": "src/CorpsePart.cpp",
        "line": 181,
        "column": 68
      },
      "suggestions": [
        "Create constant: const int CONSTANT_NAME = 9;",
        "Add to GameConstants.h",
        "Replace all occurrences with the named constant"
      ],
      "metadata": {
        "value": 9,
        "count": 3,
        "suggested_constant": null,
        "locations": [
          "src/CorpsePart.cpp:181",
          "src/GameConfig.cpp:41",
          "src/BomberComponents.cpp:367"
        ]
      }
    },
    {
      "id": "0834218d",
      "type": "magic_numbers",
      "severity": "medium",
      "title": "Magic number: 255 (used 10 times)",
      "description": "Number 255 appears 10 times and should be replaced with a named constant",
      "location": {
        "file": "src/CorpsePart.cpp",
        "line": 255,
        "column": 21
      },
      "suggestions": [
        "Create constant: const int CONSTANT_NAME = 255;",
        "Add to GameConstants.h",
        "Replace all occurrences with the named constant"
      ],
      "metadata": {
        "value": 255,
        "count": 10,
        "suggested_constant": "COLOR_MAX",
        "locations": [
          "src/CorpsePart.cpp:255",
          "src/RenderingFacade.cpp:134",
          "src/GameObject.cpp:595"
        ]
      }
    },
    {
      "id": "aa3d75cf",
      "type": "magic_numbers",
      "severity": "medium",
      "title": "Magic number: 3 (used 45 times)",
      "description": "Number 3 appears 45 times and should be replaced with a named constant",
      "location": {
        "file": "src/CorpsePart.cpp",
        "line": 274,
        "column": 13
      },
      "suggestions": [
        "Create constant: const int CONSTANT_NAME = 3;",
        "Add to GameConstants.h",
        "Replace all occurrences with the named constant"
      ],
      "metadata": {
        "value": 3,
        "count": 45,
        "suggested_constant": "RGB_COMPONENTS",
        "locations": [
          "src/CorpsePart.cpp:274",
          "src/CorpsePart.cpp:285",
          "src/GPUAcceleratedRenderer.cpp:50"
        ]
      }
    },
    {
      "id": "dd0e2d4e",
      "type": "magic_numbers",
      "severity": "low",
      "title": "Magic number: 600 (used 3 times)",
      "description": "Number 600 appears 3 times and should be replaced with a named constant",
      "location": {
        "file": "src/GameLogic.cpp",
        "line": 31,
        "column": 24
      },
      "suggestions": [
        "Create constant: const int CONSTANT_NAME = 600;",
        "Add to GameConstants.h",
        "Replace all occurrences with the named constant"
      ],
      "metadata": {
        "value": 600,
        "count": 3,
        "suggested_constant": null,
        "locations": [
          "src/GameLogic.cpp:31",
          "src/Controller_Joystick.cpp:475",
          "src/Controller_Joystick.cpp:541"
        ]
      }
    },
    {
      "id": "a72ba159",
      "type": "magic_numbers",
      "severity": "medium",
      "title": "Magic number: 6 (used 17 times)",
      "description": "Number 6 appears 17 times and should be replaced with a named constant",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 117,
        "column": 26
      },
      "suggestions": [
        "Create constant: const int CONSTANT_NAME = 6;",
        "Add to GameConstants.h",
        "Replace all occurrences with the named constant"
      ],
      "metadata": {
        "value": 6,
        "count": 17,
        "suggested_constant": null,
        "locations": [
          "src/GPUAcceleratedRenderer.cpp:117",
          "src/GPUAcceleratedRenderer.cpp:433",
          "src/GPUAcceleratedRenderer.cpp:475"
        ]
      }
    },
    {
      "id": "50d00e15",
      "type": "magic_numbers",
      "severity": "low",
      "title": "Magic number: 1000 (used 4 times)",
      "description": "Number 1000 appears 4 times and should be replaced with a named constant",
      "location": {
        "file": "src/GPUAcceleratedRenderer.cpp",
        "line": 531,
        "column": 36
      },
      "suggestions": [
        "Create constant: const int CONSTANT_NAME = 1000;",
        "Add to GameConstants.h",
        "Replace all occurrences with the named constant"
      ],
      "metadata": {
        "value": 1000,
        "count": 4,
        "suggested_constant": null,
        "locations": [
          "src/GPUAcceleratedRenderer.cpp:531",
          "src/Bomb.cpp:16",
          "src/RenderingFacade.cpp:382"
        ]
      }
    },
    {
      "id": "bf78c387",
      "type": "magic_numbers",
      "severity": "medium",
      "title": "Magic number: 12 (used 11 times)",
      "description": "Number 12 appears 11 times and should be replaced with a named constant",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 40,
        "column": 30
      },
      "suggestions": [
        "Create constant: const int CONSTANT_NAME = 12;",
        "Add to GameConstants.h",
        "Replace all occurrences with the named constant"
      ],
      "metadata": {
        "value": 12,
        "count": 11,
        "suggested_constant": null,
        "locations": [
          "src/GameConfig.cpp:40",
          "src/MapTile.cpp:74",
          "src/MapTile.cpp:77"
        ]
      }
    },
    {
      "id": "b0e882b4",
      "type": "magic_numbers",
      "severity": "low",
      "title": "Magic number: 3000 (used 4 times)",
      "description": "Number 3000 appears 4 times and should be replaced with a named constant",
      "location": {
        "file": "src/GameConfig.cpp",
        "line": 70,
        "column": 34
      },
      "suggestions": [
        "Create constant: const int CONSTANT_NAME = 3000;",
        "Add to GameConstants.h",
        "Replace all occurrences with the named constant"
      ],
      "metadata": {
        "value": 3000,
        "count": 4,
        "suggested_constant": null,
        "locations": [
          "src/GameConfig.cpp:70",
          "src/Bomb.cpp:23",
          "src/Explosion.cpp:31"
        ]
      }
    },
    {
      "id": "015289b2",
      "type": "magic_numbers",
      "severity": "low",
      "title": "Magic number: 2000 (used 4 times)",
      "description": "Number 2000 appears 4 times and should be replaced with a named constant",
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 429,
        "column": 41
      },
      "suggestions": [
        "Create constant: const int CONSTANT_NAME = 2000;",
        "Add to GameConstants.h",
        "Replace all occurrences with the named constant"
      ],
      "metadata": {
        "value": 2000,
        "count": 4,
        "suggested_constant": null,
        "locations": [
          "src/Controller_Joystick.cpp:429",
          "src/Controller_Joystick.cpp:555",
          "src/Explosion.cpp:31"
        ]
      }
    },
    {
      "id": "c499de29",
      "type": "magic_numbers",
      "severity": "medium",
      "title": "Magic number: 80 (used 6 times)",
      "description": "Number 80 appears 6 times and should be replaced with a named constant",
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 459,
        "column": 27
      },
      "suggestions": [
        "Create constant: const int CONSTANT_NAME = 80;",
        "Add to GameConstants.h",
        "Replace all occurrences with the named constant"
      ],
      "metadata": {
        "value": 80,
        "count": 6,
        "suggested_constant": null,
        "locations": [
          "src/Controller_Joystick.cpp:459",
          "src/BomberComponents.cpp:226",
          "src/Controller_AI_Smart.cpp:448"
        ]
      }
    },
    {
      "id": "0d64a775",
      "type": "magic_numbers",
      "severity": "medium",
      "title": "Magic number: 150 (used 5 times)",
      "description": "Number 150 appears 5 times and should be replaced with a named constant",
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 463,
        "column": 27
      },
      "suggestions": [
        "Create constant: const int CONSTANT_NAME = 150;",
        "Add to GameConstants.h",
        "Replace all occurrences with the named constant"
      ],
      "metadata": {
        "value": 150,
        "count": 5,
        "suggested_constant": null,
        "locations": [
          "src/Controller_Joystick.cpp:463",
          "src/Controller_Joystick.cpp:473",
          "src/ParticleSystem.cpp:162"
        ]
      }
    },
    {
      "id": "757220dc",
      "type": "magic_numbers",
      "severity": "medium",
      "title": "Magic number: 25 (used 10 times)",
      "description": "Number 25 appears 10 times and should be replaced with a named constant",
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 466,
        "column": 57
      },
      "suggestions": [
        "Create constant: const int CONSTANT_NAME = 25;",
        "Add to GameConstants.h",
        "Replace all occurrences with the named constant"
      ],
      "metadata": {
        "value": 25,
        "count": 10,
        "suggested_constant": null,
        "locations": [
          "src/Controller_Joystick.cpp:466",
          "src/Controller_Joystick.cpp:470",
          "src/MapTile.cpp:89"
        ]
      }
    },
    {
      "id": "e63bff59",
      "type": "magic_numbers",
      "severity": "medium",
      "title": "Magic number: 200 (used 10 times)",
      "description": "Number 200 appears 10 times and should be replaced with a named constant",
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 477,
        "column": 40
      },
      "suggestions": [
        "Create constant: const int CONSTANT_NAME = 200;",
        "Add to GameConstants.h",
        "Replace all occurrences with the named constant"
      ],
      "metadata": {
        "value": 200,
        "count": 10,
        "suggested_constant": null,
        "locations": [
          "src/Controller_Joystick.cpp:477",
          "src/Controller_Joystick.cpp:481",
          "src/Controller_Joystick.cpp:556"
        ]
      }
    },
    {
      "id": "c7575722",
      "type": "magic_numbers",
      "severity": "medium",
      "title": "Magic number: 300 (used 6 times)",
      "description": "Number 300 appears 6 times and should be replaced with a named constant",
      "location": {
        "file": "src/Controller_Joystick.cpp",
        "line": 551,
        "column": 23
      },
      "suggestions": [
        "Create constant: const int CONSTANT_NAME = 300;",
        "Add to GameConstants.h",
        "Replace all occurrences with the named constant"
      ],
      "metadata": {
        "value": 300,
        "count": 6,
        "suggested_constant": null,
        "locations": [
          "src/Controller_Joystick.cpp:551",
          "src/RenderingFacade.cpp:267",
          "src/SettingsScreen.cpp:105"
        ]
      }
    },
    {
      "id": "464f53e3",
      "type": "magic_numbers",
      "severity": "medium",
      "title": "Magic number: 120 (used 6 times)",
      "description": "Number 120 appears 6 times and should be replaced with a named constant",
      "location": {
        "file": "src/Bomb.cpp",
        "line": 94,
        "column": 16
      },
      "suggestions": [
        "Create constant: const int CONSTANT_NAME = 120;",
        "Add to GameConstants.h",
        "Replace all occurrences with the named constant"
      ],
      "metadata": {
        "value": 120,
        "count": 6,
        "suggested_constant": null,
        "locations": [
          "src/Bomb.cpp:94",
          "src/SettingsScreen.cpp:58",
          "src/Controller_AI_Smart.cpp:416"
        ]
      }
    },
    {
      "id": "2e9ea710",
      "type": "magic_numbers",
      "severity": "low",
      "title": "Magic number: 64 (used 4 times)",
      "description": "Number 64 appears 4 times and should be replaced with a named constant",
      "location": {
        "file": "src/RenderingFacade.cpp",
        "line": 428,
        "column": 17
      },
      "suggestions": [
        "Create constant: const int CONSTANT_NAME = 64;",
        "Add to GameConstants.h",
        "Replace all occurrences with the named constant"
      ],
      "metadata": {
        "value": 64,
        "count": 4,
        "suggested_constant": null,
        "locations": [
          "src/RenderingFacade.cpp:428",
          "src/RenderingFacade.cpp:429",
          "src/RenderingFacade.cpp:430"
        ]
      }
    },
    {
      "id": "6b1fe624",
      "type": "magic_numbers",
      "severity": "low",
      "title": "Magic number: 15 (used 4 times)",
      "description": "Number 15 appears 4 times and should be replaced with a named constant",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 70,
        "column": 38
      },
      "suggestions": [
        "Create constant: const int CONSTANT_NAME = 15;",
        "Add to GameConstants.h",
        "Replace all occurrences with the named constant"
      ],
      "metadata": {
        "value": 15,
        "count": 4,
        "suggested_constant": null,
        "locations": [
          "src/Controller_AI_Modern.cpp:70",
          "src/Controller_AI_Modern.cpp:803",
          "src/ParticleSystem.cpp:189"
        ]
      }
    },
    {
      "id": "f51bbb79",
      "type": "magic_numbers",
      "severity": "medium",
      "title": "Magic number: 40 (used 7 times)",
      "description": "Number 40 appears 7 times and should be replaced with a named constant",
      "location": {
        "file": "src/Controller_AI_Modern.cpp",
        "line": 378,
        "column": 27
      },
      "suggestions": [
        "Create constant: const int CONSTANT_NAME = 40;",
        "Add to GameConstants.h",
        "Replace all occurrences with the named constant"
      ],
      "metadata": {
        "value": 40,
        "count": 7,
        "suggested_constant": null,
        "locations": [
          "src/Controller_AI_Modern.cpp:378",
          "src/Controller_AI_Smart.cpp:772",
          "src/ParticleSystem.cpp:34"
        ]
      }
    }
  ],
  "source_files": [
    "src/Timer.cpp",
    "src/MapEntry.cpp",
    "src/Controller_Keyboard.cpp",
    "src/MapTile_Pure.cpp",
    "src/GameSystems.cpp",
    "src/MapTile_Ground.cpp",
    "src/MapTile_Wall.cpp",
    "src/CorpsePart.cpp",
    "src/ErrorHandling.cpp",
    "src/GameLogic.cpp",
    "src/GPUAcceleratedRenderer.cpp",
    "src/ClanBomber.cpp",
    "src/ParticleEffectsManager.cpp",
    "src/TextRenderer.cpp",
    "src/Controller.cpp",
    "src/Game.cpp",
    "src/MainMenuScreen.cpp",
    "src/GameConfig.cpp",
    "src/Controller_Joystick.cpp",
    "src/LifecycleManager.cpp",
    "src/Bomb.cpp",
    "src/RenderingFacade.cpp",
    "src/Bomber.cpp",
    "src/GameplayScreen.cpp",
    "src/ThrownBomb.cpp",
    "src/MapTile.cpp",
    "src/GameContext.cpp",
    "src/Map.cpp",
    "src/BomberComponents.cpp",
    "src/SpatialPartitioning.cpp",
    "src/GameObject.cpp",
    "src/Resources.cpp",
    "src/Controller_AI_Modern.cpp",
    "src/SettingsScreen.cpp",
    "src/main.cpp",
    "src/TileManager.cpp",
    "src/AudioMixer.cpp",
    "src/Controller_AI_Smart.cpp",
    "src/ParticleSystem.cpp",
    "src/Explosion.cpp",
    "src/TileEntity.cpp",
    "src/Extra.cpp",
    "src/BomberCorpse.cpp",
    "src/MapTile_Box.cpp",
    "src/UtilsCL_Vector.h",
    "src/Controller_AI.h",
    "src/Controller_Keyboard.h",
    "src/Timer.h",
    "src/Server.h",
    "src/Client.h",
    "src/Mutex.h",
    "src/Utils.h",
    "src/GameConfig.h",
    "src/GameState.h",
    "src/Screen.h",
    "src/SettingsScreen.h",
    "src/MapEntry.h",
    "src/cglm_compat.h",
    "src/Controller_AI_Smart.h",
    "src/Controller.h",
    "src/Resources.h",
    "src/Game.h",
    "src/ParticleEffectsManager.h",
    "src/GameSystems.h",
    "src/Bomb.h",
    "src/ThrownBomb.h",
    "src/BomberCorpse.h",
    "src/Map.h",
    "src/MapTile.h",
    "src/MapTile_Ground.h",
    "src/MapTile_Wall.h",
    "src/MapTile_Box.h",
    "src/TileEntity.h",
    "src/CorpsePart.h",
    "src/Extra.h",
    "src/Controller_AI_Modern.h",
    "src/GameLogic.h",
    "src/ErrorHandling.h",
    "src/SpatialPartitioning.h",
    "src/GameplayScreen.h",
    "src/GPUAcceleratedRenderer.h",
    "src/ClanBomber.h",
    "src/TextRenderer.h",
    "src/RenderingFacade.h",
    "src/MainMenuScreen.h",
    "src/Explosion.h",
    "src/Controller_Joystick.h",
    "src/LifecycleManager.h",
    "src/GameContext.h",
    "src/Bomber.h",
    "src/BomberComponents.h",
    "src/MapTile_Pure.h",
    "src/CoordinateSystem.h",
    "src/TileManager.h",
    "src/AudioMixer.h",
    "src/GameConstants.h",
    "src/GameObject.h",
    "src/ParticleSystem.h",
    "src/MemoryManagement.h"
  ]
}